/* Generated by Cython 0.29.32 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "language": "c++",
        "name": "chromo.fields",
        "sources": [
            "chromo/fields.pyx"
        ]
    },
    "module_name": "chromo.fields"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_32"
#define CYTHON_HEX_VERSION 0x001D20F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC (PYPY_VERSION_HEX >= 0x07030900)
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__chromo__fields
#define __PYX_HAVE_API__chromo__fields
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"

    /* NumPy API declarations from "numpy/__init__.pxd" */
    
#include <math.h>
#include "pythread.h"
#include <stdlib.h>
#include "pystate.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "chromo/fields.pyx",
  "chromo/fields.pxd",
  "stringsource",
  "__init__.pxd",
  "type.pxd",
  "chromo/polymers.pxd",
};
/* MemviewSliceStruct.proto */
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;
#define __Pyx_MemoryView_Len(m)  (m.shape[0])

/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __PYX_CYTHON_ATOMICS_ENABLED() CYTHON_ATOMICS
#define __pyx_atomic_int_type int
#if CYTHON_ATOMICS && (__GNUC__ >= 5 || (__GNUC__ == 4 &&\
                    (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL__ >= 2))))
    #define __pyx_atomic_incr_aligned(value) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_aligned(value) __sync_fetch_and_sub(value, 1)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER) && CYTHON_COMPILING_IN_NOGIL
    #include <intrin.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type long
    #pragma intrinsic (_InterlockedExchangeAdd)
    #define __pyx_atomic_incr_aligned(value) _InterlockedExchangeAdd(value, 1)
    #define __pyx_atomic_decr_aligned(value) _InterlockedExchangeAdd(value, -1)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
typedef volatile __pyx_atomic_int_type __pyx_atomic_int;
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_aligned(__pyx_get_slice_count_pointer(memview))
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview))
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":690
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":691
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":692
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":693
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":697
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":698
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":699
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":700
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":704
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":705
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":714
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":715
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":716
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":718
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":719
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":720
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":722
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":723
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":725
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":726
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":727
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_6chromo_8polymers_TransformedObject;
struct __pyx_obj_6chromo_8polymers_PolymerBase;
struct __pyx_obj_6chromo_8polymers_Rouse;
struct __pyx_obj_6chromo_8polymers_SSWLC;
struct __pyx_obj_6chromo_8polymers_Chromatin;
struct __pyx_obj_6chromo_8polymers_SSTWLC;
struct __pyx_obj_6chromo_8polymers_LoopedSSTWLC;
struct __pyx_obj_6chromo_8polymers_DetailedChromatin;
struct __pyx_obj_6chromo_8polymers_DetailedChromatinWithSterics;
struct __pyx_obj_6chromo_6fields_FieldBase;
struct __pyx_obj_6chromo_6fields_NullField;
struct __pyx_obj_6chromo_6fields_UniformDensityField;
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":729
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":730
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":731
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":733
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "chromo/polymers.pxd":9
 * cimport numpy as np
 * 
 * cdef class TransformedObject:             # <<<<<<<<<<<<<<
 *     cdef public double[:, ::1] transformation_mat
 * 
 */
struct __pyx_obj_6chromo_8polymers_TransformedObject {
  PyObject_HEAD
  __Pyx_memviewslice transformation_mat;
};


/* "chromo/polymers.pxd":12
 *     cdef public double[:, ::1] transformation_mat
 * 
 * cdef class PolymerBase(TransformedObject):             # <<<<<<<<<<<<<<
 *     cdef public str name, log_path
 *     cdef public beads
 */
struct __pyx_obj_6chromo_8polymers_PolymerBase {
  struct __pyx_obj_6chromo_8polymers_TransformedObject __pyx_base;
  struct __pyx_vtabstruct_6chromo_8polymers_PolymerBase *__pyx_vtab;
  PyObject *name;
  PyObject *log_path;
  PyObject *beads;
  long max_binders;
  PyObject *configuration_tracker;
  __Pyx_memviewslice bead_length;
  double lp;
  long num_binders;
  long num_beads;
  long n_binders_p1;
  __Pyx_memviewslice all_inds;
  __Pyx_memviewslice r;
  __Pyx_memviewslice t3;
  __Pyx_memviewslice t2;
  __Pyx_memviewslice r_trial;
  __Pyx_memviewslice t3_trial;
  __Pyx_memviewslice t2_trial;
  __Pyx_memviewslice states;
  __Pyx_memviewslice states_trial;
  __Pyx_memviewslice chemical_mods;
  PyArrayObject *chemical_mod_names;
  __Pyx_memviewslice direction;
  __Pyx_memviewslice point;
  double last_amp_move;
  long last_amp_bead;
  double mu_adjust_factor;
  PyArrayObject *binder_names;
  PyArrayObject *required_attrs;
  PyArrayObject *_arrays;
  PyArrayObject *_3d_arrays;
  PyArrayObject *_single_values;
  __Pyx_memviewslice dr;
  __Pyx_memviewslice dr_test;
  __Pyx_memviewslice dr_perp;
  __Pyx_memviewslice dr_perp_test;
  __Pyx_memviewslice bend;
  __Pyx_memviewslice bend_test;
  __Pyx_memviewslice densities_temp;
};


/* "chromo/polymers.pxd":52
 *     cpdef bint is_field_active(self)
 * 
 * cdef class Rouse(PolymerBase):             # <<<<<<<<<<<<<<
 *     cdef void construct_beads(self)
 * 
 */
struct __pyx_obj_6chromo_8polymers_Rouse {
  struct __pyx_obj_6chromo_8polymers_PolymerBase __pyx_base;
};


/* "chromo/polymers.pxd":55
 *     cdef void construct_beads(self)
 * 
 * cdef class SSWLC(PolymerBase):             # <<<<<<<<<<<<<<
 *     cdef public double[:] delta, eps_bend, eps_par, eps_perp, gamma, eta
 *     cdef public double bead_rad
 */
struct __pyx_obj_6chromo_8polymers_SSWLC {
  struct __pyx_obj_6chromo_8polymers_PolymerBase __pyx_base;
  __Pyx_memviewslice delta;
  __Pyx_memviewslice eps_bend;
  __Pyx_memviewslice eps_par;
  __Pyx_memviewslice eps_perp;
  __Pyx_memviewslice gamma;
  __Pyx_memviewslice eta;
  double bead_rad;
};


/* "chromo/polymers.pxd":100
 *     cpdef void _find_parameters(self, double[:] bead_length)
 * 
 * cdef class Chromatin(SSWLC):             # <<<<<<<<<<<<<<
 *     cdef double compute_dE(
 *         self,
 */
struct __pyx_obj_6chromo_8polymers_Chromatin {
  struct __pyx_obj_6chromo_8polymers_SSWLC __pyx_base;
};


/* "chromo/polymers.pxd":108
 *     )
 * 
 * cdef class SSTWLC(SSWLC):             # <<<<<<<<<<<<<<
 *     cdef public double lt
 *     cdef public double[:] eps_twist
 */
struct __pyx_obj_6chromo_8polymers_SSTWLC {
  struct __pyx_obj_6chromo_8polymers_SSWLC __pyx_base;
  double lt;
  __Pyx_memviewslice eps_twist;
};


/* "chromo/polymers.pxd":149
 *     cpdef double compute_E_no_twist(self)
 * 
 * cdef class LoopedSSTWLC(SSTWLC):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_6chromo_8polymers_LoopedSSTWLC {
  struct __pyx_obj_6chromo_8polymers_SSTWLC __pyx_base;
};


/* "chromo/polymers.pxd":152
 *     pass
 * 
 * cdef class DetailedChromatin(SSTWLC):             # <<<<<<<<<<<<<<
 *     cdef public double omega_enter, omega_exit, bp_wrap, phi
 *     cdef void construct_beads(self)
 */
struct __pyx_obj_6chromo_8polymers_DetailedChromatin {
  struct __pyx_obj_6chromo_8polymers_SSTWLC __pyx_base;
  double omega_enter;
  double omega_exit;
  double bp_wrap;
  double phi;
};


/* "chromo/polymers.pxd":161
 *     )
 * 
 * cdef class DetailedChromatinWithSterics(DetailedChromatin):             # <<<<<<<<<<<<<<
 *     cdef public binders
 *     cdef public double excluded_distance, V0
 */
struct __pyx_obj_6chromo_8polymers_DetailedChromatinWithSterics {
  struct __pyx_obj_6chromo_8polymers_DetailedChromatin __pyx_base;
  PyObject *binders;
  double excluded_distance;
  double V0;
  __Pyx_memviewslice distances;
  __Pyx_memviewslice distances_trial;
};


/* "chromo/fields.pxd":9
 * cimport numpy as np
 * 
 * cdef class FieldBase:             # <<<<<<<<<<<<<<
 *     cdef public list polymers
 *     cdef public long n_polymers
 */
struct __pyx_obj_6chromo_6fields_FieldBase {
  PyObject_HEAD
  struct __pyx_vtabstruct_6chromo_6fields_FieldBase *__pyx_vtab;
  PyObject *polymers;
  long n_polymers;
  PyObject *binders;
  PyObject *confine_type;
  double confine_length;
};


/* "chromo/fields.pxd":29
 *     )
 * 
 * cdef class NullField(FieldBase):             # <<<<<<<<<<<<<<
 *     cdef double compute_dE(
 *         self, poly.PolymerBase poly, long[:] inds, long n_inds,
 */
struct __pyx_obj_6chromo_6fields_NullField {
  struct __pyx_obj_6chromo_6fields_FieldBase __pyx_base;
};


/* "chromo/fields.pxd":36
 *     cdef void update_affected_densities(self)
 * 
 * cdef class UniformDensityField(FieldBase):             # <<<<<<<<<<<<<<
 *     cdef public _field_descriptors
 *     cdef public double x_width, y_width, z_width
 */
struct __pyx_obj_6chromo_6fields_UniformDensityField {
  struct __pyx_obj_6chromo_6fields_FieldBase __pyx_base;
  PyObject *_field_descriptors;
  double x_width;
  double y_width;
  double z_width;
  __Pyx_memviewslice width_xyz;
  long nx;
  long ny;
  long nz;
  long n_sub_bins_x;
  long n_sub_bins_y;
  long n_sub_bins_z;
  double dx;
  double dy;
  double dz;
  __Pyx_memviewslice dxyz;
  long n_bins;
  long n_points;
  double vol_bin;
  __Pyx_memviewslice bin_index;
  __Pyx_memviewslice nbr_inds_with_trial;
  __Pyx_memviewslice nbr_inds;
  __Pyx_memviewslice index_xyz;
  __Pyx_memviewslice wt_vec;
  __Pyx_memviewslice xyz;
  __Pyx_memviewslice weight_xyz;
  __Pyx_memviewslice wt_vec_with_trial;
  __Pyx_memviewslice xyz_with_trial;
  __Pyx_memviewslice weight_xyz_with_trial;
  __Pyx_memviewslice index_xyz_with_trial;
  long num_binders;
  __Pyx_memviewslice doubly_bound;
  __Pyx_memviewslice doubly_bound_trial;
  __Pyx_memviewslice density;
  __Pyx_memviewslice density_trial;
  PyObject *access_vols;
  double chi;
  double sub_bin_width_x;
  double sub_bin_width_y;
  double sub_bin_width_z;
  PyObject *sub_bins_to_weights_x;
  PyObject *sub_bins_to_weights_y;
  PyObject *sub_bins_to_weights_z;
  PyObject *sub_bins_to_bins_x;
  PyObject *sub_bins_to_bins_y;
  PyObject *sub_bins_to_bins_z;
  PyObject *dict_;
  float vf_limit;
  int assume_fully_accessible;
  int fast_field;
  PyObject *binder_dict;
  __Pyx_memviewslice half_width_xyz;
  __Pyx_memviewslice half_step_xyz;
  __Pyx_memviewslice n_xyz_m1;
  __Pyx_memviewslice affected_bins_last_move;
  __Pyx_memviewslice inds_xyz_to_super;
};


/* "View.MemoryView":106
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_array_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_array *__pyx_vtab;
  char *data;
  Py_ssize_t len;
  char *format;
  int ndim;
  Py_ssize_t *_shape;
  Py_ssize_t *_strides;
  Py_ssize_t itemsize;
  PyObject *mode;
  PyObject *_format;
  void (*callback_free_data)(void *);
  int free_data;
  int dtype_is_object;
};


/* "View.MemoryView":280
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */
struct __pyx_MemviewEnum_obj {
  PyObject_HEAD
  PyObject *name;
};


/* "View.MemoryView":331
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */
struct __pyx_memoryview_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;
  PyObject *obj;
  PyObject *_size;
  PyObject *_array_interface;
  PyThread_type_lock lock;
  __pyx_atomic_int acquisition_count[2];
  __pyx_atomic_int *acquisition_count_aligned_p;
  Py_buffer view;
  int flags;
  int dtype_is_object;
  __Pyx_TypeInfo *typeinfo;
};


/* "View.MemoryView":967
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */
struct __pyx_memoryviewslice_obj {
  struct __pyx_memoryview_obj __pyx_base;
  __Pyx_memviewslice from_slice;
  PyObject *from_object;
  PyObject *(*to_object_func)(char *);
  int (*to_dtype_func)(char *, PyObject *);
};



/* "chromo/polymers.pxd":12
 *     cdef public double[:, ::1] transformation_mat
 * 
 * cdef class PolymerBase(TransformedObject):             # <<<<<<<<<<<<<<
 *     cdef public str name, log_path
 *     cdef public beads
 */

struct __pyx_vtabstruct_6chromo_8polymers_PolymerBase {
  double (*compute_dE)(struct __pyx_obj_6chromo_8polymers_PolymerBase *, PyObject *, __Pyx_memviewslice, long);
  void (*update_log_path)(struct __pyx_obj_6chromo_8polymers_PolymerBase *, PyObject *, int __pyx_skip_dispatch);
  void (*construct_beads)(struct __pyx_obj_6chromo_8polymers_PolymerBase *);
  void (*check_binders)(struct __pyx_obj_6chromo_8polymers_PolymerBase *, __Pyx_memviewslice, PyArrayObject *);
  void (*check_chemical_mods)(struct __pyx_obj_6chromo_8polymers_PolymerBase *, __Pyx_memviewslice, PyArrayObject *);
  PyArrayObject *(*get_prop)(struct __pyx_obj_6chromo_8polymers_PolymerBase *, __Pyx_memviewslice, PyObject *, int __pyx_skip_dispatch);
  PyArrayObject *(*get_all)(struct __pyx_obj_6chromo_8polymers_PolymerBase *, PyObject *, int __pyx_skip_dispatch);
  long (*get_num_binders)(struct __pyx_obj_6chromo_8polymers_PolymerBase *, int __pyx_skip_dispatch);
  long (*get_num_beads)(struct __pyx_obj_6chromo_8polymers_PolymerBase *, int __pyx_skip_dispatch);
  int (*is_field_active)(struct __pyx_obj_6chromo_8polymers_PolymerBase *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6chromo_8polymers_PolymerBase *__pyx_vtabptr_6chromo_8polymers_PolymerBase;


/* "chromo/polymers.pxd":52
 *     cpdef bint is_field_active(self)
 * 
 * cdef class Rouse(PolymerBase):             # <<<<<<<<<<<<<<
 *     cdef void construct_beads(self)
 * 
 */

struct __pyx_vtabstruct_6chromo_8polymers_Rouse {
  struct __pyx_vtabstruct_6chromo_8polymers_PolymerBase __pyx_base;
};
static struct __pyx_vtabstruct_6chromo_8polymers_Rouse *__pyx_vtabptr_6chromo_8polymers_Rouse;


/* "chromo/polymers.pxd":55
 *     cdef void construct_beads(self)
 * 
 * cdef class SSWLC(PolymerBase):             # <<<<<<<<<<<<<<
 *     cdef public double[:] delta, eps_bend, eps_par, eps_perp, gamma, eta
 *     cdef public double bead_rad
 */

struct __pyx_vtabstruct_6chromo_8polymers_SSWLC {
  struct __pyx_vtabstruct_6chromo_8polymers_PolymerBase __pyx_base;
  double (*compute_E)(struct __pyx_obj_6chromo_8polymers_SSWLC *, int __pyx_skip_dispatch);
  double (*continuous_dE_poly)(struct __pyx_obj_6chromo_8polymers_SSWLC *, long, long);
  double (*E_pair)(struct __pyx_obj_6chromo_8polymers_SSWLC *, __Pyx_memviewslice, double, __Pyx_memviewslice, long);
  double (*bead_pair_dE_poly_forward)(struct __pyx_obj_6chromo_8polymers_SSWLC *, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, long);
  double (*bead_pair_dE_poly_reverse)(struct __pyx_obj_6chromo_8polymers_SSWLC *, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, long);
  double (*binding_dE)(struct __pyx_obj_6chromo_8polymers_SSWLC *, long, long, long);
  double (*bead_binding_dE)(struct __pyx_obj_6chromo_8polymers_SSWLC *, long, __Pyx_memviewslice);
  void (*_find_parameters)(struct __pyx_obj_6chromo_8polymers_SSWLC *, __Pyx_memviewslice, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6chromo_8polymers_SSWLC *__pyx_vtabptr_6chromo_8polymers_SSWLC;


/* "chromo/polymers.pxd":100
 *     cpdef void _find_parameters(self, double[:] bead_length)
 * 
 * cdef class Chromatin(SSWLC):             # <<<<<<<<<<<<<<
 *     cdef double compute_dE(
 *         self,
 */

struct __pyx_vtabstruct_6chromo_8polymers_Chromatin {
  struct __pyx_vtabstruct_6chromo_8polymers_SSWLC __pyx_base;
};
static struct __pyx_vtabstruct_6chromo_8polymers_Chromatin *__pyx_vtabptr_6chromo_8polymers_Chromatin;


/* "chromo/polymers.pxd":108
 *     )
 * 
 * cdef class SSTWLC(SSWLC):             # <<<<<<<<<<<<<<
 *     cdef public double lt
 *     cdef public double[:] eps_twist
 */

struct __pyx_vtabstruct_6chromo_8polymers_SSTWLC {
  struct __pyx_vtabstruct_6chromo_8polymers_SSWLC __pyx_base;
  double (*E_pair_with_twist)(struct __pyx_obj_6chromo_8polymers_SSTWLC *, __Pyx_memviewslice, double, __Pyx_memviewslice, double, long);
  double (*bead_pair_dE_poly_forward_with_twist)(struct __pyx_obj_6chromo_8polymers_SSTWLC *, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, long);
  double (*bead_pair_dE_poly_reverse_with_twist)(struct __pyx_obj_6chromo_8polymers_SSTWLC *, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, long);
  double (*compute_E_no_twist)(struct __pyx_obj_6chromo_8polymers_SSTWLC *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6chromo_8polymers_SSTWLC *__pyx_vtabptr_6chromo_8polymers_SSTWLC;


/* "chromo/polymers.pxd":149
 *     cpdef double compute_E_no_twist(self)
 * 
 * cdef class LoopedSSTWLC(SSTWLC):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_6chromo_8polymers_LoopedSSTWLC {
  struct __pyx_vtabstruct_6chromo_8polymers_SSTWLC __pyx_base;
};
static struct __pyx_vtabstruct_6chromo_8polymers_LoopedSSTWLC *__pyx_vtabptr_6chromo_8polymers_LoopedSSTWLC;


/* "chromo/polymers.pxd":152
 *     pass
 * 
 * cdef class DetailedChromatin(SSTWLC):             # <<<<<<<<<<<<<<
 *     cdef public double omega_enter, omega_exit, bp_wrap, phi
 *     cdef void construct_beads(self)
 */

struct __pyx_vtabstruct_6chromo_8polymers_DetailedChromatin {
  struct __pyx_vtabstruct_6chromo_8polymers_SSTWLC __pyx_base;
};
static struct __pyx_vtabstruct_6chromo_8polymers_DetailedChromatin *__pyx_vtabptr_6chromo_8polymers_DetailedChromatin;


/* "chromo/polymers.pxd":161
 *     )
 * 
 * cdef class DetailedChromatinWithSterics(DetailedChromatin):             # <<<<<<<<<<<<<<
 *     cdef public binders
 *     cdef public double excluded_distance, V0
 */

struct __pyx_vtabstruct_6chromo_8polymers_DetailedChromatinWithSterics {
  struct __pyx_vtabstruct_6chromo_8polymers_DetailedChromatin __pyx_base;
  double (*evaluate_binder_interactions)(struct __pyx_obj_6chromo_8polymers_DetailedChromatinWithSterics *, int __pyx_skip_dispatch);
  double (*get_E_bind)(struct __pyx_obj_6chromo_8polymers_DetailedChromatinWithSterics *, int __pyx_skip_dispatch);
  void (*get_distances)(struct __pyx_obj_6chromo_8polymers_DetailedChromatinWithSterics *, int __pyx_skip_dispatch);
  long (*check_steric_clashes)(struct __pyx_obj_6chromo_8polymers_DetailedChromatinWithSterics *, __Pyx_memviewslice, int __pyx_skip_dispatch);
  double (*compute_dE)(struct __pyx_obj_6chromo_8polymers_DetailedChromatinWithSterics *, PyObject *, __Pyx_memviewslice, long, int __pyx_skip_dispatch);
  PyObject *(*compute_E_detailed)(struct __pyx_obj_6chromo_8polymers_DetailedChromatinWithSterics *, int __pyx_skip_dispatch);
  PyObject *(*compute_E_detailed_reverse)(struct __pyx_obj_6chromo_8polymers_DetailedChromatinWithSterics *, int __pyx_skip_dispatch);
  void (*get_delta_distances)(struct __pyx_obj_6chromo_8polymers_DetailedChromatinWithSterics *, long, long, int __pyx_skip_dispatch);
  double (*eval_delta_steric_clashes)(struct __pyx_obj_6chromo_8polymers_DetailedChromatinWithSterics *, long, long, int __pyx_skip_dispatch);
  double (*eval_E_steric_clashes)(struct __pyx_obj_6chromo_8polymers_DetailedChromatinWithSterics *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6chromo_8polymers_DetailedChromatinWithSterics *__pyx_vtabptr_6chromo_8polymers_DetailedChromatinWithSterics;


/* "chromo/fields.pyx":46
 * 
 * 
 * cdef class FieldBase:             # <<<<<<<<<<<<<<
 *     """A discretization of space for computing energies.
 * 
 */

struct __pyx_vtabstruct_6chromo_6fields_FieldBase {
  double (*compute_dE)(struct __pyx_obj_6chromo_6fields_FieldBase *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, __Pyx_memviewslice, long, long, int);
  void (*update_affected_densities)(struct __pyx_obj_6chromo_6fields_FieldBase *);
  double (*get_confinement_dE)(struct __pyx_obj_6chromo_6fields_FieldBase *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, __Pyx_memviewslice, long, int);
};
static struct __pyx_vtabstruct_6chromo_6fields_FieldBase *__pyx_vtabptr_6chromo_6fields_FieldBase;


/* "chromo/fields.pyx":280
 * 
 * 
 * cdef class NullField(FieldBase):             # <<<<<<<<<<<<<<
 *     """A field with no energy contributions.
 *     """
 */

struct __pyx_vtabstruct_6chromo_6fields_NullField {
  struct __pyx_vtabstruct_6chromo_6fields_FieldBase __pyx_base;
};
static struct __pyx_vtabstruct_6chromo_6fields_NullField *__pyx_vtabptr_6chromo_6fields_NullField;


/* "chromo/fields.pyx":324
 * 
 * 
 * cdef class UniformDensityField(FieldBase):             # <<<<<<<<<<<<<<
 *     """Rectilinear discretization of space as a rectangular box.
 * 
 */

struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField {
  struct __pyx_vtabstruct_6chromo_6fields_FieldBase __pyx_base;
  void (*precompute_ind_xyz_to_super)(struct __pyx_obj_6chromo_6fields_UniformDensityField *);
  void (*init_fast_field)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, long);
  PyObject *(*get_accessible_volumes)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, long, int, int __pyx_skip_dispatch);
  __Pyx_memviewslice (*get_voxel_coords)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, __Pyx_memviewslice);
  __Pyx_memviewslice (*get_split_voxels)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, __Pyx_memviewslice, double);
  __Pyx_memviewslice (*define_voxel_subgrid)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, long);
  double (*get_frac_accessible)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, __Pyx_memviewslice, __Pyx_memviewslice);
  __Pyx_memviewslice (*get_change_in_density)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, __Pyx_memviewslice, long, int);
  __Pyx_memviewslice (*get_change_in_density_quickly)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, __Pyx_memviewslice, long, int);
  void (*_generate_weight_vector_with_trial)(struct __pyx_obj_6chromo_6fields_UniformDensityField *);
  void (*_generate_index_vector_with_trial)(struct __pyx_obj_6chromo_6fields_UniformDensityField *);
  double (*get_dE_binders_and_beads)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, __Pyx_memviewslice, long, __Pyx_memviewslice, int);
  double (*nonspecific_interact_dE)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, __Pyx_memviewslice, long);
  __Pyx_memviewslice (*get_volume_fractions_with_trial)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, double, __Pyx_memviewslice, long);
  void (*count_doubly_bound)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, __Pyx_memviewslice, long, int, int);
  double (*compute_E)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, int __pyx_skip_dispatch);
  void (*update_all_densities)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, __Pyx_memviewslice &, long, int __pyx_skip_dispatch);
  void (*update_all_densities_for_all_polymers)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, int __pyx_skip_dispatch);
  void (*_generate_weight_vector)(struct __pyx_obj_6chromo_6fields_UniformDensityField *);
  void (*_generate_index_vector)(struct __pyx_obj_6chromo_6fields_UniformDensityField *);
  double (*get_E_binders_and_beads)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, __Pyx_memviewslice, long);
  double (*nonspecific_interact_E)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, int __pyx_skip_dispatch);
  __Pyx_memviewslice (*get_volume_fractions)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, double);
  __Pyx_memviewslice (*get_coordinates_at_inds)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, __Pyx_memviewslice &, __Pyx_memviewslice &, long &);
  __Pyx_memviewslice (*get_states_at_inds)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, __Pyx_memviewslice, long);
};
static struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *__pyx_vtabptr_6chromo_6fields_UniformDensityField;


/* "View.MemoryView":106
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_array {
  PyObject *(*get_memview)(struct __pyx_array_obj *);
};
static struct __pyx_vtabstruct_array *__pyx_vtabptr_array;


/* "View.MemoryView":331
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

struct __pyx_vtabstruct_memoryview {
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);
};
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;


/* "View.MemoryView":967
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

struct __pyx_vtabstruct__memoryviewslice {
  struct __pyx_vtabstruct_memoryview __pyx_base;
};
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* Profile.proto */
#ifndef CYTHON_PROFILE
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
  #define CYTHON_PROFILE 0
#else
  #define CYTHON_PROFILE 1
#endif
#endif
#ifndef CYTHON_TRACE_NOGIL
  #define CYTHON_TRACE_NOGIL 0
#else
  #if CYTHON_TRACE_NOGIL && !defined(CYTHON_TRACE)
    #define CYTHON_TRACE 1
  #endif
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL(frame)
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL(frame) Py_CLEAR(frame)
  #endif
  #define __Pyx_TraceDeclarations\
      static PyCodeObject *__pyx_frame_code = NULL;\
      CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;\
      int __Pyx_use_tracing = 0;
  #define __Pyx_TraceFrameInit(codeobj)\
      if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
#if PY_VERSION_HEX >= 0x030b00a2
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->cframe->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_EnterTracing(tstate) PyThreadState_EnterTracing(tstate)
  #define __Pyx_LeaveTracing(tstate) PyThreadState_LeaveTracing(tstate)
#elif PY_VERSION_HEX >= 0x030a00b1
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->cframe->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_EnterTracing(tstate)\
      do { tstate->tracing++; tstate->cframe->use_tracing = 0; } while (0)
  #define __Pyx_LeaveTracing(tstate)\
      do {\
          tstate->tracing--;\
          tstate->cframe->use_tracing = ((CYTHON_TRACE && tstate->c_tracefunc != NULL)\
                                 || tstate->c_profilefunc != NULL);\
      } while (0)
#else
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_EnterTracing(tstate)\
      do { tstate->tracing++; tstate->use_tracing = 0; } while (0)
  #define __Pyx_LeaveTracing(tstate)\
      do {\
          tstate->tracing--;\
          tstate->use_tracing = ((CYTHON_TRACE && tstate->c_tracefunc != NULL)\
                                         || tstate->c_profilefunc != NULL);\
      } while (0)
#endif
  #ifdef WITH_THREAD
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  if (nogil) {\
      if (CYTHON_TRACE_NOGIL) {\
          PyThreadState *tstate;\
          PyGILState_STATE state = PyGILState_Ensure();\
          tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 1, 1)) {\
              __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          }\
          PyGILState_Release(state);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  } else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (__Pyx_IsTracing(tstate, 1, 1)) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #else
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  {   PyThreadState* tstate = PyThreadState_GET();\
      if (__Pyx_IsTracing(tstate, 1, 1)) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #endif
  #define __Pyx_TraceException()\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 1)) {\
          __Pyx_EnterTracing(tstate);\
          PyObject *exc_info = __Pyx_GetExceptionTuple(tstate);\
          if (exc_info) {\
              if (CYTHON_TRACE && tstate->c_tracefunc)\
                  tstate->c_tracefunc(\
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              tstate->c_profilefunc(\
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              Py_DECREF(exc_info);\
          }\
          __Pyx_LeaveTracing(tstate);\
      }\
  }
  static void __Pyx_call_return_trace_func(PyThreadState *tstate, PyFrameObject *frame, PyObject *result) {
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_EnterTracing(tstate);
      if (CYTHON_TRACE && tstate->c_tracefunc)
          tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_RETURN, result);
      if (tstate->c_profilefunc)
          tstate->c_profilefunc(tstate->c_profileobj, frame, PyTrace_RETURN, result);
      CYTHON_FRAME_DEL(frame);
      __Pyx_LeaveTracing(tstate);
      __Pyx_ErrRestoreInState(tstate, type, value, traceback);
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (__Pyx_IsTracing(tstate, 0, 0)) {\
                  __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
              }\
              PyGILState_Release(state);\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 0, 0)) {\
              __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
          }\
      }\
  }
  #else
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 0)) {\
          __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
      }\
  }
  #endif
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, PyThreadState* tstate, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceFrameInit(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)   if ((1)); else goto_error;
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result, nogil)
#endif
#if CYTHON_TRACE
  static int __Pyx_call_line_trace_func(PyThreadState *tstate, PyFrameObject *frame, int lineno) {
      int ret;
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_PyFrame_SetLineNumber(frame, lineno);
      __Pyx_EnterTracing(tstate);
      ret = tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_LINE, NULL);
      __Pyx_LeaveTracing(tstate);
      if (likely(!ret)) {
          __Pyx_ErrRestoreInState(tstate, type, value, traceback);
      } else {
          Py_XDECREF(type);
          Py_XDECREF(value);
          Py_XDECREF(traceback);
      }
      return ret;
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              int ret = 0;\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
                  ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              }\
              PyGILState_Release(state);\
              if (unlikely(ret)) goto_error;\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
              int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              if (unlikely(ret)) goto_error;\
          }\
      }\
  }
  #else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
          int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
          if (unlikely(ret)) goto_error;\
      }\
  }
  #endif
#else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)   if ((1)); else goto_error;
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* BufferIndexError.proto */
static void __Pyx_RaiseBufferIndexError(int axis);

/* MemviewSliceInit.proto */
#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (memview->acquisition_count_aligned_p)
#define __pyx_get_slice_count(memview) (*__pyx_get_slice_count_pointer(memview))
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XDEC_MEMVIEW(slice, have_gil) __Pyx_XDEC_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *, int, int);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* MergeKeywords.proto */
static int __Pyx_MergeKeywords(PyObject *kwdict, PyObject *source_mapping);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* Globals.proto */
static PyObject* __Pyx_Globals(void);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* ModInt[long].proto */
static CYTHON_INLINE long __Pyx_mod_long(long, long);

/* DivInt[long].proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractCObj(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_str(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_str(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_long(long value, Py_ssize_t width, char padding_char, char format_char);

/* pyfrozenset_new.proto */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it);

/* PySetContains.proto */
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq);

/* ModFloat[double].proto */
static CYTHON_INLINE double __Pyx_mod_double(double, double);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* UnaryNegOverflows.proto */
#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* PyIntFromDouble.proto */
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE PyObject* __Pyx_PyInt_FromDouble(double value);
#else
#define __Pyx_PyInt_FromDouble(value) PyLong_FromDouble(value)
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* DivInt[Py_ssize_t].proto */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t);

static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *); /*proto*/
/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* ClassMethod.proto */
#include "descrobject.h"
static CYTHON_UNUSED PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

/* MemviewSliceIsContig.proto */
static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim);

/* OverlappingSlices.proto */
static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

/* Capsule.proto */
static CYTHON_INLINE PyObject *__pyx_capsule_create(void *p, const char *sig);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_long(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_long(const char *itemp, PyObject *obj);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* TypeInfoCompare.proto */
static int __pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b);

/* MemviewSliceValidateAndInit.proto */
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_long(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_d_dc_long(PyObject *, int writable_flag);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_double(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_double(const char *itemp, PyObject *obj);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_d_dc_double(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_double(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_d_d_dc_long(PyObject *, int writable_flag);

/* IntPow.proto */
static CYTHON_INLINE long __Pyx_pow_long(long, long);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_d_d_dc_double(PyObject *, int writable_flag);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* MemviewSliceCopyTemplate.proto */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CopyContentsUtility.proto */
#define __pyx_memoryview_copy_slice_d_dc_double_c(slice)\
        __pyx_memoryview_copy_new_contig(&slice, "c", 2,\
                                         sizeof(double), (PyBUF_C_CONTIGUOUS | PyBUF_FORMAT),\
                                         0)

/* CopyContentsUtility.proto */
#define __pyx_memoryview_copy_slice_dcd__double_f(slice)\
        __pyx_memoryview_copy_new_contig(&slice, "fortran", 2,\
                                         sizeof(double), (PyBUF_F_CONTIGUOUS | PyBUF_FORMAT),\
                                         0)

/* CopyContentsUtility.proto */
#define __pyx_memoryview_copy_slice_dc_double_c(slice)\
        __pyx_memoryview_copy_new_contig(&slice, "c", 1,\
                                         sizeof(double), (PyBUF_C_CONTIGUOUS | PyBUF_FORMAT),\
                                         0)

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* VoidPtrImport.proto */
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static double __pyx_f_6chromo_6fields_9FieldBase_compute_dE(CYTHON_UNUSED struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, CYTHON_UNUSED __Pyx_memviewslice __pyx_v_inds, CYTHON_UNUSED long __pyx_v_n_inds, CYTHON_UNUSED long __pyx_v_packet_size, CYTHON_UNUSED int __pyx_v_state_change); /* proto*/
static void __pyx_f_6chromo_6fields_9FieldBase_update_affected_densities(CYTHON_UNUSED struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self); /* proto*/
static double __pyx_f_6chromo_6fields_9FieldBase_get_confinement_dE(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, __Pyx_memviewslice __pyx_v_inds, long __pyx_v_n_beads, int __pyx_v_trial); /* proto*/
static double __pyx_f_6chromo_6fields_9NullField_compute_dE(struct __pyx_obj_6chromo_6fields_NullField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, __Pyx_memviewslice __pyx_v_inds, long __pyx_v_n_inds, CYTHON_UNUSED long __pyx_v_packet_size, CYTHON_UNUSED int __pyx_v_state_change); /* proto*/
static void __pyx_f_6chromo_6fields_9NullField_update_affected_densities(CYTHON_UNUSED struct __pyx_obj_6chromo_6fields_NullField *__pyx_v_self); /* proto*/
static void __pyx_f_6chromo_6fields_19UniformDensityField_init_fast_field(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, long __pyx_v_n_points); /* proto*/
static void __pyx_f_6chromo_6fields_19UniformDensityField_precompute_ind_xyz_to_super(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6chromo_6fields_19UniformDensityField_get_accessible_volumes(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, long __pyx_v_n_side, int __pyx_v_assume_fully_accessible, int __pyx_skip_dispatch); /* proto*/
static __Pyx_memviewslice __pyx_f_6chromo_6fields_19UniformDensityField_get_voxel_coords(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, __Pyx_memviewslice __pyx_v_xyz_inds); /* proto*/
static __Pyx_memviewslice __pyx_f_6chromo_6fields_19UniformDensityField_get_split_voxels(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, __Pyx_memviewslice __pyx_v_xyz_coords, double __pyx_v_buffer_dist); /* proto*/
static __Pyx_memviewslice __pyx_f_6chromo_6fields_19UniformDensityField_define_voxel_subgrid(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, long __pyx_v_n_pt_side); /* proto*/
static double __pyx_f_6chromo_6fields_19UniformDensityField_get_frac_accessible(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, __Pyx_memviewslice __pyx_v_coords, __Pyx_memviewslice __pyx_v_dxyz_point); /* proto*/
static double __pyx_f_6chromo_6fields_19UniformDensityField_compute_dE(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, __Pyx_memviewslice __pyx_v_inds, long __pyx_v_n_inds, CYTHON_UNUSED long __pyx_v_packet_size, int __pyx_v_state_change); /* proto*/
static __Pyx_memviewslice __pyx_f_6chromo_6fields_19UniformDensityField_get_change_in_density_quickly(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, __Pyx_memviewslice __pyx_v_inds, long __pyx_v_n_inds, int __pyx_v_state_change); /* proto*/
static __Pyx_memviewslice __pyx_f_6chromo_6fields_19UniformDensityField_get_change_in_density(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, __Pyx_memviewslice __pyx_v_inds, long __pyx_v_n_inds, int __pyx_v_state_change); /* proto*/
static void __pyx_f_6chromo_6fields_19UniformDensityField__generate_weight_vector_with_trial(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto*/
static void __pyx_f_6chromo_6fields_19UniformDensityField__generate_index_vector_with_trial(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto*/
static double __pyx_f_6chromo_6fields_19UniformDensityField_get_dE_binders_and_beads(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, __Pyx_memviewslice __pyx_v_inds, long __pyx_v_n_inds, __Pyx_memviewslice __pyx_v_bin_inds, int __pyx_v_state_change); /* proto*/
static double __pyx_f_6chromo_6fields_19UniformDensityField_nonspecific_interact_dE(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, __Pyx_memviewslice __pyx_v_bin_inds, long __pyx_v_n_bins); /* proto*/
static __Pyx_memviewslice __pyx_f_6chromo_6fields_19UniformDensityField_get_volume_fractions_with_trial(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, double __pyx_v_bead_V, __Pyx_memviewslice __pyx_v_bin_inds, long __pyx_v_n_bins); /* proto*/
static void __pyx_f_6chromo_6fields_19UniformDensityField_count_doubly_bound(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, __Pyx_memviewslice __pyx_v_inds, long __pyx_v_n_inds, int __pyx_v_trial, int __pyx_v_state_change); /* proto*/
static double __pyx_f_6chromo_6fields_19UniformDensityField_compute_E(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6chromo_6fields_19UniformDensityField_update_affected_densities(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto*/
static void __pyx_f_6chromo_6fields_19UniformDensityField_update_all_densities(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, __Pyx_memviewslice &__pyx_v_inds, long __pyx_v_n_inds, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6chromo_6fields_19UniformDensityField_update_all_densities_for_all_polymers(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6chromo_6fields_19UniformDensityField__generate_weight_vector(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto*/
static void __pyx_f_6chromo_6fields_19UniformDensityField__generate_index_vector(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto*/
static double __pyx_f_6chromo_6fields_19UniformDensityField_get_E_binders_and_beads(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, __Pyx_memviewslice __pyx_v_inds, long __pyx_v_n_inds); /* proto*/
static double __pyx_f_6chromo_6fields_19UniformDensityField_nonspecific_interact_E(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, int __pyx_skip_dispatch); /* proto*/
static __Pyx_memviewslice __pyx_f_6chromo_6fields_19UniformDensityField_get_volume_fractions(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, double __pyx_v_bead_V); /* proto*/
static __Pyx_memviewslice __pyx_f_6chromo_6fields_19UniformDensityField_get_coordinates_at_inds(CYTHON_UNUSED struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, __Pyx_memviewslice &__pyx_v_r, __Pyx_memviewslice &__pyx_v_inds, long __pyx_v_n_inds); /* proto*/
static __Pyx_memviewslice __pyx_f_6chromo_6fields_19UniformDensityField_get_states_at_inds(CYTHON_UNUSED struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, __Pyx_memviewslice __pyx_v_inds, long __pyx_v_n_inds); /* proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_generic = 0;
static PyTypeObject *__pyx_ptype_5numpy_number = 0;
static PyTypeObject *__pyx_ptype_5numpy_integer = 0;
static PyTypeObject *__pyx_ptype_5numpy_signedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_unsignedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_inexact = 0;
static PyTypeObject *__pyx_ptype_5numpy_floating = 0;
static PyTypeObject *__pyx_ptype_5numpy_complexfloating = 0;
static PyTypeObject *__pyx_ptype_5numpy_flexible = 0;
static PyTypeObject *__pyx_ptype_5numpy_character = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;

/* Module declarations from 'chromo.polymers' */
static PyTypeObject *__pyx_ptype_6chromo_8polymers_TransformedObject = 0;
static PyTypeObject *__pyx_ptype_6chromo_8polymers_PolymerBase = 0;
static PyTypeObject *__pyx_ptype_6chromo_8polymers_Rouse = 0;
static PyTypeObject *__pyx_ptype_6chromo_8polymers_SSWLC = 0;
static PyTypeObject *__pyx_ptype_6chromo_8polymers_Chromatin = 0;
static PyTypeObject *__pyx_ptype_6chromo_8polymers_SSTWLC = 0;
static PyTypeObject *__pyx_ptype_6chromo_8polymers_LoopedSSTWLC = 0;
static PyTypeObject *__pyx_ptype_6chromo_8polymers_DetailedChromatin = 0;
static PyTypeObject *__pyx_ptype_6chromo_8polymers_DetailedChromatinWithSterics = 0;

/* Module declarations from 'libc.math' */

/* Module declarations from 'chromo.util.linalg' */
static PyArrayObject **__pyx_vp_6chromo_4util_6linalg_identify_4 = 0;
#define __pyx_v_6chromo_4util_6linalg_identify_4 (*__pyx_vp_6chromo_4util_6linalg_identify_4)
static double (*__pyx_f_6chromo_4util_6linalg_vec_dot3)(__Pyx_memviewslice, __Pyx_memviewslice); /*proto*/

/* Module declarations from 'chromo.fields' */
static PyTypeObject *__pyx_ptype_6chromo_6fields_FieldBase = 0;
static PyTypeObject *__pyx_ptype_6chromo_6fields_NullField = 0;
static PyTypeObject *__pyx_ptype_6chromo_6fields_UniformDensityField = 0;
static PyTypeObject *__pyx_array_type = 0;
static PyTypeObject *__pyx_MemviewEnum_type = 0;
static PyTypeObject *__pyx_memoryview_type = 0;
static PyTypeObject *__pyx_memoryviewslice_type = 0;
static double __pyx_v_6chromo_6fields_E_HUGE;
static PyObject *__pyx_v_6chromo_6fields__field_descriptors = 0;
static PyObject *__pyx_v_6chromo_6fields__int_field_descriptors = 0;
static PyObject *__pyx_v_6chromo_6fields__str_field_descriptors = 0;
static PyObject *__pyx_v_6chromo_6fields__float_field_descriptors = 0;
static PyObject *__pyx_v_6chromo_6fields__bool_field_descriptors = 0;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static int __pyx_memoryview_thread_locks_used;
static PyThread_type_lock __pyx_memoryview_thread_locks[8];
static long __pyx_f_6chromo_6fields_inds_to_super_ind(long, long, long, long, long); /*proto*/
static __Pyx_memviewslice __pyx_f_6chromo_6fields_super_ind_to_inds(long, long, long, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_6chromo_6fields_assign_beads_to_bins(__Pyx_memviewslice, long, long, long, long, double, double, double, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_6chromo_6fields_get_neighboring_bins(long, long, long, int __pyx_skip_dispatch); /*proto*/
static __Pyx_memviewslice __pyx_f_6chromo_6fields_get_neighbors_at_ind(long, long, long, long, long, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_6chromo_6fields_get_blocks(long, long, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_6chromo_6fields___pyx_unpickle_FieldBase__set_state(struct __pyx_obj_6chromo_6fields_FieldBase *, PyObject *); /*proto*/
static PyObject *__pyx_f_6chromo_6fields___pyx_unpickle_NullField__set_state(struct __pyx_obj_6chromo_6fields_NullField *, PyObject *); /*proto*/
static PyObject *__pyx_f_6chromo_6fields___pyx_unpickle_UniformDensityField__set_state(struct __pyx_obj_6chromo_6fields_UniformDensityField *, PyObject *); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static void *__pyx_align_pointer(void *, size_t); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static PyObject *assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, char *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, char *); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *, PyObject *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_long = { "long", NULL, sizeof(long), { 0 }, 0, IS_UNSIGNED(long) ? 'U' : 'I', IS_UNSIGNED(long), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_double = { "double", NULL, sizeof(double), { 0 }, 0, 'R', 0, 0 };
#define __Pyx_MODULE_NAME "chromo.fields"
extern int __pyx_module_is_main_chromo__fields;
int __pyx_module_is_main_chromo__fields = 0;

/* Implementation of 'chromo.fields' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_round;
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_IndexError;
static const char __pyx_k_[] = "";
static const char __pyx_k_O[] = "O";
static const char __pyx_k_T[] = "T";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_at[] = "at";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_nx[] = "nx";
static const char __pyx_k_ny[] = "ny";
static const char __pyx_k_nz[] = "nz";
static const char __pyx_k_pd[] = "pd";
static const char __pyx_k__17[] = ">";
static const char __pyx_k__49[] = "*";
static const char __pyx_k_abs[] = "abs";
static const char __pyx_k_all[] = "all";
static const char __pyx_k_chi[] = "chi";
static const char __pyx_k_cls[] = "cls";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_ind[] = "ind";
static const char __pyx_k_loc[] = "loc";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_vol[] = "vol";
static const char __pyx_k_Path[] = "Path";
static const char __pyx_k_True[] = "True";
static const char __pyx_k_axis[] = "axis";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_call[] = "__call__";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_iloc[] = "iloc";
static const char __pyx_k_inds[] = "inds";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_isna[] = "isna";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_norm[] = "norm";
static const char __pyx_k_ny_2[] = ",ny=";
static const char __pyx_k_nz_2[] = ",nz=";
static const char __pyx_k_ones[] = "ones";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_pack[] = "pack";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_poly[] = "poly";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_sqrt[] = "sqrt";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_with[] = " with ";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_Field[] = "Field<>";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_floor[] = "floor";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_mgrid[] = "mgrid";
static const char __pyx_k_npoly[] = ",npoly=";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_round[] = "round";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_Series[] = "Series";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_arange[] = "arange";
static const char __pyx_k_astype[] = "astype";
static const char __pyx_k_binder[] = "binder";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_equals[] = "equals";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_header[] = "header";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_kwargs[] = "kwargs";
static const char __pyx_k_linalg[] = "linalg";
static const char __pyx_k_listed[] = " listed.";
static const char __pyx_k_matmul[] = "matmul";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_n_bins[] = "n_bins";
static const char __pyx_k_n_inds[] = "n_inds";
static const char __pyx_k_n_side[] = "n_side";
static const char __pyx_k_name_2[] = "name";
static const char __pyx_k_orient[] = "orient";
static const char __pyx_k_pandas[] = "pandas";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_r_poly[] = "r_poly";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_return[] = "return";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_to_csv[] = "to_csv";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_Cubical[] = "Cubical";
static const char __pyx_k_binders[] = "binders";
static const char __pyx_k_density[] = "density";
static const char __pyx_k_flatten[] = "flatten";
static const char __pyx_k_fortran[] = "fortran";
static const char __pyx_k_index_x[] = "index_x";
static const char __pyx_k_index_y[] = "index_y";
static const char __pyx_k_index_z[] = "index_z";
static const char __pyx_k_install[] = "install";
static const char __pyx_k_memview[] = "memview";
static const char __pyx_k_pathlib[] = "pathlib";
static const char __pyx_k_polymer[] = "polymer";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_records[] = "records";
static const char __pyx_k_reshape[] = "reshape";
static const char __pyx_k_to_dict[] = "to_dict";
static const char __pyx_k_x_width[] = "x_width";
static const char __pyx_k_y_width[] = "y_width";
static const char __pyx_k_z_width[] = "z_width";
static const char __pyx_k_Ellipsis[] = "Ellipsis";
static const char __pyx_k_binder_2[] = "binder:";
static const char __pyx_k_contains[] = "__contains__";
static const char __pyx_k_finalize[] = "finalize";
static const char __pyx_k_get_dict[] = "get_dict";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_iterrows[] = "iterrows";
static const char __pyx_k_n_points[] = "n_points";
static const char __pyx_k_num_bins[] = "num_bins";
static const char __pyx_k_polymers[] = "polymers";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_read_csv[] = "read_csv";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_vf_limit[] = "vf_limit";
static const char __pyx_k_DataFrame[] = "DataFrame";
static const char __pyx_k_FieldBase[] = "FieldBase";
static const char __pyx_k_NullField[] = "NullField";
static const char __pyx_k_Spherical[] = "Spherical";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_bin_index[] = "bin_index";
static const char __pyx_k_compute_E[] = "compute_E";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_from_file[] = " from file:";
static const char __pyx_k_index_col[] = "index_col";
static const char __pyx_k_index_xp1[] = "index_xp1";
static const char __pyx_k_index_yp1[] = "index_yp1";
static const char __pyx_k_index_zp1[] = "index_zp1";
static const char __pyx_k_init_grid[] = "init_grid";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_not_found[] = " not found.";
static const char __pyx_k_num_beads[] = "num_beads";
static const char __pyx_k_polymer_2[] = "polymer:";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_pyximport[] = "pyximport";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_super_ind[] = "super_ind";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_Trial_flag[] = "Trial flag ";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_block_size[] = "block_size";
static const char __pyx_k_fast_field[] = "fast_field";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_constructor[] = "constructor";
static const char __pyx_k_from_file_2[] = "from_file";
static const char __pyx_k_num_binders[] = "num_binders";
static const char __pyx_k_confine_type[] = "confine_type";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_Reconstructor[] = "Reconstructor";
static const char __pyx_k_chromo_fields[] = "chromo.fields";
static const char __pyx_k_pyx_getbuffer[] = "__pyx_getbuffer";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_confine_length[] = "confine_length";
static const char __pyx_k_View_MemoryView[] = "View.MemoryView";
static const char __pyx_k_allocate_buffer[] = "allocate_buffer";
static const char __pyx_k_chromo_polymers[] = "chromo.polymers";
static const char __pyx_k_dtype_is_object[] = "dtype_is_object";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_Confinement_type[] = "Confinement type ";
static const char __pyx_k_chromo_fields_pyx[] = "chromo/fields.pyx";
static const char __pyx_k_field_constructor[] = "field_constructor";
static const char __pyx_k_pyx_unpickle_Enum[] = "__pyx_unpickle_Enum";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_interaction_energy[] = "interaction_energy";
static const char __pyx_k_interaction_volume[] = "interaction_volume";
static const char __pyx_k_strided_and_direct[] = "<strided and direct>";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_UniformDensityField[] = "UniformDensityField";
static const char __pyx_k_Reconstructor___call[] = "Reconstructor.__call__";
static const char __pyx_k_Reconstructor___init[] = "Reconstructor.__init__";
static const char __pyx_k_get_corner_bin_index[] = "_get_corner_bin_index";
static const char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static const char __pyx_k_update_all_densities[] = "update_all_densities";
static const char __pyx_k_binders_but_there_are[] = " binders, but  there are ";
static const char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static const char __pyx_k_MemoryView_of_r_object[] = "<MemoryView of %r object>";
static const char __pyx_k_Reconstructor_finalize[] = "Reconstructor.finalize";
static const char __pyx_k_UniformDensityField_nx[] = "UniformDensityField<nx=";
static const char __pyx_k_field_energy_prefactor[] = "field_energy_prefactor";
static const char __pyx_k_get_accessible_volumes[] = "get_accessible_volumes";
static const char __pyx_k_nonspecific_interact_E[] = "nonspecific_interact_E";
static const char __pyx_k_polymers_but_there_are[] = " polymers, but  there are ";
static const char __pyx_k_pyx_unpickle_FieldBase[] = "__pyx_unpickle_FieldBase";
static const char __pyx_k_pyx_unpickle_NullField[] = "__pyx_unpickle_NullField";
static const char __pyx_k_MemoryView_of_r_at_0x_x[] = "<MemoryView of %r at 0x%x>";
static const char __pyx_k_Reconstructor_from_file[] = "Reconstructor.from_file";
static const char __pyx_k_assume_fully_accessible[] = "assume_fully_accessible";
static const char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static const char __pyx_k_Cannot_index_with_type_s[] = "Cannot index with type '%s'";
static const char __pyx_k_Invalid_shape_in_axis_d_d[] = "Invalid shape in axis %d: %d.";
static const char __pyx_k_Tried_to_instantiate_class[] = "Tried to instantiate class:";
static const char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static const char __pyx_k_init_field_energy_prefactors[] = "init_field_energy_prefactors";
static const char __pyx_k_cross_talk_interaction_energy[] = "cross_talk_interaction_energy";
static const char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static const char __pyx_k_pyx_unpickle_UniformDensityFie[] = "__pyx_unpickle_UniformDensityField";
static const char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static const char __pyx_k_but_this_binder_was_not_present[] = ", but  this binder was not present in file.";
static const char __pyx_k_but_this_polymer_was_not_presen[] = ", but  this polymer was not present in file.";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static const char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static const char __pyx_k_Cannot_assign_to_read_only_memor[] = "Cannot assign to read-only memoryview";
static const char __pyx_k_Cannot_create_writable_memory_vi[] = "Cannot create writable memory view from read-only memoryview";
static const char __pyx_k_Defer_defining_Field_until_after[] = "Defer defining `Field` until after `PolymerBase`/`Binder` instances.\n\n    Notes\n    -----\n    Constructs a kwargs object that can be re-passed to the appropriate `Field`\n    constructor when they become available.\n\n    Parameters\n    ----------\n    field_constructor : cls\n        Class from which the field will be instantiated\n    kwargs : Dict\n        Keyword arguments used to instantiate the field\n    ";
static const char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static const char __pyx_k_Fields_discretize_space_to_effic[] = "Fields discretize space to efficiently calculate change in binder energy.\n\nNotes\n-----\nCreates a field object that contains parameters for the field calculations\nand functions to generate the densities.\n\nCythonized to accomodate expensive `compute_dE` method.\n\nTo profile runtime of cython functions, add the following comment to the top of\nthis file: # cython: profile=True\n";
static const char __pyx_k_For_now_all_polymers_must_use_al[] = "For now, all polymers must use all of the same binders.";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0x20a4277, 0xc3c0ef8, 0xb4ec7da) = (binders, confine_length, confine_type, n_polymers, polymers))";
static const char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static const char __pyx_k_Invalid_current_trial_state_indi[] = "Invalid current/trial state indicator.";
static const char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got %s";
static const char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis %d)";
static const char __pyx_k_Reading_compute_dE_from_base_cla[] = "Reading compute_dE from base class";
static const char __pyx_k_Reading_update_affected_densitie[] = "Reading update_affected_densities from base class";
static const char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static const char __pyx_k_cross_talk_field_energy_prefacto[] = "cross_talk_field_energy_prefactor";
static const char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension %d (got %d and %d)";
static const char __pyx_k_interaction_energy_intranucleoso[] = "interaction_energy_intranucleosome";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
static const char __pyx_k_update_all_densities_for_all_pol[] = "update_all_densities_for_all_polymers";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_2[] = "Incompatible checksums (0x%x vs (0x0167c6c, 0x562918d, 0x6990e88) = (_field_descriptors, access_vols, affected_bins_last_move, assume_fully_accessible, bin_index, binder_dict, binders, chi, confine_length, confine_type, density, density_trial, dict_, doubly_bound, doubly_bound_trial, dx, dxyz, dy, dz, fast_field, half_step_xyz, half_width_xyz, index_xyz, index_xyz_with_trial, inds_xyz_to_super, n_bins, n_points, n_polymers, n_sub_bins_x, n_sub_bins_y, n_sub_bins_z, n_xyz_m1, nbr_inds, nbr_inds_with_trial, num_binders, nx, ny, nz, polymers, sub_bin_width_x, sub_bin_width_y, sub_bin_width_z, sub_bins_to_bins_x, sub_bins_to_bins_y, sub_bins_to_bins_z, sub_bins_to_weights_x, sub_bins_to_weights_y, sub_bins_to_weights_z, vf_limit, vol_bin, weight_xyz, weight_xyz_with_trial, width_xyz, wt_vec, wt_vec_with_trial, x_width, xyz, xyz_with_trial, y_width, z_width))";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_3[] = "Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_n_s_ASCII;
static PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
static PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
static PyObject *__pyx_kp_s_Cannot_assign_to_read_only_memor;
static PyObject *__pyx_kp_s_Cannot_create_writable_memory_vi;
static PyObject *__pyx_kp_s_Cannot_index_with_type_s;
static PyObject *__pyx_kp_s_Confinement_type;
static PyObject *__pyx_n_s_Cubical;
static PyObject *__pyx_n_s_DataFrame;
static PyObject *__pyx_kp_s_Defer_defining_Field_until_after;
static PyObject *__pyx_n_s_Ellipsis;
static PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
static PyObject *__pyx_kp_s_Field;
static PyObject *__pyx_n_s_FieldBase;
static PyObject *__pyx_n_u_FieldBase;
static PyObject *__pyx_kp_s_For_now_all_polymers_must_use_al;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
static PyObject *__pyx_kp_s_Invalid_current_trial_state_indi;
static PyObject *__pyx_kp_s_Invalid_mode_expected_c_or_fortr;
static PyObject *__pyx_kp_s_Invalid_shape_in_axis_d_d;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
static PyObject *__pyx_kp_s_MemoryView_of_r_object;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_s_NullField;
static PyObject *__pyx_n_b_O;
static PyObject *__pyx_kp_s_Out_of_bounds_on_buffer_access_a;
static PyObject *__pyx_n_s_Path;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_kp_s_Reading_compute_dE_from_base_cla;
static PyObject *__pyx_kp_s_Reading_update_affected_densitie;
static PyObject *__pyx_n_s_Reconstructor;
static PyObject *__pyx_n_s_Reconstructor___call;
static PyObject *__pyx_n_s_Reconstructor___init;
static PyObject *__pyx_n_s_Reconstructor_finalize;
static PyObject *__pyx_n_s_Reconstructor_from_file;
static PyObject *__pyx_n_s_Series;
static PyObject *__pyx_n_s_Spherical;
static PyObject *__pyx_n_s_T;
static PyObject *__pyx_kp_s_Trial_flag;
static PyObject *__pyx_kp_u_Tried_to_instantiate_class;
static PyObject *__pyx_n_s_True;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
static PyObject *__pyx_n_s_UniformDensityField;
static PyObject *__pyx_kp_u_UniformDensityField_nx;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_View_MemoryView;
static PyObject *__pyx_kp_u__17;
static PyObject *__pyx_n_s__49;
static PyObject *__pyx_n_s_abs;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_allocate_buffer;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_arange;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_assume_fully_accessible;
static PyObject *__pyx_n_s_astype;
static PyObject *__pyx_n_s_at;
static PyObject *__pyx_n_s_axis;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_bin_index;
static PyObject *__pyx_n_s_binder;
static PyObject *__pyx_kp_u_binder_2;
static PyObject *__pyx_n_s_binders;
static PyObject *__pyx_kp_u_binders_but_there_are;
static PyObject *__pyx_n_s_block_size;
static PyObject *__pyx_kp_u_but_this_binder_was_not_present;
static PyObject *__pyx_kp_u_but_this_polymer_was_not_presen;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_u_c;
static PyObject *__pyx_n_s_call;
static PyObject *__pyx_n_s_chi;
static PyObject *__pyx_n_s_chromo_fields;
static PyObject *__pyx_kp_s_chromo_fields_pyx;
static PyObject *__pyx_n_s_chromo_polymers;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_cls;
static PyObject *__pyx_n_s_compute_E;
static PyObject *__pyx_n_s_confine_length;
static PyObject *__pyx_n_s_confine_type;
static PyObject *__pyx_n_s_constructor;
static PyObject *__pyx_n_s_contains;
static PyObject *__pyx_kp_s_contiguous_and_direct;
static PyObject *__pyx_kp_s_contiguous_and_indirect;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_n_s_cross_talk_field_energy_prefacto;
static PyObject *__pyx_n_s_cross_talk_interaction_energy;
static PyObject *__pyx_n_s_density;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_dtype_is_object;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_equals;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_fast_field;
static PyObject *__pyx_n_s_field_constructor;
static PyObject *__pyx_n_s_field_energy_prefactor;
static PyObject *__pyx_n_s_finalize;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_flatten;
static PyObject *__pyx_n_s_floor;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fortran;
static PyObject *__pyx_n_u_fortran;
static PyObject *__pyx_kp_u_from_file;
static PyObject *__pyx_n_s_from_file_2;
static PyObject *__pyx_n_s_get_accessible_volumes;
static PyObject *__pyx_n_s_get_corner_bin_index;
static PyObject *__pyx_n_s_get_dict;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_kp_s_got_differing_extents_in_dimensi;
static PyObject *__pyx_n_s_header;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_iloc;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_ind;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_index_col;
static PyObject *__pyx_n_s_index_x;
static PyObject *__pyx_n_s_index_xp1;
static PyObject *__pyx_n_s_index_y;
static PyObject *__pyx_n_s_index_yp1;
static PyObject *__pyx_n_s_index_z;
static PyObject *__pyx_n_s_index_zp1;
static PyObject *__pyx_n_s_inds;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_init_field_energy_prefactors;
static PyObject *__pyx_n_s_init_grid;
static PyObject *__pyx_n_s_install;
static PyObject *__pyx_n_s_interaction_energy;
static PyObject *__pyx_n_s_interaction_energy_intranucleoso;
static PyObject *__pyx_n_s_interaction_volume;
static PyObject *__pyx_n_s_isna;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
static PyObject *__pyx_n_s_iterrows;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_kwargs;
static PyObject *__pyx_n_s_linalg;
static PyObject *__pyx_kp_u_listed;
static PyObject *__pyx_n_s_loc;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_matmul;
static PyObject *__pyx_n_s_memview;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_mgrid;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_n_bins;
static PyObject *__pyx_n_s_n_inds;
static PyObject *__pyx_n_s_n_points;
static PyObject *__pyx_n_s_n_side;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_nonspecific_interact_E;
static PyObject *__pyx_n_s_norm;
static PyObject *__pyx_kp_s_not_found;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_kp_u_npoly;
static PyObject *__pyx_n_s_num_beads;
static PyObject *__pyx_n_s_num_binders;
static PyObject *__pyx_n_s_num_bins;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_nx;
static PyObject *__pyx_n_s_ny;
static PyObject *__pyx_kp_u_ny_2;
static PyObject *__pyx_n_s_nz;
static PyObject *__pyx_kp_u_nz_2;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_ones;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_n_s_orient;
static PyObject *__pyx_n_s_pack;
static PyObject *__pyx_n_s_pandas;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_pathlib;
static PyObject *__pyx_n_s_pd;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_poly;
static PyObject *__pyx_n_s_polymer;
static PyObject *__pyx_kp_u_polymer_2;
static PyObject *__pyx_n_s_polymers;
static PyObject *__pyx_kp_u_polymers_but_there_are;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_getbuffer;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_Enum;
static PyObject *__pyx_n_s_pyx_unpickle_FieldBase;
static PyObject *__pyx_n_s_pyx_unpickle_NullField;
static PyObject *__pyx_n_s_pyx_unpickle_UniformDensityFie;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_pyximport;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_r_poly;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_read_csv;
static PyObject *__pyx_n_s_records;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_reshape;
static PyObject *__pyx_n_s_return;
static PyObject *__pyx_n_s_round;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_sqrt;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_kp_s_strided_and_direct;
static PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
static PyObject *__pyx_kp_s_strided_and_indirect;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_s_super_ind;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_to_csv;
static PyObject *__pyx_n_s_to_dict;
static PyObject *__pyx_kp_s_unable_to_allocate_array_data;
static PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_update_all_densities;
static PyObject *__pyx_n_s_update_all_densities_for_all_pol;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_s_vf_limit;
static PyObject *__pyx_n_s_vol;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_kp_u_with;
static PyObject *__pyx_n_s_x_width;
static PyObject *__pyx_n_s_y_width;
static PyObject *__pyx_n_s_z_width;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_pf_6chromo_6fields_9FieldBase_4name___get__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_9FieldBase___init__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self, PyObject *__pyx_v_polymers, PyObject *__pyx_v_binders); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_9FieldBase_2__str__(CYTHON_UNUSED struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_9FieldBase_4__contains__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self, PyObject *__pyx_v_poly); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_9FieldBase_8polymers___get__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_9FieldBase_8polymers_2__set__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6chromo_6fields_9FieldBase_8polymers_4__del__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_9FieldBase_10n_polymers___get__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_9FieldBase_10n_polymers_2__set__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_9FieldBase_7binders___get__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_9FieldBase_7binders_2__set__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6chromo_6fields_9FieldBase_7binders_4__del__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_9FieldBase_12confine_type___get__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_9FieldBase_12confine_type_2__set__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6chromo_6fields_9FieldBase_12confine_type_4__del__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_9FieldBase_14confine_length___get__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_9FieldBase_14confine_length_2__set__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_9FieldBase_6__reduce_cython__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_9FieldBase_8__setstate_cython__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_13Reconstructor___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_cls, PyObject *__pyx_v_kwargs); /* proto */
static struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_pf_6chromo_6fields_13Reconstructor_2finalize(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_polymers, PyObject *__pyx_v_binders); /* proto */
static struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_pf_6chromo_6fields_13Reconstructor_4from_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cls, PyObject *__pyx_v_path); /* proto */
static struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_pf_6chromo_6fields_13Reconstructor_6__call__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_polymers, PyObject *__pyx_v_binders); /* proto */
static int __pyx_pf_6chromo_6fields_9NullField___init__(struct __pyx_obj_6chromo_6fields_NullField *__pyx_v_self, PyObject *__pyx_v_polymers, PyObject *__pyx_v_confine_type, PyObject *__pyx_v_confine_length); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_9NullField_2to_file(CYTHON_UNUSED struct __pyx_obj_6chromo_6fields_NullField *__pyx_v_self, PyObject *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_9NullField_4from_file(PyTypeObject *__pyx_v_cls, CYTHON_UNUSED PyObject *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_9NullField_6__reduce_cython__(struct __pyx_obj_6chromo_6fields_NullField *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_9NullField_8__setstate_cython__(struct __pyx_obj_6chromo_6fields_NullField *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField___init__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_polymers, PyObject *__pyx_v_binders, PyObject *__pyx_v_x_width, PyObject *__pyx_v_nx, PyObject *__pyx_v_y_width, PyObject *__pyx_v_ny, PyObject *__pyx_v_z_width, PyObject *__pyx_v_nz, PyObject *__pyx_v_confine_type, PyObject *__pyx_v_confine_length, PyObject *__pyx_v_chi, PyObject *__pyx_v_assume_fully_accessible, PyObject *__pyx_v_vf_limit, PyObject *__pyx_v_fast_field, PyObject *__pyx_v_n_points); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_2init_grid(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_4init_field_energy_prefactors(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_6get_accessible_volumes(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, long __pyx_v_n_side, int __pyx_v_assume_fully_accessible); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_8to_file(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_10from_file(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_path, PyObject *__pyx_v_polymers, PyObject *__pyx_v_binders); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_12__eq__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyArrayObject *__pyx_pf_6chromo_6fields_19UniformDensityField_14_get_corner_bin_index(PyObject *__pyx_v_nx, PyObject *__pyx_v_ny, PyObject *__pyx_v_nz); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_16__str__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_18get_dict(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_20compute_E(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_22update_all_densities(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, __Pyx_memviewslice __pyx_v_inds, long __pyx_v_n_inds); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_24update_all_densities_for_all_polymers(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_26nonspecific_interact_E(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_18_field_descriptors___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_18_field_descriptors_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_18_field_descriptors_4__del__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_7x_width___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_7x_width_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_7y_width___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_7y_width_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_7z_width___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_7z_width_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_9width_xyz___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_9width_xyz_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_2nx___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_2nx_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_2ny___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_2ny_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_2nz___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_2nz_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_12n_sub_bins_x___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_12n_sub_bins_x_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_12n_sub_bins_y___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_12n_sub_bins_y_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_12n_sub_bins_z___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_12n_sub_bins_z_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_2dx___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_2dx_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_2dy___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_2dy_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_2dz___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_2dz_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_4dxyz___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_4dxyz_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_6n_bins___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_6n_bins_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_8n_points___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_8n_points_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_7vol_bin___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_7vol_bin_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_9bin_index___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_9bin_index_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_19nbr_inds_with_trial___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_19nbr_inds_with_trial_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_8nbr_inds___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_8nbr_inds_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_9index_xyz___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_9index_xyz_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_6wt_vec___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_6wt_vec_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_3xyz___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_3xyz_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_10weight_xyz___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_10weight_xyz_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_17wt_vec_with_trial___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_17wt_vec_with_trial_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_14xyz_with_trial___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_14xyz_with_trial_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_21weight_xyz_with_trial___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_21weight_xyz_with_trial_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_20index_xyz_with_trial___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_20index_xyz_with_trial_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_11num_binders___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_11num_binders_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_12doubly_bound___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_12doubly_bound_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_18doubly_bound_trial___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_18doubly_bound_trial_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_7density___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_7density_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_13density_trial___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_13density_trial_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_11access_vols___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_11access_vols_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_11access_vols_4__del__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_3chi___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_3chi_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_15sub_bin_width_x___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_15sub_bin_width_x_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_15sub_bin_width_y___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_15sub_bin_width_y_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_15sub_bin_width_z___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_15sub_bin_width_z_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_x___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_x_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_x_4__del__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_y___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_y_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_y_4__del__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_z___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_z_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_z_4__del__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_x___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_x_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_x_4__del__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_y___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_y_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_y_4__del__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_z___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_z_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_z_4__del__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_5dict____get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_5dict__2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_5dict__4__del__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_8vf_limit___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_8vf_limit_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_23assume_fully_accessible___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_23assume_fully_accessible_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_10fast_field___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_10fast_field_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_11binder_dict___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_11binder_dict_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_11binder_dict_4__del__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_14half_width_xyz___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_14half_width_xyz_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_13half_step_xyz___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_13half_step_xyz_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_8n_xyz_m1___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_8n_xyz_m1_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_23affected_bins_last_move___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_23affected_bins_last_move_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_17inds_xyz_to_super___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static int __pyx_pf_6chromo_6fields_19UniformDensityField_17inds_xyz_to_super_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_28__reduce_cython__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_30__setstate_cython__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_super_ind_to_inds(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_super_ind, long __pyx_v_nx, long __pyx_v_ny); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_2assign_beads_to_bins(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_r_poly, long __pyx_v_n_inds, long __pyx_v_nx, long __pyx_v_ny, long __pyx_v_nz, double __pyx_v_x_width, double __pyx_v_y_width, double __pyx_v_z_width); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_4get_neighboring_bins(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_nx, long __pyx_v_ny, long __pyx_v_nz); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_6get_neighbors_at_ind(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_nx, long __pyx_v_ny, long __pyx_v_nz, long __pyx_v_ind, long __pyx_v_num_bins); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_8get_blocks(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_num_beads, long __pyx_v_block_size); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_10__pyx_unpickle_FieldBase(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_12__pyx_unpickle_NullField(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6chromo_6fields_14__pyx_unpickle_UniformDensityField(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_6chromo_6fields_FieldBase(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6chromo_6fields_NullField(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6chromo_6fields_UniformDensityField(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_0_5;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_float_1Eneg_18;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_27;
static PyObject *__pyx_int_1000;
static PyObject *__pyx_int_1473644;
static PyObject *__pyx_int_34226807;
static PyObject *__pyx_int_90345869;
static PyObject *__pyx_int_110694024;
static PyObject *__pyx_int_112105877;
static PyObject *__pyx_int_136983863;
static PyObject *__pyx_int_184977713;
static PyObject *__pyx_int_189712346;
static PyObject *__pyx_int_205262584;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__43;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_codeobj__2;
static PyObject *__pyx_codeobj__3;
static PyObject *__pyx_codeobj__4;
static PyObject *__pyx_codeobj__5;
static PyObject *__pyx_codeobj__16;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__24;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__47;
/* Late includes */

/* "chromo/fields.pyx":68
 * 
 *     @property
 *     def name(self):             # <<<<<<<<<<<<<<
 *         """Print the name of the field.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_9FieldBase_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_9FieldBase_4name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_9FieldBase_4name___get__(((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_9FieldBase_4name___get__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 68, 0, __PYX_ERR(0, 68, __pyx_L1_error));

  /* "chromo/fields.pyx":75
 *         For now, there's only one field per sim, so classname works.
 *         """
 *         return self.__class__.__name__             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, polymers, binders):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chromo/fields.pyx":68
 * 
 *     @property
 *     def name(self):             # <<<<<<<<<<<<<<
 *         """Print the name of the field.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chromo.fields.FieldBase.name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":77
 *         return self.__class__.__name__
 * 
 *     def __init__(self, polymers, binders):             # <<<<<<<<<<<<<<
 *         """Construct a field holding no polymers, tracking no reader proteins.
 * 
 */

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_9FieldBase_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6chromo_6fields_9FieldBase___init__[] = "Construct a field holding no polymers, tracking no reader proteins.\n\n        Parameters\n        ----------\n         polymers : List[PolymerBase]\n            List of polymers contained in the field\n        binders : pd.DataFrame\n            Output of `chromo.binders.make_binder_collection` applied to the\n            list of `Binder` objects contained in the field\n        ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6chromo_6fields_9FieldBase___init__;
#endif
static int __pyx_pw_6chromo_6fields_9FieldBase_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_polymers = 0;
  PyObject *__pyx_v_binders = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_polymers,&__pyx_n_s_binders,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_polymers)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_binders)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 77, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 77, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_polymers = values[0];
    __pyx_v_binders = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 77, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chromo.fields.FieldBase.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6chromo_6fields_9FieldBase___init__(((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_v_self), __pyx_v_polymers, __pyx_v_binders);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_9FieldBase___init__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self, PyObject *__pyx_v_polymers, PyObject *__pyx_v_binders) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 77, 0, __PYX_ERR(0, 77, __pyx_L1_error));

  /* "chromo/fields.pyx":88
 *             list of `Binder` objects contained in the field
 *         """
 *         self.polymers = polymers             # <<<<<<<<<<<<<<
 *         self.n_polymers = len(polymers)
 *         self.binders = binders
 */
  if (!(likely(PyList_CheckExact(__pyx_v_polymers))||((__pyx_v_polymers) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_polymers)->tp_name), 0))) __PYX_ERR(0, 88, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_polymers;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->polymers);
  __Pyx_DECREF(__pyx_v_self->polymers);
  __pyx_v_self->polymers = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "chromo/fields.pyx":89
 *         """
 *         self.polymers = polymers
 *         self.n_polymers = len(polymers)             # <<<<<<<<<<<<<<
 *         self.binders = binders
 *         self.confine_type = ""
 */
  __pyx_t_2 = PyObject_Length(__pyx_v_polymers); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 89, __pyx_L1_error)
  __pyx_v_self->n_polymers = __pyx_t_2;

  /* "chromo/fields.pyx":90
 *         self.polymers = polymers
 *         self.n_polymers = len(polymers)
 *         self.binders = binders             # <<<<<<<<<<<<<<
 *         self.confine_type = ""
 *         self.confine_length = 0.0
 */
  __Pyx_INCREF(__pyx_v_binders);
  __Pyx_GIVEREF(__pyx_v_binders);
  __Pyx_GOTREF(__pyx_v_self->binders);
  __Pyx_DECREF(__pyx_v_self->binders);
  __pyx_v_self->binders = __pyx_v_binders;

  /* "chromo/fields.pyx":91
 *         self.n_polymers = len(polymers)
 *         self.binders = binders
 *         self.confine_type = ""             # <<<<<<<<<<<<<<
 *         self.confine_length = 0.0
 * 
 */
  __Pyx_INCREF(__pyx_kp_s_);
  __Pyx_GIVEREF(__pyx_kp_s_);
  __Pyx_GOTREF(__pyx_v_self->confine_type);
  __Pyx_DECREF(__pyx_v_self->confine_type);
  __pyx_v_self->confine_type = __pyx_kp_s_;

  /* "chromo/fields.pyx":92
 *         self.binders = binders
 *         self.confine_type = ""
 *         self.confine_length = 0.0             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_v_self->confine_length = 0.0;

  /* "chromo/fields.pyx":77
 *         return self.__class__.__name__
 * 
 *     def __init__(self, polymers, binders):             # <<<<<<<<<<<<<<
 *         """Construct a field holding no polymers, tracking no reader proteins.
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.FieldBase.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":94
 *         self.confine_length = 0.0
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         """Print representation of empty field.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_9FieldBase_3__str__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6chromo_6fields_9FieldBase_2__str__[] = "Print representation of empty field.\n        ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6chromo_6fields_9FieldBase_2__str__;
#endif
static PyObject *__pyx_pw_6chromo_6fields_9FieldBase_3__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_9FieldBase_2__str__(((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_9FieldBase_2__str__(CYTHON_UNUSED struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);
  __Pyx_TraceCall("__str__", __pyx_f[0], 94, 0, __PYX_ERR(0, 94, __pyx_L1_error));

  /* "chromo/fields.pyx":97
 *         """Print representation of empty field.
 *         """
 *         return "Field<>"             # <<<<<<<<<<<<<<
 * 
 *     def __contains__(self, poly):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_s_Field);
  __pyx_r = __pyx_kp_s_Field;
  goto __pyx_L0;

  /* "chromo/fields.pyx":94
 *         self.confine_length = 0.0
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         """Print representation of empty field.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.FieldBase.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":99
 *         return "Field<>"
 * 
 *     def __contains__(self, poly):             # <<<<<<<<<<<<<<
 *         """Check if a polymer is currently set to interact with this field.
 * 
 */

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_9FieldBase_5__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_poly); /*proto*/
static char __pyx_doc_6chromo_6fields_9FieldBase_4__contains__[] = "Check if a polymer is currently set to interact with this field.\n\n        Notes\n        -----\n        No polymers interact with the base field object.\n        ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6chromo_6fields_9FieldBase_4__contains__;
#endif
static int __pyx_pw_6chromo_6fields_9FieldBase_5__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_poly) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_9FieldBase_4__contains__(((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_v_self), ((PyObject *)__pyx_v_poly));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_9FieldBase_4__contains__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self, PyObject *__pyx_v_poly) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__contains__", 0);
  __Pyx_TraceCall("__contains__", __pyx_f[0], 99, 0, __PYX_ERR(0, 99, __pyx_L1_error));

  /* "chromo/fields.pyx":106
 *         No polymers interact with the base field object.
 *         """
 *         return self.polymers.__contains__(poly)             # <<<<<<<<<<<<<<
 * 
 *     cdef double compute_dE(
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->polymers, __pyx_n_s_contains); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_poly) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_poly);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "chromo/fields.pyx":99
 *         return "Field<>"
 * 
 *     def __contains__(self, poly):             # <<<<<<<<<<<<<<
 *         """Check if a polymer is currently set to interact with this field.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("chromo.fields.FieldBase.__contains__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":108
 *         return self.polymers.__contains__(poly)
 * 
 *     cdef double compute_dE(             # <<<<<<<<<<<<<<
 *         self, poly.PolymerBase poly, long[:] inds, long n_inds,
 *         long packet_size, bint state_change
 */

static double __pyx_f_6chromo_6fields_9FieldBase_compute_dE(CYTHON_UNUSED struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, CYTHON_UNUSED __Pyx_memviewslice __pyx_v_inds, CYTHON_UNUSED long __pyx_v_n_inds, CYTHON_UNUSED long __pyx_v_packet_size, CYTHON_UNUSED int __pyx_v_state_change) {
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_dE", 0);
  __Pyx_TraceCall("compute_dE", __pyx_f[0], 108, 0, __PYX_ERR(0, 108, __pyx_L1_error));

  /* "chromo/fields.pyx":114
 *         """Compute the change in field energy due to a proposed move.
 *         """
 *         raise NotImplementedError, "Reading compute_dE from base class"             # <<<<<<<<<<<<<<
 * 
 *     cdef void update_affected_densities(self):
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, __pyx_kp_s_Reading_compute_dE_from_base_cla, 0, 0);
  __PYX_ERR(0, 114, __pyx_L1_error)

  /* "chromo/fields.pyx":108
 *         return self.polymers.__contains__(poly)
 * 
 *     cdef double compute_dE(             # <<<<<<<<<<<<<<
 *         self, poly.PolymerBase poly, long[:] inds, long n_inds,
 *         long packet_size, bint state_change
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("chromo.fields.FieldBase.compute_dE", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":116
 *         raise NotImplementedError, "Reading compute_dE from base class"
 * 
 *     cdef void update_affected_densities(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError, \
 *             "Reading update_affected_densities from base class"
 */

static void __pyx_f_6chromo_6fields_9FieldBase_update_affected_densities(CYTHON_UNUSED struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_affected_densities", 0);
  __Pyx_TraceCall("update_affected_densities", __pyx_f[0], 116, 0, __PYX_ERR(0, 116, __pyx_L1_error));

  /* "chromo/fields.pyx":117
 * 
 *     cdef void update_affected_densities(self):
 *         raise NotImplementedError, \             # <<<<<<<<<<<<<<
 *             "Reading update_affected_densities from base class"
 *         pass
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, __pyx_kp_s_Reading_update_affected_densitie, 0, 0);
  __PYX_ERR(0, 117, __pyx_L1_error)

  /* "chromo/fields.pyx":116
 *         raise NotImplementedError, "Reading compute_dE from base class"
 * 
 *     cdef void update_affected_densities(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError, \
 *             "Reading update_affected_densities from base class"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("chromo.fields.FieldBase.update_affected_densities", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "chromo/fields.pyx":121
 *         pass
 * 
 *     cdef double get_confinement_dE(             # <<<<<<<<<<<<<<
 *         self, poly.PolymerBase poly, long[:] inds, long n_beads, int trial
 *     ):
 */

static double __pyx_f_6chromo_6fields_9FieldBase_get_confinement_dE(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, __Pyx_memviewslice __pyx_v_inds, long __pyx_v_n_beads, int __pyx_v_trial) {
  long __pyx_v_i;
  long __pyx_v_num_out_of_bounds;
  double __pyx_v_dist;
  long __pyx_v_j;
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  long __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  long __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_confinement_dE", 0);
  __Pyx_TraceCall("get_confinement_dE", __pyx_f[0], 121, 0, __PYX_ERR(0, 121, __pyx_L1_error));

  /* "chromo/fields.pyx":156
 *         """
 *         cdef long i
 *         cdef long num_out_of_bounds = 0             # <<<<<<<<<<<<<<
 *         cdef double dist
 * 
 */
  __pyx_v_num_out_of_bounds = 0;

  /* "chromo/fields.pyx":160
 * 
 *         # No Confinement
 *         if self.confine_type == "":             # <<<<<<<<<<<<<<
 *             return 0.
 * 
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_self->confine_type, __pyx_kp_s_, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 160, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "chromo/fields.pyx":161
 *         # No Confinement
 *         if self.confine_type == "":
 *             return 0.             # <<<<<<<<<<<<<<
 * 
 *         # Spherical confinement
 */
    __pyx_r = 0.;
    goto __pyx_L0;

    /* "chromo/fields.pyx":160
 * 
 *         # No Confinement
 *         if self.confine_type == "":             # <<<<<<<<<<<<<<
 *             return 0.
 * 
 */
  }

  /* "chromo/fields.pyx":164
 * 
 *         # Spherical confinement
 *         elif self.confine_type == "Spherical":             # <<<<<<<<<<<<<<
 *             if trial == 1:
 *                 for i in range(n_beads):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_self->confine_type, __pyx_n_s_Spherical, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 164, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "chromo/fields.pyx":165
 *         # Spherical confinement
 *         elif self.confine_type == "Spherical":
 *             if trial == 1:             # <<<<<<<<<<<<<<
 *                 for i in range(n_beads):
 *                     dist = sqrt(
 */
    switch (__pyx_v_trial) {
      case 1:

      /* "chromo/fields.pyx":166
 *         elif self.confine_type == "Spherical":
 *             if trial == 1:
 *                 for i in range(n_beads):             # <<<<<<<<<<<<<<
 *                     dist = sqrt(
 *                         vec_dot3(poly.r_trial[inds[i]], poly.r_trial[inds[i]])
 */
      __pyx_t_3 = __pyx_v_n_beads;
      __pyx_t_4 = __pyx_t_3;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_v_i = __pyx_t_5;

        /* "chromo/fields.pyx":168
 *                 for i in range(n_beads):
 *                     dist = sqrt(
 *                         vec_dot3(poly.r_trial[inds[i]], poly.r_trial[inds[i]])             # <<<<<<<<<<<<<<
 *                     )
 *                     if dist > self.confine_length:
 */
        if (unlikely(!__pyx_v_poly->r_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 168, __pyx_L1_error)}
        __pyx_t_6 = __pyx_v_i;
        __pyx_t_7 = -1;
        if (__pyx_t_6 < 0) {
          __pyx_t_6 += __pyx_v_inds.shape[0];
          if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_6 >= __pyx_v_inds.shape[0])) __pyx_t_7 = 0;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 168, __pyx_L1_error)
        }
        __pyx_t_8.data = __pyx_v_poly->r_trial.data;
        __pyx_t_8.memview = __pyx_v_poly->r_trial.memview;
        __PYX_INC_MEMVIEW(&__pyx_t_8, 0);
        {
    Py_ssize_t __pyx_tmp_idx = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_6 * __pyx_v_inds.strides[0]) )));
        Py_ssize_t __pyx_tmp_shape = __pyx_v_poly->r_trial.shape[0];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_poly->r_trial.strides[0];
        if (__pyx_tmp_idx < 0)
            __pyx_tmp_idx += __pyx_tmp_shape;
        if (unlikely(!__Pyx_is_valid_index(__pyx_tmp_idx, __pyx_tmp_shape))) {
            PyErr_SetString(PyExc_IndexError,
                            "Index out of bounds (axis 0)");
            __PYX_ERR(0, 168, __pyx_L1_error)
        }
        __pyx_t_8.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_8.shape[0] = __pyx_v_poly->r_trial.shape[1];
__pyx_t_8.strides[0] = __pyx_v_poly->r_trial.strides[1];
    __pyx_t_8.suboffsets[0] = -1;

if (unlikely(!__pyx_v_poly->r_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 168, __pyx_L1_error)}
        __pyx_t_6 = __pyx_v_i;
        __pyx_t_7 = -1;
        if (__pyx_t_6 < 0) {
          __pyx_t_6 += __pyx_v_inds.shape[0];
          if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_6 >= __pyx_v_inds.shape[0])) __pyx_t_7 = 0;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 168, __pyx_L1_error)
        }
        __pyx_t_9.data = __pyx_v_poly->r_trial.data;
        __pyx_t_9.memview = __pyx_v_poly->r_trial.memview;
        __PYX_INC_MEMVIEW(&__pyx_t_9, 0);
        {
    Py_ssize_t __pyx_tmp_idx = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_6 * __pyx_v_inds.strides[0]) )));
        Py_ssize_t __pyx_tmp_shape = __pyx_v_poly->r_trial.shape[0];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_poly->r_trial.strides[0];
        if (__pyx_tmp_idx < 0)
            __pyx_tmp_idx += __pyx_tmp_shape;
        if (unlikely(!__Pyx_is_valid_index(__pyx_tmp_idx, __pyx_tmp_shape))) {
            PyErr_SetString(PyExc_IndexError,
                            "Index out of bounds (axis 0)");
            __PYX_ERR(0, 168, __pyx_L1_error)
        }
        __pyx_t_9.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_9.shape[0] = __pyx_v_poly->r_trial.shape[1];
__pyx_t_9.strides[0] = __pyx_v_poly->r_trial.strides[1];
    __pyx_t_9.suboffsets[0] = -1;

__pyx_v_dist = sqrt(__pyx_f_6chromo_4util_6linalg_vec_dot3(__pyx_t_8, __pyx_t_9));

        /* "chromo/fields.pyx":167
 *             if trial == 1:
 *                 for i in range(n_beads):
 *                     dist = sqrt(             # <<<<<<<<<<<<<<
 *                         vec_dot3(poly.r_trial[inds[i]], poly.r_trial[inds[i]])
 *                     )
 */
        __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
        __pyx_t_8.memview = NULL;
        __pyx_t_8.data = NULL;
        __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
        __pyx_t_9.memview = NULL;
        __pyx_t_9.data = NULL;

        /* "chromo/fields.pyx":170
 *                         vec_dot3(poly.r_trial[inds[i]], poly.r_trial[inds[i]])
 *                     )
 *                     if dist > self.confine_length:             # <<<<<<<<<<<<<<
 *                         num_out_of_bounds += 1
 *             elif trial == 0:
 */
        __pyx_t_1 = ((__pyx_v_dist > __pyx_v_self->confine_length) != 0);
        if (__pyx_t_1) {

          /* "chromo/fields.pyx":171
 *                     )
 *                     if dist > self.confine_length:
 *                         num_out_of_bounds += 1             # <<<<<<<<<<<<<<
 *             elif trial == 0:
 *                 for i in range(n_beads):
 */
          __pyx_v_num_out_of_bounds = (__pyx_v_num_out_of_bounds + 1);

          /* "chromo/fields.pyx":170
 *                         vec_dot3(poly.r_trial[inds[i]], poly.r_trial[inds[i]])
 *                     )
 *                     if dist > self.confine_length:             # <<<<<<<<<<<<<<
 *                         num_out_of_bounds += 1
 *             elif trial == 0:
 */
        }
      }

      /* "chromo/fields.pyx":165
 *         # Spherical confinement
 *         elif self.confine_type == "Spherical":
 *             if trial == 1:             # <<<<<<<<<<<<<<
 *                 for i in range(n_beads):
 *                     dist = sqrt(
 */
      break;
      case 0:

      /* "chromo/fields.pyx":173
 *                         num_out_of_bounds += 1
 *             elif trial == 0:
 *                 for i in range(n_beads):             # <<<<<<<<<<<<<<
 *                     dist = sqrt(vec_dot3(poly.r[inds[i]], poly.r[inds[i]]))
 *                     if dist > self.confine_length:
 */
      __pyx_t_3 = __pyx_v_n_beads;
      __pyx_t_4 = __pyx_t_3;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_v_i = __pyx_t_5;

        /* "chromo/fields.pyx":174
 *             elif trial == 0:
 *                 for i in range(n_beads):
 *                     dist = sqrt(vec_dot3(poly.r[inds[i]], poly.r[inds[i]]))             # <<<<<<<<<<<<<<
 *                     if dist > self.confine_length:
 *                         num_out_of_bounds += 1
 */
        if (unlikely(!__pyx_v_poly->r.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 174, __pyx_L1_error)}
        __pyx_t_6 = __pyx_v_i;
        __pyx_t_7 = -1;
        if (__pyx_t_6 < 0) {
          __pyx_t_6 += __pyx_v_inds.shape[0];
          if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_6 >= __pyx_v_inds.shape[0])) __pyx_t_7 = 0;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 174, __pyx_L1_error)
        }
        __pyx_t_9.data = __pyx_v_poly->r.data;
        __pyx_t_9.memview = __pyx_v_poly->r.memview;
        __PYX_INC_MEMVIEW(&__pyx_t_9, 0);
        {
    Py_ssize_t __pyx_tmp_idx = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_6 * __pyx_v_inds.strides[0]) )));
        Py_ssize_t __pyx_tmp_shape = __pyx_v_poly->r.shape[0];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_poly->r.strides[0];
        if (__pyx_tmp_idx < 0)
            __pyx_tmp_idx += __pyx_tmp_shape;
        if (unlikely(!__Pyx_is_valid_index(__pyx_tmp_idx, __pyx_tmp_shape))) {
            PyErr_SetString(PyExc_IndexError,
                            "Index out of bounds (axis 0)");
            __PYX_ERR(0, 174, __pyx_L1_error)
        }
        __pyx_t_9.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_9.shape[0] = __pyx_v_poly->r.shape[1];
__pyx_t_9.strides[0] = __pyx_v_poly->r.strides[1];
    __pyx_t_9.suboffsets[0] = -1;

if (unlikely(!__pyx_v_poly->r.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 174, __pyx_L1_error)}
        __pyx_t_6 = __pyx_v_i;
        __pyx_t_7 = -1;
        if (__pyx_t_6 < 0) {
          __pyx_t_6 += __pyx_v_inds.shape[0];
          if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_6 >= __pyx_v_inds.shape[0])) __pyx_t_7 = 0;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 174, __pyx_L1_error)
        }
        __pyx_t_8.data = __pyx_v_poly->r.data;
        __pyx_t_8.memview = __pyx_v_poly->r.memview;
        __PYX_INC_MEMVIEW(&__pyx_t_8, 0);
        {
    Py_ssize_t __pyx_tmp_idx = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_6 * __pyx_v_inds.strides[0]) )));
        Py_ssize_t __pyx_tmp_shape = __pyx_v_poly->r.shape[0];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_poly->r.strides[0];
        if (__pyx_tmp_idx < 0)
            __pyx_tmp_idx += __pyx_tmp_shape;
        if (unlikely(!__Pyx_is_valid_index(__pyx_tmp_idx, __pyx_tmp_shape))) {
            PyErr_SetString(PyExc_IndexError,
                            "Index out of bounds (axis 0)");
            __PYX_ERR(0, 174, __pyx_L1_error)
        }
        __pyx_t_8.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_8.shape[0] = __pyx_v_poly->r.shape[1];
__pyx_t_8.strides[0] = __pyx_v_poly->r.strides[1];
    __pyx_t_8.suboffsets[0] = -1;

__pyx_v_dist = sqrt(__pyx_f_6chromo_4util_6linalg_vec_dot3(__pyx_t_9, __pyx_t_8));
        __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
        __pyx_t_9.memview = NULL;
        __pyx_t_9.data = NULL;
        __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
        __pyx_t_8.memview = NULL;
        __pyx_t_8.data = NULL;

        /* "chromo/fields.pyx":175
 *                 for i in range(n_beads):
 *                     dist = sqrt(vec_dot3(poly.r[inds[i]], poly.r[inds[i]]))
 *                     if dist > self.confine_length:             # <<<<<<<<<<<<<<
 *                         num_out_of_bounds += 1
 *             else:
 */
        __pyx_t_1 = ((__pyx_v_dist > __pyx_v_self->confine_length) != 0);
        if (__pyx_t_1) {

          /* "chromo/fields.pyx":176
 *                     dist = sqrt(vec_dot3(poly.r[inds[i]], poly.r[inds[i]]))
 *                     if dist > self.confine_length:
 *                         num_out_of_bounds += 1             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError("Trial flag " + str(trial) + " not found.")
 */
          __pyx_v_num_out_of_bounds = (__pyx_v_num_out_of_bounds + 1);

          /* "chromo/fields.pyx":175
 *                 for i in range(n_beads):
 *                     dist = sqrt(vec_dot3(poly.r[inds[i]], poly.r[inds[i]]))
 *                     if dist > self.confine_length:             # <<<<<<<<<<<<<<
 *                         num_out_of_bounds += 1
 *             else:
 */
        }
      }

      /* "chromo/fields.pyx":172
 *                     if dist > self.confine_length:
 *                         num_out_of_bounds += 1
 *             elif trial == 0:             # <<<<<<<<<<<<<<
 *                 for i in range(n_beads):
 *                     dist = sqrt(vec_dot3(poly.r[inds[i]], poly.r[inds[i]]))
 */
      break;
      default:

      /* "chromo/fields.pyx":178
 *                         num_out_of_bounds += 1
 *             else:
 *                 raise ValueError("Trial flag " + str(trial) + " not found.")             # <<<<<<<<<<<<<<
 *             return num_out_of_bounds * E_HUGE
 * 
 */
      __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_trial); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 178, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 178, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyNumber_Add(__pyx_kp_s_Trial_flag, __pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 178, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = PyNumber_Add(__pyx_t_10, __pyx_kp_s_not_found); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 178, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 178, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(0, 178, __pyx_L1_error)
      break;
    }

    /* "chromo/fields.pyx":179
 *             else:
 *                 raise ValueError("Trial flag " + str(trial) + " not found.")
 *             return num_out_of_bounds * E_HUGE             # <<<<<<<<<<<<<<
 * 
 *         # Cubical confinement
 */
    __pyx_r = (__pyx_v_num_out_of_bounds * __pyx_v_6chromo_6fields_E_HUGE);
    goto __pyx_L0;

    /* "chromo/fields.pyx":164
 * 
 *         # Spherical confinement
 *         elif self.confine_type == "Spherical":             # <<<<<<<<<<<<<<
 *             if trial == 1:
 *                 for i in range(n_beads):
 */
  }

  /* "chromo/fields.pyx":182
 * 
 *         # Cubical confinement
 *         elif self.confine_type == "Cubical":             # <<<<<<<<<<<<<<
 *             if trial == 1:
 *                 for i in range(n_beads):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_self->confine_type, __pyx_n_s_Cubical, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 182, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "chromo/fields.pyx":183
 *         # Cubical confinement
 *         elif self.confine_type == "Cubical":
 *             if trial == 1:             # <<<<<<<<<<<<<<
 *                 for i in range(n_beads):
 *                     for j in range(3):
 */
    switch (__pyx_v_trial) {
      case 1:

      /* "chromo/fields.pyx":184
 *         elif self.confine_type == "Cubical":
 *             if trial == 1:
 *                 for i in range(n_beads):             # <<<<<<<<<<<<<<
 *                     for j in range(3):
 *                         if np.abs(poly.r_trial[inds[i], j]) > self.confine_length / 2:
 */
      __pyx_t_3 = __pyx_v_n_beads;
      __pyx_t_4 = __pyx_t_3;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_v_i = __pyx_t_5;

        /* "chromo/fields.pyx":185
 *             if trial == 1:
 *                 for i in range(n_beads):
 *                     for j in range(3):             # <<<<<<<<<<<<<<
 *                         if np.abs(poly.r_trial[inds[i], j]) > self.confine_length / 2:
 *                             num_out_of_bounds += 1
 */
        for (__pyx_t_12 = 0; __pyx_t_12 < 3; __pyx_t_12+=1) {
          __pyx_v_j = __pyx_t_12;

          /* "chromo/fields.pyx":186
 *                 for i in range(n_beads):
 *                     for j in range(3):
 *                         if np.abs(poly.r_trial[inds[i], j]) > self.confine_length / 2:             # <<<<<<<<<<<<<<
 *                             num_out_of_bounds += 1
 *             elif trial == 0:
 */
          __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 186, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_abs); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 186, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_v_poly->r_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 186, __pyx_L1_error)}
          __pyx_t_6 = __pyx_v_i;
          __pyx_t_7 = -1;
          if (__pyx_t_6 < 0) {
            __pyx_t_6 += __pyx_v_inds.shape[0];
            if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
          } else if (unlikely(__pyx_t_6 >= __pyx_v_inds.shape[0])) __pyx_t_7 = 0;
          if (unlikely(__pyx_t_7 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_7);
            __PYX_ERR(0, 186, __pyx_L1_error)
          }
          __pyx_t_14 = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_6 * __pyx_v_inds.strides[0]) )));
          __pyx_t_15 = __pyx_v_j;
          __pyx_t_7 = -1;
          if (__pyx_t_14 < 0) {
            __pyx_t_14 += __pyx_v_poly->r_trial.shape[0];
            if (unlikely(__pyx_t_14 < 0)) __pyx_t_7 = 0;
          } else if (unlikely(__pyx_t_14 >= __pyx_v_poly->r_trial.shape[0])) __pyx_t_7 = 0;
          if (__pyx_t_15 < 0) {
            __pyx_t_15 += __pyx_v_poly->r_trial.shape[1];
            if (unlikely(__pyx_t_15 < 0)) __pyx_t_7 = 1;
          } else if (unlikely(__pyx_t_15 >= __pyx_v_poly->r_trial.shape[1])) __pyx_t_7 = 1;
          if (unlikely(__pyx_t_7 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_7);
            __PYX_ERR(0, 186, __pyx_L1_error)
          }
          __pyx_t_11 = PyFloat_FromDouble((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_poly->r_trial.data + __pyx_t_14 * __pyx_v_poly->r_trial.strides[0]) )) + __pyx_t_15)) )))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 186, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_16 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
            __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_13);
            if (likely(__pyx_t_16)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
              __Pyx_INCREF(__pyx_t_16);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_13, function);
            }
          }
          __pyx_t_10 = (__pyx_t_16) ? __Pyx_PyObject_Call2Args(__pyx_t_13, __pyx_t_16, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_11);
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 186, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_13 = PyFloat_FromDouble((__pyx_v_self->confine_length / 2.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 186, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_11 = PyObject_RichCompare(__pyx_t_10, __pyx_t_13, Py_GT); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 186, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 186, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (__pyx_t_2) {

            /* "chromo/fields.pyx":187
 *                     for j in range(3):
 *                         if np.abs(poly.r_trial[inds[i], j]) > self.confine_length / 2:
 *                             num_out_of_bounds += 1             # <<<<<<<<<<<<<<
 *             elif trial == 0:
 *                 if trial == 1:
 */
            __pyx_v_num_out_of_bounds = (__pyx_v_num_out_of_bounds + 1);

            /* "chromo/fields.pyx":186
 *                 for i in range(n_beads):
 *                     for j in range(3):
 *                         if np.abs(poly.r_trial[inds[i], j]) > self.confine_length / 2:             # <<<<<<<<<<<<<<
 *                             num_out_of_bounds += 1
 *             elif trial == 0:
 */
          }
        }
      }

      /* "chromo/fields.pyx":183
 *         # Cubical confinement
 *         elif self.confine_type == "Cubical":
 *             if trial == 1:             # <<<<<<<<<<<<<<
 *                 for i in range(n_beads):
 *                     for j in range(3):
 */
      break;
      case 0:

      /* "chromo/fields.pyx":189
 *                             num_out_of_bounds += 1
 *             elif trial == 0:
 *                 if trial == 1:             # <<<<<<<<<<<<<<
 *                     for i in range(n_beads):
 *                         for j in range(3):
 */
      __pyx_t_2 = ((__pyx_v_trial == 1) != 0);
      if (__pyx_t_2) {

        /* "chromo/fields.pyx":190
 *             elif trial == 0:
 *                 if trial == 1:
 *                     for i in range(n_beads):             # <<<<<<<<<<<<<<
 *                         for j in range(3):
 *                             if np.abs(poly.r[inds[i], j]) > self.confine_length / 2:
 */
        __pyx_t_3 = __pyx_v_n_beads;
        __pyx_t_4 = __pyx_t_3;
        for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
          __pyx_v_i = __pyx_t_5;

          /* "chromo/fields.pyx":191
 *                 if trial == 1:
 *                     for i in range(n_beads):
 *                         for j in range(3):             # <<<<<<<<<<<<<<
 *                             if np.abs(poly.r[inds[i], j]) > self.confine_length / 2:
 *                                 num_out_of_bounds += 1
 */
          for (__pyx_t_12 = 0; __pyx_t_12 < 3; __pyx_t_12+=1) {
            __pyx_v_j = __pyx_t_12;

            /* "chromo/fields.pyx":192
 *                     for i in range(n_beads):
 *                         for j in range(3):
 *                             if np.abs(poly.r[inds[i], j]) > self.confine_length / 2:             # <<<<<<<<<<<<<<
 *                                 num_out_of_bounds += 1
 *             else:
 */
            __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_np); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 192, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_abs); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 192, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            if (unlikely(!__pyx_v_poly->r.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 192, __pyx_L1_error)}
            __pyx_t_6 = __pyx_v_i;
            __pyx_t_7 = -1;
            if (__pyx_t_6 < 0) {
              __pyx_t_6 += __pyx_v_inds.shape[0];
              if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
            } else if (unlikely(__pyx_t_6 >= __pyx_v_inds.shape[0])) __pyx_t_7 = 0;
            if (unlikely(__pyx_t_7 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_7);
              __PYX_ERR(0, 192, __pyx_L1_error)
            }
            __pyx_t_15 = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_6 * __pyx_v_inds.strides[0]) )));
            __pyx_t_14 = __pyx_v_j;
            __pyx_t_7 = -1;
            if (__pyx_t_15 < 0) {
              __pyx_t_15 += __pyx_v_poly->r.shape[0];
              if (unlikely(__pyx_t_15 < 0)) __pyx_t_7 = 0;
            } else if (unlikely(__pyx_t_15 >= __pyx_v_poly->r.shape[0])) __pyx_t_7 = 0;
            if (__pyx_t_14 < 0) {
              __pyx_t_14 += __pyx_v_poly->r.shape[1];
              if (unlikely(__pyx_t_14 < 0)) __pyx_t_7 = 1;
            } else if (unlikely(__pyx_t_14 >= __pyx_v_poly->r.shape[1])) __pyx_t_7 = 1;
            if (unlikely(__pyx_t_7 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_7);
              __PYX_ERR(0, 192, __pyx_L1_error)
            }
            __pyx_t_13 = PyFloat_FromDouble((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_poly->r.data + __pyx_t_15 * __pyx_v_poly->r.strides[0]) )) + __pyx_t_14)) )))); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 192, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_16 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
              __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_10);
              if (likely(__pyx_t_16)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
                __Pyx_INCREF(__pyx_t_16);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_10, function);
              }
            }
            __pyx_t_11 = (__pyx_t_16) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_16, __pyx_t_13) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_13);
            __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 192, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_10 = PyFloat_FromDouble((__pyx_v_self->confine_length / 2.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 192, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_13 = PyObject_RichCompare(__pyx_t_11, __pyx_t_10, Py_GT); __Pyx_XGOTREF(__pyx_t_13); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 192, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_13); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 192, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            if (__pyx_t_2) {

              /* "chromo/fields.pyx":193
 *                         for j in range(3):
 *                             if np.abs(poly.r[inds[i], j]) > self.confine_length / 2:
 *                                 num_out_of_bounds += 1             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError("Trial flag " + str(trial) + " not found.")
 */
              __pyx_v_num_out_of_bounds = (__pyx_v_num_out_of_bounds + 1);

              /* "chromo/fields.pyx":192
 *                     for i in range(n_beads):
 *                         for j in range(3):
 *                             if np.abs(poly.r[inds[i], j]) > self.confine_length / 2:             # <<<<<<<<<<<<<<
 *                                 num_out_of_bounds += 1
 *             else:
 */
            }
          }
        }

        /* "chromo/fields.pyx":189
 *                             num_out_of_bounds += 1
 *             elif trial == 0:
 *                 if trial == 1:             # <<<<<<<<<<<<<<
 *                     for i in range(n_beads):
 *                         for j in range(3):
 */
      }

      /* "chromo/fields.pyx":188
 *                         if np.abs(poly.r_trial[inds[i], j]) > self.confine_length / 2:
 *                             num_out_of_bounds += 1
 *             elif trial == 0:             # <<<<<<<<<<<<<<
 *                 if trial == 1:
 *                     for i in range(n_beads):
 */
      break;
      default:

      /* "chromo/fields.pyx":195
 *                                 num_out_of_bounds += 1
 *             else:
 *                 raise ValueError("Trial flag " + str(trial) + " not found.")             # <<<<<<<<<<<<<<
 *             return num_out_of_bounds * E_HUGE
 * 
 */
      __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_trial); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_13); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = PyNumber_Add(__pyx_kp_s_Trial_flag, __pyx_t_10); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyNumber_Add(__pyx_t_13, __pyx_kp_s_not_found); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_10); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_Raise(__pyx_t_13, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __PYX_ERR(0, 195, __pyx_L1_error)
      break;
    }

    /* "chromo/fields.pyx":196
 *             else:
 *                 raise ValueError("Trial flag " + str(trial) + " not found.")
 *             return num_out_of_bounds * E_HUGE             # <<<<<<<<<<<<<<
 * 
 *         # Confinement type not found
 */
    __pyx_r = (__pyx_v_num_out_of_bounds * __pyx_v_6chromo_6fields_E_HUGE);
    goto __pyx_L0;

    /* "chromo/fields.pyx":182
 * 
 *         # Cubical confinement
 *         elif self.confine_type == "Cubical":             # <<<<<<<<<<<<<<
 *             if trial == 1:
 *                 for i in range(n_beads):
 */
  }

  /* "chromo/fields.pyx":200
 *         # Confinement type not found
 *         else:
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 "Confinement type " + self.confine_type + " not found."
 *             )
 */
  /*else*/ {

    /* "chromo/fields.pyx":201
 *         else:
 *             raise ValueError(
 *                 "Confinement type " + self.confine_type + " not found."             # <<<<<<<<<<<<<<
 *             )
 * 
 */
    __pyx_t_13 = PyNumber_Add(__pyx_kp_s_Confinement_type, __pyx_v_self->confine_type); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_10 = PyNumber_Add(__pyx_t_13, __pyx_kp_s_not_found); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

    /* "chromo/fields.pyx":200
 *         # Confinement type not found
 *         else:
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 "Confinement type " + self.confine_type + " not found."
 *             )
 */
    __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_10); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_Raise(__pyx_t_13, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __PYX_ERR(0, 200, __pyx_L1_error)
  }

  /* "chromo/fields.pyx":121
 *         pass
 * 
 *     cdef double get_confinement_dE(             # <<<<<<<<<<<<<<
 *         self, poly.PolymerBase poly, long[:] inds, long n_beads, int trial
 *     ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_WriteUnraisable("chromo.fields.FieldBase.get_confinement_dE", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":10
 * 
 * cdef class FieldBase:
 *     cdef public list polymers             # <<<<<<<<<<<<<<
 *     cdef public long n_polymers
 *     cdef public binders
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_9FieldBase_8polymers_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_9FieldBase_8polymers_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_9FieldBase_8polymers___get__(((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_9FieldBase_8polymers___get__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 10, 0, __PYX_ERR(1, 10, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->polymers);
  __pyx_r = __pyx_v_self->polymers;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.FieldBase.polymers.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_9FieldBase_8polymers_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_9FieldBase_8polymers_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_9FieldBase_8polymers_2__set__(((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_9FieldBase_8polymers_2__set__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 10, 0, __PYX_ERR(1, 10, __pyx_L1_error));
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 10, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->polymers);
  __Pyx_DECREF(__pyx_v_self->polymers);
  __pyx_v_self->polymers = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.FieldBase.polymers.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_9FieldBase_8polymers_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6chromo_6fields_9FieldBase_8polymers_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_9FieldBase_8polymers_4__del__(((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_9FieldBase_8polymers_4__del__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 10, 0, __PYX_ERR(1, 10, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->polymers);
  __Pyx_DECREF(__pyx_v_self->polymers);
  __pyx_v_self->polymers = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.FieldBase.polymers.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":11
 * cdef class FieldBase:
 *     cdef public list polymers
 *     cdef public long n_polymers             # <<<<<<<<<<<<<<
 *     cdef public binders
 *     cdef public str confine_type
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_9FieldBase_10n_polymers_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_9FieldBase_10n_polymers_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_9FieldBase_10n_polymers___get__(((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_9FieldBase_10n_polymers___get__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 11, 0, __PYX_ERR(1, 11, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->n_polymers); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.FieldBase.n_polymers.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_9FieldBase_10n_polymers_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_9FieldBase_10n_polymers_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_9FieldBase_10n_polymers_2__set__(((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_9FieldBase_10n_polymers_2__set__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 11, 0, __PYX_ERR(1, 11, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 11, __pyx_L1_error)
  __pyx_v_self->n_polymers = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.FieldBase.n_polymers.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":12
 *     cdef public list polymers
 *     cdef public long n_polymers
 *     cdef public binders             # <<<<<<<<<<<<<<
 *     cdef public str confine_type
 *     cdef public double confine_length
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_9FieldBase_7binders_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_9FieldBase_7binders_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_9FieldBase_7binders___get__(((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_9FieldBase_7binders___get__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 12, 0, __PYX_ERR(1, 12, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->binders);
  __pyx_r = __pyx_v_self->binders;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.FieldBase.binders.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_9FieldBase_7binders_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_9FieldBase_7binders_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_9FieldBase_7binders_2__set__(((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_9FieldBase_7binders_2__set__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 12, 0, __PYX_ERR(1, 12, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->binders);
  __Pyx_DECREF(__pyx_v_self->binders);
  __pyx_v_self->binders = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.FieldBase.binders.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_9FieldBase_7binders_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6chromo_6fields_9FieldBase_7binders_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_9FieldBase_7binders_4__del__(((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_9FieldBase_7binders_4__del__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 12, 0, __PYX_ERR(1, 12, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->binders);
  __Pyx_DECREF(__pyx_v_self->binders);
  __pyx_v_self->binders = Py_None;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.FieldBase.binders.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":13
 *     cdef public long n_polymers
 *     cdef public binders
 *     cdef public str confine_type             # <<<<<<<<<<<<<<
 *     cdef public double confine_length
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_9FieldBase_12confine_type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_9FieldBase_12confine_type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_9FieldBase_12confine_type___get__(((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_9FieldBase_12confine_type___get__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 13, 0, __PYX_ERR(1, 13, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->confine_type);
  __pyx_r = __pyx_v_self->confine_type;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.FieldBase.confine_type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_9FieldBase_12confine_type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_9FieldBase_12confine_type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_9FieldBase_12confine_type_2__set__(((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_9FieldBase_12confine_type_2__set__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 13, 0, __PYX_ERR(1, 13, __pyx_L1_error));
  if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->confine_type);
  __Pyx_DECREF(__pyx_v_self->confine_type);
  __pyx_v_self->confine_type = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.FieldBase.confine_type.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_9FieldBase_12confine_type_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6chromo_6fields_9FieldBase_12confine_type_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_9FieldBase_12confine_type_4__del__(((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_9FieldBase_12confine_type_4__del__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 13, 0, __PYX_ERR(1, 13, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->confine_type);
  __Pyx_DECREF(__pyx_v_self->confine_type);
  __pyx_v_self->confine_type = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.FieldBase.confine_type.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":14
 *     cdef public binders
 *     cdef public str confine_type
 *     cdef public double confine_length             # <<<<<<<<<<<<<<
 * 
 *     cdef double compute_dE(
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_9FieldBase_14confine_length_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_9FieldBase_14confine_length_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_9FieldBase_14confine_length___get__(((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_9FieldBase_14confine_length___get__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 14, 0, __PYX_ERR(1, 14, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->confine_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.FieldBase.confine_length.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_9FieldBase_14confine_length_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_9FieldBase_14confine_length_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_9FieldBase_14confine_length_2__set__(((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_9FieldBase_14confine_length_2__set__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 14, 0, __PYX_ERR(1, 14, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 14, __pyx_L1_error)
  __pyx_v_self->confine_length = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.FieldBase.confine_length.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_9FieldBase_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_9FieldBase_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_9FieldBase_6__reduce_cython__(((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_9FieldBase_6__reduce_cython__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[2], 1, 0, __PYX_ERR(2, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.binders, self.confine_length, self.confine_type, self.n_polymers, self.polymers)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->confine_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_self->n_polymers); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_self->binders);
  __Pyx_GIVEREF(__pyx_v_self->binders);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self->binders);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->confine_type);
  __Pyx_GIVEREF(__pyx_v_self->confine_type);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_self->confine_type);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->polymers);
  __Pyx_GIVEREF(__pyx_v_self->polymers);
  PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_v_self->polymers);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.binders, self.confine_length, self.confine_type, self.n_polymers, self.polymers)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_3 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v__dict = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":7
 *     state = (self.binders, self.confine_length, self.confine_type, self.n_polymers, self.polymers)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_4 = (__pyx_v__dict != Py_None);
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v__dict);
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.binders is not None or self.confine_type is not None or self.polymers is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.binders, self.confine_length, self.confine_type, self.n_polymers, self.polymers)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.binders is not None or self.confine_type is not None or self.polymers is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_FieldBase, (type(self), 0x20a4277, None), state
 */
  /*else*/ {
    __pyx_t_4 = (__pyx_v_self->binders != Py_None);
    __pyx_t_6 = (__pyx_t_4 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_6 = (__pyx_v_self->confine_type != ((PyObject*)Py_None));
    __pyx_t_4 = (__pyx_t_6 != 0);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_5 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->polymers != ((PyObject*)Py_None));
    __pyx_t_6 = (__pyx_t_4 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_5;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.binders is not None or self.confine_type is not None or self.polymers is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_FieldBase, (type(self), 0x20a4277, None), state
 *     else:
 */
  __pyx_t_5 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_5) {

    /* "(tree fragment)":13
 *         use_setstate = self.binders is not None or self.confine_type is not None or self.polymers is not None
 *     if use_setstate:
 *         return __pyx_unpickle_FieldBase, (type(self), 0x20a4277, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_FieldBase, (type(self), 0x20a4277, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_FieldBase); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_34226807);
    __Pyx_GIVEREF(__pyx_int_34226807);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_34226807);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_3, 2, Py_None);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.binders is not None or self.confine_type is not None or self.polymers is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_FieldBase, (type(self), 0x20a4277, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_FieldBase, (type(self), 0x20a4277, None), state
 *     else:
 *         return __pyx_unpickle_FieldBase, (type(self), 0x20a4277, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_FieldBase__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_FieldBase); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_34226807);
    __Pyx_GIVEREF(__pyx_int_34226807);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_34226807);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_state);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("chromo.fields.FieldBase.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_FieldBase, (type(self), 0x20a4277, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_FieldBase__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_9FieldBase_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_9FieldBase_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_9FieldBase_8__setstate_cython__(((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_9FieldBase_8__setstate_cython__(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[2], 16, 0, __PYX_ERR(2, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_FieldBase, (type(self), 0x20a4277, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_FieldBase__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6chromo_6fields___pyx_unpickle_FieldBase__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_FieldBase, (type(self), 0x20a4277, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_FieldBase__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.FieldBase.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":221
 *     """
 * 
 *     def __init__(self, cls, **kwargs):             # <<<<<<<<<<<<<<
 *         """Construct our Reconstructor.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_13Reconstructor_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6chromo_6fields_13Reconstructor___init__[] = "Construct our Reconstructor.\n\n        Parameters\n        ----------\n        field_constructor : cls\n            Class from which the field will be instantiated\n        ";
static PyMethodDef __pyx_mdef_6chromo_6fields_13Reconstructor_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6chromo_6fields_13Reconstructor_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6chromo_6fields_13Reconstructor___init__};
static PyObject *__pyx_pw_6chromo_6fields_13Reconstructor_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_cls = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_cls,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cls)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 221, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 221, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_cls = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 221, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("chromo.fields.Reconstructor.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6chromo_6fields_13Reconstructor___init__(__pyx_self, __pyx_v_self, __pyx_v_cls, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_13Reconstructor___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_cls, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__2)
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 221, 0, __PYX_ERR(0, 221, __pyx_L1_error));

  /* "chromo/fields.pyx":229
 *             Class from which the field will be instantiated
 *         """
 *         self.field_constructor = cls             # <<<<<<<<<<<<<<
 *         self.kwargs = kwargs
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_field_constructor, __pyx_v_cls) < 0) __PYX_ERR(0, 229, __pyx_L1_error)

  /* "chromo/fields.pyx":230
 *         """
 *         self.field_constructor = cls
 *         self.kwargs = kwargs             # <<<<<<<<<<<<<<
 * 
 *     def finalize(self, polymers, binders) -> FieldBase:
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_kwargs, __pyx_v_kwargs) < 0) __PYX_ERR(0, 230, __pyx_L1_error)

  /* "chromo/fields.pyx":221
 *     """
 * 
 *     def __init__(self, cls, **kwargs):             # <<<<<<<<<<<<<<
 *         """Construct our Reconstructor.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.Reconstructor.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":232
 *         self.kwargs = kwargs
 * 
 *     def finalize(self, polymers, binders) -> FieldBase:             # <<<<<<<<<<<<<<
 *         """Finish construction of appropriate `Field` object.
 * 
 */

/* Python wrapper */
static struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_pw_6chromo_6fields_13Reconstructor_3finalize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6chromo_6fields_13Reconstructor_2finalize[] = "Finish construction of appropriate `Field` object.\n\n        Parameters\n        ----------\n        polymers : List[PolymerBase]\n            List of polymers contained in the field\n        binders : pd.DataFrame\n            Table representing reader proteins bound to polymers in the field\n\n        Returns\n        -------\n        FieldBase\n            Field representation of discretized space containing polymers\n        ";
static PyMethodDef __pyx_mdef_6chromo_6fields_13Reconstructor_3finalize = {"finalize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6chromo_6fields_13Reconstructor_3finalize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6chromo_6fields_13Reconstructor_2finalize};
static struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_pw_6chromo_6fields_13Reconstructor_3finalize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_polymers = 0;
  PyObject *__pyx_v_binders = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("finalize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_polymers,&__pyx_n_s_binders,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_polymers)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("finalize", 1, 3, 3, 1); __PYX_ERR(0, 232, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_binders)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("finalize", 1, 3, 3, 2); __PYX_ERR(0, 232, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "finalize") < 0)) __PYX_ERR(0, 232, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_polymers = values[1];
    __pyx_v_binders = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("finalize", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 232, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chromo.fields.Reconstructor.finalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6chromo_6fields_13Reconstructor_2finalize(__pyx_self, __pyx_v_self, __pyx_v_polymers, __pyx_v_binders);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_pf_6chromo_6fields_13Reconstructor_2finalize(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_polymers, PyObject *__pyx_v_binders) {
  struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__3)
  __Pyx_RefNannySetupContext("finalize", 0);
  __Pyx_TraceCall("finalize", __pyx_f[0], 232, 0, __PYX_ERR(0, 232, __pyx_L1_error));

  /* "chromo/fields.pyx":247
 *             Field representation of discretized space containing polymers
 *         """
 *         return self.field_constructor(             # <<<<<<<<<<<<<<
 *             polymers=polymers, binders=binders, **self.kwargs
 *         )
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_field_constructor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "chromo/fields.pyx":248
 *         """
 *         return self.field_constructor(
 *             polymers=polymers, binders=binders, **self.kwargs             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_polymers, __pyx_v_polymers) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_binders, __pyx_v_binders) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
    __PYX_ERR(0, 248, __pyx_L1_error)
  }
  if (__Pyx_MergeKeywords(__pyx_t_2, __pyx_t_3) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "chromo/fields.pyx":247
 *             Field representation of discretized space containing polymers
 *         """
 *         return self.field_constructor(             # <<<<<<<<<<<<<<
 *             polymers=polymers, binders=binders, **self.kwargs
 *         )
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6chromo_6fields_FieldBase))))) __PYX_ERR(0, 247, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "chromo/fields.pyx":232
 *         self.kwargs = kwargs
 * 
 *     def finalize(self, polymers, binders) -> FieldBase:             # <<<<<<<<<<<<<<
 *         """Finish construction of appropriate `Field` object.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("chromo.fields.Reconstructor.finalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":252
 * 
 *     @classmethod
 *     def from_file(cls, path: Path) -> FieldBase:             # <<<<<<<<<<<<<<
 *         """Assume class name is encoded in file name.
 * 
 */

/* Python wrapper */
static struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_pw_6chromo_6fields_13Reconstructor_5from_file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6chromo_6fields_13Reconstructor_4from_file[] = "Assume class name is encoded in file name.\n\n        Parameters\n        ----------\n        path : Path\n            File path object directed to the file defining the field\n\n        Returns\n        -------\n        FieldBase\n            Field representation of discretized space containing polymers\n        ";
static PyMethodDef __pyx_mdef_6chromo_6fields_13Reconstructor_5from_file = {"from_file", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6chromo_6fields_13Reconstructor_5from_file, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6chromo_6fields_13Reconstructor_4from_file};
static struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_pw_6chromo_6fields_13Reconstructor_5from_file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_cls = 0;
  PyObject *__pyx_v_path = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_file (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cls,&__pyx_n_s_path,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cls)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("from_file", 1, 2, 2, 1); __PYX_ERR(0, 252, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_file") < 0)) __PYX_ERR(0, 252, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cls = values[0];
    __pyx_v_path = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_file", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 252, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chromo.fields.Reconstructor.from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6chromo_6fields_13Reconstructor_4from_file(__pyx_self, __pyx_v_cls, __pyx_v_path);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_pf_6chromo_6fields_13Reconstructor_4from_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cls, PyObject *__pyx_v_path) {
  PyObject *__pyx_v_constructor = NULL;
  PyObject *__pyx_v_kwargs = NULL;
  struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__4)
  __Pyx_RefNannySetupContext("from_file", 0);
  __Pyx_TraceCall("from_file", __pyx_f[0], 252, 0, __PYX_ERR(0, 252, __pyx_L1_error));

  /* "chromo/fields.pyx":265
 *             Field representation of discretized space containing polymers
 *         """
 *         constructor = globals()[path.name]             # <<<<<<<<<<<<<<
 *         kwargs = pd.read_csv(path).iloc[0].to_dict()
 *         return cls(constructor, **kwargs)
 */
  __pyx_t_1 = __Pyx_Globals(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_path, __pyx_n_s_name_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_constructor = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "chromo/fields.pyx":266
 *         """
 *         constructor = globals()[path.name]
 *         kwargs = pd.read_csv(path).iloc[0].to_dict()             # <<<<<<<<<<<<<<
 *         return cls(constructor, **kwargs)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_read_csv); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_1, __pyx_v_path) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_path);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_iloc); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_to_dict); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_kwargs = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "chromo/fields.pyx":267
 *         constructor = globals()[path.name]
 *         kwargs = pd.read_csv(path).iloc[0].to_dict()
 *         return cls(constructor, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def __call__(self, polymers, binders) -> FieldBase:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_constructor);
  __Pyx_GIVEREF(__pyx_v_constructor);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_constructor);
  if (unlikely(__pyx_v_kwargs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
    __PYX_ERR(0, 267, __pyx_L1_error)
  }
  if (likely(PyDict_CheckExact(__pyx_v_kwargs))) {
    __pyx_t_4 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    __pyx_t_4 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_v_kwargs, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  }
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_v_cls, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6chromo_6fields_FieldBase))))) __PYX_ERR(0, 267, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chromo/fields.pyx":252
 * 
 *     @classmethod
 *     def from_file(cls, path: Path) -> FieldBase:             # <<<<<<<<<<<<<<
 *         """Assume class name is encoded in file name.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("chromo.fields.Reconstructor.from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_constructor);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":269
 *         return cls(constructor, **kwargs)
 * 
 *     def __call__(self, polymers, binders) -> FieldBase:             # <<<<<<<<<<<<<<
 *         """Synonym for `Reconstructor.finalize()`.
 * 
 */

/* Python wrapper */
static struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_pw_6chromo_6fields_13Reconstructor_7__call__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6chromo_6fields_13Reconstructor_6__call__[] = "Synonym for `Reconstructor.finalize()`.\n\n        Notes\n        -----\n        See documentation for `Reconstructor.finalize()` for additional\n        details and parameter/returns definitions.\n        ";
static PyMethodDef __pyx_mdef_6chromo_6fields_13Reconstructor_7__call__ = {"__call__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6chromo_6fields_13Reconstructor_7__call__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6chromo_6fields_13Reconstructor_6__call__};
static struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_pw_6chromo_6fields_13Reconstructor_7__call__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_polymers = 0;
  PyObject *__pyx_v_binders = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_polymers,&__pyx_n_s_binders,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_polymers)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__call__", 1, 3, 3, 1); __PYX_ERR(0, 269, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_binders)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__call__", 1, 3, 3, 2); __PYX_ERR(0, 269, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__call__") < 0)) __PYX_ERR(0, 269, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_polymers = values[1];
    __pyx_v_binders = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__call__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 269, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chromo.fields.Reconstructor.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6chromo_6fields_13Reconstructor_6__call__(__pyx_self, __pyx_v_self, __pyx_v_polymers, __pyx_v_binders);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_pf_6chromo_6fields_13Reconstructor_6__call__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_polymers, PyObject *__pyx_v_binders) {
  struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__5)
  __Pyx_RefNannySetupContext("__call__", 0);
  __Pyx_TraceCall("__call__", __pyx_f[0], 269, 0, __PYX_ERR(0, 269, __pyx_L1_error));

  /* "chromo/fields.pyx":277
 *         details and parameter/returns definitions.
 *         """
 *         return self.finalize(polymers, binders)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_finalize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_polymers, __pyx_v_binders};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_polymers, __pyx_v_binders};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_polymers);
    __Pyx_GIVEREF(__pyx_v_polymers);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_polymers);
    __Pyx_INCREF(__pyx_v_binders);
    __Pyx_GIVEREF(__pyx_v_binders);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_binders);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6chromo_6fields_FieldBase))))) __PYX_ERR(0, 277, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chromo/fields.pyx":269
 *         return cls(constructor, **kwargs)
 * 
 *     def __call__(self, polymers, binders) -> FieldBase:             # <<<<<<<<<<<<<<
 *         """Synonym for `Reconstructor.finalize()`.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("chromo.fields.Reconstructor.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":284
 *     """
 * 
 *     def __init__(self, polymers = None, confine_type="", confine_length=0.0):             # <<<<<<<<<<<<<<
 *         if polymers is None:
 *             polymers = []
 */

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_9NullField_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6chromo_6fields_9NullField_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_polymers = 0;
  PyObject *__pyx_v_confine_type = 0;
  PyObject *__pyx_v_confine_length = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_polymers,&__pyx_n_s_confine_type,&__pyx_n_s_confine_length,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)__pyx_kp_s_);
    values[2] = ((PyObject *)__pyx_float_0_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_polymers);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_confine_type);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_confine_length);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 284, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_polymers = values[0];
    __pyx_v_confine_type = values[1];
    __pyx_v_confine_length = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 284, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chromo.fields.NullField.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6chromo_6fields_9NullField___init__(((struct __pyx_obj_6chromo_6fields_NullField *)__pyx_v_self), __pyx_v_polymers, __pyx_v_confine_type, __pyx_v_confine_length);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_9NullField___init__(struct __pyx_obj_6chromo_6fields_NullField *__pyx_v_self, PyObject *__pyx_v_polymers, PyObject *__pyx_v_confine_type, PyObject *__pyx_v_confine_length) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  double __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 284, 0, __PYX_ERR(0, 284, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_polymers);

  /* "chromo/fields.pyx":285
 * 
 *     def __init__(self, polymers = None, confine_type="", confine_length=0.0):
 *         if polymers is None:             # <<<<<<<<<<<<<<
 *             polymers = []
 *         super(NullField, self).__init__(
 */
  __pyx_t_1 = (__pyx_v_polymers == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "chromo/fields.pyx":286
 *     def __init__(self, polymers = None, confine_type="", confine_length=0.0):
 *         if polymers is None:
 *             polymers = []             # <<<<<<<<<<<<<<
 *         super(NullField, self).__init__(
 *             polymers, binders = pd.DataFrame()
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_polymers, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "chromo/fields.pyx":285
 * 
 *     def __init__(self, polymers = None, confine_type="", confine_length=0.0):
 *         if polymers is None:             # <<<<<<<<<<<<<<
 *             polymers = []
 *         super(NullField, self).__init__(
 */
  }

  /* "chromo/fields.pyx":287
 *         if polymers is None:
 *             polymers = []
 *         super(NullField, self).__init__(             # <<<<<<<<<<<<<<
 *             polymers, binders = pd.DataFrame()
 *         )
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6chromo_6fields_NullField));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6chromo_6fields_NullField));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_ptype_6chromo_6fields_NullField));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_init); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "chromo/fields.pyx":288
 *             polymers = []
 *         super(NullField, self).__init__(
 *             polymers, binders = pd.DataFrame()             # <<<<<<<<<<<<<<
 *         )
 *         self.confine_type = confine_type
 */
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_polymers);
  __Pyx_GIVEREF(__pyx_v_polymers);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_polymers);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_pd); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_binders, __pyx_t_6) < 0) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "chromo/fields.pyx":287
 *         if polymers is None:
 *             polymers = []
 *         super(NullField, self).__init__(             # <<<<<<<<<<<<<<
 *             polymers, binders = pd.DataFrame()
 *         )
 */
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "chromo/fields.pyx":290
 *             polymers, binders = pd.DataFrame()
 *         )
 *         self.confine_type = confine_type             # <<<<<<<<<<<<<<
 *         self.confine_length = confine_length
 * 
 */
  if (!(likely(PyString_CheckExact(__pyx_v_confine_type))||((__pyx_v_confine_type) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_confine_type)->tp_name), 0))) __PYX_ERR(0, 290, __pyx_L1_error)
  __pyx_t_6 = __pyx_v_confine_type;
  __Pyx_INCREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.confine_type);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.confine_type);
  __pyx_v_self->__pyx_base.confine_type = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "chromo/fields.pyx":291
 *         )
 *         self.confine_type = confine_type
 *         self.confine_length = confine_length             # <<<<<<<<<<<<<<
 * 
 *     def to_file(self, path):
 */
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_confine_length); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 291, __pyx_L1_error)
  __pyx_v_self->__pyx_base.confine_length = __pyx_t_9;

  /* "chromo/fields.pyx":284
 *     """
 * 
 *     def __init__(self, polymers = None, confine_type="", confine_length=0.0):             # <<<<<<<<<<<<<<
 *         if polymers is None:
 *             polymers = []
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("chromo.fields.NullField.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_polymers);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":293
 *         self.confine_length = confine_length
 * 
 *     def to_file(self, path):             # <<<<<<<<<<<<<<
 *         """Save Field description.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_9NullField_3to_file(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_6chromo_6fields_9NullField_2to_file[] = "Save Field description.\n        ";
static PyObject *__pyx_pw_6chromo_6fields_9NullField_3to_file(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_file (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_9NullField_2to_file(((struct __pyx_obj_6chromo_6fields_NullField *)__pyx_v_self), ((PyObject *)__pyx_v_path));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_9NullField_2to_file(CYTHON_UNUSED struct __pyx_obj_6chromo_6fields_NullField *__pyx_v_self, PyObject *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_file", 0);
  __Pyx_TraceCall("to_file", __pyx_f[0], 293, 0, __PYX_ERR(0, 293, __pyx_L1_error));

  /* "chromo/fields.pyx":296
 *         """Save Field description.
 *         """
 *         with open(path, 'w'):             # <<<<<<<<<<<<<<
 *             pass
 * 
 */
  /*with:*/ {
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_path);
    __Pyx_GIVEREF(__pyx_v_path);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_path);
    __Pyx_INCREF(__pyx_n_s_w);
    __Pyx_GIVEREF(__pyx_n_s_w);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_w);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_exit); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 296, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    /*try:*/ {
      {
        (void)__pyx_t_6; (void)__pyx_t_7; (void)__pyx_t_8; /* mark used */
        /*try:*/ {
        }
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_3) {
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__6, NULL);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 296, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L13;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L1_error;
    __pyx_L13:;
  }

  /* "chromo/fields.pyx":293
 *         self.confine_length = confine_length
 * 
 *     def to_file(self, path):             # <<<<<<<<<<<<<<
 *         """Save Field description.
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("chromo.fields.NullField.to_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":300
 * 
 *     @classmethod
 *     def from_file(cls, path):             # <<<<<<<<<<<<<<
 *         """Load Field description.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_9NullField_5from_file(PyObject *__pyx_v_cls, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_6chromo_6fields_9NullField_4from_file[] = "Load Field description.\n        ";
static PyObject *__pyx_pw_6chromo_6fields_9NullField_5from_file(PyObject *__pyx_v_cls, PyObject *__pyx_v_path) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_file (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_9NullField_4from_file(((PyTypeObject*)__pyx_v_cls), ((PyObject *)__pyx_v_path));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_9NullField_4from_file(PyTypeObject *__pyx_v_cls, CYTHON_UNUSED PyObject *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_file", 0);
  __Pyx_TraceCall("from_file", __pyx_f[0], 300, 0, __PYX_ERR(0, 300, __pyx_L1_error));

  /* "chromo/fields.pyx":303
 *         """Load Field description.
 *         """
 *         return cls()             # <<<<<<<<<<<<<<
 * 
 *     cdef double compute_dE(
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_v_cls)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chromo/fields.pyx":300
 * 
 *     @classmethod
 *     def from_file(cls, path):             # <<<<<<<<<<<<<<
 *         """Load Field description.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.NullField.from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":305
 *         return cls()
 * 
 *     cdef double compute_dE(             # <<<<<<<<<<<<<<
 *         self, poly.PolymerBase poly, long[:] inds, long n_inds,
 *         long packet_size, bint state_change
 */

static double __pyx_f_6chromo_6fields_9NullField_compute_dE(struct __pyx_obj_6chromo_6fields_NullField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, __Pyx_memviewslice __pyx_v_inds, long __pyx_v_n_inds, CYTHON_UNUSED long __pyx_v_packet_size, CYTHON_UNUSED int __pyx_v_state_change) {
  double __pyx_v_dE;
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_dE", 0);
  __Pyx_TraceCall("compute_dE", __pyx_f[0], 305, 0, __PYX_ERR(0, 305, __pyx_L1_error));

  /* "chromo/fields.pyx":316
 *         from the confinement.
 *         """
 *         dE = self.get_confinement_dE(poly, inds, n_inds, trial=1)             # <<<<<<<<<<<<<<
 *         dE -= self.get_confinement_dE(poly, inds, n_inds, trial=0)
 *         return dE
 */
  __pyx_v_dE = ((struct __pyx_vtabstruct_6chromo_6fields_NullField *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.get_confinement_dE(((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_v_self), __pyx_v_poly, __pyx_v_inds, __pyx_v_n_inds, 1);

  /* "chromo/fields.pyx":317
 *         """
 *         dE = self.get_confinement_dE(poly, inds, n_inds, trial=1)
 *         dE -= self.get_confinement_dE(poly, inds, n_inds, trial=0)             # <<<<<<<<<<<<<<
 *         return dE
 * 
 */
  __pyx_v_dE = (__pyx_v_dE - ((struct __pyx_vtabstruct_6chromo_6fields_NullField *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.get_confinement_dE(((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_v_self), __pyx_v_poly, __pyx_v_inds, __pyx_v_n_inds, 0));

  /* "chromo/fields.pyx":318
 *         dE = self.get_confinement_dE(poly, inds, n_inds, trial=1)
 *         dE -= self.get_confinement_dE(poly, inds, n_inds, trial=0)
 *         return dE             # <<<<<<<<<<<<<<
 * 
 *     cdef void update_affected_densities(self):
 */
  __pyx_r = __pyx_v_dE;
  goto __pyx_L0;

  /* "chromo/fields.pyx":305
 *         return cls()
 * 
 *     cdef double compute_dE(             # <<<<<<<<<<<<<<
 *         self, poly.PolymerBase poly, long[:] inds, long n_inds,
 *         long packet_size, bint state_change
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("chromo.fields.NullField.compute_dE", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":320
 *         return dE
 * 
 *     cdef void update_affected_densities(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static void __pyx_f_6chromo_6fields_9NullField_update_affected_densities(CYTHON_UNUSED struct __pyx_obj_6chromo_6fields_NullField *__pyx_v_self) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_affected_densities", 0);
  __Pyx_TraceCall("update_affected_densities", __pyx_f[0], 320, 0, __PYX_ERR(0, 320, __pyx_L1_error));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("chromo.fields.NullField.update_affected_densities", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_9NullField_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_9NullField_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_9NullField_6__reduce_cython__(((struct __pyx_obj_6chromo_6fields_NullField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_9NullField_6__reduce_cython__(struct __pyx_obj_6chromo_6fields_NullField *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[2], 1, 0, __PYX_ERR(2, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.binders, self.confine_length, self.confine_type, self.n_polymers, self.polymers)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.confine_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_self->__pyx_base.n_polymers); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.binders);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.binders);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self->__pyx_base.binders);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.confine_type);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.confine_type);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_self->__pyx_base.confine_type);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.polymers);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.polymers);
  PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_v_self->__pyx_base.polymers);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.binders, self.confine_length, self.confine_type, self.n_polymers, self.polymers)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_3 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v__dict = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":7
 *     state = (self.binders, self.confine_length, self.confine_type, self.n_polymers, self.polymers)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_4 = (__pyx_v__dict != Py_None);
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v__dict);
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.binders is not None or self.confine_type is not None or self.polymers is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.binders, self.confine_length, self.confine_type, self.n_polymers, self.polymers)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.binders is not None or self.confine_type is not None or self.polymers is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_NullField, (type(self), 0x20a4277, None), state
 */
  /*else*/ {
    __pyx_t_4 = (__pyx_v_self->__pyx_base.binders != Py_None);
    __pyx_t_6 = (__pyx_t_4 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_6 = (__pyx_v_self->__pyx_base.confine_type != ((PyObject*)Py_None));
    __pyx_t_4 = (__pyx_t_6 != 0);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_5 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->__pyx_base.polymers != ((PyObject*)Py_None));
    __pyx_t_6 = (__pyx_t_4 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_5;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.binders is not None or self.confine_type is not None or self.polymers is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_NullField, (type(self), 0x20a4277, None), state
 *     else:
 */
  __pyx_t_5 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_5) {

    /* "(tree fragment)":13
 *         use_setstate = self.binders is not None or self.confine_type is not None or self.polymers is not None
 *     if use_setstate:
 *         return __pyx_unpickle_NullField, (type(self), 0x20a4277, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_NullField, (type(self), 0x20a4277, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_NullField); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_34226807);
    __Pyx_GIVEREF(__pyx_int_34226807);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_34226807);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_3, 2, Py_None);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.binders is not None or self.confine_type is not None or self.polymers is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_NullField, (type(self), 0x20a4277, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_NullField, (type(self), 0x20a4277, None), state
 *     else:
 *         return __pyx_unpickle_NullField, (type(self), 0x20a4277, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_NullField__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_NullField); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_34226807);
    __Pyx_GIVEREF(__pyx_int_34226807);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_34226807);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_state);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("chromo.fields.NullField.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_NullField, (type(self), 0x20a4277, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_NullField__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_9NullField_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_9NullField_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_9NullField_8__setstate_cython__(((struct __pyx_obj_6chromo_6fields_NullField *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_9NullField_8__setstate_cython__(struct __pyx_obj_6chromo_6fields_NullField *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[2], 16, 0, __PYX_ERR(2, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_NullField, (type(self), 0x20a4277, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_NullField__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6chromo_6fields___pyx_unpickle_NullField__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_NullField, (type(self), 0x20a4277, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_NullField__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.NullField.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":453
 *     """
 * 
 *     def __init__(             # <<<<<<<<<<<<<<
 *         self, polymers, binders, x_width, nx, y_width, ny, z_width, nz,
 *         confine_type = "", confine_length = 0.0, chi = 1.0,
 */

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6chromo_6fields_19UniformDensityField___init__[] = "Construct a `UniformDensityField` containing polymers.\n\n        Parameters\n        ----------\n        polymers : List[PolymerBase]\n            List of polymers contained in the field\n        binders : pd.DataFrame\n            Output of `chromo.binders.make_binder_collection` applied to the\n            list of `Binder` objects contained in the field\n        x_width, y_width, z_width : double\n            Width of the box containing the field in the x, y, and z-directions\n        nx, ny, nz : long\n            Number of bins in the x, y, and z-directions\n        confine_type : str\n            Name of the confining boundary; to indicate model w/o confinement,\n            enter a blank string for this argument\n        confine_length : double\n            The lengthscale associated with the confining boundary; length\n            representation specified in function associated w/ `confine_type`\n        chi : double\n            Negative local Flory-Huggins parameter dictating non-specific bead\n            interaction (default = 1)\n        assume_fully_accessible : bint\n            Flag indicating whether to assume all voxels are fully accessible.\n            Assume voxels are fully accessible if the voxel volumes are far less\n            than the confinement volume. Value of `1` indicates that all voxels\n            are assumed to be fully accessible, bypassing the calculation of\n            accessible volume (default = 1).\n        vf_limit : Optional[float]\n            Volume fraction limit in a voxel (default = 0.5)\n        fast_field : Optional[bint]\n            If this value is `1`, a coarse-grained density field will be\n            evaluated using pre-computed sub-bin weightings; otherwise, bin\n            weightings will be interpolated from bead positions during each\n            iteration (default = 0)\n        n_points : Optional[long]\n            Number of sub-bins to precompute in each dimension when the ``fast\n            field''"" is active; should be an even number (default = 1000)\n        ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6chromo_6fields_19UniformDensityField___init__;
#endif
static int __pyx_pw_6chromo_6fields_19UniformDensityField_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_polymers = 0;
  PyObject *__pyx_v_binders = 0;
  PyObject *__pyx_v_x_width = 0;
  PyObject *__pyx_v_nx = 0;
  PyObject *__pyx_v_y_width = 0;
  PyObject *__pyx_v_ny = 0;
  PyObject *__pyx_v_z_width = 0;
  PyObject *__pyx_v_nz = 0;
  PyObject *__pyx_v_confine_type = 0;
  PyObject *__pyx_v_confine_length = 0;
  PyObject *__pyx_v_chi = 0;
  PyObject *__pyx_v_assume_fully_accessible = 0;
  PyObject *__pyx_v_vf_limit = 0;
  PyObject *__pyx_v_fast_field = 0;
  PyObject *__pyx_v_n_points = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_polymers,&__pyx_n_s_binders,&__pyx_n_s_x_width,&__pyx_n_s_nx,&__pyx_n_s_y_width,&__pyx_n_s_ny,&__pyx_n_s_z_width,&__pyx_n_s_nz,&__pyx_n_s_confine_type,&__pyx_n_s_confine_length,&__pyx_n_s_chi,&__pyx_n_s_assume_fully_accessible,&__pyx_n_s_vf_limit,&__pyx_n_s_fast_field,&__pyx_n_s_n_points,0};
    PyObject* values[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[8] = ((PyObject *)__pyx_kp_s_);
    values[9] = ((PyObject *)__pyx_float_0_0);
    values[10] = ((PyObject *)__pyx_float_1_0);
    values[11] = ((PyObject *)__pyx_int_1);
    values[12] = ((PyObject *)__pyx_float_0_5);
    values[13] = ((PyObject *)__pyx_int_0);
    values[14] = ((PyObject *)__pyx_int_1000);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_polymers)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_binders)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 8, 15, 1); __PYX_ERR(0, 453, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 8, 15, 2); __PYX_ERR(0, 453, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 8, 15, 3); __PYX_ERR(0, 453, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 8, 15, 4); __PYX_ERR(0, 453, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ny)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 8, 15, 5); __PYX_ERR(0, 453, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 8, 15, 6); __PYX_ERR(0, 453, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 8, 15, 7); __PYX_ERR(0, 453, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_confine_type);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_confine_length);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_chi);
          if (value) { values[10] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_assume_fully_accessible);
          if (value) { values[11] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vf_limit);
          if (value) { values[12] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fast_field);
          if (value) { values[13] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_points);
          if (value) { values[14] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 453, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_polymers = values[0];
    __pyx_v_binders = values[1];
    __pyx_v_x_width = values[2];
    __pyx_v_nx = values[3];
    __pyx_v_y_width = values[4];
    __pyx_v_ny = values[5];
    __pyx_v_z_width = values[6];
    __pyx_v_nz = values[7];
    __pyx_v_confine_type = values[8];
    __pyx_v_confine_length = values[9];
    __pyx_v_chi = values[10];
    __pyx_v_assume_fully_accessible = values[11];
    __pyx_v_vf_limit = values[12];
    __pyx_v_fast_field = values[13];
    __pyx_v_n_points = values[14];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 8, 15, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 453, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField___init__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), __pyx_v_polymers, __pyx_v_binders, __pyx_v_x_width, __pyx_v_nx, __pyx_v_y_width, __pyx_v_ny, __pyx_v_z_width, __pyx_v_nz, __pyx_v_confine_type, __pyx_v_confine_length, __pyx_v_chi, __pyx_v_assume_fully_accessible, __pyx_v_vf_limit, __pyx_v_fast_field, __pyx_v_n_points);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField___init__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_polymers, PyObject *__pyx_v_binders, PyObject *__pyx_v_x_width, PyObject *__pyx_v_nx, PyObject *__pyx_v_y_width, PyObject *__pyx_v_ny, PyObject *__pyx_v_z_width, PyObject *__pyx_v_nz, PyObject *__pyx_v_confine_type, PyObject *__pyx_v_confine_length, PyObject *__pyx_v_chi, PyObject *__pyx_v_assume_fully_accessible, PyObject *__pyx_v_vf_limit, PyObject *__pyx_v_fast_field, PyObject *__pyx_v_n_points) {
  PyObject *__pyx_v_poly = NULL;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  double __pyx_t_9;
  long __pyx_t_10;
  __Pyx_memviewslice __pyx_t_11 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_12 = { 0, 0, { 0 }, { 0 }, { 0 } };
  float __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 453, 0, __PYX_ERR(0, 453, __pyx_L1_error));

  /* "chromo/fields.pyx":498
 *             field'' is active; should be an even number (default = 1000)
 *         """
 *         super(UniformDensityField, self).__init__(             # <<<<<<<<<<<<<<
 *             polymers = polymers, binders = binders
 *         )
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6chromo_6fields_UniformDensityField));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6chromo_6fields_UniformDensityField));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_ptype_6chromo_6fields_UniformDensityField));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":499
 *         """
 *         super(UniformDensityField, self).__init__(
 *             polymers = polymers, binders = binders             # <<<<<<<<<<<<<<
 *         )
 *         self._field_descriptors = _field_descriptors
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_polymers, __pyx_v_polymers) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_binders, __pyx_v_binders) < 0) __PYX_ERR(0, 499, __pyx_L1_error)

  /* "chromo/fields.pyx":498
 *             field'' is active; should be an even number (default = 1000)
 *         """
 *         super(UniformDensityField, self).__init__(             # <<<<<<<<<<<<<<
 *             polymers = polymers, binders = binders
 *         )
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "chromo/fields.pyx":501
 *             polymers = polymers, binders = binders
 *         )
 *         self._field_descriptors = _field_descriptors             # <<<<<<<<<<<<<<
 *         for poly in polymers:
 *             if poly.num_binders != len(binders):
 */
  __Pyx_INCREF(__pyx_v_6chromo_6fields__field_descriptors);
  __Pyx_GIVEREF(__pyx_v_6chromo_6fields__field_descriptors);
  __Pyx_GOTREF(__pyx_v_self->_field_descriptors);
  __Pyx_DECREF(__pyx_v_self->_field_descriptors);
  __pyx_v_self->_field_descriptors = __pyx_v_6chromo_6fields__field_descriptors;

  /* "chromo/fields.pyx":502
 *         )
 *         self._field_descriptors = _field_descriptors
 *         for poly in polymers:             # <<<<<<<<<<<<<<
 *             if poly.num_binders != len(binders):
 *                 raise NotImplementedError(
 */
  if (likely(PyList_CheckExact(__pyx_v_polymers)) || PyTuple_CheckExact(__pyx_v_polymers)) {
    __pyx_t_3 = __pyx_v_polymers; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_polymers); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 502, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 502, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 502, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 502, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 502, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 502, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 502, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_poly, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "chromo/fields.pyx":503
 *         self._field_descriptors = _field_descriptors
 *         for poly in polymers:
 *             if poly.num_binders != len(binders):             # <<<<<<<<<<<<<<
 *                 raise NotImplementedError(
 *                     "For now, all polymers must use all of the same binders."
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_poly, __pyx_n_s_num_binders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 503, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyObject_Length(__pyx_v_binders); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 503, __pyx_L1_error)
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 503, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 503, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_t_8)) {

      /* "chromo/fields.pyx":504
 *         for poly in polymers:
 *             if poly.num_binders != len(binders):
 *                 raise NotImplementedError(             # <<<<<<<<<<<<<<
 *                     "For now, all polymers must use all of the same binders."
 *                 )
 */
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 504, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __PYX_ERR(0, 504, __pyx_L1_error)

      /* "chromo/fields.pyx":503
 *         self._field_descriptors = _field_descriptors
 *         for poly in polymers:
 *             if poly.num_binders != len(binders):             # <<<<<<<<<<<<<<
 *                 raise NotImplementedError(
 *                     "For now, all polymers must use all of the same binders."
 */
    }

    /* "chromo/fields.pyx":502
 *         )
 *         self._field_descriptors = _field_descriptors
 *         for poly in polymers:             # <<<<<<<<<<<<<<
 *             if poly.num_binders != len(binders):
 *                 raise NotImplementedError(
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "chromo/fields.pyx":507
 *                     "For now, all polymers must use all of the same binders."
 *                 )
 *         self.x_width = x_width             # <<<<<<<<<<<<<<
 *         self.y_width = y_width
 *         self.z_width = z_width
 */
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_x_width); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 507, __pyx_L1_error)
  __pyx_v_self->x_width = __pyx_t_9;

  /* "chromo/fields.pyx":508
 *                 )
 *         self.x_width = x_width
 *         self.y_width = y_width             # <<<<<<<<<<<<<<
 *         self.z_width = z_width
 *         self.nx = nx
 */
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_y_width); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 508, __pyx_L1_error)
  __pyx_v_self->y_width = __pyx_t_9;

  /* "chromo/fields.pyx":509
 *         self.x_width = x_width
 *         self.y_width = y_width
 *         self.z_width = z_width             # <<<<<<<<<<<<<<
 *         self.nx = nx
 *         self.ny = ny
 */
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_z_width); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 509, __pyx_L1_error)
  __pyx_v_self->z_width = __pyx_t_9;

  /* "chromo/fields.pyx":510
 *         self.y_width = y_width
 *         self.z_width = z_width
 *         self.nx = nx             # <<<<<<<<<<<<<<
 *         self.ny = ny
 *         self.nz = nz
 */
  __pyx_t_10 = __Pyx_PyInt_As_long(__pyx_v_nx); if (unlikely((__pyx_t_10 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 510, __pyx_L1_error)
  __pyx_v_self->nx = __pyx_t_10;

  /* "chromo/fields.pyx":511
 *         self.z_width = z_width
 *         self.nx = nx
 *         self.ny = ny             # <<<<<<<<<<<<<<
 *         self.nz = nz
 *         self.init_grid()
 */
  __pyx_t_10 = __Pyx_PyInt_As_long(__pyx_v_ny); if (unlikely((__pyx_t_10 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 511, __pyx_L1_error)
  __pyx_v_self->ny = __pyx_t_10;

  /* "chromo/fields.pyx":512
 *         self.nx = nx
 *         self.ny = ny
 *         self.nz = nz             # <<<<<<<<<<<<<<
 *         self.init_grid()
 *         self.num_binders = len(binders)
 */
  __pyx_t_10 = __Pyx_PyInt_As_long(__pyx_v_nz); if (unlikely((__pyx_t_10 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 512, __pyx_L1_error)
  __pyx_v_self->nz = __pyx_t_10;

  /* "chromo/fields.pyx":513
 *         self.ny = ny
 *         self.nz = nz
 *         self.init_grid()             # <<<<<<<<<<<<<<
 *         self.num_binders = len(binders)
 *         self.doubly_bound = np.zeros((self.num_binders,), dtype=int)
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_grid); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "chromo/fields.pyx":514
 *         self.nz = nz
 *         self.init_grid()
 *         self.num_binders = len(binders)             # <<<<<<<<<<<<<<
 *         self.doubly_bound = np.zeros((self.num_binders,), dtype=int)
 *         self.doubly_bound_trial = np.zeros((self.num_binders,), dtype=int)
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_binders); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 514, __pyx_L1_error)
  __pyx_v_self->num_binders = __pyx_t_4;

  /* "chromo/fields.pyx":515
 *         self.init_grid()
 *         self.num_binders = len(binders)
 *         self.doubly_bound = np.zeros((self.num_binders,), dtype=int)             # <<<<<<<<<<<<<<
 *         self.doubly_bound_trial = np.zeros((self.num_binders,), dtype=int)
 *         self.init_field_energy_prefactors()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_self->num_binders); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 515, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_11 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_t_2, PyBUF_WRITABLE); if (unlikely(!__pyx_t_11.memview)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->doubly_bound, 0);
  __pyx_v_self->doubly_bound = __pyx_t_11;
  __pyx_t_11.memview = NULL;
  __pyx_t_11.data = NULL;

  /* "chromo/fields.pyx":516
 *         self.num_binders = len(binders)
 *         self.doubly_bound = np.zeros((self.num_binders,), dtype=int)
 *         self.doubly_bound_trial = np.zeros((self.num_binders,), dtype=int)             # <<<<<<<<<<<<<<
 *         self.init_field_energy_prefactors()
 *         self.density = np.zeros((self.n_bins, self.num_binders+1), dtype=float)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_self->num_binders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 516, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_11 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_t_7, PyBUF_WRITABLE); if (unlikely(!__pyx_t_11.memview)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->doubly_bound_trial, 0);
  __pyx_v_self->doubly_bound_trial = __pyx_t_11;
  __pyx_t_11.memview = NULL;
  __pyx_t_11.data = NULL;

  /* "chromo/fields.pyx":517
 *         self.doubly_bound = np.zeros((self.num_binders,), dtype=int)
 *         self.doubly_bound_trial = np.zeros((self.num_binders,), dtype=int)
 *         self.init_field_energy_prefactors()             # <<<<<<<<<<<<<<
 *         self.density = np.zeros((self.n_bins, self.num_binders+1), dtype=float)
 *         self.density_trial = self.density.copy()
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_field_energy_prefactors); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_7 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "chromo/fields.pyx":518
 *         self.doubly_bound_trial = np.zeros((self.num_binders,), dtype=int)
 *         self.init_field_energy_prefactors()
 *         self.density = np.zeros((self.n_bins, self.num_binders+1), dtype=float)             # <<<<<<<<<<<<<<
 *         self.density_trial = self.density.copy()
 *         self.confine_type = confine_type
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyInt_From_long(__pyx_v_self->n_bins); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_v_self->num_binders + 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_7 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(0, 518, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_12 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_double(__pyx_t_7, PyBUF_WRITABLE); if (unlikely(!__pyx_t_12.memview)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->density, 0);
  __pyx_v_self->density = __pyx_t_12;
  __pyx_t_12.memview = NULL;
  __pyx_t_12.data = NULL;

  /* "chromo/fields.pyx":519
 *         self.init_field_energy_prefactors()
 *         self.density = np.zeros((self.n_bins, self.num_binders+1), dtype=float)
 *         self.density_trial = self.density.copy()             # <<<<<<<<<<<<<<
 *         self.confine_type = confine_type
 *         self.confine_length = confine_length
 */
  if (unlikely(!__pyx_v_self->density.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 519, __pyx_L1_error)}
  __pyx_t_12 = __pyx_memoryview_copy_slice_d_dc_double_c(__pyx_v_self->density); if (unlikely(!__pyx_t_12.memview)) __PYX_ERR(0, 519, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->density_trial, 0);
  __pyx_v_self->density_trial = __pyx_t_12;
  __pyx_t_12.memview = NULL;
  __pyx_t_12.data = NULL;

  /* "chromo/fields.pyx":520
 *         self.density = np.zeros((self.n_bins, self.num_binders+1), dtype=float)
 *         self.density_trial = self.density.copy()
 *         self.confine_type = confine_type             # <<<<<<<<<<<<<<
 *         self.confine_length = confine_length
 *         self.assume_fully_accessible = assume_fully_accessible
 */
  if (!(likely(PyString_CheckExact(__pyx_v_confine_type))||((__pyx_v_confine_type) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_confine_type)->tp_name), 0))) __PYX_ERR(0, 520, __pyx_L1_error)
  __pyx_t_7 = __pyx_v_confine_type;
  __Pyx_INCREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.confine_type);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.confine_type);
  __pyx_v_self->__pyx_base.confine_type = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "chromo/fields.pyx":521
 *         self.density_trial = self.density.copy()
 *         self.confine_type = confine_type
 *         self.confine_length = confine_length             # <<<<<<<<<<<<<<
 *         self.assume_fully_accessible = assume_fully_accessible
 *         self.access_vols = self.get_accessible_volumes(
 */
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_confine_length); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 521, __pyx_L1_error)
  __pyx_v_self->__pyx_base.confine_length = __pyx_t_9;

  /* "chromo/fields.pyx":522
 *         self.confine_type = confine_type
 *         self.confine_length = confine_length
 *         self.assume_fully_accessible = assume_fully_accessible             # <<<<<<<<<<<<<<
 *         self.access_vols = self.get_accessible_volumes(
 *             n_side=20, assume_fully_accessible=assume_fully_accessible
 */
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_assume_fully_accessible); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L1_error)
  __pyx_v_self->assume_fully_accessible = __pyx_t_8;

  /* "chromo/fields.pyx":524
 *         self.assume_fully_accessible = assume_fully_accessible
 *         self.access_vols = self.get_accessible_volumes(
 *             n_side=20, assume_fully_accessible=assume_fully_accessible             # <<<<<<<<<<<<<<
 *         )
 *         self.chi = chi
 */
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_assume_fully_accessible); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 524, __pyx_L1_error)

  /* "chromo/fields.pyx":523
 *         self.confine_length = confine_length
 *         self.assume_fully_accessible = assume_fully_accessible
 *         self.access_vols = self.get_accessible_volumes(             # <<<<<<<<<<<<<<
 *             n_side=20, assume_fully_accessible=assume_fully_accessible
 *         )
 */
  __pyx_t_7 = ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_accessible_volumes(__pyx_v_self, 20, __pyx_t_8, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __Pyx_GOTREF(__pyx_v_self->access_vols);
  __Pyx_DECREF(__pyx_v_self->access_vols);
  __pyx_v_self->access_vols = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "chromo/fields.pyx":526
 *             n_side=20, assume_fully_accessible=assume_fully_accessible
 *         )
 *         self.chi = chi             # <<<<<<<<<<<<<<
 *         self.vf_limit = vf_limit
 *         self.binder_dict = self.binders.to_dict(orient='records')
 */
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_chi); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 526, __pyx_L1_error)
  __pyx_v_self->chi = __pyx_t_9;

  /* "chromo/fields.pyx":527
 *         )
 *         self.chi = chi
 *         self.vf_limit = vf_limit             # <<<<<<<<<<<<<<
 *         self.binder_dict = self.binders.to_dict(orient='records')
 *         self.fast_field = fast_field
 */
  __pyx_t_13 = __pyx_PyFloat_AsFloat(__pyx_v_vf_limit); if (unlikely((__pyx_t_13 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 527, __pyx_L1_error)
  __pyx_v_self->vf_limit = __pyx_t_13;

  /* "chromo/fields.pyx":528
 *         self.chi = chi
 *         self.vf_limit = vf_limit
 *         self.binder_dict = self.binders.to_dict(orient='records')             # <<<<<<<<<<<<<<
 *         self.fast_field = fast_field
 *         if fast_field == 1:
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base.binders, __pyx_n_s_to_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_orient, __pyx_n_s_records) < 0) __PYX_ERR(0, 528, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->binder_dict);
  __Pyx_DECREF(__pyx_v_self->binder_dict);
  __pyx_v_self->binder_dict = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "chromo/fields.pyx":529
 *         self.vf_limit = vf_limit
 *         self.binder_dict = self.binders.to_dict(orient='records')
 *         self.fast_field = fast_field             # <<<<<<<<<<<<<<
 *         if fast_field == 1:
 *             self.init_fast_field(n_points=n_points)
 */
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_fast_field); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 529, __pyx_L1_error)
  __pyx_v_self->fast_field = __pyx_t_8;

  /* "chromo/fields.pyx":530
 *         self.binder_dict = self.binders.to_dict(orient='records')
 *         self.fast_field = fast_field
 *         if fast_field == 1:             # <<<<<<<<<<<<<<
 *             self.init_fast_field(n_points=n_points)
 *         self.update_all_densities_for_all_polymers()
 */
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_fast_field, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_8) {

    /* "chromo/fields.pyx":531
 *         self.fast_field = fast_field
 *         if fast_field == 1:
 *             self.init_fast_field(n_points=n_points)             # <<<<<<<<<<<<<<
 *         self.update_all_densities_for_all_polymers()
 *         self.affected_bins_last_move = np.zeros((self.n_bins,), dtype=int)
 */
    __pyx_t_10 = __Pyx_PyInt_As_long(__pyx_v_n_points); if (unlikely((__pyx_t_10 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 531, __pyx_L1_error)
    ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->init_fast_field(__pyx_v_self, __pyx_t_10);

    /* "chromo/fields.pyx":530
 *         self.binder_dict = self.binders.to_dict(orient='records')
 *         self.fast_field = fast_field
 *         if fast_field == 1:             # <<<<<<<<<<<<<<
 *             self.init_fast_field(n_points=n_points)
 *         self.update_all_densities_for_all_polymers()
 */
  }

  /* "chromo/fields.pyx":532
 *         if fast_field == 1:
 *             self.init_fast_field(n_points=n_points)
 *         self.update_all_densities_for_all_polymers()             # <<<<<<<<<<<<<<
 *         self.affected_bins_last_move = np.zeros((self.n_bins,), dtype=int)
 *         self.dict_ = self.get_dict()
 */
  ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->update_all_densities_for_all_polymers(__pyx_v_self, 0);

  /* "chromo/fields.pyx":533
 *             self.init_fast_field(n_points=n_points)
 *         self.update_all_densities_for_all_polymers()
 *         self.affected_bins_last_move = np.zeros((self.n_bins,), dtype=int)             # <<<<<<<<<<<<<<
 *         self.dict_ = self.get_dict()
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_self->n_bins); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 533, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_11 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_t_3, PyBUF_WRITABLE); if (unlikely(!__pyx_t_11.memview)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->affected_bins_last_move, 0);
  __pyx_v_self->affected_bins_last_move = __pyx_t_11;
  __pyx_t_11.memview = NULL;
  __pyx_t_11.data = NULL;

  /* "chromo/fields.pyx":534
 *         self.update_all_densities_for_all_polymers()
 *         self.affected_bins_last_move = np.zeros((self.n_bins,), dtype=int)
 *         self.dict_ = self.get_dict()             # <<<<<<<<<<<<<<
 * 
 *     def init_grid(self):
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 534, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->dict_);
  __Pyx_DECREF(__pyx_v_self->dict_);
  __pyx_v_self->dict_ = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "chromo/fields.pyx":453
 *     """
 * 
 *     def __init__(             # <<<<<<<<<<<<<<
 *         self, polymers, binders, x_width, nx, y_width, ny, z_width, nz,
 *         confine_type = "", confine_length = 0.0, chi = 1.0,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XDEC_MEMVIEW(&__pyx_t_11, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_12, 1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_poly);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":536
 *         self.dict_ = self.get_dict()
 * 
 *     def init_grid(self):             # <<<<<<<<<<<<<<
 *         """Initialize the discrete grid containing the field.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_3init_grid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6chromo_6fields_19UniformDensityField_2init_grid[] = "Initialize the discrete grid containing the field.\n\n        Notes\n        -----\n        The field will be represented by a grid of rectangular prism (typically\n        cubical) voxels, each of dimensions `dx` by `dy` by `dz`. To calculate\n        interaction energies, density will be determined inside each voxel and\n        a mean field approach will be applied.\n        ";
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_3init_grid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_grid (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_2init_grid(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_2init_grid(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_memviewslice __pyx_t_11 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_12 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_13 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init_grid", 0);
  __Pyx_TraceCall("init_grid", __pyx_f[0], 536, 0, __PYX_ERR(0, 536, __pyx_L1_error));

  /* "chromo/fields.pyx":546
 *         a mean field approach will be applied.
 *         """
 *         self.dx = self.x_width / self.nx             # <<<<<<<<<<<<<<
 *         self.dy = self.y_width / self.ny
 *         self.dz = self.z_width / self.nz
 */
  if (unlikely(__pyx_v_self->nx == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 546, __pyx_L1_error)
  }
  __pyx_v_self->dx = (__pyx_v_self->x_width / __pyx_v_self->nx);

  /* "chromo/fields.pyx":547
 *         """
 *         self.dx = self.x_width / self.nx
 *         self.dy = self.y_width / self.ny             # <<<<<<<<<<<<<<
 *         self.dz = self.z_width / self.nz
 *         self.dxyz = np.array([self.dx, self.dy, self.dz])
 */
  if (unlikely(__pyx_v_self->ny == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 547, __pyx_L1_error)
  }
  __pyx_v_self->dy = (__pyx_v_self->y_width / __pyx_v_self->ny);

  /* "chromo/fields.pyx":548
 *         self.dx = self.x_width / self.nx
 *         self.dy = self.y_width / self.ny
 *         self.dz = self.z_width / self.nz             # <<<<<<<<<<<<<<
 *         self.dxyz = np.array([self.dx, self.dy, self.dz])
 *         self.n_bins = self.nx * self.ny * self.nz
 */
  if (unlikely(__pyx_v_self->nz == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 548, __pyx_L1_error)
  }
  __pyx_v_self->dz = (__pyx_v_self->z_width / __pyx_v_self->nz);

  /* "chromo/fields.pyx":549
 *         self.dy = self.y_width / self.ny
 *         self.dz = self.z_width / self.nz
 *         self.dxyz = np.array([self.dx, self.dy, self.dz])             # <<<<<<<<<<<<<<
 *         self.n_bins = self.nx * self.ny * self.nz
 *         self.vol_bin = self.x_width * self.y_width * self.z_width / self.n_bins
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->dx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->dy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->dz); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->dxyz, 0);
  __pyx_v_self->dxyz = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "chromo/fields.pyx":550
 *         self.dz = self.z_width / self.nz
 *         self.dxyz = np.array([self.dx, self.dy, self.dz])
 *         self.n_bins = self.nx * self.ny * self.nz             # <<<<<<<<<<<<<<
 *         self.vol_bin = self.x_width * self.y_width * self.z_width / self.n_bins
 *         self.bin_index = UniformDensityField._get_corner_bin_index(
 */
  __pyx_v_self->n_bins = ((__pyx_v_self->nx * __pyx_v_self->ny) * __pyx_v_self->nz);

  /* "chromo/fields.pyx":551
 *         self.dxyz = np.array([self.dx, self.dy, self.dz])
 *         self.n_bins = self.nx * self.ny * self.nz
 *         self.vol_bin = self.x_width * self.y_width * self.z_width / self.n_bins             # <<<<<<<<<<<<<<
 *         self.bin_index = UniformDensityField._get_corner_bin_index(
 *             self.nx, self.ny, self.nz
 */
  __pyx_t_8 = ((__pyx_v_self->x_width * __pyx_v_self->y_width) * __pyx_v_self->z_width);
  if (unlikely(__pyx_v_self->n_bins == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 551, __pyx_L1_error)
  }
  __pyx_v_self->vol_bin = (__pyx_t_8 / __pyx_v_self->n_bins);

  /* "chromo/fields.pyx":552
 *         self.n_bins = self.nx * self.ny * self.nz
 *         self.vol_bin = self.x_width * self.y_width * self.z_width / self.n_bins
 *         self.bin_index = UniformDensityField._get_corner_bin_index(             # <<<<<<<<<<<<<<
 *             self.nx, self.ny, self.nz
 *         )
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6chromo_6fields_UniformDensityField), __pyx_n_s_get_corner_bin_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "chromo/fields.pyx":553
 *         self.vol_bin = self.x_width * self.y_width * self.z_width / self.n_bins
 *         self.bin_index = UniformDensityField._get_corner_bin_index(
 *             self.nx, self.ny, self.nz             # <<<<<<<<<<<<<<
 *         )
 *         self.width_xyz = np.array([self.x_width, self.y_width, self.z_width])
 */
  __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_self->nx); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_self->ny); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_self->nz); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_t_6, __pyx_t_5, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_t_6, __pyx_t_5, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_9, __pyx_t_4);
    __pyx_t_6 = 0;
    __pyx_t_5 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "chromo/fields.pyx":552
 *         self.n_bins = self.nx * self.ny * self.nz
 *         self.vol_bin = self.x_width * self.y_width * self.z_width / self.n_bins
 *         self.bin_index = UniformDensityField._get_corner_bin_index(             # <<<<<<<<<<<<<<
 *             self.nx, self.ny, self.nz
 *         )
 */
  __pyx_t_11 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_long(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_11.memview)) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->bin_index, 0);
  __pyx_v_self->bin_index = __pyx_t_11;
  __pyx_t_11.memview = NULL;
  __pyx_t_11.data = NULL;

  /* "chromo/fields.pyx":555
 *             self.nx, self.ny, self.nz
 *         )
 *         self.width_xyz = np.array([self.x_width, self.y_width, self.z_width])             # <<<<<<<<<<<<<<
 *         self.half_width_xyz = np.array(
 *             [0.5 * self.x_width, 0.5 * self.y_width, 0.5 * self.z_width]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->x_width); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->y_width); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->z_width); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->width_xyz, 0);
  __pyx_v_self->width_xyz = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "chromo/fields.pyx":556
 *         )
 *         self.width_xyz = np.array([self.x_width, self.y_width, self.z_width])
 *         self.half_width_xyz = np.array(             # <<<<<<<<<<<<<<
 *             [0.5 * self.x_width, 0.5 * self.y_width, 0.5 * self.z_width]
 *         )
 */
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "chromo/fields.pyx":557
 *         self.width_xyz = np.array([self.x_width, self.y_width, self.z_width])
 *         self.half_width_xyz = np.array(
 *             [0.5 * self.x_width, 0.5 * self.y_width, 0.5 * self.z_width]             # <<<<<<<<<<<<<<
 *         )
 *         self.half_step_xyz = np.array(
 */
  __pyx_t_10 = PyFloat_FromDouble((0.5 * __pyx_v_self->x_width)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_5 = PyFloat_FromDouble((0.5 * __pyx_v_self->y_width)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyFloat_FromDouble((0.5 * __pyx_v_self->z_width)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_10);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_3, 2, __pyx_t_4);
  __pyx_t_10 = 0;
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "chromo/fields.pyx":556
 *         )
 *         self.width_xyz = np.array([self.x_width, self.y_width, self.z_width])
 *         self.half_width_xyz = np.array(             # <<<<<<<<<<<<<<
 *             [0.5 * self.x_width, 0.5 * self.y_width, 0.5 * self.z_width]
 *         )
 */
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->half_width_xyz, 0);
  __pyx_v_self->half_width_xyz = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "chromo/fields.pyx":559
 *             [0.5 * self.x_width, 0.5 * self.y_width, 0.5 * self.z_width]
 *         )
 *         self.half_step_xyz = np.array(             # <<<<<<<<<<<<<<
 *             [0.5 * self.dx, 0.5 * self.dy, 0.5 * self.dz]
 *         )
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "chromo/fields.pyx":560
 *         )
 *         self.half_step_xyz = np.array(
 *             [0.5 * self.dx, 0.5 * self.dy, 0.5 * self.dz]             # <<<<<<<<<<<<<<
 *         )
 *         self.n_xyz_m1 = np.array(
 */
  __pyx_t_6 = PyFloat_FromDouble((0.5 * __pyx_v_self->dx)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = PyFloat_FromDouble((0.5 * __pyx_v_self->dy)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble((0.5 * __pyx_v_self->dz)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_10 = PyList_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_10, 2, __pyx_t_5);
  __pyx_t_6 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_10) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_10);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "chromo/fields.pyx":559
 *             [0.5 * self.x_width, 0.5 * self.y_width, 0.5 * self.z_width]
 *         )
 *         self.half_step_xyz = np.array(             # <<<<<<<<<<<<<<
 *             [0.5 * self.dx, 0.5 * self.dy, 0.5 * self.dz]
 *         )
 */
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 559, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->half_step_xyz, 0);
  __pyx_v_self->half_step_xyz = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "chromo/fields.pyx":562
 *             [0.5 * self.dx, 0.5 * self.dy, 0.5 * self.dz]
 *         )
 *         self.n_xyz_m1 = np.array(             # <<<<<<<<<<<<<<
 *             [self.nx - 1, self.ny - 1, self.nz - 1]
 *         )
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "chromo/fields.pyx":563
 *         )
 *         self.n_xyz_m1 = np.array(
 *             [self.nx - 1, self.ny - 1, self.nz - 1]             # <<<<<<<<<<<<<<
 *         )
 *         self.precompute_ind_xyz_to_super()
 */
  __pyx_t_3 = __Pyx_PyInt_From_long((__pyx_v_self->nx - 1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_From_long((__pyx_v_self->ny - 1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyInt_From_long((__pyx_v_self->nz - 1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_4, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "chromo/fields.pyx":562
 *             [0.5 * self.dx, 0.5 * self.dy, 0.5 * self.dz]
 *         )
 *         self.n_xyz_m1 = np.array(             # <<<<<<<<<<<<<<
 *             [self.nx - 1, self.ny - 1, self.nz - 1]
 *         )
 */
  __pyx_t_12 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_12.memview)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->n_xyz_m1, 0);
  __pyx_v_self->n_xyz_m1 = __pyx_t_12;
  __pyx_t_12.memview = NULL;
  __pyx_t_12.data = NULL;

  /* "chromo/fields.pyx":565
 *             [self.nx - 1, self.ny - 1, self.nz - 1]
 *         )
 *         self.precompute_ind_xyz_to_super()             # <<<<<<<<<<<<<<
 *         self.nbr_inds = np.empty((8,), dtype=int)
 *         self.nbr_inds_with_trial = np.empty((2, 8), dtype=int)
 */
  ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->precompute_ind_xyz_to_super(__pyx_v_self);

  /* "chromo/fields.pyx":566
 *         )
 *         self.precompute_ind_xyz_to_super()
 *         self.nbr_inds = np.empty((8,), dtype=int)             # <<<<<<<<<<<<<<
 *         self.nbr_inds_with_trial = np.empty((2, 8), dtype=int)
 *         self.wt_vec = np.empty((8,), dtype=float)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 566, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_tuple__9, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_12 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_t_6, PyBUF_WRITABLE); if (unlikely(!__pyx_t_12.memview)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->nbr_inds, 0);
  __pyx_v_self->nbr_inds = __pyx_t_12;
  __pyx_t_12.memview = NULL;
  __pyx_t_12.data = NULL;

  /* "chromo/fields.pyx":567
 *         self.precompute_ind_xyz_to_super()
 *         self.nbr_inds = np.empty((8,), dtype=int)
 *         self.nbr_inds_with_trial = np.empty((2, 8), dtype=int)             # <<<<<<<<<<<<<<
 *         self.wt_vec = np.empty((8,), dtype=float)
 *         self.wt_vec_with_trial = np.empty((2, 8), dtype=float)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_empty); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 567, __pyx_L1_error)
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__11, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_11 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_long(__pyx_t_10, PyBUF_WRITABLE); if (unlikely(!__pyx_t_11.memview)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->nbr_inds_with_trial, 0);
  __pyx_v_self->nbr_inds_with_trial = __pyx_t_11;
  __pyx_t_11.memview = NULL;
  __pyx_t_11.data = NULL;

  /* "chromo/fields.pyx":568
 *         self.nbr_inds = np.empty((8,), dtype=int)
 *         self.nbr_inds_with_trial = np.empty((2, 8), dtype=int)
 *         self.wt_vec = np.empty((8,), dtype=float)             # <<<<<<<<<<<<<<
 *         self.wt_vec_with_trial = np.empty((2, 8), dtype=float)
 *         self.xyz = np.empty((3,), dtype=float)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_empty); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_dtype, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(0, 568, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__9, __pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->wt_vec, 0);
  __pyx_v_self->wt_vec = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "chromo/fields.pyx":569
 *         self.nbr_inds_with_trial = np.empty((2, 8), dtype=int)
 *         self.wt_vec = np.empty((8,), dtype=float)
 *         self.wt_vec_with_trial = np.empty((2, 8), dtype=float)             # <<<<<<<<<<<<<<
 *         self.xyz = np.empty((3,), dtype=float)
 *         self.xyz_with_trial = np.empty((2, 3), dtype=float)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(0, 569, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_tuple__11, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_13 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_double(__pyx_t_6, PyBUF_WRITABLE); if (unlikely(!__pyx_t_13.memview)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->wt_vec_with_trial, 0);
  __pyx_v_self->wt_vec_with_trial = __pyx_t_13;
  __pyx_t_13.memview = NULL;
  __pyx_t_13.data = NULL;

  /* "chromo/fields.pyx":570
 *         self.wt_vec = np.empty((8,), dtype=float)
 *         self.wt_vec_with_trial = np.empty((2, 8), dtype=float)
 *         self.xyz = np.empty((3,), dtype=float)             # <<<<<<<<<<<<<<
 *         self.xyz_with_trial = np.empty((2, 3), dtype=float)
 *         self.weight_xyz = np.empty((3,), dtype=float)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_empty); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(0, 570, __pyx_L1_error)
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__13, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_10, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->xyz, 0);
  __pyx_v_self->xyz = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "chromo/fields.pyx":571
 *         self.wt_vec_with_trial = np.empty((2, 8), dtype=float)
 *         self.xyz = np.empty((3,), dtype=float)
 *         self.xyz_with_trial = np.empty((2, 3), dtype=float)             # <<<<<<<<<<<<<<
 *         self.weight_xyz = np.empty((3,), dtype=float)
 *         self.weight_xyz_with_trial = np.empty((2, 3), dtype=float)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_empty); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_dtype, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(0, 571, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__15, __pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_13 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_13.memview)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->xyz_with_trial, 0);
  __pyx_v_self->xyz_with_trial = __pyx_t_13;
  __pyx_t_13.memview = NULL;
  __pyx_t_13.data = NULL;

  /* "chromo/fields.pyx":572
 *         self.xyz = np.empty((3,), dtype=float)
 *         self.xyz_with_trial = np.empty((2, 3), dtype=float)
 *         self.weight_xyz = np.empty((3,), dtype=float)             # <<<<<<<<<<<<<<
 *         self.weight_xyz_with_trial = np.empty((2, 3), dtype=float)
 *         self.index_xyz = np.empty((3,), dtype=int)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(0, 572, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_tuple__13, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_6, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->weight_xyz, 0);
  __pyx_v_self->weight_xyz = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "chromo/fields.pyx":573
 *         self.xyz_with_trial = np.empty((2, 3), dtype=float)
 *         self.weight_xyz = np.empty((3,), dtype=float)
 *         self.weight_xyz_with_trial = np.empty((2, 3), dtype=float)             # <<<<<<<<<<<<<<
 *         self.index_xyz = np.empty((3,), dtype=int)
 *         self.index_xyz_with_trial = np.empty((2, 3), dtype=int)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_empty); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(0, 573, __pyx_L1_error)
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__15, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_13 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_double(__pyx_t_10, PyBUF_WRITABLE); if (unlikely(!__pyx_t_13.memview)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->weight_xyz_with_trial, 0);
  __pyx_v_self->weight_xyz_with_trial = __pyx_t_13;
  __pyx_t_13.memview = NULL;
  __pyx_t_13.data = NULL;

  /* "chromo/fields.pyx":574
 *         self.weight_xyz = np.empty((3,), dtype=float)
 *         self.weight_xyz_with_trial = np.empty((2, 3), dtype=float)
 *         self.index_xyz = np.empty((3,), dtype=int)             # <<<<<<<<<<<<<<
 *         self.index_xyz_with_trial = np.empty((2, 3), dtype=int)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_empty); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_dtype, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 574, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__13, __pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_12 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_12.memview)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->index_xyz, 0);
  __pyx_v_self->index_xyz = __pyx_t_12;
  __pyx_t_12.memview = NULL;
  __pyx_t_12.data = NULL;

  /* "chromo/fields.pyx":575
 *         self.weight_xyz_with_trial = np.empty((2, 3), dtype=float)
 *         self.index_xyz = np.empty((3,), dtype=int)
 *         self.index_xyz_with_trial = np.empty((2, 3), dtype=int)             # <<<<<<<<<<<<<<
 * 
 *     cdef void init_fast_field(self, long n_points):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 575, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_tuple__15, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_11 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_long(__pyx_t_6, PyBUF_WRITABLE); if (unlikely(!__pyx_t_11.memview)) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->index_xyz_with_trial, 0);
  __pyx_v_self->index_xyz_with_trial = __pyx_t_11;
  __pyx_t_11.memview = NULL;
  __pyx_t_11.data = NULL;

  /* "chromo/fields.pyx":536
 *         self.dict_ = self.get_dict()
 * 
 *     def init_grid(self):             # <<<<<<<<<<<<<<
 *         """Initialize the discrete grid containing the field.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __Pyx_XDECREF(__pyx_t_10);
  __PYX_XDEC_MEMVIEW(&__pyx_t_11, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_12, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_13, 1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.init_grid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":577
 *         self.index_xyz_with_trial = np.empty((2, 3), dtype=int)
 * 
 *     cdef void init_fast_field(self, long n_points):             # <<<<<<<<<<<<<<
 *         """Precompute grid of sub-bins for efficiently interpolating densities.
 * 
 */

static void __pyx_f_6chromo_6fields_19UniformDensityField_init_fast_field(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, long __pyx_v_n_points) {
  long __pyx_v_i;
  long __pyx_v_ind;
  long __pyx_v_lower_bin_ind;
  long __pyx_v_upper_bin_ind;
  double __pyx_v_lower_weight;
  double __pyx_v_upper_weight;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  long __pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  double __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  long __pyx_t_12;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init_fast_field", 0);
  __Pyx_TraceCall("init_fast_field", __pyx_f[0], 577, 0, __PYX_ERR(0, 577, __pyx_L1_error));

  /* "chromo/fields.pyx":610
 *         cdef double lower_weight, upper_weight
 * 
 *         n_points = n_points + (n_points % 2)             # <<<<<<<<<<<<<<
 *         self.n_points = n_points
 * 
 */
  __pyx_v_n_points = (__pyx_v_n_points + __Pyx_mod_long(__pyx_v_n_points, 2));

  /* "chromo/fields.pyx":611
 * 
 *         n_points = n_points + (n_points % 2)
 *         self.n_points = n_points             # <<<<<<<<<<<<<<
 * 
 *         self.sub_bin_width_x = self.dx / n_points
 */
  __pyx_v_self->n_points = __pyx_v_n_points;

  /* "chromo/fields.pyx":613
 *         self.n_points = n_points
 * 
 *         self.sub_bin_width_x = self.dx / n_points             # <<<<<<<<<<<<<<
 *         self.sub_bin_width_y = self.dy / n_points
 *         self.sub_bin_width_z = self.dz / n_points
 */
  if (unlikely(__pyx_v_n_points == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 613, __pyx_L1_error)
  }
  __pyx_v_self->sub_bin_width_x = (__pyx_v_self->dx / __pyx_v_n_points);

  /* "chromo/fields.pyx":614
 * 
 *         self.sub_bin_width_x = self.dx / n_points
 *         self.sub_bin_width_y = self.dy / n_points             # <<<<<<<<<<<<<<
 *         self.sub_bin_width_z = self.dz / n_points
 *         self.n_sub_bins_x = (n_points * self.nx)
 */
  if (unlikely(__pyx_v_n_points == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 614, __pyx_L1_error)
  }
  __pyx_v_self->sub_bin_width_y = (__pyx_v_self->dy / __pyx_v_n_points);

  /* "chromo/fields.pyx":615
 *         self.sub_bin_width_x = self.dx / n_points
 *         self.sub_bin_width_y = self.dy / n_points
 *         self.sub_bin_width_z = self.dz / n_points             # <<<<<<<<<<<<<<
 *         self.n_sub_bins_x = (n_points * self.nx)
 *         self.n_sub_bins_y = (n_points * self.ny)
 */
  if (unlikely(__pyx_v_n_points == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 615, __pyx_L1_error)
  }
  __pyx_v_self->sub_bin_width_z = (__pyx_v_self->dz / __pyx_v_n_points);

  /* "chromo/fields.pyx":616
 *         self.sub_bin_width_y = self.dy / n_points
 *         self.sub_bin_width_z = self.dz / n_points
 *         self.n_sub_bins_x = (n_points * self.nx)             # <<<<<<<<<<<<<<
 *         self.n_sub_bins_y = (n_points * self.ny)
 *         self.n_sub_bins_z = (n_points * self.nz)
 */
  __pyx_v_self->n_sub_bins_x = (__pyx_v_n_points * __pyx_v_self->nx);

  /* "chromo/fields.pyx":617
 *         self.sub_bin_width_z = self.dz / n_points
 *         self.n_sub_bins_x = (n_points * self.nx)
 *         self.n_sub_bins_y = (n_points * self.ny)             # <<<<<<<<<<<<<<
 *         self.n_sub_bins_z = (n_points * self.nz)
 * 
 */
  __pyx_v_self->n_sub_bins_y = (__pyx_v_n_points * __pyx_v_self->ny);

  /* "chromo/fields.pyx":618
 *         self.n_sub_bins_x = (n_points * self.nx)
 *         self.n_sub_bins_y = (n_points * self.ny)
 *         self.n_sub_bins_z = (n_points * self.nz)             # <<<<<<<<<<<<<<
 * 
 *         # Map sub-bins to bins; map sub_bins to weights
 */
  __pyx_v_self->n_sub_bins_z = (__pyx_v_n_points * __pyx_v_self->nz);

  /* "chromo/fields.pyx":621
 * 
 *         # Map sub-bins to bins; map sub_bins to weights
 *         self.sub_bins_to_bins_x = {}             # <<<<<<<<<<<<<<
 *         self.sub_bins_to_bins_y = {}
 *         self.sub_bins_to_bins_z = {}
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->sub_bins_to_bins_x);
  __Pyx_DECREF(__pyx_v_self->sub_bins_to_bins_x);
  __pyx_v_self->sub_bins_to_bins_x = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "chromo/fields.pyx":622
 *         # Map sub-bins to bins; map sub_bins to weights
 *         self.sub_bins_to_bins_x = {}
 *         self.sub_bins_to_bins_y = {}             # <<<<<<<<<<<<<<
 *         self.sub_bins_to_bins_z = {}
 *         self.sub_bins_to_weights_x = {}
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->sub_bins_to_bins_y);
  __Pyx_DECREF(__pyx_v_self->sub_bins_to_bins_y);
  __pyx_v_self->sub_bins_to_bins_y = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "chromo/fields.pyx":623
 *         self.sub_bins_to_bins_x = {}
 *         self.sub_bins_to_bins_y = {}
 *         self.sub_bins_to_bins_z = {}             # <<<<<<<<<<<<<<
 *         self.sub_bins_to_weights_x = {}
 *         self.sub_bins_to_weights_y = {}
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->sub_bins_to_bins_z);
  __Pyx_DECREF(__pyx_v_self->sub_bins_to_bins_z);
  __pyx_v_self->sub_bins_to_bins_z = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "chromo/fields.pyx":624
 *         self.sub_bins_to_bins_y = {}
 *         self.sub_bins_to_bins_z = {}
 *         self.sub_bins_to_weights_x = {}             # <<<<<<<<<<<<<<
 *         self.sub_bins_to_weights_y = {}
 *         self.sub_bins_to_weights_z = {}
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->sub_bins_to_weights_x);
  __Pyx_DECREF(__pyx_v_self->sub_bins_to_weights_x);
  __pyx_v_self->sub_bins_to_weights_x = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "chromo/fields.pyx":625
 *         self.sub_bins_to_bins_z = {}
 *         self.sub_bins_to_weights_x = {}
 *         self.sub_bins_to_weights_y = {}             # <<<<<<<<<<<<<<
 *         self.sub_bins_to_weights_z = {}
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->sub_bins_to_weights_y);
  __Pyx_DECREF(__pyx_v_self->sub_bins_to_weights_y);
  __pyx_v_self->sub_bins_to_weights_y = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "chromo/fields.pyx":626
 *         self.sub_bins_to_weights_x = {}
 *         self.sub_bins_to_weights_y = {}
 *         self.sub_bins_to_weights_z = {}             # <<<<<<<<<<<<<<
 * 
 *         for i in range(self.n_sub_bins_x):
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->sub_bins_to_weights_z);
  __Pyx_DECREF(__pyx_v_self->sub_bins_to_weights_z);
  __pyx_v_self->sub_bins_to_weights_z = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "chromo/fields.pyx":628
 *         self.sub_bins_to_weights_z = {}
 * 
 *         for i in range(self.n_sub_bins_x):             # <<<<<<<<<<<<<<
 *             ind = \
 *                 np.floor((i - n_points/2) * self.sub_bin_width_x / self.dxyz[0])
 */
  __pyx_t_2 = __pyx_v_self->n_sub_bins_x;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "chromo/fields.pyx":630
 *         for i in range(self.n_sub_bins_x):
 *             ind = \
 *                 np.floor((i - n_points/2) * self.sub_bin_width_x / self.dxyz[0])             # <<<<<<<<<<<<<<
 *             if ind == -1:
 *                 lower_bin_ind = self.nx - 1
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 630, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_floor); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 630, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = ((__pyx_v_i - __Pyx_div_long(__pyx_v_n_points, 2)) * __pyx_v_self->sub_bin_width_x);
    if (unlikely(!__pyx_v_self->dxyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 630, __pyx_L1_error)}
    __pyx_t_8 = 0;
    __pyx_t_9 = -1;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_self->dxyz.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_self->dxyz.shape[0])) __pyx_t_9 = 0;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      __PYX_ERR(0, 630, __pyx_L1_error)
    }
    __pyx_t_10 = (*((double *) ( /* dim=0 */ (__pyx_v_self->dxyz.data + __pyx_t_8 * __pyx_v_self->dxyz.strides[0]) )));
    if (unlikely(__pyx_t_10 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 630, __pyx_L1_error)
    }
    __pyx_t_5 = PyFloat_FromDouble((__pyx_t_7 / __pyx_t_10)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 630, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_1 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_11, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 630, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_12 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_12 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 630, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_ind = __pyx_t_12;

    /* "chromo/fields.pyx":631
 *             ind = \
 *                 np.floor((i - n_points/2) * self.sub_bin_width_x / self.dxyz[0])
 *             if ind == -1:             # <<<<<<<<<<<<<<
 *                 lower_bin_ind = self.nx - 1
 *             else:
 */
    __pyx_t_13 = ((__pyx_v_ind == -1L) != 0);
    if (__pyx_t_13) {

      /* "chromo/fields.pyx":632
 *                 np.floor((i - n_points/2) * self.sub_bin_width_x / self.dxyz[0])
 *             if ind == -1:
 *                 lower_bin_ind = self.nx - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 lower_bin_ind = ind
 */
      __pyx_v_lower_bin_ind = (__pyx_v_self->nx - 1);

      /* "chromo/fields.pyx":631
 *             ind = \
 *                 np.floor((i - n_points/2) * self.sub_bin_width_x / self.dxyz[0])
 *             if ind == -1:             # <<<<<<<<<<<<<<
 *                 lower_bin_ind = self.nx - 1
 *             else:
 */
      goto __pyx_L5;
    }

    /* "chromo/fields.pyx":634
 *                 lower_bin_ind = self.nx - 1
 *             else:
 *                 lower_bin_ind = ind             # <<<<<<<<<<<<<<
 *             upper_bin_ind = (ind + 1) % self.nx
 *             upper_weight = (
 */
    /*else*/ {
      __pyx_v_lower_bin_ind = __pyx_v_ind;
    }
    __pyx_L5:;

    /* "chromo/fields.pyx":635
 *             else:
 *                 lower_bin_ind = ind
 *             upper_bin_ind = (ind + 1) % self.nx             # <<<<<<<<<<<<<<
 *             upper_weight = (
 *                 ((i - n_points/2) * self.sub_bin_width_x) / self.dxyz[0] - ind
 */
    __pyx_t_12 = (__pyx_v_ind + 1);
    if (unlikely(__pyx_v_self->nx == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 635, __pyx_L1_error)
    }
    __pyx_v_upper_bin_ind = __Pyx_mod_long(__pyx_t_12, __pyx_v_self->nx);

    /* "chromo/fields.pyx":637
 *             upper_bin_ind = (ind + 1) % self.nx
 *             upper_weight = (
 *                 ((i - n_points/2) * self.sub_bin_width_x) / self.dxyz[0] - ind             # <<<<<<<<<<<<<<
 *             )
 *             lower_weight = 1 - upper_weight
 */
    __pyx_t_10 = ((__pyx_v_i - __Pyx_div_long(__pyx_v_n_points, 2)) * __pyx_v_self->sub_bin_width_x);
    if (unlikely(!__pyx_v_self->dxyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 637, __pyx_L1_error)}
    __pyx_t_8 = 0;
    __pyx_t_9 = -1;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_self->dxyz.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_self->dxyz.shape[0])) __pyx_t_9 = 0;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      __PYX_ERR(0, 637, __pyx_L1_error)
    }
    __pyx_t_7 = (*((double *) ( /* dim=0 */ (__pyx_v_self->dxyz.data + __pyx_t_8 * __pyx_v_self->dxyz.strides[0]) )));
    if (unlikely(__pyx_t_7 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 637, __pyx_L1_error)
    }
    __pyx_v_upper_weight = ((__pyx_t_10 / __pyx_t_7) - __pyx_v_ind);

    /* "chromo/fields.pyx":639
 *                 ((i - n_points/2) * self.sub_bin_width_x) / self.dxyz[0] - ind
 *             )
 *             lower_weight = 1 - upper_weight             # <<<<<<<<<<<<<<
 *             self.sub_bins_to_bins_x[i] = [lower_bin_ind, upper_bin_ind]
 *             self.sub_bins_to_weights_x[i] = [lower_weight, upper_weight]
 */
    __pyx_v_lower_weight = (1.0 - __pyx_v_upper_weight);

    /* "chromo/fields.pyx":640
 *             )
 *             lower_weight = 1 - upper_weight
 *             self.sub_bins_to_bins_x[i] = [lower_bin_ind, upper_bin_ind]             # <<<<<<<<<<<<<<
 *             self.sub_bins_to_weights_x[i] = [lower_weight, upper_weight]
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_lower_bin_ind); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 640, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_upper_bin_ind); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 640, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 640, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
    __pyx_t_1 = 0;
    __pyx_t_6 = 0;
    if (unlikely(__pyx_v_self->sub_bins_to_bins_x == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 640, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 640, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(PyDict_SetItem(__pyx_v_self->sub_bins_to_bins_x, __pyx_t_6, __pyx_t_5) < 0)) __PYX_ERR(0, 640, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "chromo/fields.pyx":641
 *             lower_weight = 1 - upper_weight
 *             self.sub_bins_to_bins_x[i] = [lower_bin_ind, upper_bin_ind]
 *             self.sub_bins_to_weights_x[i] = [lower_weight, upper_weight]             # <<<<<<<<<<<<<<
 * 
 *         for i in range(self.n_sub_bins_y):
 */
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_lower_weight); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_upper_weight); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    if (unlikely(__pyx_v_self->sub_bins_to_weights_x == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 641, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(PyDict_SetItem(__pyx_v_self->sub_bins_to_weights_x, __pyx_t_6, __pyx_t_1) < 0)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "chromo/fields.pyx":643
 *             self.sub_bins_to_weights_x[i] = [lower_weight, upper_weight]
 * 
 *         for i in range(self.n_sub_bins_y):             # <<<<<<<<<<<<<<
 *             ind = \
 *                 np.floor((i - n_points/2) * self.sub_bin_width_y / self.dxyz[1])
 */
  __pyx_t_2 = __pyx_v_self->n_sub_bins_y;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "chromo/fields.pyx":645
 *         for i in range(self.n_sub_bins_y):
 *             ind = \
 *                 np.floor((i - n_points/2) * self.sub_bin_width_y / self.dxyz[1])             # <<<<<<<<<<<<<<
 *             if ind == -1:
 *                 lower_bin_ind = self.ny - 1
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_floor); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = ((__pyx_v_i - __Pyx_div_long(__pyx_v_n_points, 2)) * __pyx_v_self->sub_bin_width_y);
    if (unlikely(!__pyx_v_self->dxyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 645, __pyx_L1_error)}
    __pyx_t_8 = 1;
    __pyx_t_9 = -1;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_self->dxyz.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_self->dxyz.shape[0])) __pyx_t_9 = 0;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      __PYX_ERR(0, 645, __pyx_L1_error)
    }
    __pyx_t_10 = (*((double *) ( /* dim=0 */ (__pyx_v_self->dxyz.data + __pyx_t_8 * __pyx_v_self->dxyz.strides[0]) )));
    if (unlikely(__pyx_t_10 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 645, __pyx_L1_error)
    }
    __pyx_t_6 = PyFloat_FromDouble((__pyx_t_7 / __pyx_t_10)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_1 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_11, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_12 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_12 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_ind = __pyx_t_12;

    /* "chromo/fields.pyx":646
 *             ind = \
 *                 np.floor((i - n_points/2) * self.sub_bin_width_y / self.dxyz[1])
 *             if ind == -1:             # <<<<<<<<<<<<<<
 *                 lower_bin_ind = self.ny - 1
 *             else:
 */
    __pyx_t_13 = ((__pyx_v_ind == -1L) != 0);
    if (__pyx_t_13) {

      /* "chromo/fields.pyx":647
 *                 np.floor((i - n_points/2) * self.sub_bin_width_y / self.dxyz[1])
 *             if ind == -1:
 *                 lower_bin_ind = self.ny - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 lower_bin_ind = ind
 */
      __pyx_v_lower_bin_ind = (__pyx_v_self->ny - 1);

      /* "chromo/fields.pyx":646
 *             ind = \
 *                 np.floor((i - n_points/2) * self.sub_bin_width_y / self.dxyz[1])
 *             if ind == -1:             # <<<<<<<<<<<<<<
 *                 lower_bin_ind = self.ny - 1
 *             else:
 */
      goto __pyx_L8;
    }

    /* "chromo/fields.pyx":649
 *                 lower_bin_ind = self.ny - 1
 *             else:
 *                 lower_bin_ind = ind             # <<<<<<<<<<<<<<
 *             upper_bin_ind = (ind + 1) % self.ny
 *             upper_weight = (
 */
    /*else*/ {
      __pyx_v_lower_bin_ind = __pyx_v_ind;
    }
    __pyx_L8:;

    /* "chromo/fields.pyx":650
 *             else:
 *                 lower_bin_ind = ind
 *             upper_bin_ind = (ind + 1) % self.ny             # <<<<<<<<<<<<<<
 *             upper_weight = (
 *                 ((i - n_points/2) * self.sub_bin_width_y) / self.dxyz[1] - ind
 */
    __pyx_t_12 = (__pyx_v_ind + 1);
    if (unlikely(__pyx_v_self->ny == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 650, __pyx_L1_error)
    }
    __pyx_v_upper_bin_ind = __Pyx_mod_long(__pyx_t_12, __pyx_v_self->ny);

    /* "chromo/fields.pyx":652
 *             upper_bin_ind = (ind + 1) % self.ny
 *             upper_weight = (
 *                 ((i - n_points/2) * self.sub_bin_width_y) / self.dxyz[1] - ind             # <<<<<<<<<<<<<<
 *             )
 *             lower_weight = 1 - upper_weight
 */
    __pyx_t_10 = ((__pyx_v_i - __Pyx_div_long(__pyx_v_n_points, 2)) * __pyx_v_self->sub_bin_width_y);
    if (unlikely(!__pyx_v_self->dxyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 652, __pyx_L1_error)}
    __pyx_t_8 = 1;
    __pyx_t_9 = -1;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_self->dxyz.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_self->dxyz.shape[0])) __pyx_t_9 = 0;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      __PYX_ERR(0, 652, __pyx_L1_error)
    }
    __pyx_t_7 = (*((double *) ( /* dim=0 */ (__pyx_v_self->dxyz.data + __pyx_t_8 * __pyx_v_self->dxyz.strides[0]) )));
    if (unlikely(__pyx_t_7 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 652, __pyx_L1_error)
    }
    __pyx_v_upper_weight = ((__pyx_t_10 / __pyx_t_7) - __pyx_v_ind);

    /* "chromo/fields.pyx":654
 *                 ((i - n_points/2) * self.sub_bin_width_y) / self.dxyz[1] - ind
 *             )
 *             lower_weight = 1 - upper_weight             # <<<<<<<<<<<<<<
 *             self.sub_bins_to_bins_y[i] = [lower_bin_ind, upper_bin_ind]
 *             self.sub_bins_to_weights_y[i] = [lower_weight, upper_weight]
 */
    __pyx_v_lower_weight = (1.0 - __pyx_v_upper_weight);

    /* "chromo/fields.pyx":655
 *             )
 *             lower_weight = 1 - upper_weight
 *             self.sub_bins_to_bins_y[i] = [lower_bin_ind, upper_bin_ind]             # <<<<<<<<<<<<<<
 *             self.sub_bins_to_weights_y[i] = [lower_weight, upper_weight]
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_lower_bin_ind); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_upper_bin_ind); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyList_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
    __pyx_t_1 = 0;
    __pyx_t_5 = 0;
    if (unlikely(__pyx_v_self->sub_bins_to_bins_y == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 655, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(PyDict_SetItem(__pyx_v_self->sub_bins_to_bins_y, __pyx_t_5, __pyx_t_6) < 0)) __PYX_ERR(0, 655, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "chromo/fields.pyx":656
 *             lower_weight = 1 - upper_weight
 *             self.sub_bins_to_bins_y[i] = [lower_bin_ind, upper_bin_ind]
 *             self.sub_bins_to_weights_y[i] = [lower_weight, upper_weight]             # <<<<<<<<<<<<<<
 * 
 *         for i in range(self.n_sub_bins_z):
 */
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_lower_weight); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 656, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_upper_weight); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 656, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 656, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
    __pyx_t_6 = 0;
    __pyx_t_5 = 0;
    if (unlikely(__pyx_v_self->sub_bins_to_weights_y == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 656, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 656, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(PyDict_SetItem(__pyx_v_self->sub_bins_to_weights_y, __pyx_t_5, __pyx_t_1) < 0)) __PYX_ERR(0, 656, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "chromo/fields.pyx":658
 *             self.sub_bins_to_weights_y[i] = [lower_weight, upper_weight]
 * 
 *         for i in range(self.n_sub_bins_z):             # <<<<<<<<<<<<<<
 *             ind = \
 *                 np.floor((i - n_points/2) * self.sub_bin_width_z / self.dxyz[2])
 */
  __pyx_t_2 = __pyx_v_self->n_sub_bins_z;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "chromo/fields.pyx":660
 *         for i in range(self.n_sub_bins_z):
 *             ind = \
 *                 np.floor((i - n_points/2) * self.sub_bin_width_z / self.dxyz[2])             # <<<<<<<<<<<<<<
 *             if ind == -1:
 *                 lower_bin_ind = self.nz - 1
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_floor); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = ((__pyx_v_i - __Pyx_div_long(__pyx_v_n_points, 2)) * __pyx_v_self->sub_bin_width_z);
    if (unlikely(!__pyx_v_self->dxyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 660, __pyx_L1_error)}
    __pyx_t_8 = 2;
    __pyx_t_9 = -1;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_self->dxyz.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_self->dxyz.shape[0])) __pyx_t_9 = 0;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      __PYX_ERR(0, 660, __pyx_L1_error)
    }
    __pyx_t_10 = (*((double *) ( /* dim=0 */ (__pyx_v_self->dxyz.data + __pyx_t_8 * __pyx_v_self->dxyz.strides[0]) )));
    if (unlikely(__pyx_t_10 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 660, __pyx_L1_error)
    }
    __pyx_t_5 = PyFloat_FromDouble((__pyx_t_7 / __pyx_t_10)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_1 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_11, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_12 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_12 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 660, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_ind = __pyx_t_12;

    /* "chromo/fields.pyx":661
 *             ind = \
 *                 np.floor((i - n_points/2) * self.sub_bin_width_z / self.dxyz[2])
 *             if ind == -1:             # <<<<<<<<<<<<<<
 *                 lower_bin_ind = self.nz - 1
 *             else:
 */
    __pyx_t_13 = ((__pyx_v_ind == -1L) != 0);
    if (__pyx_t_13) {

      /* "chromo/fields.pyx":662
 *                 np.floor((i - n_points/2) * self.sub_bin_width_z / self.dxyz[2])
 *             if ind == -1:
 *                 lower_bin_ind = self.nz - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 lower_bin_ind = ind
 */
      __pyx_v_lower_bin_ind = (__pyx_v_self->nz - 1);

      /* "chromo/fields.pyx":661
 *             ind = \
 *                 np.floor((i - n_points/2) * self.sub_bin_width_z / self.dxyz[2])
 *             if ind == -1:             # <<<<<<<<<<<<<<
 *                 lower_bin_ind = self.nz - 1
 *             else:
 */
      goto __pyx_L11;
    }

    /* "chromo/fields.pyx":664
 *                 lower_bin_ind = self.nz - 1
 *             else:
 *                 lower_bin_ind = ind             # <<<<<<<<<<<<<<
 *             upper_bin_ind = (ind + 1) % self.nz
 *             upper_weight = (
 */
    /*else*/ {
      __pyx_v_lower_bin_ind = __pyx_v_ind;
    }
    __pyx_L11:;

    /* "chromo/fields.pyx":665
 *             else:
 *                 lower_bin_ind = ind
 *             upper_bin_ind = (ind + 1) % self.nz             # <<<<<<<<<<<<<<
 *             upper_weight = (
 *                 ((i - n_points/2) * self.sub_bin_width_z) / self.dxyz[2] - ind
 */
    __pyx_t_12 = (__pyx_v_ind + 1);
    if (unlikely(__pyx_v_self->nz == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 665, __pyx_L1_error)
    }
    __pyx_v_upper_bin_ind = __Pyx_mod_long(__pyx_t_12, __pyx_v_self->nz);

    /* "chromo/fields.pyx":667
 *             upper_bin_ind = (ind + 1) % self.nz
 *             upper_weight = (
 *                 ((i - n_points/2) * self.sub_bin_width_z) / self.dxyz[2] - ind             # <<<<<<<<<<<<<<
 *             )
 *             lower_weight = 1 - upper_weight
 */
    __pyx_t_10 = ((__pyx_v_i - __Pyx_div_long(__pyx_v_n_points, 2)) * __pyx_v_self->sub_bin_width_z);
    if (unlikely(!__pyx_v_self->dxyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 667, __pyx_L1_error)}
    __pyx_t_8 = 2;
    __pyx_t_9 = -1;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_self->dxyz.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_self->dxyz.shape[0])) __pyx_t_9 = 0;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      __PYX_ERR(0, 667, __pyx_L1_error)
    }
    __pyx_t_7 = (*((double *) ( /* dim=0 */ (__pyx_v_self->dxyz.data + __pyx_t_8 * __pyx_v_self->dxyz.strides[0]) )));
    if (unlikely(__pyx_t_7 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 667, __pyx_L1_error)
    }
    __pyx_v_upper_weight = ((__pyx_t_10 / __pyx_t_7) - __pyx_v_ind);

    /* "chromo/fields.pyx":669
 *                 ((i - n_points/2) * self.sub_bin_width_z) / self.dxyz[2] - ind
 *             )
 *             lower_weight = 1 - upper_weight             # <<<<<<<<<<<<<<
 *             self.sub_bins_to_bins_z[i] = [lower_bin_ind, upper_bin_ind]
 *             self.sub_bins_to_weights_z[i] = [lower_weight, upper_weight]
 */
    __pyx_v_lower_weight = (1.0 - __pyx_v_upper_weight);

    /* "chromo/fields.pyx":670
 *             )
 *             lower_weight = 1 - upper_weight
 *             self.sub_bins_to_bins_z[i] = [lower_bin_ind, upper_bin_ind]             # <<<<<<<<<<<<<<
 *             self.sub_bins_to_weights_z[i] = [lower_weight, upper_weight]
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_lower_bin_ind); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 670, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_upper_bin_ind); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 670, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 670, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
    __pyx_t_1 = 0;
    __pyx_t_6 = 0;
    if (unlikely(__pyx_v_self->sub_bins_to_bins_z == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 670, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 670, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(PyDict_SetItem(__pyx_v_self->sub_bins_to_bins_z, __pyx_t_6, __pyx_t_5) < 0)) __PYX_ERR(0, 670, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "chromo/fields.pyx":671
 *             lower_weight = 1 - upper_weight
 *             self.sub_bins_to_bins_z[i] = [lower_bin_ind, upper_bin_ind]
 *             self.sub_bins_to_weights_z[i] = [lower_weight, upper_weight]             # <<<<<<<<<<<<<<
 * 
 *     cdef void precompute_ind_xyz_to_super(self):
 */
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_lower_weight); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 671, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_upper_weight); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 671, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 671, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    if (unlikely(__pyx_v_self->sub_bins_to_weights_z == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 671, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 671, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(PyDict_SetItem(__pyx_v_self->sub_bins_to_weights_z, __pyx_t_6, __pyx_t_1) < 0)) __PYX_ERR(0, 671, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "chromo/fields.pyx":577
 *         self.index_xyz_with_trial = np.empty((2, 3), dtype=int)
 * 
 *     cdef void init_fast_field(self, long n_points):             # <<<<<<<<<<<<<<
 *         """Precompute grid of sub-bins for efficiently interpolating densities.
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_WriteUnraisable("chromo.fields.UniformDensityField.init_fast_field", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "chromo/fields.pyx":673
 *             self.sub_bins_to_weights_z[i] = [lower_weight, upper_weight]
 * 
 *     cdef void precompute_ind_xyz_to_super(self):             # <<<<<<<<<<<<<<
 *         """Precompute how voxel (x, y, z) indices translate to superindices.
 *         """
 */

static void __pyx_f_6chromo_6fields_19UniformDensityField_precompute_ind_xyz_to_super(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  long __pyx_v_i;
  long __pyx_v_j;
  long __pyx_v_k;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_t_7;
  long __pyx_t_8;
  long __pyx_t_9;
  long __pyx_t_10;
  long __pyx_t_11;
  long __pyx_t_12;
  long __pyx_t_13;
  long __pyx_t_14;
  long __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  int __pyx_t_19;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("precompute_ind_xyz_to_super", 0);
  __Pyx_TraceCall("precompute_ind_xyz_to_super", __pyx_f[0], 673, 0, __PYX_ERR(0, 673, __pyx_L1_error));

  /* "chromo/fields.pyx":677
 *         """
 *         cdef long i, j, k
 *         self.inds_xyz_to_super = np.empty(             # <<<<<<<<<<<<<<
 *             (self.nx+1, self.ny+1, self.nz+1), dtype=int
 *         )
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "chromo/fields.pyx":678
 *         cdef long i, j, k
 *         self.inds_xyz_to_super = np.empty(
 *             (self.nx+1, self.ny+1, self.nz+1), dtype=int             # <<<<<<<<<<<<<<
 *         )
 *         for i in range(self.nx + 1):
 */
  __pyx_t_1 = __Pyx_PyInt_From_long((__pyx_v_self->nx + 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_long((__pyx_v_self->ny + 1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_long((__pyx_v_self->nz + 1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;

  /* "chromo/fields.pyx":677
 *         """
 *         cdef long i, j, k
 *         self.inds_xyz_to_super = np.empty(             # <<<<<<<<<<<<<<
 *             (self.nx+1, self.ny+1, self.nz+1), dtype=int
 *         )
 */
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "chromo/fields.pyx":678
 *         cdef long i, j, k
 *         self.inds_xyz_to_super = np.empty(
 *             (self.nx+1, self.ny+1, self.nz+1), dtype=int             # <<<<<<<<<<<<<<
 *         )
 *         for i in range(self.nx + 1):
 */
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 678, __pyx_L1_error)

  /* "chromo/fields.pyx":677
 *         """
 *         cdef long i, j, k
 *         self.inds_xyz_to_super = np.empty(             # <<<<<<<<<<<<<<
 *             (self.nx+1, self.ny+1, self.nz+1), dtype=int
 *         )
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_d_d_dc_long(__pyx_t_3, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->inds_xyz_to_super, 0);
  __pyx_v_self->inds_xyz_to_super = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "chromo/fields.pyx":680
 *             (self.nx+1, self.ny+1, self.nz+1), dtype=int
 *         )
 *         for i in range(self.nx + 1):             # <<<<<<<<<<<<<<
 *             for j in range(self.ny + 1):
 *                 for k in range(self.nz + 1):
 */
  __pyx_t_7 = (__pyx_v_self->nx + 1);
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "chromo/fields.pyx":681
 *         )
 *         for i in range(self.nx + 1):
 *             for j in range(self.ny + 1):             # <<<<<<<<<<<<<<
 *                 for k in range(self.nz + 1):
 *                     self.inds_xyz_to_super[i, j, k] = inds_to_super_ind(
 */
    __pyx_t_10 = (__pyx_v_self->ny + 1);
    __pyx_t_11 = __pyx_t_10;
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_v_j = __pyx_t_12;

      /* "chromo/fields.pyx":682
 *         for i in range(self.nx + 1):
 *             for j in range(self.ny + 1):
 *                 for k in range(self.nz + 1):             # <<<<<<<<<<<<<<
 *                     self.inds_xyz_to_super[i, j, k] = inds_to_super_ind(
 *                     i % self.nx, j % self.ny, k % self.nz, self.nx, self.ny
 */
      __pyx_t_13 = (__pyx_v_self->nz + 1);
      __pyx_t_14 = __pyx_t_13;
      for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
        __pyx_v_k = __pyx_t_15;

        /* "chromo/fields.pyx":684
 *                 for k in range(self.nz + 1):
 *                     self.inds_xyz_to_super[i, j, k] = inds_to_super_ind(
 *                     i % self.nx, j % self.ny, k % self.nz, self.nx, self.ny             # <<<<<<<<<<<<<<
 *                 )
 * 
 */
        if (unlikely(__pyx_v_self->nx == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          __PYX_ERR(0, 684, __pyx_L1_error)
        }
        if (unlikely(__pyx_v_self->ny == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          __PYX_ERR(0, 684, __pyx_L1_error)
        }
        if (unlikely(__pyx_v_self->nz == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          __PYX_ERR(0, 684, __pyx_L1_error)
        }

        /* "chromo/fields.pyx":683
 *             for j in range(self.ny + 1):
 *                 for k in range(self.nz + 1):
 *                     self.inds_xyz_to_super[i, j, k] = inds_to_super_ind(             # <<<<<<<<<<<<<<
 *                     i % self.nx, j % self.ny, k % self.nz, self.nx, self.ny
 *                 )
 */
        if (unlikely(!__pyx_v_self->inds_xyz_to_super.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 683, __pyx_L1_error)}
        __pyx_t_16 = __pyx_v_i;
        __pyx_t_17 = __pyx_v_j;
        __pyx_t_18 = __pyx_v_k;
        __pyx_t_19 = -1;
        if (__pyx_t_16 < 0) {
          __pyx_t_16 += __pyx_v_self->inds_xyz_to_super.shape[0];
          if (unlikely(__pyx_t_16 < 0)) __pyx_t_19 = 0;
        } else if (unlikely(__pyx_t_16 >= __pyx_v_self->inds_xyz_to_super.shape[0])) __pyx_t_19 = 0;
        if (__pyx_t_17 < 0) {
          __pyx_t_17 += __pyx_v_self->inds_xyz_to_super.shape[1];
          if (unlikely(__pyx_t_17 < 0)) __pyx_t_19 = 1;
        } else if (unlikely(__pyx_t_17 >= __pyx_v_self->inds_xyz_to_super.shape[1])) __pyx_t_19 = 1;
        if (__pyx_t_18 < 0) {
          __pyx_t_18 += __pyx_v_self->inds_xyz_to_super.shape[2];
          if (unlikely(__pyx_t_18 < 0)) __pyx_t_19 = 2;
        } else if (unlikely(__pyx_t_18 >= __pyx_v_self->inds_xyz_to_super.shape[2])) __pyx_t_19 = 2;
        if (unlikely(__pyx_t_19 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_19);
          __PYX_ERR(0, 683, __pyx_L1_error)
        }
        *((long *) ( /* dim=2 */ ((char *) (((long *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->inds_xyz_to_super.data + __pyx_t_16 * __pyx_v_self->inds_xyz_to_super.strides[0]) ) + __pyx_t_17 * __pyx_v_self->inds_xyz_to_super.strides[1]) )) + __pyx_t_18)) )) = __pyx_f_6chromo_6fields_inds_to_super_ind(__Pyx_mod_long(__pyx_v_i, __pyx_v_self->nx), __Pyx_mod_long(__pyx_v_j, __pyx_v_self->ny), __Pyx_mod_long(__pyx_v_k, __pyx_v_self->nz), __pyx_v_self->nx, __pyx_v_self->ny);
      }
    }
  }

  /* "chromo/fields.pyx":673
 *             self.sub_bins_to_weights_z[i] = [lower_weight, upper_weight]
 * 
 *     cdef void precompute_ind_xyz_to_super(self):             # <<<<<<<<<<<<<<
 *         """Precompute how voxel (x, y, z) indices translate to superindices.
 *         """
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_WriteUnraisable("chromo.fields.UniformDensityField.precompute_ind_xyz_to_super", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "chromo/fields.pyx":687
 *                 )
 * 
 *     def init_field_energy_prefactors(self):             # <<<<<<<<<<<<<<
 *         """Initialize the field energy prefactor for each reader protein.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_5init_field_energy_prefactors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6chromo_6fields_19UniformDensityField_4init_field_energy_prefactors[] = "Initialize the field energy prefactor for each reader protein.\n        ";
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_5init_field_energy_prefactors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_field_energy_prefactors (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_4init_field_energy_prefactors(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_4init_field_energy_prefactors(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_v_binder_names = NULL;
  long __pyx_v_i;
  PyObject *__pyx_v_binder_name = NULL;
  PyObject *__pyx_v_next_binder = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  long __pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init_field_energy_prefactors", 0);
  __Pyx_TraceCall("init_field_energy_prefactors", __pyx_f[0], 687, 0, __PYX_ERR(0, 687, __pyx_L1_error));

  /* "chromo/fields.pyx":690
 *         """Initialize the field energy prefactor for each reader protein.
 *         """
 *         binder_names = []             # <<<<<<<<<<<<<<
 *         for i in range(self.num_binders):
 *             binder_name = self.binders.loc[i, "name"]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_binder_names = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "chromo/fields.pyx":691
 *         """
 *         binder_names = []
 *         for i in range(self.num_binders):             # <<<<<<<<<<<<<<
 *             binder_name = self.binders.loc[i, "name"]
 *             binder_names.append(binder_name)
 */
  __pyx_t_2 = __pyx_v_self->num_binders;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "chromo/fields.pyx":692
 *         binder_names = []
 *         for i in range(self.num_binders):
 *             binder_name = self.binders.loc[i, "name"]             # <<<<<<<<<<<<<<
 *             binder_names.append(binder_name)
 *         for i in range(self.num_binders):
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base.binders, __pyx_n_s_loc); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __Pyx_INCREF(__pyx_n_s_name_2);
    __Pyx_GIVEREF(__pyx_n_s_name_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_n_s_name_2);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_binder_name, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "chromo/fields.pyx":693
 *         for i in range(self.num_binders):
 *             binder_name = self.binders.loc[i, "name"]
 *             binder_names.append(binder_name)             # <<<<<<<<<<<<<<
 *         for i in range(self.num_binders):
 *             self.binders.at[i, 'field_energy_prefactor'] = (
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_binder_names, __pyx_v_binder_name); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 693, __pyx_L1_error)
  }

  /* "chromo/fields.pyx":694
 *             binder_name = self.binders.loc[i, "name"]
 *             binder_names.append(binder_name)
 *         for i in range(self.num_binders):             # <<<<<<<<<<<<<<
 *             self.binders.at[i, 'field_energy_prefactor'] = (
 *                 0.5 * self.binders.iloc[i].interaction_energy
 */
  __pyx_t_2 = __pyx_v_self->num_binders;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "chromo/fields.pyx":696
 *         for i in range(self.num_binders):
 *             self.binders.at[i, 'field_energy_prefactor'] = (
 *                 0.5 * self.binders.iloc[i].interaction_energy             # <<<<<<<<<<<<<<
 *                 * self.binders.iloc[i].interaction_volume
 *                 * self.vol_bin
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base.binders, __pyx_n_s_iloc); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 696, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_5, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 696, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_interaction_energy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 696, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Multiply(__pyx_float_0_5, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 696, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "chromo/fields.pyx":697
 *             self.binders.at[i, 'field_energy_prefactor'] = (
 *                 0.5 * self.binders.iloc[i].interaction_energy
 *                 * self.binders.iloc[i].interaction_volume             # <<<<<<<<<<<<<<
 *                 * self.vol_bin
 *             )
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base.binders, __pyx_n_s_iloc); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_interaction_volume); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "chromo/fields.pyx":698
 *                 0.5 * self.binders.iloc[i].interaction_energy
 *                 * self.binders.iloc[i].interaction_volume
 *                 * self.vol_bin             # <<<<<<<<<<<<<<
 *             )
 *             self.binders.at[i, 'interaction_energy_intranucleosome'] = (
 */
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->vol_bin); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyNumber_Multiply(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "chromo/fields.pyx":695
 *             binder_names.append(binder_name)
 *         for i in range(self.num_binders):
 *             self.binders.at[i, 'field_energy_prefactor'] = (             # <<<<<<<<<<<<<<
 *                 0.5 * self.binders.iloc[i].interaction_energy
 *                 * self.binders.iloc[i].interaction_volume
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base.binders, __pyx_n_s_at); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_field_energy_prefactor);
    __Pyx_GIVEREF(__pyx_n_s_field_energy_prefactor);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_n_s_field_energy_prefactor);
    __pyx_t_1 = 0;
    if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_t_8, __pyx_t_6) < 0)) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "chromo/fields.pyx":701
 *             )
 *             self.binders.at[i, 'interaction_energy_intranucleosome'] = (
 *                 self.binders.iloc[i].interaction_energy             # <<<<<<<<<<<<<<
 *                 * (1 - self.binders.iloc[i].interaction_volume / self.vol_bin)
 *             )
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base.binders, __pyx_n_s_iloc); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_6, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_interaction_energy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "chromo/fields.pyx":702
 *             self.binders.at[i, 'interaction_energy_intranucleosome'] = (
 *                 self.binders.iloc[i].interaction_energy
 *                 * (1 - self.binders.iloc[i].interaction_volume / self.vol_bin)             # <<<<<<<<<<<<<<
 *             )
 *             for next_binder in binder_names:
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base.binders, __pyx_n_s_iloc); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_8, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_interaction_volume); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->vol_bin); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_8, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "chromo/fields.pyx":700
 *                 * self.vol_bin
 *             )
 *             self.binders.at[i, 'interaction_energy_intranucleosome'] = (             # <<<<<<<<<<<<<<
 *                 self.binders.iloc[i].interaction_energy
 *                 * (1 - self.binders.iloc[i].interaction_volume / self.vol_bin)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base.binders, __pyx_n_s_at); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
    __Pyx_INCREF(__pyx_n_s_interaction_energy_intranucleoso);
    __Pyx_GIVEREF(__pyx_n_s_interaction_energy_intranucleoso);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_n_s_interaction_energy_intranucleoso);
    __pyx_t_6 = 0;
    if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_t_8, __pyx_t_1) < 0)) __PYX_ERR(0, 700, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "chromo/fields.pyx":704
 *                 * (1 - self.binders.iloc[i].interaction_volume / self.vol_bin)
 *             )
 *             for next_binder in binder_names:             # <<<<<<<<<<<<<<
 *                 if next_binder in self.binders.iloc[i].cross_talk_interaction_energy.keys():
 *                     self.binders.at[i, 'cross_talk_field_energy_prefactor'][next_binder] = (
 */
    __pyx_t_1 = __pyx_v_binder_names; __Pyx_INCREF(__pyx_t_1); __pyx_t_9 = 0;
    for (;;) {
      if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_8 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_8); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 704, __pyx_L1_error)
      #else
      __pyx_t_8 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 704, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_next_binder, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "chromo/fields.pyx":705
 *             )
 *             for next_binder in binder_names:
 *                 if next_binder in self.binders.iloc[i].cross_talk_interaction_energy.keys():             # <<<<<<<<<<<<<<
 *                     self.binders.at[i, 'cross_talk_field_energy_prefactor'][next_binder] = (
 *                         self.binders.iloc[i].cross_talk_interaction_energy[next_binder]
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base.binders, __pyx_n_s_iloc); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_5, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_cross_talk_interaction_energy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_keys); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_8 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_v_next_binder, __pyx_t_8, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 705, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_11 = (__pyx_t_10 != 0);
      if (__pyx_t_11) {

        /* "chromo/fields.pyx":707
 *                 if next_binder in self.binders.iloc[i].cross_talk_interaction_energy.keys():
 *                     self.binders.at[i, 'cross_talk_field_energy_prefactor'][next_binder] = (
 *                         self.binders.iloc[i].cross_talk_interaction_energy[next_binder]             # <<<<<<<<<<<<<<
 *                         * self.binders.iloc[i].interaction_volume
 *                         * self.vol_bin
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base.binders, __pyx_n_s_iloc); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 707, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_8, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 707, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_cross_talk_interaction_energy); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 707, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_t_8, __pyx_v_next_binder); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 707, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "chromo/fields.pyx":708
 *                     self.binders.at[i, 'cross_talk_field_energy_prefactor'][next_binder] = (
 *                         self.binders.iloc[i].cross_talk_interaction_energy[next_binder]
 *                         * self.binders.iloc[i].interaction_volume             # <<<<<<<<<<<<<<
 *                         * self.vol_bin
 *                     )
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base.binders, __pyx_n_s_iloc); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 708, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_8, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 708, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_interaction_volume); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 708, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyNumber_Multiply(__pyx_t_6, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 708, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "chromo/fields.pyx":709
 *                         self.binders.iloc[i].cross_talk_interaction_energy[next_binder]
 *                         * self.binders.iloc[i].interaction_volume
 *                         * self.vol_bin             # <<<<<<<<<<<<<<
 *                     )
 *                 else:
 */
        __pyx_t_8 = PyFloat_FromDouble(__pyx_v_self->vol_bin); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 709, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_6 = PyNumber_Multiply(__pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 709, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "chromo/fields.pyx":706
 *             for next_binder in binder_names:
 *                 if next_binder in self.binders.iloc[i].cross_talk_interaction_energy.keys():
 *                     self.binders.at[i, 'cross_talk_field_energy_prefactor'][next_binder] = (             # <<<<<<<<<<<<<<
 *                         self.binders.iloc[i].cross_talk_interaction_energy[next_binder]
 *                         * self.binders.iloc[i].interaction_volume
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base.binders, __pyx_n_s_at); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 706, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 706, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 706, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_5);
        __Pyx_INCREF(__pyx_n_s_cross_talk_field_energy_prefacto);
        __Pyx_GIVEREF(__pyx_n_s_cross_talk_field_energy_prefacto);
        PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_n_s_cross_talk_field_energy_prefacto);
        __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_8, __pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 706, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_v_next_binder, __pyx_t_6) < 0)) __PYX_ERR(0, 706, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "chromo/fields.pyx":705
 *             )
 *             for next_binder in binder_names:
 *                 if next_binder in self.binders.iloc[i].cross_talk_interaction_energy.keys():             # <<<<<<<<<<<<<<
 *                     self.binders.at[i, 'cross_talk_field_energy_prefactor'][next_binder] = (
 *                         self.binders.iloc[i].cross_talk_interaction_energy[next_binder]
 */
        goto __pyx_L9;
      }

      /* "chromo/fields.pyx":712
 *                     )
 *                 else:
 *                     self.binders.at[i, 'cross_talk_field_energy_prefactor'][next_binder] = 0             # <<<<<<<<<<<<<<
 * 
 *     cpdef dict get_accessible_volumes(
 */
      /*else*/ {
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base.binders, __pyx_n_s_at); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 712, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 712, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 712, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_5);
        __Pyx_INCREF(__pyx_n_s_cross_talk_field_energy_prefacto);
        __Pyx_GIVEREF(__pyx_n_s_cross_talk_field_energy_prefacto);
        PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_n_s_cross_talk_field_energy_prefacto);
        __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_6, __pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 712, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_v_next_binder, __pyx_int_0) < 0)) __PYX_ERR(0, 712, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_L9:;

      /* "chromo/fields.pyx":704
 *                 * (1 - self.binders.iloc[i].interaction_volume / self.vol_bin)
 *             )
 *             for next_binder in binder_names:             # <<<<<<<<<<<<<<
 *                 if next_binder in self.binders.iloc[i].cross_talk_interaction_energy.keys():
 *                     self.binders.at[i, 'cross_talk_field_energy_prefactor'][next_binder] = (
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "chromo/fields.pyx":687
 *                 )
 * 
 *     def init_field_energy_prefactors(self):             # <<<<<<<<<<<<<<
 *         """Initialize the field energy prefactor for each reader protein.
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.init_field_energy_prefactors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_binder_names);
  __Pyx_XDECREF(__pyx_v_binder_name);
  __Pyx_XDECREF(__pyx_v_next_binder);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":714
 *                     self.binders.at[i, 'cross_talk_field_energy_prefactor'][next_binder] = 0
 * 
 *     cpdef dict get_accessible_volumes(             # <<<<<<<<<<<<<<
 *             self, long n_side, bint assume_fully_accessible
 *     ):
 */

static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_7get_accessible_volumes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6chromo_6fields_19UniformDensityField_get_accessible_volumes(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, long __pyx_v_n_side, int __pyx_v_assume_fully_accessible, int __pyx_skip_dispatch) {
  long __pyx_v_i;
  __Pyx_memviewslice __pyx_v_split_voxels = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_xyz_inds = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_xyz_coords = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_dxyz_point = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_access_vols = 0;
  PyObject *__pyx_v_buffer_dist = NULL;
  long __pyx_7genexpr__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  long __pyx_t_9;
  long __pyx_t_10;
  long __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  __Pyx_memviewslice __pyx_t_14 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_15 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_16 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_17 = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_t_18;
  double __pyx_t_19;
  double __pyx_t_20;
  double __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  __Pyx_memviewslice __pyx_t_23 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_accessible_volumes", 0);
  __Pyx_TraceCall("get_accessible_volumes", __pyx_f[0], 714, 0, __PYX_ERR(0, 714, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_accessible_volumes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 714, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6chromo_6fields_19UniformDensityField_7get_accessible_volumes)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_n_side); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 714, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_assume_fully_accessible); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 714, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 714, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 714, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 714, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_6) {
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 714, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 714, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "chromo/fields.pyx":753
 *         cdef double[:, ::1] xyz_coords, dxyz_point
 *         cdef dict access_vols
 *         access_vols = {i : self.vol_bin for i in range(self.n_bins)}             # <<<<<<<<<<<<<<
 *         if assume_fully_accessible == 1:
 *             return access_vols
 */
  { /* enter inner scope */
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __pyx_v_self->n_bins;
    __pyx_t_10 = __pyx_t_9;
    for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
      __pyx_7genexpr__pyx_v_i = __pyx_t_11;
      __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_7genexpr__pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 753, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->vol_bin); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 753, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(PyDict_SetItem(__pyx_t_1, (PyObject*)__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 753, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_v_access_vols = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "chromo/fields.pyx":754
 *         cdef dict access_vols
 *         access_vols = {i : self.vol_bin for i in range(self.n_bins)}
 *         if assume_fully_accessible == 1:             # <<<<<<<<<<<<<<
 *             return access_vols
 *         if self.confine_type == "Spherical":
 */
  __pyx_t_12 = ((__pyx_v_assume_fully_accessible == 1) != 0);
  if (__pyx_t_12) {

    /* "chromo/fields.pyx":755
 *         access_vols = {i : self.vol_bin for i in range(self.n_bins)}
 *         if assume_fully_accessible == 1:
 *             return access_vols             # <<<<<<<<<<<<<<
 *         if self.confine_type == "Spherical":
 *             xyz_inds = np.zeros((self.n_bins, 3), dtype=int)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_access_vols);
    __pyx_r = __pyx_v_access_vols;
    goto __pyx_L0;

    /* "chromo/fields.pyx":754
 *         cdef dict access_vols
 *         access_vols = {i : self.vol_bin for i in range(self.n_bins)}
 *         if assume_fully_accessible == 1:             # <<<<<<<<<<<<<<
 *             return access_vols
 *         if self.confine_type == "Spherical":
 */
  }

  /* "chromo/fields.pyx":756
 *         if assume_fully_accessible == 1:
 *             return access_vols
 *         if self.confine_type == "Spherical":             # <<<<<<<<<<<<<<
 *             xyz_inds = np.zeros((self.n_bins, 3), dtype=int)
 *             for i in range(self.n_bins):
 */
  __pyx_t_12 = (__Pyx_PyString_Equals(__pyx_v_self->__pyx_base.confine_type, __pyx_n_s_Spherical, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 756, __pyx_L1_error)
  __pyx_t_13 = (__pyx_t_12 != 0);
  if (__pyx_t_13) {

    /* "chromo/fields.pyx":757
 *             return access_vols
 *         if self.confine_type == "Spherical":
 *             xyz_inds = np.zeros((self.n_bins, 3), dtype=int)             # <<<<<<<<<<<<<<
 *             for i in range(self.n_bins):
 *                 xyz_inds[i, :] = super_ind_to_inds(i, self.nx, self.ny)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->n_bins); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_3);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 757, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_14 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_long(__pyx_t_8, PyBUF_WRITABLE); if (unlikely(!__pyx_t_14.memview)) __PYX_ERR(0, 757, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_xyz_inds = __pyx_t_14;
    __pyx_t_14.memview = NULL;
    __pyx_t_14.data = NULL;

    /* "chromo/fields.pyx":758
 *         if self.confine_type == "Spherical":
 *             xyz_inds = np.zeros((self.n_bins, 3), dtype=int)
 *             for i in range(self.n_bins):             # <<<<<<<<<<<<<<
 *                 xyz_inds[i, :] = super_ind_to_inds(i, self.nx, self.ny)
 *             xyz_coords = self.get_voxel_coords(xyz_inds)
 */
    __pyx_t_9 = __pyx_v_self->n_bins;
    __pyx_t_10 = __pyx_t_9;
    for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
      __pyx_v_i = __pyx_t_11;

      /* "chromo/fields.pyx":759
 *             xyz_inds = np.zeros((self.n_bins, 3), dtype=int)
 *             for i in range(self.n_bins):
 *                 xyz_inds[i, :] = super_ind_to_inds(i, self.nx, self.ny)             # <<<<<<<<<<<<<<
 *             xyz_coords = self.get_voxel_coords(xyz_inds)
 *             buffer_dist = np.sqrt(2) / 4 * max(self.dx, self.dy, self.dz)
 */
      __pyx_t_15 = __pyx_f_6chromo_6fields_super_ind_to_inds(__pyx_v_i, __pyx_v_self->nx, __pyx_v_self->ny, 0); if (unlikely(!__pyx_t_15.memview)) __PYX_ERR(0, 759, __pyx_L1_error)
      __pyx_t_16.data = __pyx_v_xyz_inds.data;
      __pyx_t_16.memview = __pyx_v_xyz_inds.memview;
      __PYX_INC_MEMVIEW(&__pyx_t_16, 0);
      {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_i;
        Py_ssize_t __pyx_tmp_shape = __pyx_v_xyz_inds.shape[0];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_xyz_inds.strides[0];
        if (__pyx_tmp_idx < 0)
            __pyx_tmp_idx += __pyx_tmp_shape;
        if (unlikely(!__Pyx_is_valid_index(__pyx_tmp_idx, __pyx_tmp_shape))) {
            PyErr_SetString(PyExc_IndexError,
                            "Index out of bounds (axis 0)");
            __PYX_ERR(0, 759, __pyx_L1_error)
        }
        __pyx_t_16.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_16.shape[0] = __pyx_v_xyz_inds.shape[1];
__pyx_t_16.strides[0] = __pyx_v_xyz_inds.strides[1];
    __pyx_t_16.suboffsets[0] = -1;

if (unlikely(__pyx_memoryview_copy_contents(__pyx_t_15, __pyx_t_16, 1, 1, 0) < 0)) __PYX_ERR(0, 759, __pyx_L1_error)
      __PYX_XDEC_MEMVIEW(&__pyx_t_16, 1);
      __pyx_t_16.memview = NULL;
      __pyx_t_16.data = NULL;
      __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
      __pyx_t_15.memview = NULL;
      __pyx_t_15.data = NULL;
    }

    /* "chromo/fields.pyx":760
 *             for i in range(self.n_bins):
 *                 xyz_inds[i, :] = super_ind_to_inds(i, self.nx, self.ny)
 *             xyz_coords = self.get_voxel_coords(xyz_inds)             # <<<<<<<<<<<<<<
 *             buffer_dist = np.sqrt(2) / 4 * max(self.dx, self.dy, self.dz)
 *             split_voxels = self.get_split_voxels(xyz_coords, buffer_dist)
 */
    __pyx_t_17 = ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_voxel_coords(__pyx_v_self, __pyx_v_xyz_inds); if (unlikely(!__pyx_t_17.memview)) __PYX_ERR(0, 760, __pyx_L1_error)
    __pyx_v_xyz_coords = __pyx_t_17;
    __pyx_t_17.memview = NULL;
    __pyx_t_17.data = NULL;

    /* "chromo/fields.pyx":761
 *                 xyz_inds[i, :] = super_ind_to_inds(i, self.nx, self.ny)
 *             xyz_coords = self.get_voxel_coords(xyz_inds)
 *             buffer_dist = np.sqrt(2) / 4 * max(self.dx, self.dy, self.dz)             # <<<<<<<<<<<<<<
 *             split_voxels = self.get_split_voxels(xyz_coords, buffer_dist)
 *             dxyz_point = self.define_voxel_subgrid(n_side)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_8 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_int_2) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_int_2);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_8, __pyx_int_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_18 = __pyx_v_self->dy;
    __pyx_t_19 = __pyx_v_self->dz;
    __pyx_t_20 = __pyx_v_self->dx;
    if (((__pyx_t_18 > __pyx_t_20) != 0)) {
      __pyx_t_21 = __pyx_t_18;
    } else {
      __pyx_t_21 = __pyx_t_20;
    }
    __pyx_t_20 = __pyx_t_21;
    if (((__pyx_t_19 > __pyx_t_20) != 0)) {
      __pyx_t_21 = __pyx_t_19;
    } else {
      __pyx_t_21 = __pyx_t_20;
    }
    __pyx_t_8 = PyFloat_FromDouble(__pyx_t_21); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_buffer_dist = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "chromo/fields.pyx":762
 *             xyz_coords = self.get_voxel_coords(xyz_inds)
 *             buffer_dist = np.sqrt(2) / 4 * max(self.dx, self.dy, self.dz)
 *             split_voxels = self.get_split_voxels(xyz_coords, buffer_dist)             # <<<<<<<<<<<<<<
 *             dxyz_point = self.define_voxel_subgrid(n_side)
 *             for i in range(self.n_bins):
 */
    __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_v_buffer_dist); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 762, __pyx_L1_error)
    __pyx_t_15 = ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_split_voxels(__pyx_v_self, __pyx_v_xyz_coords, __pyx_t_21); if (unlikely(!__pyx_t_15.memview)) __PYX_ERR(0, 762, __pyx_L1_error)
    __pyx_v_split_voxels = __pyx_t_15;
    __pyx_t_15.memview = NULL;
    __pyx_t_15.data = NULL;

    /* "chromo/fields.pyx":763
 *             buffer_dist = np.sqrt(2) / 4 * max(self.dx, self.dy, self.dz)
 *             split_voxels = self.get_split_voxels(xyz_coords, buffer_dist)
 *             dxyz_point = self.define_voxel_subgrid(n_side)             # <<<<<<<<<<<<<<
 *             for i in range(self.n_bins):
 *                 if split_voxels[i] == 1:
 */
    __pyx_t_17 = ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->define_voxel_subgrid(__pyx_v_self, __pyx_v_n_side); if (unlikely(!__pyx_t_17.memview)) __PYX_ERR(0, 763, __pyx_L1_error)
    __pyx_v_dxyz_point = __pyx_t_17;
    __pyx_t_17.memview = NULL;
    __pyx_t_17.data = NULL;

    /* "chromo/fields.pyx":764
 *             split_voxels = self.get_split_voxels(xyz_coords, buffer_dist)
 *             dxyz_point = self.define_voxel_subgrid(n_side)
 *             for i in range(self.n_bins):             # <<<<<<<<<<<<<<
 *                 if split_voxels[i] == 1:
 *                     access_vols[i] = (
 */
    __pyx_t_9 = __pyx_v_self->n_bins;
    __pyx_t_10 = __pyx_t_9;
    for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
      __pyx_v_i = __pyx_t_11;

      /* "chromo/fields.pyx":765
 *             dxyz_point = self.define_voxel_subgrid(n_side)
 *             for i in range(self.n_bins):
 *                 if split_voxels[i] == 1:             # <<<<<<<<<<<<<<
 *                     access_vols[i] = (
 *                         self.vol_bin *
 */
      __pyx_t_22 = __pyx_v_i;
      __pyx_t_7 = -1;
      if (__pyx_t_22 < 0) {
        __pyx_t_22 += __pyx_v_split_voxels.shape[0];
        if (unlikely(__pyx_t_22 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_22 >= __pyx_v_split_voxels.shape[0])) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 765, __pyx_L1_error)
      }
      __pyx_t_13 = (((*((long *) ( /* dim=0 */ (__pyx_v_split_voxels.data + __pyx_t_22 * __pyx_v_split_voxels.strides[0]) ))) == 1) != 0);
      if (__pyx_t_13) {

        /* "chromo/fields.pyx":768
 *                     access_vols[i] = (
 *                         self.vol_bin *
 *                         self.get_frac_accessible(xyz_coords[i], dxyz_point)             # <<<<<<<<<<<<<<
 *                     )
 *         return access_vols
 */
        __pyx_t_23.data = __pyx_v_xyz_coords.data;
        __pyx_t_23.memview = __pyx_v_xyz_coords.memview;
        __PYX_INC_MEMVIEW(&__pyx_t_23, 0);
        {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_i;
        Py_ssize_t __pyx_tmp_shape = __pyx_v_xyz_coords.shape[0];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_xyz_coords.strides[0];
        if (__pyx_tmp_idx < 0)
            __pyx_tmp_idx += __pyx_tmp_shape;
        if (unlikely(!__Pyx_is_valid_index(__pyx_tmp_idx, __pyx_tmp_shape))) {
            PyErr_SetString(PyExc_IndexError,
                            "Index out of bounds (axis 0)");
            __PYX_ERR(0, 768, __pyx_L1_error)
        }
        __pyx_t_23.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_23.shape[0] = __pyx_v_xyz_coords.shape[1];
__pyx_t_23.strides[0] = __pyx_v_xyz_coords.strides[1];
    __pyx_t_23.suboffsets[0] = -1;

__pyx_t_2 = PyFloat_FromDouble((__pyx_v_self->vol_bin * ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_frac_accessible(__pyx_v_self, __pyx_t_23, __pyx_v_dxyz_point))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 767, __pyx_L1_error)

        /* "chromo/fields.pyx":767
 *                 if split_voxels[i] == 1:
 *                     access_vols[i] = (
 *                         self.vol_bin *             # <<<<<<<<<<<<<<
 *                         self.get_frac_accessible(xyz_coords[i], dxyz_point)
 *                     )
 */
        __Pyx_GOTREF(__pyx_t_2);
        __PYX_XDEC_MEMVIEW(&__pyx_t_23, 1);
        __pyx_t_23.memview = NULL;
        __pyx_t_23.data = NULL;

        /* "chromo/fields.pyx":766
 *             for i in range(self.n_bins):
 *                 if split_voxels[i] == 1:
 *                     access_vols[i] = (             # <<<<<<<<<<<<<<
 *                         self.vol_bin *
 *                         self.get_frac_accessible(xyz_coords[i], dxyz_point)
 */
        __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 766, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely(PyDict_SetItem(__pyx_v_access_vols, __pyx_t_8, __pyx_t_2) < 0)) __PYX_ERR(0, 766, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "chromo/fields.pyx":765
 *             dxyz_point = self.define_voxel_subgrid(n_side)
 *             for i in range(self.n_bins):
 *                 if split_voxels[i] == 1:             # <<<<<<<<<<<<<<
 *                     access_vols[i] = (
 *                         self.vol_bin *
 */
      }
    }

    /* "chromo/fields.pyx":756
 *         if assume_fully_accessible == 1:
 *             return access_vols
 *         if self.confine_type == "Spherical":             # <<<<<<<<<<<<<<
 *             xyz_inds = np.zeros((self.n_bins, 3), dtype=int)
 *             for i in range(self.n_bins):
 */
  }

  /* "chromo/fields.pyx":770
 *                         self.get_frac_accessible(xyz_coords[i], dxyz_point)
 *                     )
 *         return access_vols             # <<<<<<<<<<<<<<
 * 
 *     cdef double[:, ::1] get_voxel_coords(self, long[:, ::1] xyz_inds):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_access_vols);
  __pyx_r = __pyx_v_access_vols;
  goto __pyx_L0;

  /* "chromo/fields.pyx":714
 *                     self.binders.at[i, 'cross_talk_field_energy_prefactor'][next_binder] = 0
 * 
 *     cpdef dict get_accessible_volumes(             # <<<<<<<<<<<<<<
 *             self, long n_side, bint assume_fully_accessible
 *     ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __PYX_XDEC_MEMVIEW(&__pyx_t_14, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_16, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_17, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_23, 1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.get_accessible_volumes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_split_voxels, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_xyz_inds, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_xyz_coords, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_dxyz_point, 1);
  __Pyx_XDECREF(__pyx_v_access_vols);
  __Pyx_XDECREF(__pyx_v_buffer_dist);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_7get_accessible_volumes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6chromo_6fields_19UniformDensityField_6get_accessible_volumes[] = "Numerically find accessible volume of voxels at confinement edge.\n        \n        Notes\n        -----\n        Right now, accessible volume calculations are only relevant to spherical\n        confinements.\n\n        Parameters\n        ----------\n        n_side : long\n            When a voxel is determined to be partially contained by the\n            confinement, we will numerically determine the accessible volume in\n            that voxel. To do this, we will place a cubic grid of points within\n            the voxel, and we will count the number of grid points within the\n            confinement. The parameter `n_side` gives the number of grid points\n            to include on each side of the cubic grid. For example, if n_side =\n            10, then we will place a 10x10x10 grid of points in every partially\n            contained voxel to determine the accessible volume of that voxel.\n        assume_fully_accessible : bint\n            Flag indicating whether to assume all voxels are fully accessible.\n            Assume voxels are fully accessible if the voxel volumes are far less\n            than the confinement volume. Value of `1` indicates that all voxels\n            are assumed to be fully accessible, bypassing the calculation of\n            accessible volume.\n\n        Returns\n        -------\n        access_vol : dict\n            Mapping of bin super index to accessible volume inside the \n            confining boundary\n        ";
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_7get_accessible_volumes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_n_side;
  int __pyx_v_assume_fully_accessible;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_accessible_volumes (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n_side,&__pyx_n_s_assume_fully_accessible,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_side)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_assume_fully_accessible)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_accessible_volumes", 1, 2, 2, 1); __PYX_ERR(0, 714, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_accessible_volumes") < 0)) __PYX_ERR(0, 714, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_n_side = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_n_side == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 715, __pyx_L3_error)
    __pyx_v_assume_fully_accessible = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_assume_fully_accessible == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 715, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_accessible_volumes", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 714, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.get_accessible_volumes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_6get_accessible_volumes(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), __pyx_v_n_side, __pyx_v_assume_fully_accessible);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_6get_accessible_volumes(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, long __pyx_v_n_side, int __pyx_v_assume_fully_accessible) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_accessible_volumes", 0);
  __Pyx_TraceCall("get_accessible_volumes (wrapper)", __pyx_f[0], 714, 0, __PYX_ERR(0, 714, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6chromo_6fields_19UniformDensityField_get_accessible_volumes(__pyx_v_self, __pyx_v_n_side, __pyx_v_assume_fully_accessible, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.get_accessible_volumes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":772
 *         return access_vols
 * 
 *     cdef double[:, ::1] get_voxel_coords(self, long[:, ::1] xyz_inds):             # <<<<<<<<<<<<<<
 *         """Get voxel coordinates from xyz bin indices.
 * 
 */

static __Pyx_memviewslice __pyx_f_6chromo_6fields_19UniformDensityField_get_voxel_coords(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, __Pyx_memviewslice __pyx_v_xyz_inds) {
  long __pyx_v_i;
  long __pyx_v_j;
  __Pyx_memviewslice __pyx_v_nxyz = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_dxyz = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_centralized_inds = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_xyz_coords = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_r = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_t_9;
  long __pyx_t_10;
  long __pyx_t_11;
  long __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  int __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_voxel_coords", 0);
  __Pyx_TraceCall("get_voxel_coords", __pyx_f[0], 772, 0, __PYX_ERR(0, 772, __pyx_L1_error));

  /* "chromo/fields.pyx":799
 *         cdef long[:] nxyz
 *         cdef double[:, ::1] dxyz, centralized_inds, xyz_coords
 *         nxyz = np.array([self.nx, self.ny, self.nz])             # <<<<<<<<<<<<<<
 *         dxyz = np.array([
 *                 [self.dx, 0, 0],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_self->nx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_self->ny); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_self->nz); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nxyz = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "chromo/fields.pyx":800
 *         cdef double[:, ::1] dxyz, centralized_inds, xyz_coords
 *         nxyz = np.array([self.nx, self.ny, self.nz])
 *         dxyz = np.array([             # <<<<<<<<<<<<<<
 *                 [self.dx, 0, 0],
 *                 [0, self.dy, 0],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "chromo/fields.pyx":801
 *         nxyz = np.array([self.nx, self.ny, self.nz])
 *         dxyz = np.array([
 *                 [self.dx, 0, 0],             # <<<<<<<<<<<<<<
 *                 [0, self.dy, 0],
 *                 [0, 0, self.dz]
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->dx); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_int_0);
  __pyx_t_3 = 0;

  /* "chromo/fields.pyx":802
 *         dxyz = np.array([
 *                 [self.dx, 0, 0],
 *                 [0, self.dy, 0],             # <<<<<<<<<<<<<<
 *                 [0, 0, self.dz]
 *         ])
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->dy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_int_0);
  __pyx_t_3 = 0;

  /* "chromo/fields.pyx":803
 *                 [self.dx, 0, 0],
 *                 [0, self.dy, 0],
 *                 [0, 0, self.dz]             # <<<<<<<<<<<<<<
 *         ])
 *         centralized_inds = np.zeros((self.n_bins, 3))
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->dz); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "chromo/fields.pyx":800
 *         cdef double[:, ::1] dxyz, centralized_inds, xyz_coords
 *         nxyz = np.array([self.nx, self.ny, self.nz])
 *         dxyz = np.array([             # <<<<<<<<<<<<<<
 *                 [self.dx, 0, 0],
 *                 [0, self.dy, 0],
 */
  __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dxyz = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "chromo/fields.pyx":805
 *                 [0, 0, self.dz]
 *         ])
 *         centralized_inds = np.zeros((self.n_bins, 3))             # <<<<<<<<<<<<<<
 *         for i in range(self.n_bins):
 *             for j in range(3):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_self->n_bins); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_3);
  __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_6, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_centralized_inds = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "chromo/fields.pyx":806
 *         ])
 *         centralized_inds = np.zeros((self.n_bins, 3))
 *         for i in range(self.n_bins):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 centralized_inds[i, j] = xyz_inds[i, j] - (nxyz[j] - 1) / 2
 */
  __pyx_t_9 = __pyx_v_self->n_bins;
  __pyx_t_10 = __pyx_t_9;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
    __pyx_v_i = __pyx_t_11;

    /* "chromo/fields.pyx":807
 *         centralized_inds = np.zeros((self.n_bins, 3))
 *         for i in range(self.n_bins):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 centralized_inds[i, j] = xyz_inds[i, j] - (nxyz[j] - 1) / 2
 *         xyz_coords = np.matmul(centralized_inds, dxyz)
 */
    for (__pyx_t_12 = 0; __pyx_t_12 < 3; __pyx_t_12+=1) {
      __pyx_v_j = __pyx_t_12;

      /* "chromo/fields.pyx":808
 *         for i in range(self.n_bins):
 *             for j in range(3):
 *                 centralized_inds[i, j] = xyz_inds[i, j] - (nxyz[j] - 1) / 2             # <<<<<<<<<<<<<<
 *         xyz_coords = np.matmul(centralized_inds, dxyz)
 *         return xyz_coords
 */
      __pyx_t_13 = __pyx_v_i;
      __pyx_t_14 = __pyx_v_j;
      __pyx_t_15 = -1;
      if (__pyx_t_13 < 0) {
        __pyx_t_13 += __pyx_v_xyz_inds.shape[0];
        if (unlikely(__pyx_t_13 < 0)) __pyx_t_15 = 0;
      } else if (unlikely(__pyx_t_13 >= __pyx_v_xyz_inds.shape[0])) __pyx_t_15 = 0;
      if (__pyx_t_14 < 0) {
        __pyx_t_14 += __pyx_v_xyz_inds.shape[1];
        if (unlikely(__pyx_t_14 < 0)) __pyx_t_15 = 1;
      } else if (unlikely(__pyx_t_14 >= __pyx_v_xyz_inds.shape[1])) __pyx_t_15 = 1;
      if (unlikely(__pyx_t_15 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_15);
        __PYX_ERR(0, 808, __pyx_L1_error)
      }
      __pyx_t_16 = __pyx_v_j;
      __pyx_t_15 = -1;
      if (__pyx_t_16 < 0) {
        __pyx_t_16 += __pyx_v_nxyz.shape[0];
        if (unlikely(__pyx_t_16 < 0)) __pyx_t_15 = 0;
      } else if (unlikely(__pyx_t_16 >= __pyx_v_nxyz.shape[0])) __pyx_t_15 = 0;
      if (unlikely(__pyx_t_15 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_15);
        __PYX_ERR(0, 808, __pyx_L1_error)
      }
      __pyx_t_17 = __pyx_v_i;
      __pyx_t_18 = __pyx_v_j;
      __pyx_t_15 = -1;
      if (__pyx_t_17 < 0) {
        __pyx_t_17 += __pyx_v_centralized_inds.shape[0];
        if (unlikely(__pyx_t_17 < 0)) __pyx_t_15 = 0;
      } else if (unlikely(__pyx_t_17 >= __pyx_v_centralized_inds.shape[0])) __pyx_t_15 = 0;
      if (__pyx_t_18 < 0) {
        __pyx_t_18 += __pyx_v_centralized_inds.shape[1];
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_15 = 1;
      } else if (unlikely(__pyx_t_18 >= __pyx_v_centralized_inds.shape[1])) __pyx_t_15 = 1;
      if (unlikely(__pyx_t_15 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_15);
        __PYX_ERR(0, 808, __pyx_L1_error)
      }
      *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_centralized_inds.data + __pyx_t_17 * __pyx_v_centralized_inds.strides[0]) )) + __pyx_t_18)) )) = ((*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_xyz_inds.data + __pyx_t_13 * __pyx_v_xyz_inds.strides[0]) )) + __pyx_t_14)) ))) - __Pyx_div_long(((*((long *) ( /* dim=0 */ (__pyx_v_nxyz.data + __pyx_t_16 * __pyx_v_nxyz.strides[0]) ))) - 1), 2));
    }
  }

  /* "chromo/fields.pyx":809
 *             for j in range(3):
 *                 centralized_inds[i, j] = xyz_inds[i, j] - (nxyz[j] - 1) / 2
 *         xyz_coords = np.matmul(centralized_inds, dxyz)             # <<<<<<<<<<<<<<
 *         return xyz_coords
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_matmul); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_centralized_inds, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __pyx_memoryview_fromslice(__pyx_v_dxyz, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = NULL;
  __pyx_t_15 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_15 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 809, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 809, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_15, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_15, __pyx_t_6);
    __pyx_t_3 = 0;
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 809, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_xyz_coords = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "chromo/fields.pyx":810
 *                 centralized_inds[i, j] = xyz_inds[i, j] - (nxyz[j] - 1) / 2
 *         xyz_coords = np.matmul(centralized_inds, dxyz)
 *         return xyz_coords             # <<<<<<<<<<<<<<
 * 
 *     cdef long[:] get_split_voxels(
 */
  __PYX_INC_MEMVIEW(&__pyx_v_xyz_coords, 0);
  __pyx_r = __pyx_v_xyz_coords;
  goto __pyx_L0;

  /* "chromo/fields.pyx":772
 *         return access_vols
 * 
 *     cdef double[:, ::1] get_voxel_coords(self, long[:, ::1] xyz_inds):             # <<<<<<<<<<<<<<
 *         """Get voxel coordinates from xyz bin indices.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __pyx_r.data = NULL;
  __pyx_r.memview = NULL;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.get_voxel_coords", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  if (unlikely(!__pyx_r.memview)) {
    PyErr_SetString(PyExc_TypeError, "Memoryview return value is not initialized");
  }
  __pyx_L2:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_nxyz, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_dxyz, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_centralized_inds, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_xyz_coords, 1);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":812
 *         return xyz_coords
 * 
 *     cdef long[:] get_split_voxels(             # <<<<<<<<<<<<<<
 *         self, double[:, ::1] xyz_coords, double buffer_dist
 *     ):
 */

static __Pyx_memviewslice __pyx_f_6chromo_6fields_19UniformDensityField_get_split_voxels(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, __Pyx_memviewslice __pyx_v_xyz_coords, double __pyx_v_buffer_dist) {
  __Pyx_memviewslice __pyx_v_split_voxels = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_v_i;
  double __pyx_v_dist;
  __Pyx_memviewslice __pyx_r = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_memviewslice __pyx_t_5 = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_t_6;
  long __pyx_t_7;
  long __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_split_voxels", 0);
  __Pyx_TraceCall("get_split_voxels", __pyx_f[0], 812, 0, __PYX_ERR(0, 812, __pyx_L1_error));

  /* "chromo/fields.pyx":843
 *             the confinement
 *         """
 *         cdef long[:] split_voxels = np.ones(self.n_bins, dtype=int)             # <<<<<<<<<<<<<<
 * 
 *         for i in range(self.n_bins):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ones); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->n_bins); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 843, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_t_4, PyBUF_WRITABLE); if (unlikely(!__pyx_t_5.memview)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_split_voxels = __pyx_t_5;
  __pyx_t_5.memview = NULL;
  __pyx_t_5.data = NULL;

  /* "chromo/fields.pyx":845
 *         cdef long[:] split_voxels = np.ones(self.n_bins, dtype=int)
 * 
 *         for i in range(self.n_bins):             # <<<<<<<<<<<<<<
 *             dist = sqrt(
 *                 xyz_coords[i, 0] ** 2 +
 */
  __pyx_t_6 = __pyx_v_self->n_bins;
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "chromo/fields.pyx":847
 *         for i in range(self.n_bins):
 *             dist = sqrt(
 *                 xyz_coords[i, 0] ** 2 +             # <<<<<<<<<<<<<<
 *                 xyz_coords[i, 1] ** 2 +
 *                 xyz_coords[i, 2] ** 2
 */
    __pyx_t_9 = __pyx_v_i;
    __pyx_t_10 = 0;
    __pyx_t_11 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_xyz_coords.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_xyz_coords.shape[0])) __pyx_t_11 = 0;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_xyz_coords.shape[1];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 1;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_xyz_coords.shape[1])) __pyx_t_11 = 1;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 847, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":848
 *             dist = sqrt(
 *                 xyz_coords[i, 0] ** 2 +
 *                 xyz_coords[i, 1] ** 2 +             # <<<<<<<<<<<<<<
 *                 xyz_coords[i, 2] ** 2
 *             )
 */
    __pyx_t_12 = __pyx_v_i;
    __pyx_t_13 = 1;
    __pyx_t_11 = -1;
    if (__pyx_t_12 < 0) {
      __pyx_t_12 += __pyx_v_xyz_coords.shape[0];
      if (unlikely(__pyx_t_12 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_12 >= __pyx_v_xyz_coords.shape[0])) __pyx_t_11 = 0;
    if (__pyx_t_13 < 0) {
      __pyx_t_13 += __pyx_v_xyz_coords.shape[1];
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_11 = 1;
    } else if (unlikely(__pyx_t_13 >= __pyx_v_xyz_coords.shape[1])) __pyx_t_11 = 1;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 848, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":849
 *                 xyz_coords[i, 0] ** 2 +
 *                 xyz_coords[i, 1] ** 2 +
 *                 xyz_coords[i, 2] ** 2             # <<<<<<<<<<<<<<
 *             )
 *             if (dist < self.confine_length - buffer_dist or
 */
    __pyx_t_14 = __pyx_v_i;
    __pyx_t_15 = 2;
    __pyx_t_11 = -1;
    if (__pyx_t_14 < 0) {
      __pyx_t_14 += __pyx_v_xyz_coords.shape[0];
      if (unlikely(__pyx_t_14 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_14 >= __pyx_v_xyz_coords.shape[0])) __pyx_t_11 = 0;
    if (__pyx_t_15 < 0) {
      __pyx_t_15 += __pyx_v_xyz_coords.shape[1];
      if (unlikely(__pyx_t_15 < 0)) __pyx_t_11 = 1;
    } else if (unlikely(__pyx_t_15 >= __pyx_v_xyz_coords.shape[1])) __pyx_t_11 = 1;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 849, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":846
 * 
 *         for i in range(self.n_bins):
 *             dist = sqrt(             # <<<<<<<<<<<<<<
 *                 xyz_coords[i, 0] ** 2 +
 *                 xyz_coords[i, 1] ** 2 +
 */
    __pyx_v_dist = sqrt(((pow((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_xyz_coords.data + __pyx_t_9 * __pyx_v_xyz_coords.strides[0]) )) + __pyx_t_10)) ))), 2.0) + pow((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_xyz_coords.data + __pyx_t_12 * __pyx_v_xyz_coords.strides[0]) )) + __pyx_t_13)) ))), 2.0)) + pow((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_xyz_coords.data + __pyx_t_14 * __pyx_v_xyz_coords.strides[0]) )) + __pyx_t_15)) ))), 2.0)));

    /* "chromo/fields.pyx":851
 *                 xyz_coords[i, 2] ** 2
 *             )
 *             if (dist < self.confine_length - buffer_dist or             # <<<<<<<<<<<<<<
 *                 dist > self.confine_length + buffer_dist):
 *                 split_voxels[i] = 0
 */
    __pyx_t_17 = ((__pyx_v_dist < (__pyx_v_self->__pyx_base.confine_length - __pyx_v_buffer_dist)) != 0);
    if (!__pyx_t_17) {
    } else {
      __pyx_t_16 = __pyx_t_17;
      goto __pyx_L6_bool_binop_done;
    }

    /* "chromo/fields.pyx":852
 *             )
 *             if (dist < self.confine_length - buffer_dist or
 *                 dist > self.confine_length + buffer_dist):             # <<<<<<<<<<<<<<
 *                 split_voxels[i] = 0
 *         return split_voxels
 */
    __pyx_t_17 = ((__pyx_v_dist > (__pyx_v_self->__pyx_base.confine_length + __pyx_v_buffer_dist)) != 0);
    __pyx_t_16 = __pyx_t_17;
    __pyx_L6_bool_binop_done:;

    /* "chromo/fields.pyx":851
 *                 xyz_coords[i, 2] ** 2
 *             )
 *             if (dist < self.confine_length - buffer_dist or             # <<<<<<<<<<<<<<
 *                 dist > self.confine_length + buffer_dist):
 *                 split_voxels[i] = 0
 */
    if (__pyx_t_16) {

      /* "chromo/fields.pyx":853
 *             if (dist < self.confine_length - buffer_dist or
 *                 dist > self.confine_length + buffer_dist):
 *                 split_voxels[i] = 0             # <<<<<<<<<<<<<<
 *         return split_voxels
 * 
 */
      __pyx_t_15 = __pyx_v_i;
      __pyx_t_11 = -1;
      if (__pyx_t_15 < 0) {
        __pyx_t_15 += __pyx_v_split_voxels.shape[0];
        if (unlikely(__pyx_t_15 < 0)) __pyx_t_11 = 0;
      } else if (unlikely(__pyx_t_15 >= __pyx_v_split_voxels.shape[0])) __pyx_t_11 = 0;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        __PYX_ERR(0, 853, __pyx_L1_error)
      }
      *((long *) ( /* dim=0 */ (__pyx_v_split_voxels.data + __pyx_t_15 * __pyx_v_split_voxels.strides[0]) )) = 0;

      /* "chromo/fields.pyx":851
 *                 xyz_coords[i, 2] ** 2
 *             )
 *             if (dist < self.confine_length - buffer_dist or             # <<<<<<<<<<<<<<
 *                 dist > self.confine_length + buffer_dist):
 *                 split_voxels[i] = 0
 */
    }
  }

  /* "chromo/fields.pyx":854
 *                 dist > self.confine_length + buffer_dist):
 *                 split_voxels[i] = 0
 *         return split_voxels             # <<<<<<<<<<<<<<
 * 
 *     cdef double[:, ::1] define_voxel_subgrid(self, long n_pt_side):
 */
  __PYX_INC_MEMVIEW(&__pyx_v_split_voxels, 0);
  __pyx_r = __pyx_v_split_voxels;
  goto __pyx_L0;

  /* "chromo/fields.pyx":812
 *         return xyz_coords
 * 
 *     cdef long[:] get_split_voxels(             # <<<<<<<<<<<<<<
 *         self, double[:, ::1] xyz_coords, double buffer_dist
 *     ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __PYX_XDEC_MEMVIEW(&__pyx_t_5, 1);
  __pyx_r.data = NULL;
  __pyx_r.memview = NULL;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.get_split_voxels", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  if (unlikely(!__pyx_r.memview)) {
    PyErr_SetString(PyExc_TypeError, "Memoryview return value is not initialized");
  }
  __pyx_L2:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_split_voxels, 1);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":856
 *         return split_voxels
 * 
 *     cdef double[:, ::1] define_voxel_subgrid(self, long n_pt_side):             # <<<<<<<<<<<<<<
 *         """Define voxel subgrid for accessible volume calculation.
 * 
 */

static __Pyx_memviewslice __pyx_f_6chromo_6fields_19UniformDensityField_define_voxel_subgrid(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, long __pyx_v_n_pt_side) {
  long __pyx_v_total_points;
  double __pyx_v_dx_point;
  double __pyx_v_dy_point;
  double __pyx_v_dz_point;
  __Pyx_memviewslice __pyx_v_dxyz_point = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_v_i;
  __Pyx_memviewslice __pyx_r = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  __Pyx_memviewslice __pyx_t_10 = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_t_11;
  long __pyx_t_12;
  long __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("define_voxel_subgrid", 0);
  __Pyx_TraceCall("define_voxel_subgrid", __pyx_f[0], 856, 0, __PYX_ERR(0, 856, __pyx_L1_error));

  /* "chromo/fields.pyx":894
 *         cdef double[:, ::1] dxyz_point
 * 
 *         total_points = n_pt_side ** 3             # <<<<<<<<<<<<<<
 *         dx_point = self.dx / n_pt_side
 *         dy_point = self.dy / n_pt_side
 */
  __pyx_v_total_points = __Pyx_pow_long(__pyx_v_n_pt_side, 3);

  /* "chromo/fields.pyx":895
 * 
 *         total_points = n_pt_side ** 3
 *         dx_point = self.dx / n_pt_side             # <<<<<<<<<<<<<<
 *         dy_point = self.dy / n_pt_side
 *         dz_point = self.dz / n_pt_side
 */
  if (unlikely(__pyx_v_n_pt_side == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 895, __pyx_L1_error)
  }
  __pyx_v_dx_point = (__pyx_v_self->dx / __pyx_v_n_pt_side);

  /* "chromo/fields.pyx":896
 *         total_points = n_pt_side ** 3
 *         dx_point = self.dx / n_pt_side
 *         dy_point = self.dy / n_pt_side             # <<<<<<<<<<<<<<
 *         dz_point = self.dz / n_pt_side
 *         dxyz_point = np.reshape(
 */
  if (unlikely(__pyx_v_n_pt_side == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 896, __pyx_L1_error)
  }
  __pyx_v_dy_point = (__pyx_v_self->dy / __pyx_v_n_pt_side);

  /* "chromo/fields.pyx":897
 *         dx_point = self.dx / n_pt_side
 *         dy_point = self.dy / n_pt_side
 *         dz_point = self.dz / n_pt_side             # <<<<<<<<<<<<<<
 *         dxyz_point = np.reshape(
 *             np.mgrid[
 */
  if (unlikely(__pyx_v_n_pt_side == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 897, __pyx_L1_error)
  }
  __pyx_v_dz_point = (__pyx_v_self->dz / __pyx_v_n_pt_side);

  /* "chromo/fields.pyx":898
 *         dy_point = self.dy / n_pt_side
 *         dz_point = self.dz / n_pt_side
 *         dxyz_point = np.reshape(             # <<<<<<<<<<<<<<
 *             np.mgrid[
 *                 0:n_pt_side,0:n_pt_side, 0:n_pt_side
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_reshape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "chromo/fields.pyx":899
 *         dz_point = self.dz / n_pt_side
 *         dxyz_point = np.reshape(
 *             np.mgrid[             # <<<<<<<<<<<<<<
 *                 0:n_pt_side,0:n_pt_side, 0:n_pt_side
 *             ].T, (total_points, 3)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_mgrid); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "chromo/fields.pyx":900
 *         dxyz_point = np.reshape(
 *             np.mgrid[
 *                 0:n_pt_side,0:n_pt_side, 0:n_pt_side             # <<<<<<<<<<<<<<
 *             ].T, (total_points, 3)
 *         ).astype(float)
 */
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_n_pt_side); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "chromo/fields.pyx":899
 *         dz_point = self.dz / n_pt_side
 *         dxyz_point = np.reshape(
 *             np.mgrid[             # <<<<<<<<<<<<<<
 *                 0:n_pt_side,0:n_pt_side, 0:n_pt_side
 *             ].T, (total_points, 3)
 */
  __pyx_t_6 = PySlice_New(__pyx_int_0, __pyx_t_3, Py_None); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "chromo/fields.pyx":900
 *         dxyz_point = np.reshape(
 *             np.mgrid[
 *                 0:n_pt_side,0:n_pt_side, 0:n_pt_side             # <<<<<<<<<<<<<<
 *             ].T, (total_points, 3)
 *         ).astype(float)
 */
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_n_pt_side); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "chromo/fields.pyx":899
 *         dz_point = self.dz / n_pt_side
 *         dxyz_point = np.reshape(
 *             np.mgrid[             # <<<<<<<<<<<<<<
 *                 0:n_pt_side,0:n_pt_side, 0:n_pt_side
 *             ].T, (total_points, 3)
 */
  __pyx_t_7 = PySlice_New(__pyx_int_0, __pyx_t_3, Py_None); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "chromo/fields.pyx":900
 *         dxyz_point = np.reshape(
 *             np.mgrid[
 *                 0:n_pt_side,0:n_pt_side, 0:n_pt_side             # <<<<<<<<<<<<<<
 *             ].T, (total_points, 3)
 *         ).astype(float)
 */
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_n_pt_side); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "chromo/fields.pyx":899
 *         dz_point = self.dz / n_pt_side
 *         dxyz_point = np.reshape(
 *             np.mgrid[             # <<<<<<<<<<<<<<
 *                 0:n_pt_side,0:n_pt_side, 0:n_pt_side
 *             ].T, (total_points, 3)
 */
  __pyx_t_8 = PySlice_New(__pyx_int_0, __pyx_t_3, Py_None); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_8);
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "chromo/fields.pyx":901
 *             np.mgrid[
 *                 0:n_pt_side,0:n_pt_side, 0:n_pt_side
 *             ].T, (total_points, 3)             # <<<<<<<<<<<<<<
 *         ).astype(float)
 *         for i in range(total_points):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_T); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_v_total_points); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_3);
  __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_3, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 898, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_3, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 898, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 898, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_9, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_9, __pyx_t_5);
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 898, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "chromo/fields.pyx":902
 *                 0:n_pt_side,0:n_pt_side, 0:n_pt_side
 *             ].T, (total_points, 3)
 *         ).astype(float)             # <<<<<<<<<<<<<<
 *         for i in range(total_points):
 *             dxyz_point[i, 0] *= dx_point
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_astype); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, ((PyObject *)(&PyFloat_Type))) : __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)(&PyFloat_Type)));
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_10 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_10.memview)) __PYX_ERR(0, 902, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dxyz_point = __pyx_t_10;
  __pyx_t_10.memview = NULL;
  __pyx_t_10.data = NULL;

  /* "chromo/fields.pyx":903
 *             ].T, (total_points, 3)
 *         ).astype(float)
 *         for i in range(total_points):             # <<<<<<<<<<<<<<
 *             dxyz_point[i, 0] *= dx_point
 *             dxyz_point[i, 1] *= dy_point
 */
  __pyx_t_11 = __pyx_v_total_points;
  __pyx_t_12 = __pyx_t_11;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
    __pyx_v_i = __pyx_t_13;

    /* "chromo/fields.pyx":904
 *         ).astype(float)
 *         for i in range(total_points):
 *             dxyz_point[i, 0] *= dx_point             # <<<<<<<<<<<<<<
 *             dxyz_point[i, 1] *= dy_point
 *             dxyz_point[i, 2] *= dz_point
 */
    __pyx_t_14 = __pyx_v_i;
    __pyx_t_15 = 0;
    __pyx_t_9 = -1;
    if (__pyx_t_14 < 0) {
      __pyx_t_14 += __pyx_v_dxyz_point.shape[0];
      if (unlikely(__pyx_t_14 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_14 >= __pyx_v_dxyz_point.shape[0])) __pyx_t_9 = 0;
    if (__pyx_t_15 < 0) {
      __pyx_t_15 += __pyx_v_dxyz_point.shape[1];
      if (unlikely(__pyx_t_15 < 0)) __pyx_t_9 = 1;
    } else if (unlikely(__pyx_t_15 >= __pyx_v_dxyz_point.shape[1])) __pyx_t_9 = 1;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      __PYX_ERR(0, 904, __pyx_L1_error)
    }
    *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_dxyz_point.data + __pyx_t_14 * __pyx_v_dxyz_point.strides[0]) )) + __pyx_t_15)) )) *= __pyx_v_dx_point;

    /* "chromo/fields.pyx":905
 *         for i in range(total_points):
 *             dxyz_point[i, 0] *= dx_point
 *             dxyz_point[i, 1] *= dy_point             # <<<<<<<<<<<<<<
 *             dxyz_point[i, 2] *= dz_point
 *         return dxyz_point
 */
    __pyx_t_15 = __pyx_v_i;
    __pyx_t_14 = 1;
    __pyx_t_9 = -1;
    if (__pyx_t_15 < 0) {
      __pyx_t_15 += __pyx_v_dxyz_point.shape[0];
      if (unlikely(__pyx_t_15 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_15 >= __pyx_v_dxyz_point.shape[0])) __pyx_t_9 = 0;
    if (__pyx_t_14 < 0) {
      __pyx_t_14 += __pyx_v_dxyz_point.shape[1];
      if (unlikely(__pyx_t_14 < 0)) __pyx_t_9 = 1;
    } else if (unlikely(__pyx_t_14 >= __pyx_v_dxyz_point.shape[1])) __pyx_t_9 = 1;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      __PYX_ERR(0, 905, __pyx_L1_error)
    }
    *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_dxyz_point.data + __pyx_t_15 * __pyx_v_dxyz_point.strides[0]) )) + __pyx_t_14)) )) *= __pyx_v_dy_point;

    /* "chromo/fields.pyx":906
 *             dxyz_point[i, 0] *= dx_point
 *             dxyz_point[i, 1] *= dy_point
 *             dxyz_point[i, 2] *= dz_point             # <<<<<<<<<<<<<<
 *         return dxyz_point
 * 
 */
    __pyx_t_14 = __pyx_v_i;
    __pyx_t_15 = 2;
    __pyx_t_9 = -1;
    if (__pyx_t_14 < 0) {
      __pyx_t_14 += __pyx_v_dxyz_point.shape[0];
      if (unlikely(__pyx_t_14 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_14 >= __pyx_v_dxyz_point.shape[0])) __pyx_t_9 = 0;
    if (__pyx_t_15 < 0) {
      __pyx_t_15 += __pyx_v_dxyz_point.shape[1];
      if (unlikely(__pyx_t_15 < 0)) __pyx_t_9 = 1;
    } else if (unlikely(__pyx_t_15 >= __pyx_v_dxyz_point.shape[1])) __pyx_t_9 = 1;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      __PYX_ERR(0, 906, __pyx_L1_error)
    }
    *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_dxyz_point.data + __pyx_t_14 * __pyx_v_dxyz_point.strides[0]) )) + __pyx_t_15)) )) *= __pyx_v_dz_point;
  }

  /* "chromo/fields.pyx":907
 *             dxyz_point[i, 1] *= dy_point
 *             dxyz_point[i, 2] *= dz_point
 *         return dxyz_point             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_frac_accessible(
 */
  __PYX_INC_MEMVIEW(&__pyx_v_dxyz_point, 0);
  __pyx_r = __pyx_v_dxyz_point;
  goto __pyx_L0;

  /* "chromo/fields.pyx":856
 *         return split_voxels
 * 
 *     cdef double[:, ::1] define_voxel_subgrid(self, long n_pt_side):             # <<<<<<<<<<<<<<
 *         """Define voxel subgrid for accessible volume calculation.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __PYX_XDEC_MEMVIEW(&__pyx_t_10, 1);
  __pyx_r.data = NULL;
  __pyx_r.memview = NULL;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.define_voxel_subgrid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  if (unlikely(!__pyx_r.memview)) {
    PyErr_SetString(PyExc_TypeError, "Memoryview return value is not initialized");
  }
  __pyx_L2:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_dxyz_point, 1);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":909
 *         return dxyz_point
 * 
 *     cdef double get_frac_accessible(             # <<<<<<<<<<<<<<
 *         self, double[:] coords, double[:, ::1] dxyz_point
 *     ):
 */

static double __pyx_f_6chromo_6fields_19UniformDensityField_get_frac_accessible(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, __Pyx_memviewslice __pyx_v_coords, __Pyx_memviewslice __pyx_v_dxyz_point) {
  long __pyx_v_i;
  long __pyx_v_n_points;
  double __pyx_v_n_points_dbl;
  double __pyx_v_count_true;
  double __pyx_v_frac_accessible;
  __Pyx_memviewslice __pyx_v_dists = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_points = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  __Pyx_memviewslice __pyx_t_13 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_frac_accessible", 0);
  __Pyx_TraceCall("get_frac_accessible", __pyx_f[0], 909, 0, __PYX_ERR(0, 909, __pyx_L1_error));

  /* "chromo/fields.pyx":938
 *         cdef double[:, ::1] points
 * 
 *         n_points = dxyz_point.shape[0]             # <<<<<<<<<<<<<<
 *         n_points_dbl = float(n_points)
 *         points = dxyz_point.copy()
 */
  __pyx_v_n_points = (__pyx_v_dxyz_point.shape[0]);

  /* "chromo/fields.pyx":939
 * 
 *         n_points = dxyz_point.shape[0]
 *         n_points_dbl = float(n_points)             # <<<<<<<<<<<<<<
 *         points = dxyz_point.copy()
 *         for i in range(n_points):
 */
  __pyx_v_n_points_dbl = ((double)__pyx_v_n_points);

  /* "chromo/fields.pyx":940
 *         n_points = dxyz_point.shape[0]
 *         n_points_dbl = float(n_points)
 *         points = dxyz_point.copy()             # <<<<<<<<<<<<<<
 *         for i in range(n_points):
 *             points[i, 0] += coords[0] - self.dx/2
 */
  __pyx_t_1 = __pyx_memoryview_copy_slice_d_dc_double_c(__pyx_v_dxyz_point); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(0, 940, __pyx_L1_error)
  __pyx_v_points = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* "chromo/fields.pyx":941
 *         n_points_dbl = float(n_points)
 *         points = dxyz_point.copy()
 *         for i in range(n_points):             # <<<<<<<<<<<<<<
 *             points[i, 0] += coords[0] - self.dx/2
 *             points[i, 1] += coords[1] - self.dy/2
 */
  __pyx_t_2 = __pyx_v_n_points;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "chromo/fields.pyx":942
 *         points = dxyz_point.copy()
 *         for i in range(n_points):
 *             points[i, 0] += coords[0] - self.dx/2             # <<<<<<<<<<<<<<
 *             points[i, 1] += coords[1] - self.dy/2
 *             points[i, 2] += coords[2] - self.dz/2
 */
    __pyx_t_5 = 0;
    __pyx_t_6 = -1;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_v_coords.shape[0];
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_6 = 0;
    } else if (unlikely(__pyx_t_5 >= __pyx_v_coords.shape[0])) __pyx_t_6 = 0;
    if (unlikely(__pyx_t_6 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_6);
      __PYX_ERR(0, 942, __pyx_L1_error)
    }
    __pyx_t_7 = __pyx_v_i;
    __pyx_t_8 = 0;
    __pyx_t_6 = -1;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_points.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_6 = 0;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_points.shape[0])) __pyx_t_6 = 0;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_points.shape[1];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_6 = 1;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_points.shape[1])) __pyx_t_6 = 1;
    if (unlikely(__pyx_t_6 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_6);
      __PYX_ERR(0, 942, __pyx_L1_error)
    }
    *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_points.data + __pyx_t_7 * __pyx_v_points.strides[0]) )) + __pyx_t_8)) )) += ((*((double *) ( /* dim=0 */ (__pyx_v_coords.data + __pyx_t_5 * __pyx_v_coords.strides[0]) ))) - (__pyx_v_self->dx / 2.0));

    /* "chromo/fields.pyx":943
 *         for i in range(n_points):
 *             points[i, 0] += coords[0] - self.dx/2
 *             points[i, 1] += coords[1] - self.dy/2             # <<<<<<<<<<<<<<
 *             points[i, 2] += coords[2] - self.dz/2
 *         dists = np.linalg.norm(points, axis=1)
 */
    __pyx_t_5 = 1;
    __pyx_t_6 = -1;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_v_coords.shape[0];
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_6 = 0;
    } else if (unlikely(__pyx_t_5 >= __pyx_v_coords.shape[0])) __pyx_t_6 = 0;
    if (unlikely(__pyx_t_6 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_6);
      __PYX_ERR(0, 943, __pyx_L1_error)
    }
    __pyx_t_8 = __pyx_v_i;
    __pyx_t_7 = 1;
    __pyx_t_6 = -1;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_points.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_6 = 0;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_points.shape[0])) __pyx_t_6 = 0;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_points.shape[1];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_6 = 1;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_points.shape[1])) __pyx_t_6 = 1;
    if (unlikely(__pyx_t_6 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_6);
      __PYX_ERR(0, 943, __pyx_L1_error)
    }
    *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_points.data + __pyx_t_8 * __pyx_v_points.strides[0]) )) + __pyx_t_7)) )) += ((*((double *) ( /* dim=0 */ (__pyx_v_coords.data + __pyx_t_5 * __pyx_v_coords.strides[0]) ))) - (__pyx_v_self->dy / 2.0));

    /* "chromo/fields.pyx":944
 *             points[i, 0] += coords[0] - self.dx/2
 *             points[i, 1] += coords[1] - self.dy/2
 *             points[i, 2] += coords[2] - self.dz/2             # <<<<<<<<<<<<<<
 *         dists = np.linalg.norm(points, axis=1)
 *         count_true = 0.
 */
    __pyx_t_5 = 2;
    __pyx_t_6 = -1;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_v_coords.shape[0];
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_6 = 0;
    } else if (unlikely(__pyx_t_5 >= __pyx_v_coords.shape[0])) __pyx_t_6 = 0;
    if (unlikely(__pyx_t_6 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_6);
      __PYX_ERR(0, 944, __pyx_L1_error)
    }
    __pyx_t_7 = __pyx_v_i;
    __pyx_t_8 = 2;
    __pyx_t_6 = -1;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_points.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_6 = 0;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_points.shape[0])) __pyx_t_6 = 0;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_points.shape[1];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_6 = 1;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_points.shape[1])) __pyx_t_6 = 1;
    if (unlikely(__pyx_t_6 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_6);
      __PYX_ERR(0, 944, __pyx_L1_error)
    }
    *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_points.data + __pyx_t_7 * __pyx_v_points.strides[0]) )) + __pyx_t_8)) )) += ((*((double *) ( /* dim=0 */ (__pyx_v_coords.data + __pyx_t_5 * __pyx_v_coords.strides[0]) ))) - (__pyx_v_self->dz / 2.0));
  }

  /* "chromo/fields.pyx":945
 *             points[i, 1] += coords[1] - self.dy/2
 *             points[i, 2] += coords[2] - self.dz/2
 *         dists = np.linalg.norm(points, axis=1)             # <<<<<<<<<<<<<<
 *         count_true = 0.
 *         for i in range(n_points):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_linalg); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_norm); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __pyx_memoryview_fromslice(__pyx_v_points, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10);
  __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_axis, __pyx_int_1) < 0) __PYX_ERR(0, 945, __pyx_L1_error)
  __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_11, __pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_13 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_12, PyBUF_WRITABLE); if (unlikely(!__pyx_t_13.memview)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_v_dists = __pyx_t_13;
  __pyx_t_13.memview = NULL;
  __pyx_t_13.data = NULL;

  /* "chromo/fields.pyx":946
 *             points[i, 2] += coords[2] - self.dz/2
 *         dists = np.linalg.norm(points, axis=1)
 *         count_true = 0.             # <<<<<<<<<<<<<<
 *         for i in range(n_points):
 *             if dists[i] < self.confine_length:
 */
  __pyx_v_count_true = 0.;

  /* "chromo/fields.pyx":947
 *         dists = np.linalg.norm(points, axis=1)
 *         count_true = 0.
 *         for i in range(n_points):             # <<<<<<<<<<<<<<
 *             if dists[i] < self.confine_length:
 *                 count_true += 1
 */
  __pyx_t_2 = __pyx_v_n_points;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "chromo/fields.pyx":948
 *         count_true = 0.
 *         for i in range(n_points):
 *             if dists[i] < self.confine_length:             # <<<<<<<<<<<<<<
 *                 count_true += 1
 *         frac_accessible = count_true / n_points_dbl
 */
    __pyx_t_5 = __pyx_v_i;
    __pyx_t_6 = -1;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_v_dists.shape[0];
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_6 = 0;
    } else if (unlikely(__pyx_t_5 >= __pyx_v_dists.shape[0])) __pyx_t_6 = 0;
    if (unlikely(__pyx_t_6 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_6);
      __PYX_ERR(0, 948, __pyx_L1_error)
    }
    __pyx_t_14 = (((*((double *) ( /* dim=0 */ (__pyx_v_dists.data + __pyx_t_5 * __pyx_v_dists.strides[0]) ))) < __pyx_v_self->__pyx_base.confine_length) != 0);
    if (__pyx_t_14) {

      /* "chromo/fields.pyx":949
 *         for i in range(n_points):
 *             if dists[i] < self.confine_length:
 *                 count_true += 1             # <<<<<<<<<<<<<<
 *         frac_accessible = count_true / n_points_dbl
 *         return frac_accessible
 */
      __pyx_v_count_true = (__pyx_v_count_true + 1.0);

      /* "chromo/fields.pyx":948
 *         count_true = 0.
 *         for i in range(n_points):
 *             if dists[i] < self.confine_length:             # <<<<<<<<<<<<<<
 *                 count_true += 1
 *         frac_accessible = count_true / n_points_dbl
 */
    }
  }

  /* "chromo/fields.pyx":950
 *             if dists[i] < self.confine_length:
 *                 count_true += 1
 *         frac_accessible = count_true / n_points_dbl             # <<<<<<<<<<<<<<
 *         return frac_accessible
 * 
 */
  if (unlikely(__pyx_v_n_points_dbl == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 950, __pyx_L1_error)
  }
  __pyx_v_frac_accessible = (__pyx_v_count_true / __pyx_v_n_points_dbl);

  /* "chromo/fields.pyx":951
 *                 count_true += 1
 *         frac_accessible = count_true / n_points_dbl
 *         return frac_accessible             # <<<<<<<<<<<<<<
 * 
 *     def to_file(self, path):
 */
  __pyx_r = __pyx_v_frac_accessible;
  goto __pyx_L0;

  /* "chromo/fields.pyx":909
 *         return dxyz_point
 * 
 *     cdef double get_frac_accessible(             # <<<<<<<<<<<<<<
 *         self, double[:] coords, double[:, ::1] dxyz_point
 *     ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __PYX_XDEC_MEMVIEW(&__pyx_t_13, 1);
  __Pyx_WriteUnraisable("chromo.fields.UniformDensityField.get_frac_accessible", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_dists, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_points, 1);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":953
 *         return frac_accessible
 * 
 *     def to_file(self, path):             # <<<<<<<<<<<<<<
 *         """Save Field description + Polymer/ReaderProtein names to CSV.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_9to_file(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_6chromo_6fields_19UniformDensityField_8to_file[] = "Save Field description + Polymer/ReaderProtein names to CSV.\n\n        Parameters\n        ----------\n        path : str\n            File path at which to save the CSV file representing the field\n\n        Returns\n        -------\n        None or str\n            Returns `None` if `path` is not `None`; otherwise returns the CSV\n            representing the field as a string\n        ";
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_9to_file(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_file (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_8to_file(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_path));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_8to_file(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_path) {
  PyObject *__pyx_v_rows = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_polymer = NULL;
  PyObject *__pyx_v_binder = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_name = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_file", 0);
  __Pyx_TraceCall("to_file", __pyx_f[0], 953, 0, __PYX_ERR(0, 953, __pyx_L1_error));

  /* "chromo/fields.pyx":967
 *             representing the field as a string
 *         """
 *         rows = {name: self.dict_[name] for name in self._field_descriptors}             # <<<<<<<<<<<<<<
 *         for i, polymer in enumerate(self.polymers):
 *             rows[polymer.name] = 'polymer'
 */
  { /* enter inner scope */
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 967, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_v_self->_field_descriptors)) || PyTuple_CheckExact(__pyx_v_self->_field_descriptors)) {
      __pyx_t_2 = __pyx_v_self->_field_descriptors; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_self->_field_descriptors); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 967, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 967, __pyx_L5_error)
    }
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 967, __pyx_L5_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 967, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 967, __pyx_L5_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 967, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 967, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_name, __pyx_t_5);
      __pyx_t_5 = 0;
      if (unlikely(__pyx_v_self->dict_ == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 967, __pyx_L5_error)
      }
      __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->dict_, __pyx_8genexpr1__pyx_v_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 967, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(PyDict_SetItem(__pyx_t_1, (PyObject*)__pyx_8genexpr1__pyx_v_name, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 967, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_name); __pyx_8genexpr1__pyx_v_name = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_name); __pyx_8genexpr1__pyx_v_name = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __pyx_v_rows = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "chromo/fields.pyx":968
 *         """
 *         rows = {name: self.dict_[name] for name in self._field_descriptors}
 *         for i, polymer in enumerate(self.polymers):             # <<<<<<<<<<<<<<
 *             rows[polymer.name] = 'polymer'
 *         for i, binder in self.binders.iterrows():
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_1 = __pyx_int_0;
  __pyx_t_2 = __pyx_v_self->__pyx_base.polymers; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 968, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 968, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_polymer, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 968, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "chromo/fields.pyx":969
 *         rows = {name: self.dict_[name] for name in self._field_descriptors}
 *         for i, polymer in enumerate(self.polymers):
 *             rows[polymer.name] = 'polymer'             # <<<<<<<<<<<<<<
 *         for i, binder in self.binders.iterrows():
 *             # careful! binder.name is the Series.name attribute
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_polymer, __pyx_n_s_name_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(PyDict_SetItem(__pyx_v_rows, __pyx_t_5, __pyx_n_s_polymer) < 0)) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "chromo/fields.pyx":968
 *         """
 *         rows = {name: self.dict_[name] for name in self._field_descriptors}
 *         for i, polymer in enumerate(self.polymers):             # <<<<<<<<<<<<<<
 *             rows[polymer.name] = 'polymer'
 *         for i, binder in self.binders.iterrows():
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "chromo/fields.pyx":970
 *         for i, polymer in enumerate(self.polymers):
 *             rows[polymer.name] = 'polymer'
 *         for i, binder in self.binders.iterrows():             # <<<<<<<<<<<<<<
 *             # careful! binder.name is the Series.name attribute
 *             rows[binder['name']] = 'binder'
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base.binders, __pyx_n_s_iterrows); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 970, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 970, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 970, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 970, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 970, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 970, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 970, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 970, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 970, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 970, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 970, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L13_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L13_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 970, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L14_unpacking_done;
      __pyx_L13_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 970, __pyx_L1_error)
      __pyx_L14_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_binder, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "chromo/fields.pyx":972
 *         for i, binder in self.binders.iterrows():
 *             # careful! binder.name is the Series.name attribute
 *             rows[binder['name']] = 'binder'             # <<<<<<<<<<<<<<
 *         # prints just key,value for each key in rows
 *         return pd.Series(rows).to_csv(path, header=False)
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_binder, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 972, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_rows, __pyx_t_1, __pyx_n_s_binder) < 0)) __PYX_ERR(0, 972, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "chromo/fields.pyx":970
 *         for i, polymer in enumerate(self.polymers):
 *             rows[polymer.name] = 'polymer'
 *         for i, binder in self.binders.iterrows():             # <<<<<<<<<<<<<<
 *             # careful! binder.name is the Series.name attribute
 *             rows[binder['name']] = 'binder'
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":974
 *             rows[binder['name']] = 'binder'
 *         # prints just key,value for each key in rows
 *         return pd.Series(rows).to_csv(path, header=False)             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Series); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_1, __pyx_v_rows) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_rows);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_to_csv); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_path);
  __Pyx_GIVEREF(__pyx_v_path);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_path);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_header, Py_False) < 0) __PYX_ERR(0, 974, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "chromo/fields.pyx":953
 *         return frac_accessible
 * 
 *     def to_file(self, path):             # <<<<<<<<<<<<<<
 *         """Save Field description + Polymer/ReaderProtein names to CSV.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.to_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_rows);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_polymer);
  __Pyx_XDECREF(__pyx_v_binder);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":977
 * 
 *     @classmethod
 *     def from_file(cls, path, polymers, binders):             # <<<<<<<<<<<<<<
 *         """Recover field saved with `.to_file()`.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_11from_file(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6chromo_6fields_19UniformDensityField_10from_file[] = "Recover field saved with `.to_file()`.\n\n        Notes\n        -----\n        The zeroths column is an index column, and the first column stores the\n        data specifying the field.\n\n        Parameters\n        ----------\n        path : str\n            Path to the CSV file representing the field\n        polymers : List[PolymerBase]\n            Polymers contained in the field\n        binders : pd.DataFrame\n            Table describing reader proteins affecting the field\n\n        Returns\n        -------\n        UniformDensityField\n            Discrete density field represented by the CSV file\n        ";
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_11from_file(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_path = 0;
  PyObject *__pyx_v_polymers = 0;
  PyObject *__pyx_v_binders = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_file (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_path,&__pyx_n_s_polymers,&__pyx_n_s_binders,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_path)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_polymers)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("from_file", 1, 3, 3, 1); __PYX_ERR(0, 977, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_binders)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("from_file", 1, 3, 3, 2); __PYX_ERR(0, 977, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_file") < 0)) __PYX_ERR(0, 977, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_path = values[0];
    __pyx_v_polymers = values[1];
    __pyx_v_binders = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_file", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 977, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_10from_file(((PyTypeObject*)__pyx_v_cls), __pyx_v_path, __pyx_v_polymers, __pyx_v_binders);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_10from_file(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_path, PyObject *__pyx_v_polymers, PyObject *__pyx_v_binders) {
  PyObject *__pyx_v_field_series = NULL;
  PyObject *__pyx_v_kwargs = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_polymer_names = NULL;
  PyObject *__pyx_v_binder_names = NULL;
  PyObject *__pyx_v_err_prefix = NULL;
  PyObject *__pyx_v_polymer = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_binder = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  Py_UCS4 __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_file", 0);
  __Pyx_TraceCall("from_file", __pyx_f[0], 977, 0, __PYX_ERR(0, 977, __pyx_L1_error));

  /* "chromo/fields.pyx":999
 *             Discrete density field represented by the CSV file
 *         """
 *         field_series = pd.read_csv(path, header=None, index_col=0)[1]             # <<<<<<<<<<<<<<
 *         kwargs = field_series[_field_descriptors].to_dict()
 *         for key in kwargs.keys():
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_read_csv); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_path);
  __Pyx_GIVEREF(__pyx_v_path);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_path);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_header, Py_None) < 0) __PYX_ERR(0, 999, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_index_col, __pyx_int_0) < 0) __PYX_ERR(0, 999, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_field_series = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "chromo/fields.pyx":1000
 *         """
 *         field_series = pd.read_csv(path, header=None, index_col=0)[1]
 *         kwargs = field_series[_field_descriptors].to_dict()             # <<<<<<<<<<<<<<
 *         for key in kwargs.keys():
 *             if key in _int_field_descriptors:
 */
  __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_field_series, __pyx_v_6chromo_6fields__field_descriptors); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_to_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_kwargs = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "chromo/fields.pyx":1001
 *         field_series = pd.read_csv(path, header=None, index_col=0)[1]
 *         kwargs = field_series[_field_descriptors].to_dict()
 *         for key in kwargs.keys():             # <<<<<<<<<<<<<<
 *             if key in _int_field_descriptors:
 *                 kwargs[key] = int(kwargs[key])
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_kwargs, __pyx_n_s_keys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1001, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1001, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1001, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1001, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1001, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1001, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1001, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "chromo/fields.pyx":1002
 *         kwargs = field_series[_field_descriptors].to_dict()
 *         for key in kwargs.keys():
 *             if key in _int_field_descriptors:             # <<<<<<<<<<<<<<
 *                 kwargs[key] = int(kwargs[key])
 *             elif key in _float_field_descriptors:
 */
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_v_key, __pyx_v_6chromo_6fields__int_field_descriptors, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1002, __pyx_L1_error)
    __pyx_t_8 = (__pyx_t_7 != 0);
    if (__pyx_t_8) {

      /* "chromo/fields.pyx":1003
 *         for key in kwargs.keys():
 *             if key in _int_field_descriptors:
 *                 kwargs[key] = int(kwargs[key])             # <<<<<<<<<<<<<<
 *             elif key in _float_field_descriptors:
 *                 kwargs[key] = float(kwargs[key])
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_kwargs, __pyx_v_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1003, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1003, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(PyObject_SetItem(__pyx_v_kwargs, __pyx_v_key, __pyx_t_4) < 0)) __PYX_ERR(0, 1003, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "chromo/fields.pyx":1002
 *         kwargs = field_series[_field_descriptors].to_dict()
 *         for key in kwargs.keys():
 *             if key in _int_field_descriptors:             # <<<<<<<<<<<<<<
 *                 kwargs[key] = int(kwargs[key])
 *             elif key in _float_field_descriptors:
 */
      goto __pyx_L5;
    }

    /* "chromo/fields.pyx":1004
 *             if key in _int_field_descriptors:
 *                 kwargs[key] = int(kwargs[key])
 *             elif key in _float_field_descriptors:             # <<<<<<<<<<<<<<
 *                 kwargs[key] = float(kwargs[key])
 *             elif key in _str_field_descriptors and pd.isna(kwargs[key]):
 */
    __pyx_t_8 = (__Pyx_PySequence_ContainsTF(__pyx_v_key, __pyx_v_6chromo_6fields__float_field_descriptors, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1004, __pyx_L1_error)
    __pyx_t_7 = (__pyx_t_8 != 0);
    if (__pyx_t_7) {

      /* "chromo/fields.pyx":1005
 *                 kwargs[key] = int(kwargs[key])
 *             elif key in _float_field_descriptors:
 *                 kwargs[key] = float(kwargs[key])             # <<<<<<<<<<<<<<
 *             elif key in _str_field_descriptors and pd.isna(kwargs[key]):
 *                 kwargs[key] = ""
 */
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_kwargs, __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1005, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyNumber_Float(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1005, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(PyObject_SetItem(__pyx_v_kwargs, __pyx_v_key, __pyx_t_3) < 0)) __PYX_ERR(0, 1005, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "chromo/fields.pyx":1004
 *             if key in _int_field_descriptors:
 *                 kwargs[key] = int(kwargs[key])
 *             elif key in _float_field_descriptors:             # <<<<<<<<<<<<<<
 *                 kwargs[key] = float(kwargs[key])
 *             elif key in _str_field_descriptors and pd.isna(kwargs[key]):
 */
      goto __pyx_L5;
    }

    /* "chromo/fields.pyx":1006
 *             elif key in _float_field_descriptors:
 *                 kwargs[key] = float(kwargs[key])
 *             elif key in _str_field_descriptors and pd.isna(kwargs[key]):             # <<<<<<<<<<<<<<
 *                 kwargs[key] = ""
 *             elif key in _bool_field_descriptors:
 */
    __pyx_t_8 = (__Pyx_PySequence_ContainsTF(__pyx_v_key, __pyx_v_6chromo_6fields__str_field_descriptors, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1006, __pyx_L1_error)
    __pyx_t_9 = (__pyx_t_8 != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_7 = __pyx_t_9;
      goto __pyx_L6_bool_binop_done;
    }
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pd); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1006, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_isna); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1006, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_kwargs, __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1006, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_10, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1006, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1006, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __pyx_t_9;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_7) {

      /* "chromo/fields.pyx":1007
 *                 kwargs[key] = float(kwargs[key])
 *             elif key in _str_field_descriptors and pd.isna(kwargs[key]):
 *                 kwargs[key] = ""             # <<<<<<<<<<<<<<
 *             elif key in _bool_field_descriptors:
 *                 kwargs[key] = (key == 'True')
 */
      if (unlikely(PyObject_SetItem(__pyx_v_kwargs, __pyx_v_key, __pyx_kp_s_) < 0)) __PYX_ERR(0, 1007, __pyx_L1_error)

      /* "chromo/fields.pyx":1006
 *             elif key in _float_field_descriptors:
 *                 kwargs[key] = float(kwargs[key])
 *             elif key in _str_field_descriptors and pd.isna(kwargs[key]):             # <<<<<<<<<<<<<<
 *                 kwargs[key] = ""
 *             elif key in _bool_field_descriptors:
 */
      goto __pyx_L5;
    }

    /* "chromo/fields.pyx":1008
 *             elif key in _str_field_descriptors and pd.isna(kwargs[key]):
 *                 kwargs[key] = ""
 *             elif key in _bool_field_descriptors:             # <<<<<<<<<<<<<<
 *                 kwargs[key] = (key == 'True')
 *         polymer_names = field_series[field_series == 'polymer'].index.values
 */
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_v_key, __pyx_v_6chromo_6fields__bool_field_descriptors, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1008, __pyx_L1_error)
    __pyx_t_9 = (__pyx_t_7 != 0);
    if (__pyx_t_9) {

      /* "chromo/fields.pyx":1009
 *                 kwargs[key] = ""
 *             elif key in _bool_field_descriptors:
 *                 kwargs[key] = (key == 'True')             # <<<<<<<<<<<<<<
 *         polymer_names = field_series[field_series == 'polymer'].index.values
 *         binder_names = field_series[field_series == 'binder'].index.values
 */
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_key, __pyx_n_s_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1009, __pyx_L1_error)
      if (unlikely(PyObject_SetItem(__pyx_v_kwargs, __pyx_v_key, __pyx_t_3) < 0)) __PYX_ERR(0, 1009, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "chromo/fields.pyx":1008
 *             elif key in _str_field_descriptors and pd.isna(kwargs[key]):
 *                 kwargs[key] = ""
 *             elif key in _bool_field_descriptors:             # <<<<<<<<<<<<<<
 *                 kwargs[key] = (key == 'True')
 *         polymer_names = field_series[field_series == 'polymer'].index.values
 */
    }
    __pyx_L5:;

    /* "chromo/fields.pyx":1001
 *         field_series = pd.read_csv(path, header=None, index_col=0)[1]
 *         kwargs = field_series[_field_descriptors].to_dict()
 *         for key in kwargs.keys():             # <<<<<<<<<<<<<<
 *             if key in _int_field_descriptors:
 *                 kwargs[key] = int(kwargs[key])
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "chromo/fields.pyx":1010
 *             elif key in _bool_field_descriptors:
 *                 kwargs[key] = (key == 'True')
 *         polymer_names = field_series[field_series == 'polymer'].index.values             # <<<<<<<<<<<<<<
 *         binder_names = field_series[field_series == 'binder'].index.values
 *         err_prefix = f"Tried to instantiate class:{cls} from file:{path} with "
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_field_series, __pyx_n_s_polymer, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_field_series, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_values); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_polymer_names = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "chromo/fields.pyx":1011
 *                 kwargs[key] = (key == 'True')
 *         polymer_names = field_series[field_series == 'polymer'].index.values
 *         binder_names = field_series[field_series == 'binder'].index.values             # <<<<<<<<<<<<<<
 *         err_prefix = f"Tried to instantiate class:{cls} from file:{path} with "
 * 
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_field_series, __pyx_n_s_binder, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1011, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_field_series, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_values); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_binder_names = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "chromo/fields.pyx":1012
 *         polymer_names = field_series[field_series == 'polymer'].index.values
 *         binder_names = field_series[field_series == 'binder'].index.values
 *         err_prefix = f"Tried to instantiate class:{cls} from file:{path} with "             # <<<<<<<<<<<<<<
 * 
 *         if len(polymers) != len(polymer_names):
 */
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = 0;
  __pyx_t_11 = 127;
  __Pyx_INCREF(__pyx_kp_u_Tried_to_instantiate_class);
  __pyx_t_5 += 27;
  __Pyx_GIVEREF(__pyx_kp_u_Tried_to_instantiate_class);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Tried_to_instantiate_class);
  __pyx_t_3 = __Pyx_PyObject_FormatSimple(((PyObject *)__pyx_v_cls), __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_11;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_kp_u_from_file);
  __pyx_t_5 += 11;
  __Pyx_GIVEREF(__pyx_kp_u_from_file);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_from_file);
  __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_path, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_11;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_kp_u_with);
  __pyx_t_5 += 6;
  __Pyx_GIVEREF(__pyx_kp_u_with);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_with);
  __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_5, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_err_prefix = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "chromo/fields.pyx":1014
 *         err_prefix = f"Tried to instantiate class:{cls} from file:{path} with "
 * 
 *         if len(polymers) != len(polymer_names):             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 err_prefix + f"{len(polymers)} polymers, but "
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_polymers); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1014, __pyx_L1_error)
  __pyx_t_12 = PyObject_Length(__pyx_v_polymer_names); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1014, __pyx_L1_error)
  __pyx_t_9 = ((__pyx_t_5 != __pyx_t_12) != 0);
  if (unlikely(__pyx_t_9)) {

    /* "chromo/fields.pyx":1016
 *         if len(polymers) != len(polymer_names):
 *             raise ValueError(
 *                 err_prefix + f"{len(polymers)} polymers, but "             # <<<<<<<<<<<<<<
 *                 f" there are {len(polymer_names)} listed."
 *             )
 */
    __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_12 = 0;
    __pyx_t_11 = 127;
    __pyx_t_5 = PyObject_Length(__pyx_v_polymers); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1016, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_5, 0, ' ', 'd'); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_kp_u_polymers_but_there_are);
    __pyx_t_12 += 26;
    __Pyx_GIVEREF(__pyx_kp_u_polymers_but_there_are);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_kp_u_polymers_but_there_are);

    /* "chromo/fields.pyx":1017
 *             raise ValueError(
 *                 err_prefix + f"{len(polymers)} polymers, but "
 *                 f" there are {len(polymer_names)} listed."             # <<<<<<<<<<<<<<
 *             )
 *         for polymer in polymers:
 */
    __pyx_t_5 = PyObject_Length(__pyx_v_polymer_names); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1017, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_5, 0, ' ', 'd'); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1017, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_kp_u_listed);
    __pyx_t_12 += 8;
    __Pyx_GIVEREF(__pyx_kp_u_listed);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_kp_u_listed);

    /* "chromo/fields.pyx":1016
 *         if len(polymers) != len(polymer_names):
 *             raise ValueError(
 *                 err_prefix + f"{len(polymers)} polymers, but "             # <<<<<<<<<<<<<<
 *                 f" there are {len(polymer_names)} listed."
 *             )
 */
    __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_3, 4, __pyx_t_12, __pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_v_err_prefix, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "chromo/fields.pyx":1015
 * 
 *         if len(polymers) != len(polymer_names):
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 err_prefix + f"{len(polymers)} polymers, but "
 *                 f" there are {len(polymer_names)} listed."
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1015, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1015, __pyx_L1_error)

    /* "chromo/fields.pyx":1014
 *         err_prefix = f"Tried to instantiate class:{cls} from file:{path} with "
 * 
 *         if len(polymers) != len(polymer_names):             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 err_prefix + f"{len(polymers)} polymers, but "
 */
  }

  /* "chromo/fields.pyx":1019
 *                 f" there are {len(polymer_names)} listed."
 *             )
 *         for polymer in polymers:             # <<<<<<<<<<<<<<
 *             if polymer.name not in polymer_names:
 *                 raise ValueError(
 */
  if (likely(PyList_CheckExact(__pyx_v_polymers)) || PyTuple_CheckExact(__pyx_v_polymers)) {
    __pyx_t_1 = __pyx_v_polymers; __Pyx_INCREF(__pyx_t_1); __pyx_t_12 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_12 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_polymers); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1019, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1019, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_12); __Pyx_INCREF(__pyx_t_3); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1019, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1019, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_12); __Pyx_INCREF(__pyx_t_3); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1019, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1019, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1019, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_polymer, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "chromo/fields.pyx":1020
 *             )
 *         for polymer in polymers:
 *             if polymer.name not in polymer_names:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     err_prefix + f"polymer:{polymer.name}, but "
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_polymer, __pyx_n_s_name_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1020, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = (__Pyx_PySequence_ContainsTF(__pyx_t_3, __pyx_v_polymer_names, Py_NE)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1020, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = (__pyx_t_9 != 0);
    if (unlikely(__pyx_t_7)) {

      /* "chromo/fields.pyx":1022
 *             if polymer.name not in polymer_names:
 *                 raise ValueError(
 *                     err_prefix + f"polymer:{polymer.name}, but "             # <<<<<<<<<<<<<<
 *                     " this polymer was not present in file."
 *                 )
 */
      __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1022, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = 0;
      __pyx_t_11 = 127;
      __Pyx_INCREF(__pyx_kp_u_polymer_2);
      __pyx_t_5 += 8;
      __Pyx_GIVEREF(__pyx_kp_u_polymer_2);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_polymer_2);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_polymer, __pyx_n_s_name_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1022, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1022, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_11;
      __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u_but_this_polymer_was_not_presen);
      __pyx_t_5 += 44;
      __Pyx_GIVEREF(__pyx_kp_u_but_this_polymer_was_not_presen);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_this_polymer_was_not_presen);
      __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_5, __pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1022, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_v_err_prefix, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1022, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "chromo/fields.pyx":1021
 *         for polymer in polymers:
 *             if polymer.name not in polymer_names:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     err_prefix + f"polymer:{polymer.name}, but "
 *                     " this polymer was not present in file."
 */
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1021, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 1021, __pyx_L1_error)

      /* "chromo/fields.pyx":1020
 *             )
 *         for polymer in polymers:
 *             if polymer.name not in polymer_names:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     err_prefix + f"polymer:{polymer.name}, but "
 */
    }

    /* "chromo/fields.pyx":1019
 *                 f" there are {len(polymer_names)} listed."
 *             )
 *         for polymer in polymers:             # <<<<<<<<<<<<<<
 *             if polymer.name not in polymer_names:
 *                 raise ValueError(
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "chromo/fields.pyx":1025
 *                     " this polymer was not present in file."
 *                 )
 *         if len(binders) != len(binder_names):             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 err_prefix + f"{len(binders)} binders, but "
 */
  __pyx_t_12 = PyObject_Length(__pyx_v_binders); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1025, __pyx_L1_error)
  __pyx_t_5 = PyObject_Length(__pyx_v_binder_names); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1025, __pyx_L1_error)
  __pyx_t_7 = ((__pyx_t_12 != __pyx_t_5) != 0);
  if (unlikely(__pyx_t_7)) {

    /* "chromo/fields.pyx":1027
 *         if len(binders) != len(binder_names):
 *             raise ValueError(
 *                 err_prefix + f"{len(binders)} binders, but "             # <<<<<<<<<<<<<<
 *                 f" there are {len(binder_names)} listed."
 *             )
 */
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_11 = 127;
    __pyx_t_12 = PyObject_Length(__pyx_v_binders); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1027, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_12, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_INCREF(__pyx_kp_u_binders_but_there_are);
    __pyx_t_5 += 25;
    __Pyx_GIVEREF(__pyx_kp_u_binders_but_there_are);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u_binders_but_there_are);

    /* "chromo/fields.pyx":1028
 *             raise ValueError(
 *                 err_prefix + f"{len(binders)} binders, but "
 *                 f" there are {len(binder_names)} listed."             # <<<<<<<<<<<<<<
 *             )
 *         for i, binder in binders.iterrows():
 */
    __pyx_t_12 = PyObject_Length(__pyx_v_binder_names); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1028, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_12, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1028, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_INCREF(__pyx_kp_u_listed);
    __pyx_t_5 += 8;
    __Pyx_GIVEREF(__pyx_kp_u_listed);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_kp_u_listed);

    /* "chromo/fields.pyx":1027
 *         if len(binders) != len(binder_names):
 *             raise ValueError(
 *                 err_prefix + f"{len(binders)} binders, but "             # <<<<<<<<<<<<<<
 *                 f" there are {len(binder_names)} listed."
 *             )
 */
    __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_5, __pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_v_err_prefix, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "chromo/fields.pyx":1026
 *                 )
 *         if len(binders) != len(binder_names):
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 err_prefix + f"{len(binders)} binders, but "
 *                 f" there are {len(binder_names)} listed."
 */
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 1026, __pyx_L1_error)

    /* "chromo/fields.pyx":1025
 *                     " this polymer was not present in file."
 *                 )
 *         if len(binders) != len(binder_names):             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 err_prefix + f"{len(binders)} binders, but "
 */
  }

  /* "chromo/fields.pyx":1030
 *                 f" there are {len(binder_names)} listed."
 *             )
 *         for i, binder in binders.iterrows():             # <<<<<<<<<<<<<<
 *             if binder['name'] not in binder_names:
 *                 raise ValueError(
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_binders, __pyx_n_s_iterrows); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_1 = __pyx_t_4; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1030, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1030, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1030, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1030, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1030, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1030, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1030, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1030, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1030, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1030, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_10 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1030, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = Py_TYPE(__pyx_t_10)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_13(__pyx_t_10); if (unlikely(!__pyx_t_3)) goto __pyx_L15_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_2 = __pyx_t_13(__pyx_t_10); if (unlikely(!__pyx_t_2)) goto __pyx_L15_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_10), 2) < 0) __PYX_ERR(0, 1030, __pyx_L1_error)
      __pyx_t_13 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L16_unpacking_done;
      __pyx_L15_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_13 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1030, __pyx_L1_error)
      __pyx_L16_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_binder, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "chromo/fields.pyx":1031
 *             )
 *         for i, binder in binders.iterrows():
 *             if binder['name'] not in binder_names:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     err_prefix + f"binder:{binder}, but "
 */
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_binder, __pyx_n_s_name_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_t_4, __pyx_v_binder_names, Py_NE)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1031, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_9 = (__pyx_t_7 != 0);
    if (unlikely(__pyx_t_9)) {

      /* "chromo/fields.pyx":1033
 *             if binder['name'] not in binder_names:
 *                 raise ValueError(
 *                     err_prefix + f"binder:{binder}, but "             # <<<<<<<<<<<<<<
 *                     " this binder was not present in file."
 *                 )
 */
      __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_12 = 0;
      __pyx_t_11 = 127;
      __Pyx_INCREF(__pyx_kp_u_binder_2);
      __pyx_t_12 += 7;
      __Pyx_GIVEREF(__pyx_kp_u_binder_2);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_binder_2);
      __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_binder, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_11;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_kp_u_but_this_binder_was_not_present);
      __pyx_t_12 += 43;
      __Pyx_GIVEREF(__pyx_kp_u_but_this_binder_was_not_present);
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_but_this_binder_was_not_present);
      __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_4, 3, __pyx_t_12, __pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_v_err_prefix, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "chromo/fields.pyx":1032
 *         for i, binder in binders.iterrows():
 *             if binder['name'] not in binder_names:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     err_prefix + f"binder:{binder}, but "
 *                     " this binder was not present in file."
 */
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1032, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 1032, __pyx_L1_error)

      /* "chromo/fields.pyx":1031
 *             )
 *         for i, binder in binders.iterrows():
 *             if binder['name'] not in binder_names:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     err_prefix + f"binder:{binder}, but "
 */
    }

    /* "chromo/fields.pyx":1030
 *                 f" there are {len(binder_names)} listed."
 *             )
 *         for i, binder in binders.iterrows():             # <<<<<<<<<<<<<<
 *             if binder['name'] not in binder_names:
 *                 raise ValueError(
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "chromo/fields.pyx":1036
 *                     " this binder was not present in file."
 *                 )
 *         return cls(polymers=polymers, binders=binders, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def __eq__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1036, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_polymers, __pyx_v_polymers) < 0) __PYX_ERR(0, 1036, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_binders, __pyx_v_binders) < 0) __PYX_ERR(0, 1036, __pyx_L1_error)
  __pyx_t_1 = __pyx_t_2;
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_kwargs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
    __PYX_ERR(0, 1036, __pyx_L1_error)
  }
  if (__Pyx_MergeKeywords(__pyx_t_1, __pyx_v_kwargs) < 0) __PYX_ERR(0, 1036, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_v_cls), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1036, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chromo/fields.pyx":977
 * 
 *     @classmethod
 *     def from_file(cls, path, polymers, binders):             # <<<<<<<<<<<<<<
 *         """Recover field saved with `.to_file()`.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_field_series);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_polymer_names);
  __Pyx_XDECREF(__pyx_v_binder_names);
  __Pyx_XDECREF(__pyx_v_err_prefix);
  __Pyx_XDECREF(__pyx_v_polymer);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_binder);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":1038
 *         return cls(polymers=polymers, binders=binders, **kwargs)
 * 
 *     def __eq__(self, other):             # <<<<<<<<<<<<<<
 *         """Check if two `UniformDensityField` objects are equivalent.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_13__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_6chromo_6fields_19UniformDensityField_12__eq__[] = "Check if two `UniformDensityField` objects are equivalent.\n\n        Parameters\n        ----------\n        other : UniformDensityField\n            Field being compared to the current field.\n\n        Returns\n        -------\n        bool\n            True if two fields are equivalent, else false.\n        ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6chromo_6fields_19UniformDensityField_12__eq__;
#endif
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_13__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_12__eq__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_12__eq__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 0);
  __Pyx_TraceCall("__eq__", __pyx_f[0], 1038, 0, __PYX_ERR(0, 1038, __pyx_L1_error));

  /* "chromo/fields.pyx":1051
 *             True if two fields are equivalent, else false.
 *         """
 *         return np.all(             # <<<<<<<<<<<<<<
 *             [
 *                 self.polymers == other.polymers,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_all); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":1053
 *         return np.all(
 *             [
 *                 self.polymers == other.polymers,             # <<<<<<<<<<<<<<
 *                 self.binders.equals(other.binders),
 *                 self.nx == other.nx,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_polymers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_self->__pyx_base.polymers, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1053, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":1054
 *             [
 *                 self.polymers == other.polymers,
 *                 self.binders.equals(other.binders),             # <<<<<<<<<<<<<<
 *                 self.nx == other.nx,
 *                 self.x_width == other.x_width,
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base.binders, __pyx_n_s_equals); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_binders); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chromo/fields.pyx":1055
 *                 self.polymers == other.polymers,
 *                 self.binders.equals(other.binders),
 *                 self.nx == other.nx,             # <<<<<<<<<<<<<<
 *                 self.x_width == other.x_width,
 *                 self.ny == other.ny,
 */
  __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_self->nx); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_nx); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyObject_RichCompare(__pyx_t_5, __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1055, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "chromo/fields.pyx":1056
 *                 self.binders.equals(other.binders),
 *                 self.nx == other.nx,
 *                 self.x_width == other.x_width,             # <<<<<<<<<<<<<<
 *                 self.ny == other.ny,
 *                 self.y_width == other.y_width,
 */
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->x_width); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_x_width); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = PyObject_RichCompare(__pyx_t_6, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1056, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chromo/fields.pyx":1057
 *                 self.nx == other.nx,
 *                 self.x_width == other.x_width,
 *                 self.ny == other.ny,             # <<<<<<<<<<<<<<
 *                 self.y_width == other.y_width,
 *                 self.nz == other.nz,
 */
  __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_self->ny); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_ny); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_9 = PyObject_RichCompare(__pyx_t_5, __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1057, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "chromo/fields.pyx":1058
 *                 self.x_width == other.x_width,
 *                 self.ny == other.ny,
 *                 self.y_width == other.y_width,             # <<<<<<<<<<<<<<
 *                 self.nz == other.nz,
 *                 self.z_width == other.z_width
 */
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->y_width); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_y_width); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_10 = PyObject_RichCompare(__pyx_t_6, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chromo/fields.pyx":1059
 *                 self.ny == other.ny,
 *                 self.y_width == other.y_width,
 *                 self.nz == other.nz,             # <<<<<<<<<<<<<<
 *                 self.z_width == other.z_width
 *             ]
 */
  __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_self->nz); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1059, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_nz); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1059, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_11 = PyObject_RichCompare(__pyx_t_5, __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1059, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "chromo/fields.pyx":1060
 *                 self.y_width == other.y_width,
 *                 self.nz == other.nz,
 *                 self.z_width == other.z_width             # <<<<<<<<<<<<<<
 *             ]
 *         )
 */
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->z_width); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_z_width); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_12 = PyObject_RichCompare(__pyx_t_6, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1060, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chromo/fields.pyx":1052
 *         """
 *         return np.all(
 *             [             # <<<<<<<<<<<<<<
 *                 self.polymers == other.polymers,
 *                 self.binders.equals(other.binders),
 */
  __pyx_t_5 = PyList_New(8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1052, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_5, 3, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyList_SET_ITEM(__pyx_t_5, 4, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_10);
  PyList_SET_ITEM(__pyx_t_5, 5, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_11);
  PyList_SET_ITEM(__pyx_t_5, 6, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_12);
  PyList_SET_ITEM(__pyx_t_5, 7, __pyx_t_12);
  __pyx_t_4 = 0;
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_12 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_12, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chromo/fields.pyx":1038
 *         return cls(polymers=polymers, binders=binders, **kwargs)
 * 
 *     def __eq__(self, other):             # <<<<<<<<<<<<<<
 *         """Check if two `UniformDensityField` objects are equivalent.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":1065
 * 
 *     @staticmethod
 *     def _get_corner_bin_index(nx, ny, nz) -> np.ndarray:             # <<<<<<<<<<<<<<
 *         """Set up the index array for density bins corners.
 * 
 */

/* Python wrapper */
static PyArrayObject *__pyx_pw_6chromo_6fields_19UniformDensityField_15_get_corner_bin_index(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6chromo_6fields_19UniformDensityField_14_get_corner_bin_index[] = "Set up the index array for density bins corners.\n\n        Notes\n        -----\n        TODO: this should just be a higher-dimensional array to avoid having to\n        do any of this math.\n\n        Parameters\n        ----------\n        nx, ny, nz :  long\n            Number of voxels in the x, y, and z direction of the field\n\n        Returns\n        -------\n        array_like (nx*ny*nz, 8) of long\n            For each of the `nx*ny*nz` voxels in the field, stores indices\n            identifying eight vertices at the corners of the voxel\n        ";
static PyMethodDef __pyx_mdef_6chromo_6fields_19UniformDensityField_15_get_corner_bin_index = {"_get_corner_bin_index", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6chromo_6fields_19UniformDensityField_15_get_corner_bin_index, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6chromo_6fields_19UniformDensityField_14_get_corner_bin_index};
static PyArrayObject *__pyx_pw_6chromo_6fields_19UniformDensityField_15_get_corner_bin_index(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_nx = 0;
  PyObject *__pyx_v_ny = 0;
  PyObject *__pyx_v_nz = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyArrayObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_corner_bin_index (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nx,&__pyx_n_s_ny,&__pyx_n_s_nz,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ny)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_get_corner_bin_index", 1, 3, 3, 1); __PYX_ERR(0, 1065, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_get_corner_bin_index", 1, 3, 3, 2); __PYX_ERR(0, 1065, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_get_corner_bin_index") < 0)) __PYX_ERR(0, 1065, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_nx = values[0];
    __pyx_v_ny = values[1];
    __pyx_v_nz = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_get_corner_bin_index", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1065, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField._get_corner_bin_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_14_get_corner_bin_index(__pyx_v_nx, __pyx_v_ny, __pyx_v_nz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyArrayObject *__pyx_pf_6chromo_6fields_19UniformDensityField_14_get_corner_bin_index(PyObject *__pyx_v_nx, PyObject *__pyx_v_ny, PyObject *__pyx_v_nz) {
  PyObject *__pyx_v_bin_index = NULL;
  PyObject *__pyx_v_count = NULL;
  PyObject *__pyx_v_index_z = NULL;
  PyObject *__pyx_v_index_zp1 = NULL;
  PyObject *__pyx_v_index_y = NULL;
  PyObject *__pyx_v_index_yp1 = NULL;
  PyObject *__pyx_v_index_x = NULL;
  PyObject *__pyx_v_index_xp1 = NULL;
  PyArrayObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__16)
  __Pyx_RefNannySetupContext("_get_corner_bin_index", 0);
  __Pyx_TraceCall("_get_corner_bin_index", __pyx_f[0], 1065, 0, __PYX_ERR(0, 1065, __pyx_L1_error));

  /* "chromo/fields.pyx":1084
 *             identifying eight vertices at the corners of the voxel
 *         """
 *         bin_index = np.zeros((nx * ny * nz, 8), dtype=int)             # <<<<<<<<<<<<<<
 *         count = 0
 *         for index_z in range(nz):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_nx, __pyx_v_ny); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_v_nz); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_INCREF(__pyx_int_8);
  __Pyx_GIVEREF(__pyx_int_8);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_8);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 1084, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_bin_index = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "chromo/fields.pyx":1085
 *         """
 *         bin_index = np.zeros((nx * ny * nz, 8), dtype=int)
 *         count = 0             # <<<<<<<<<<<<<<
 *         for index_z in range(nz):
 *             if index_z == nz - 1:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_count = __pyx_int_0;

  /* "chromo/fields.pyx":1086
 *         bin_index = np.zeros((nx * ny * nz, 8), dtype=int)
 *         count = 0
 *         for index_z in range(nz):             # <<<<<<<<<<<<<<
 *             if index_z == nz - 1:
 *                 index_zp1 = 0
 */
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_nz); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_1 = __pyx_t_4; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1086, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1086, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1086, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1086, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1086, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1086, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1086, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_index_z, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "chromo/fields.pyx":1087
 *         count = 0
 *         for index_z in range(nz):
 *             if index_z == nz - 1:             # <<<<<<<<<<<<<<
 *                 index_zp1 = 0
 *             else:
 */
    __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_v_nz, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1087, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_index_z, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1087, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1087, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_7) {

      /* "chromo/fields.pyx":1088
 *         for index_z in range(nz):
 *             if index_z == nz - 1:
 *                 index_zp1 = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 index_zp1 = index_z + 1
 */
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_XDECREF_SET(__pyx_v_index_zp1, __pyx_int_0);

      /* "chromo/fields.pyx":1087
 *         count = 0
 *         for index_z in range(nz):
 *             if index_z == nz - 1:             # <<<<<<<<<<<<<<
 *                 index_zp1 = 0
 *             else:
 */
      goto __pyx_L5;
    }

    /* "chromo/fields.pyx":1090
 *                 index_zp1 = 0
 *             else:
 *                 index_zp1 = index_z + 1             # <<<<<<<<<<<<<<
 *             for index_y in range(ny):
 *                 if index_y == ny - 1:
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_index_z, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1090, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_index_zp1, __pyx_t_3);
      __pyx_t_3 = 0;
    }
    __pyx_L5:;

    /* "chromo/fields.pyx":1091
 *             else:
 *                 index_zp1 = index_z + 1
 *             for index_y in range(ny):             # <<<<<<<<<<<<<<
 *                 if index_y == ny - 1:
 *                     index_yp1 = 0
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_ny); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1091, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1091, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1091, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1091, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1091, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1091, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1091, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_9(__pyx_t_4);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1091, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_index_y, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "chromo/fields.pyx":1092
 *                 index_zp1 = index_z + 1
 *             for index_y in range(ny):
 *                 if index_y == ny - 1:             # <<<<<<<<<<<<<<
 *                     index_yp1 = 0
 *                 else:
 */
      __pyx_t_3 = __Pyx_PyInt_SubtractObjC(__pyx_v_ny, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1092, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyObject_RichCompare(__pyx_v_index_y, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1092, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1092, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_7) {

        /* "chromo/fields.pyx":1093
 *             for index_y in range(ny):
 *                 if index_y == ny - 1:
 *                     index_yp1 = 0             # <<<<<<<<<<<<<<
 *                 else:
 *                     index_yp1 = index_y + 1
 */
        __Pyx_INCREF(__pyx_int_0);
        __Pyx_XDECREF_SET(__pyx_v_index_yp1, __pyx_int_0);

        /* "chromo/fields.pyx":1092
 *                 index_zp1 = index_z + 1
 *             for index_y in range(ny):
 *                 if index_y == ny - 1:             # <<<<<<<<<<<<<<
 *                     index_yp1 = 0
 *                 else:
 */
        goto __pyx_L8;
      }

      /* "chromo/fields.pyx":1095
 *                     index_yp1 = 0
 *                 else:
 *                     index_yp1 = index_y + 1             # <<<<<<<<<<<<<<
 *                 for index_x in range(nx):
 *                     if index_x == nx - 1:
 */
      /*else*/ {
        __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_index_y, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1095, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_XDECREF_SET(__pyx_v_index_yp1, __pyx_t_2);
        __pyx_t_2 = 0;
      }
      __pyx_L8:;

      /* "chromo/fields.pyx":1096
 *                 else:
 *                     index_yp1 = index_y + 1
 *                 for index_x in range(nx):             # <<<<<<<<<<<<<<
 *                     if index_x == nx - 1:
 *                         index_xp1 = 0
 */
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_nx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1096, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
        __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_10 = 0;
        __pyx_t_11 = NULL;
      } else {
        __pyx_t_10 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1096, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_11 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1096, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (likely(!__pyx_t_11)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_10); __Pyx_INCREF(__pyx_t_2); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1096, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          } else {
            if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_10); __Pyx_INCREF(__pyx_t_2); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1096, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          }
        } else {
          __pyx_t_2 = __pyx_t_11(__pyx_t_3);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1096, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_2);
        }
        __Pyx_XDECREF_SET(__pyx_v_index_x, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "chromo/fields.pyx":1097
 *                     index_yp1 = index_y + 1
 *                 for index_x in range(nx):
 *                     if index_x == nx - 1:             # <<<<<<<<<<<<<<
 *                         index_xp1 = 0
 *                     else:
 */
        __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_v_nx, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1097, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_12 = PyObject_RichCompare(__pyx_v_index_x, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1097, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1097, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (__pyx_t_7) {

          /* "chromo/fields.pyx":1098
 *                 for index_x in range(nx):
 *                     if index_x == nx - 1:
 *                         index_xp1 = 0             # <<<<<<<<<<<<<<
 *                     else:
 *                         index_xp1 = index_x + 1
 */
          __Pyx_INCREF(__pyx_int_0);
          __Pyx_XDECREF_SET(__pyx_v_index_xp1, __pyx_int_0);

          /* "chromo/fields.pyx":1097
 *                     index_yp1 = index_y + 1
 *                 for index_x in range(nx):
 *                     if index_x == nx - 1:             # <<<<<<<<<<<<<<
 *                         index_xp1 = 0
 *                     else:
 */
          goto __pyx_L11;
        }

        /* "chromo/fields.pyx":1100
 *                         index_xp1 = 0
 *                     else:
 *                         index_xp1 = index_x + 1             # <<<<<<<<<<<<<<
 *                     # Populate the bin_index array with the 8 corner bins
 *                     bin_index[count] = [
 */
        /*else*/ {
          __pyx_t_12 = __Pyx_PyInt_AddObjC(__pyx_v_index_x, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1100, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_XDECREF_SET(__pyx_v_index_xp1, __pyx_t_12);
          __pyx_t_12 = 0;
        }
        __pyx_L11:;

        /* "chromo/fields.pyx":1103
 *                     # Populate the bin_index array with the 8 corner bins
 *                     bin_index[count] = [
 *                         index_x + nx * index_y + nx * ny * index_z,             # <<<<<<<<<<<<<<
 *                         index_xp1 + nx * index_y + nx * ny * index_z,
 *                         index_x + nx * index_yp1 + nx * ny * index_z,
 */
        __pyx_t_12 = PyNumber_Multiply(__pyx_v_nx, __pyx_v_index_y); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1103, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_2 = PyNumber_Add(__pyx_v_index_x, __pyx_t_12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1103, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = PyNumber_Multiply(__pyx_v_nx, __pyx_v_ny); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1103, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_13 = PyNumber_Multiply(__pyx_t_12, __pyx_v_index_z); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1103, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = PyNumber_Add(__pyx_t_2, __pyx_t_13); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1103, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

        /* "chromo/fields.pyx":1104
 *                     bin_index[count] = [
 *                         index_x + nx * index_y + nx * ny * index_z,
 *                         index_xp1 + nx * index_y + nx * ny * index_z,             # <<<<<<<<<<<<<<
 *                         index_x + nx * index_yp1 + nx * ny * index_z,
 *                         index_xp1 + nx * index_yp1 + nx * ny * index_z,
 */
        __pyx_t_13 = PyNumber_Multiply(__pyx_v_nx, __pyx_v_index_y); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1104, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_2 = PyNumber_Add(__pyx_v_index_xp1, __pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1104, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = PyNumber_Multiply(__pyx_v_nx, __pyx_v_ny); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1104, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_14 = PyNumber_Multiply(__pyx_t_13, __pyx_v_index_z); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1104, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = PyNumber_Add(__pyx_t_2, __pyx_t_14); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1104, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

        /* "chromo/fields.pyx":1105
 *                         index_x + nx * index_y + nx * ny * index_z,
 *                         index_xp1 + nx * index_y + nx * ny * index_z,
 *                         index_x + nx * index_yp1 + nx * ny * index_z,             # <<<<<<<<<<<<<<
 *                         index_xp1 + nx * index_yp1 + nx * ny * index_z,
 *                         index_x + nx * index_y + nx * ny * index_zp1,
 */
        __pyx_t_14 = PyNumber_Multiply(__pyx_v_nx, __pyx_v_index_yp1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1105, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_2 = PyNumber_Add(__pyx_v_index_x, __pyx_t_14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1105, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_14 = PyNumber_Multiply(__pyx_v_nx, __pyx_v_ny); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1105, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_15 = PyNumber_Multiply(__pyx_t_14, __pyx_v_index_z); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1105, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_14 = PyNumber_Add(__pyx_t_2, __pyx_t_15); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1105, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

        /* "chromo/fields.pyx":1106
 *                         index_xp1 + nx * index_y + nx * ny * index_z,
 *                         index_x + nx * index_yp1 + nx * ny * index_z,
 *                         index_xp1 + nx * index_yp1 + nx * ny * index_z,             # <<<<<<<<<<<<<<
 *                         index_x + nx * index_y + nx * ny * index_zp1,
 *                         index_xp1 + nx * index_y + nx * ny * index_zp1,
 */
        __pyx_t_15 = PyNumber_Multiply(__pyx_v_nx, __pyx_v_index_yp1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1106, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_2 = PyNumber_Add(__pyx_v_index_xp1, __pyx_t_15); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1106, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_15 = PyNumber_Multiply(__pyx_v_nx, __pyx_v_ny); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1106, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_16 = PyNumber_Multiply(__pyx_t_15, __pyx_v_index_z); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1106, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_15 = PyNumber_Add(__pyx_t_2, __pyx_t_16); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1106, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

        /* "chromo/fields.pyx":1107
 *                         index_x + nx * index_yp1 + nx * ny * index_z,
 *                         index_xp1 + nx * index_yp1 + nx * ny * index_z,
 *                         index_x + nx * index_y + nx * ny * index_zp1,             # <<<<<<<<<<<<<<
 *                         index_xp1 + nx * index_y + nx * ny * index_zp1,
 *                         index_x + nx * index_yp1 + nx * ny * index_zp1,
 */
        __pyx_t_16 = PyNumber_Multiply(__pyx_v_nx, __pyx_v_index_y); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1107, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_2 = PyNumber_Add(__pyx_v_index_x, __pyx_t_16); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1107, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_16 = PyNumber_Multiply(__pyx_v_nx, __pyx_v_ny); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1107, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_17 = PyNumber_Multiply(__pyx_t_16, __pyx_v_index_zp1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1107, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_16 = PyNumber_Add(__pyx_t_2, __pyx_t_17); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1107, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

        /* "chromo/fields.pyx":1108
 *                         index_xp1 + nx * index_yp1 + nx * ny * index_z,
 *                         index_x + nx * index_y + nx * ny * index_zp1,
 *                         index_xp1 + nx * index_y + nx * ny * index_zp1,             # <<<<<<<<<<<<<<
 *                         index_x + nx * index_yp1 + nx * ny * index_zp1,
 *                         index_xp1 + nx * index_yp1 + nx * ny * index_zp1
 */
        __pyx_t_17 = PyNumber_Multiply(__pyx_v_nx, __pyx_v_index_y); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1108, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_2 = PyNumber_Add(__pyx_v_index_xp1, __pyx_t_17); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1108, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_17 = PyNumber_Multiply(__pyx_v_nx, __pyx_v_ny); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1108, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_18 = PyNumber_Multiply(__pyx_t_17, __pyx_v_index_zp1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1108, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_17 = PyNumber_Add(__pyx_t_2, __pyx_t_18); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1108, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

        /* "chromo/fields.pyx":1109
 *                         index_x + nx * index_y + nx * ny * index_zp1,
 *                         index_xp1 + nx * index_y + nx * ny * index_zp1,
 *                         index_x + nx * index_yp1 + nx * ny * index_zp1,             # <<<<<<<<<<<<<<
 *                         index_xp1 + nx * index_yp1 + nx * ny * index_zp1
 *                     ]
 */
        __pyx_t_18 = PyNumber_Multiply(__pyx_v_nx, __pyx_v_index_yp1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1109, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        __pyx_t_2 = PyNumber_Add(__pyx_v_index_x, __pyx_t_18); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1109, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        __pyx_t_18 = PyNumber_Multiply(__pyx_v_nx, __pyx_v_ny); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1109, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        __pyx_t_19 = PyNumber_Multiply(__pyx_t_18, __pyx_v_index_zp1); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1109, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        __pyx_t_18 = PyNumber_Add(__pyx_t_2, __pyx_t_19); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1109, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

        /* "chromo/fields.pyx":1110
 *                         index_xp1 + nx * index_y + nx * ny * index_zp1,
 *                         index_x + nx * index_yp1 + nx * ny * index_zp1,
 *                         index_xp1 + nx * index_yp1 + nx * ny * index_zp1             # <<<<<<<<<<<<<<
 *                     ]
 *                     count += 1
 */
        __pyx_t_19 = PyNumber_Multiply(__pyx_v_nx, __pyx_v_index_yp1); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1110, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        __pyx_t_2 = PyNumber_Add(__pyx_v_index_xp1, __pyx_t_19); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1110, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        __pyx_t_19 = PyNumber_Multiply(__pyx_v_nx, __pyx_v_ny); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1110, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        __pyx_t_20 = PyNumber_Multiply(__pyx_t_19, __pyx_v_index_zp1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1110, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_20);
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        __pyx_t_19 = PyNumber_Add(__pyx_t_2, __pyx_t_20); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1110, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

        /* "chromo/fields.pyx":1102
 *                         index_xp1 = index_x + 1
 *                     # Populate the bin_index array with the 8 corner bins
 *                     bin_index[count] = [             # <<<<<<<<<<<<<<
 *                         index_x + nx * index_y + nx * ny * index_z,
 *                         index_xp1 + nx * index_y + nx * ny * index_z,
 */
        __pyx_t_20 = PyList_New(8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1102, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_20);
        __Pyx_GIVEREF(__pyx_t_12);
        PyList_SET_ITEM(__pyx_t_20, 0, __pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_13);
        PyList_SET_ITEM(__pyx_t_20, 1, __pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_14);
        PyList_SET_ITEM(__pyx_t_20, 2, __pyx_t_14);
        __Pyx_GIVEREF(__pyx_t_15);
        PyList_SET_ITEM(__pyx_t_20, 3, __pyx_t_15);
        __Pyx_GIVEREF(__pyx_t_16);
        PyList_SET_ITEM(__pyx_t_20, 4, __pyx_t_16);
        __Pyx_GIVEREF(__pyx_t_17);
        PyList_SET_ITEM(__pyx_t_20, 5, __pyx_t_17);
        __Pyx_GIVEREF(__pyx_t_18);
        PyList_SET_ITEM(__pyx_t_20, 6, __pyx_t_18);
        __Pyx_GIVEREF(__pyx_t_19);
        PyList_SET_ITEM(__pyx_t_20, 7, __pyx_t_19);
        __pyx_t_12 = 0;
        __pyx_t_13 = 0;
        __pyx_t_14 = 0;
        __pyx_t_15 = 0;
        __pyx_t_16 = 0;
        __pyx_t_17 = 0;
        __pyx_t_18 = 0;
        __pyx_t_19 = 0;
        if (unlikely(PyObject_SetItem(__pyx_v_bin_index, __pyx_v_count, __pyx_t_20) < 0)) __PYX_ERR(0, 1102, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

        /* "chromo/fields.pyx":1112
 *                         index_xp1 + nx * index_yp1 + nx * ny * index_zp1
 *                     ]
 *                     count += 1             # <<<<<<<<<<<<<<
 *         return bin_index
 * 
 */
        __pyx_t_20 = __Pyx_PyInt_AddObjC(__pyx_v_count, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1112, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_20);
        __Pyx_DECREF_SET(__pyx_v_count, __pyx_t_20);
        __pyx_t_20 = 0;

        /* "chromo/fields.pyx":1096
 *                 else:
 *                     index_yp1 = index_y + 1
 *                 for index_x in range(nx):             # <<<<<<<<<<<<<<
 *                     if index_x == nx - 1:
 *                         index_xp1 = 0
 */
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "chromo/fields.pyx":1091
 *             else:
 *                 index_zp1 = index_z + 1
 *             for index_y in range(ny):             # <<<<<<<<<<<<<<
 *                 if index_y == ny - 1:
 *                     index_yp1 = 0
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "chromo/fields.pyx":1086
 *         bin_index = np.zeros((nx * ny * nz, 8), dtype=int)
 *         count = 0
 *         for index_z in range(nz):             # <<<<<<<<<<<<<<
 *             if index_z == nz - 1:
 *                 index_zp1 = 0
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "chromo/fields.pyx":1113
 *                     ]
 *                     count += 1
 *         return bin_index             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  if (!(likely(((__pyx_v_bin_index) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_bin_index, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1113, __pyx_L1_error)
  __Pyx_INCREF(__pyx_v_bin_index);
  __pyx_r = ((PyArrayObject *)__pyx_v_bin_index);
  goto __pyx_L0;

  /* "chromo/fields.pyx":1065
 * 
 *     @staticmethod
 *     def _get_corner_bin_index(nx, ny, nz) -> np.ndarray:             # <<<<<<<<<<<<<<
 *         """Set up the index array for density bins corners.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField._get_corner_bin_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_bin_index);
  __Pyx_XDECREF(__pyx_v_count);
  __Pyx_XDECREF(__pyx_v_index_z);
  __Pyx_XDECREF(__pyx_v_index_zp1);
  __Pyx_XDECREF(__pyx_v_index_y);
  __Pyx_XDECREF(__pyx_v_index_yp1);
  __Pyx_XDECREF(__pyx_v_index_x);
  __Pyx_XDECREF(__pyx_v_index_xp1);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":1115
 *         return bin_index
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         """Print summary of the UniformDensityField.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_17__str__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6chromo_6fields_19UniformDensityField_16__str__[] = "Print summary of the UniformDensityField.\n        ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6chromo_6fields_19UniformDensityField_16__str__;
#endif
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_17__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_16__str__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_16__str__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  Py_ssize_t __pyx_v_n_poly;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);
  __Pyx_TraceCall("__str__", __pyx_f[0], 1115, 0, __PYX_ERR(0, 1115, __pyx_L1_error));

  /* "chromo/fields.pyx":1118
 *         """Print summary of the UniformDensityField.
 *         """
 *         n_poly = len(self.polymers)             # <<<<<<<<<<<<<<
 *         return f"UniformDensityField<nx={self.nx},ny={self.ny},nz={self.nz}," \
 *                f"npoly={n_poly}>"
 */
  __pyx_t_1 = __pyx_v_self->__pyx_base.polymers;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 1118, __pyx_L1_error)
  }
  __pyx_t_2 = PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1118, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_n_poly = __pyx_t_2;

  /* "chromo/fields.pyx":1119
 *         """
 *         n_poly = len(self.polymers)
 *         return f"UniformDensityField<nx={self.nx},ny={self.ny},nz={self.nz}," \             # <<<<<<<<<<<<<<
 *                f"npoly={n_poly}>"
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_UniformDensityField_nx);
  __pyx_t_2 += 23;
  __Pyx_GIVEREF(__pyx_kp_u_UniformDensityField_nx);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_UniformDensityField_nx);
  __pyx_t_4 = __Pyx_PyUnicode_From_long(__pyx_v_self->nx, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_ny_2);
  __pyx_t_2 += 4;
  __Pyx_GIVEREF(__pyx_kp_u_ny_2);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_ny_2);
  __pyx_t_4 = __Pyx_PyUnicode_From_long(__pyx_v_self->ny, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_nz_2);
  __pyx_t_2 += 4;
  __Pyx_GIVEREF(__pyx_kp_u_nz_2);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_nz_2);
  __pyx_t_4 = __Pyx_PyUnicode_From_long(__pyx_v_self->nz, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_npoly);
  __pyx_t_2 += 7;
  __Pyx_GIVEREF(__pyx_kp_u_npoly);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u_npoly);

  /* "chromo/fields.pyx":1120
 *         n_poly = len(self.polymers)
 *         return f"UniformDensityField<nx={self.nx},ny={self.ny},nz={self.nz}," \
 *                f"npoly={n_poly}>"             # <<<<<<<<<<<<<<
 * 
 *     def get_dict(self):
 */
  __pyx_t_4 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_n_poly, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__17);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__17);
  PyTuple_SET_ITEM(__pyx_t_1, 8, __pyx_kp_u__17);

  /* "chromo/fields.pyx":1119
 *         """
 *         n_poly = len(self.polymers)
 *         return f"UniformDensityField<nx={self.nx},ny={self.ny},nz={self.nz}," \             # <<<<<<<<<<<<<<
 *                f"npoly={n_poly}>"
 * 
 */
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 9, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "chromo/fields.pyx":1115
 *         return bin_index
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         """Print summary of the UniformDensityField.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":1122
 *                f"npoly={n_poly}>"
 * 
 *     def get_dict(self):             # <<<<<<<<<<<<<<
 *         """Dictionary representation of the `UniformDensityField` object.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_19get_dict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6chromo_6fields_19UniformDensityField_18get_dict[] = "Dictionary representation of the `UniformDensityField` object.\n\n        Returns\n        -------\n        dict\n            Dictionary of key attributes representing the field\n        ";
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_19get_dict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_dict (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_18get_dict(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_18get_dict(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_dict", 0);
  __Pyx_TraceCall("get_dict", __pyx_f[0], 1122, 0, __PYX_ERR(0, 1122, __pyx_L1_error));

  /* "chromo/fields.pyx":1130
 *             Dictionary of key attributes representing the field
 *         """
 *         return {             # <<<<<<<<<<<<<<
 *             "x_width" : self.x_width,
 *             "y_width" : self.y_width,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "chromo/fields.pyx":1131
 *         """
 *         return {
 *             "x_width" : self.x_width,             # <<<<<<<<<<<<<<
 *             "y_width" : self.y_width,
 *             "z_width" : self.z_width,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(16); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->x_width); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_x_width, __pyx_t_2) < 0) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":1132
 *         return {
 *             "x_width" : self.x_width,
 *             "y_width" : self.y_width,             # <<<<<<<<<<<<<<
 *             "z_width" : self.z_width,
 *             "nx" : self.nx,
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->y_width); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_y_width, __pyx_t_2) < 0) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":1133
 *             "x_width" : self.x_width,
 *             "y_width" : self.y_width,
 *             "z_width" : self.z_width,             # <<<<<<<<<<<<<<
 *             "nx" : self.nx,
 *             "ny" : self.ny,
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->z_width); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_z_width, __pyx_t_2) < 0) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":1134
 *             "y_width" : self.y_width,
 *             "z_width" : self.z_width,
 *             "nx" : self.nx,             # <<<<<<<<<<<<<<
 *             "ny" : self.ny,
 *             "nz" : self.nz,
 */
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_self->nx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_nx, __pyx_t_2) < 0) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":1135
 *             "z_width" : self.z_width,
 *             "nx" : self.nx,
 *             "ny" : self.ny,             # <<<<<<<<<<<<<<
 *             "nz" : self.nz,
 *             "num_binders" : self.num_binders,
 */
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_self->ny); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ny, __pyx_t_2) < 0) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":1136
 *             "nx" : self.nx,
 *             "ny" : self.ny,
 *             "nz" : self.nz,             # <<<<<<<<<<<<<<
 *             "num_binders" : self.num_binders,
 *             "n_bins" : self.n_bins,
 */
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_self->nz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_nz, __pyx_t_2) < 0) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":1137
 *             "ny" : self.ny,
 *             "nz" : self.nz,
 *             "num_binders" : self.num_binders,             # <<<<<<<<<<<<<<
 *             "n_bins" : self.n_bins,
 *             "density" : self.density,
 */
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_self->num_binders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_num_binders, __pyx_t_2) < 0) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":1138
 *             "nz" : self.nz,
 *             "num_binders" : self.num_binders,
 *             "n_bins" : self.n_bins,             # <<<<<<<<<<<<<<
 *             "density" : self.density,
 *             "confine_type" : self.confine_type,
 */
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_self->n_bins); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_n_bins, __pyx_t_2) < 0) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":1139
 *             "num_binders" : self.num_binders,
 *             "n_bins" : self.n_bins,
 *             "density" : self.density,             # <<<<<<<<<<<<<<
 *             "confine_type" : self.confine_type,
 *             "confine_length" : self.confine_length,
 */
  if (unlikely(!__pyx_v_self->density.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1139, __pyx_L1_error)}
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_self->density, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_density, __pyx_t_2) < 0) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":1140
 *             "n_bins" : self.n_bins,
 *             "density" : self.density,
 *             "confine_type" : self.confine_type,             # <<<<<<<<<<<<<<
 *             "confine_length" : self.confine_length,
 *             "chi" : self.chi,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_confine_type, __pyx_v_self->__pyx_base.confine_type) < 0) __PYX_ERR(0, 1131, __pyx_L1_error)

  /* "chromo/fields.pyx":1141
 *             "density" : self.density,
 *             "confine_type" : self.confine_type,
 *             "confine_length" : self.confine_length,             # <<<<<<<<<<<<<<
 *             "chi" : self.chi,
 *             "assume_fully_accessible": self.assume_fully_accessible,
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.confine_length); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_confine_length, __pyx_t_2) < 0) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":1142
 *             "confine_type" : self.confine_type,
 *             "confine_length" : self.confine_length,
 *             "chi" : self.chi,             # <<<<<<<<<<<<<<
 *             "assume_fully_accessible": self.assume_fully_accessible,
 *             "vf_limit": self.vf_limit,
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->chi); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_chi, __pyx_t_2) < 0) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":1143
 *             "confine_length" : self.confine_length,
 *             "chi" : self.chi,
 *             "assume_fully_accessible": self.assume_fully_accessible,             # <<<<<<<<<<<<<<
 *             "vf_limit": self.vf_limit,
 *             "fast_field": self.fast_field,
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->assume_fully_accessible); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_assume_fully_accessible, __pyx_t_2) < 0) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":1144
 *             "chi" : self.chi,
 *             "assume_fully_accessible": self.assume_fully_accessible,
 *             "vf_limit": self.vf_limit,             # <<<<<<<<<<<<<<
 *             "fast_field": self.fast_field,
 *             "n_points": self.n_points
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->vf_limit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_vf_limit, __pyx_t_2) < 0) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":1145
 *             "assume_fully_accessible": self.assume_fully_accessible,
 *             "vf_limit": self.vf_limit,
 *             "fast_field": self.fast_field,             # <<<<<<<<<<<<<<
 *             "n_points": self.n_points
 *         }
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->fast_field); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_fast_field, __pyx_t_2) < 0) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":1146
 *             "vf_limit": self.vf_limit,
 *             "fast_field": self.fast_field,
 *             "n_points": self.n_points             # <<<<<<<<<<<<<<
 *         }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_self->n_points); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_n_points, __pyx_t_2) < 0) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chromo/fields.pyx":1122
 *                f"npoly={n_poly}>"
 * 
 *     def get_dict(self):             # <<<<<<<<<<<<<<
 *         """Dictionary representation of the `UniformDensityField` object.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.get_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":1149
 *         }
 * 
 *     cdef double compute_dE(             # <<<<<<<<<<<<<<
 *         self, poly.PolymerBase poly, long[:] inds, long n_inds,
 *         long packet_size, bint state_change
 */

static double __pyx_f_6chromo_6fields_19UniformDensityField_compute_dE(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, __Pyx_memviewslice __pyx_v_inds, long __pyx_v_n_inds, CYTHON_UNUSED long __pyx_v_packet_size, int __pyx_v_state_change) {
  long __pyx_v_i;
  long __pyx_v_bin_ind;
  __Pyx_memviewslice __pyx_v_bin_inds = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_v_dE;
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_memviewslice __pyx_t_2 = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_t_3;
  long __pyx_t_4;
  long __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_dE", 0);
  __Pyx_TraceCall("compute_dE", __pyx_f[0], 1149, 0, __PYX_ERR(0, 1149, __pyx_L1_error));

  /* "chromo/fields.pyx":1206
 *         cdef long i, ind, bin_ind
 *         cdef long[:] delta_ind_xyz, bin_inds
 *         cdef double dE = 0             # <<<<<<<<<<<<<<
 * 
 *         # Verify that move does not violate the hard confinement
 */
  __pyx_v_dE = 0.0;

  /* "chromo/fields.pyx":1209
 * 
 *         # Verify that move does not violate the hard confinement
 *         if state_change == 0:             # <<<<<<<<<<<<<<
 *             dE += self.get_confinement_dE(poly, inds, n_inds, trial=1)
 *             dE -= self.get_confinement_dE(poly, inds, n_inds, trial=0)
 */
  __pyx_t_1 = ((__pyx_v_state_change == 0) != 0);
  if (__pyx_t_1) {

    /* "chromo/fields.pyx":1210
 *         # Verify that move does not violate the hard confinement
 *         if state_change == 0:
 *             dE += self.get_confinement_dE(poly, inds, n_inds, trial=1)             # <<<<<<<<<<<<<<
 *             dE -= self.get_confinement_dE(poly, inds, n_inds, trial=0)
 * 
 */
    __pyx_v_dE = (__pyx_v_dE + ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.get_confinement_dE(((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_v_self), __pyx_v_poly, __pyx_v_inds, __pyx_v_n_inds, 1));

    /* "chromo/fields.pyx":1211
 *         if state_change == 0:
 *             dE += self.get_confinement_dE(poly, inds, n_inds, trial=1)
 *             dE -= self.get_confinement_dE(poly, inds, n_inds, trial=0)             # <<<<<<<<<<<<<<
 * 
 *         # Find changes in polymer density in affected voxels
 */
    __pyx_v_dE = (__pyx_v_dE - ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.get_confinement_dE(((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_v_self), __pyx_v_poly, __pyx_v_inds, __pyx_v_n_inds, 0));

    /* "chromo/fields.pyx":1209
 * 
 *         # Verify that move does not violate the hard confinement
 *         if state_change == 0:             # <<<<<<<<<<<<<<
 *             dE += self.get_confinement_dE(poly, inds, n_inds, trial=1)
 *             dE -= self.get_confinement_dE(poly, inds, n_inds, trial=0)
 */
  }

  /* "chromo/fields.pyx":1214
 * 
 *         # Find changes in polymer density in affected voxels
 *         if self.fast_field == 1:             # <<<<<<<<<<<<<<
 *             bin_inds = self.get_change_in_density_quickly(
 *                 poly, inds, n_inds, state_change
 */
  __pyx_t_1 = ((__pyx_v_self->fast_field == 1) != 0);
  if (__pyx_t_1) {

    /* "chromo/fields.pyx":1215
 *         # Find changes in polymer density in affected voxels
 *         if self.fast_field == 1:
 *             bin_inds = self.get_change_in_density_quickly(             # <<<<<<<<<<<<<<
 *                 poly, inds, n_inds, state_change
 *             )
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_change_in_density_quickly(__pyx_v_self, __pyx_v_poly, __pyx_v_inds, __pyx_v_n_inds, __pyx_v_state_change); if (unlikely(!__pyx_t_2.memview)) __PYX_ERR(0, 1215, __pyx_L1_error)
    __pyx_v_bin_inds = __pyx_t_2;
    __pyx_t_2.memview = NULL;
    __pyx_t_2.data = NULL;

    /* "chromo/fields.pyx":1214
 * 
 *         # Find changes in polymer density in affected voxels
 *         if self.fast_field == 1:             # <<<<<<<<<<<<<<
 *             bin_inds = self.get_change_in_density_quickly(
 *                 poly, inds, n_inds, state_change
 */
    goto __pyx_L4;
  }

  /* "chromo/fields.pyx":1219
 *             )
 *         else:
 *             bin_inds = self.get_change_in_density(             # <<<<<<<<<<<<<<
 *                 poly, inds, n_inds, state_change
 *             )
 */
  /*else*/ {

    /* "chromo/fields.pyx":1220
 *         else:
 *             bin_inds = self.get_change_in_density(
 *                 poly, inds, n_inds, state_change             # <<<<<<<<<<<<<<
 *             )
 * 
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_change_in_density(__pyx_v_self, __pyx_v_poly, __pyx_v_inds, __pyx_v_n_inds, __pyx_v_state_change); if (unlikely(!__pyx_t_2.memview)) __PYX_ERR(0, 1219, __pyx_L1_error)
    __pyx_v_bin_inds = __pyx_t_2;
    __pyx_t_2.memview = NULL;
    __pyx_t_2.data = NULL;
  }
  __pyx_L4:;

  /* "chromo/fields.pyx":1223
 *             )
 * 
 *         for i in range(self.n_bins):             # <<<<<<<<<<<<<<
 *             self.affected_bins_last_move[i] = 0
 *         for bin_ind in bin_inds:
 */
  __pyx_t_3 = __pyx_v_self->n_bins;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "chromo/fields.pyx":1224
 * 
 *         for i in range(self.n_bins):
 *             self.affected_bins_last_move[i] = 0             # <<<<<<<<<<<<<<
 *         for bin_ind in bin_inds:
 *             self.affected_bins_last_move[bin_ind] = 1
 */
    if (unlikely(!__pyx_v_self->affected_bins_last_move.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1224, __pyx_L1_error)}
    __pyx_t_6 = __pyx_v_i;
    __pyx_t_7 = -1;
    if (__pyx_t_6 < 0) {
      __pyx_t_6 += __pyx_v_self->affected_bins_last_move.shape[0];
      if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
    } else if (unlikely(__pyx_t_6 >= __pyx_v_self->affected_bins_last_move.shape[0])) __pyx_t_7 = 0;
    if (unlikely(__pyx_t_7 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_7);
      __PYX_ERR(0, 1224, __pyx_L1_error)
    }
    *((long *) ( /* dim=0 */ (__pyx_v_self->affected_bins_last_move.data + __pyx_t_6 * __pyx_v_self->affected_bins_last_move.strides[0]) )) = 0;
  }

  /* "chromo/fields.pyx":1225
 *         for i in range(self.n_bins):
 *             self.affected_bins_last_move[i] = 0
 *         for bin_ind in bin_inds:             # <<<<<<<<<<<<<<
 *             self.affected_bins_last_move[bin_ind] = 1
 * 
 */
  __pyx_t_8 = __pyx_memoryview_fromslice(__pyx_v_bin_inds, 1, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
    __pyx_t_9 = __pyx_t_8; __Pyx_INCREF(__pyx_t_9); __pyx_t_10 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_10 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1225, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_9))) {
        if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_9)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_10); __Pyx_INCREF(__pyx_t_8); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 1225, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_9, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1225, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      } else {
        if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_10); __Pyx_INCREF(__pyx_t_8); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 1225, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_9, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1225, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      }
    } else {
      __pyx_t_8 = __pyx_t_11(__pyx_t_9);
      if (unlikely(!__pyx_t_8)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1225, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_8);
    }
    __pyx_t_3 = __Pyx_PyInt_As_long(__pyx_t_8); if (unlikely((__pyx_t_3 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1225, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_bin_ind = __pyx_t_3;

    /* "chromo/fields.pyx":1226
 *             self.affected_bins_last_move[i] = 0
 *         for bin_ind in bin_inds:
 *             self.affected_bins_last_move[bin_ind] = 1             # <<<<<<<<<<<<<<
 * 
 *         # Get change in energy based on differences in bead and binder densities
 */
    if (unlikely(!__pyx_v_self->affected_bins_last_move.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1226, __pyx_L1_error)}
    __pyx_t_6 = __pyx_v_bin_ind;
    __pyx_t_7 = -1;
    if (__pyx_t_6 < 0) {
      __pyx_t_6 += __pyx_v_self->affected_bins_last_move.shape[0];
      if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
    } else if (unlikely(__pyx_t_6 >= __pyx_v_self->affected_bins_last_move.shape[0])) __pyx_t_7 = 0;
    if (unlikely(__pyx_t_7 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_7);
      __PYX_ERR(0, 1226, __pyx_L1_error)
    }
    *((long *) ( /* dim=0 */ (__pyx_v_self->affected_bins_last_move.data + __pyx_t_6 * __pyx_v_self->affected_bins_last_move.strides[0]) )) = 1;

    /* "chromo/fields.pyx":1225
 *         for i in range(self.n_bins):
 *             self.affected_bins_last_move[i] = 0
 *         for bin_ind in bin_inds:             # <<<<<<<<<<<<<<
 *             self.affected_bins_last_move[bin_ind] = 1
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "chromo/fields.pyx":1229
 * 
 *         # Get change in energy based on differences in bead and binder densities
 *         dE += self.get_dE_binders_and_beads(             # <<<<<<<<<<<<<<
 *             poly, inds, n_inds, bin_inds, state_change
 *         )
 */
  __pyx_v_dE = (__pyx_v_dE + ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_dE_binders_and_beads(__pyx_v_self, __pyx_v_poly, __pyx_v_inds, __pyx_v_n_inds, __pyx_v_bin_inds, __pyx_v_state_change));

  /* "chromo/fields.pyx":1233
 *         )
 * 
 *         return dE             # <<<<<<<<<<<<<<
 * 
 *     cdef long[:] get_change_in_density_quickly(
 */
  __pyx_r = __pyx_v_dE;
  goto __pyx_L0;

  /* "chromo/fields.pyx":1149
 *         }
 * 
 *     cdef double compute_dE(             # <<<<<<<<<<<<<<
 *         self, poly.PolymerBase poly, long[:] inds, long n_inds,
 *         long packet_size, bint state_change
 */

  /* function exit code */
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_2, 1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("chromo.fields.UniformDensityField.compute_dE", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_bin_inds, 1);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":1235
 *         return dE
 * 
 *     cdef long[:] get_change_in_density_quickly(             # <<<<<<<<<<<<<<
 *         self, poly.PolymerBase poly, long[:] inds, long n_inds,
 *         bint state_change
 */

static __Pyx_memviewslice __pyx_f_6chromo_6fields_19UniformDensityField_get_change_in_density_quickly(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, __Pyx_memviewslice __pyx_v_inds, long __pyx_v_n_inds, int __pyx_v_state_change) {
  long __pyx_v_i;
  long __pyx_v_j;
  long __pyx_v_k;
  long __pyx_v_l;
  long __pyx_v_m;
  long __pyx_v_sub_bin_x;
  long __pyx_v_sub_bin_y;
  long __pyx_v_sub_bin_z;
  long __pyx_v_sub_bin_x_trial;
  long __pyx_v_sub_bin_y_trial;
  long __pyx_v_sub_bin_z_trial;
  double __pyx_v_prefactor;
  PyObject *__pyx_v_bins_found = 0;
  PyObject *__pyx_v_temp = NULL;
  __Pyx_memviewslice __pyx_r = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  long __pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  double __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  long __pyx_t_14;
  int __pyx_t_15;
  long __pyx_t_16;
  long __pyx_t_17;
  long __pyx_t_18;
  long __pyx_t_19;
  int __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  int __pyx_t_26;
  __Pyx_memviewslice __pyx_t_27 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_change_in_density_quickly", 0);
  __Pyx_TraceCall("get_change_in_density_quickly", __pyx_f[0], 1235, 0, __PYX_ERR(0, 1235, __pyx_L1_error));

  /* "chromo/fields.pyx":1251
 *         cdef double[:, :, ::1] densities
 *         cdef set bins_found
 *         bins_found = set()             # <<<<<<<<<<<<<<
 * 
 *         for i in range(n_inds):
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bins_found = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "chromo/fields.pyx":1253
 *         bins_found = set()
 * 
 *         for i in range(n_inds):             # <<<<<<<<<<<<<<
 * 
 *             # Get sub-bin indices
 */
  __pyx_t_2 = __pyx_v_n_inds;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "chromo/fields.pyx":1256
 * 
 *             # Get sub-bin indices
 *             sub_bin_x = np.floor(             # <<<<<<<<<<<<<<
 *                 (poly.r[inds[i], 0] + self.half_width_xyz[0]) /
 *                 self.sub_bin_width_x
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_floor); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "chromo/fields.pyx":1257
 *             # Get sub-bin indices
 *             sub_bin_x = np.floor(
 *                 (poly.r[inds[i], 0] + self.half_width_xyz[0]) /             # <<<<<<<<<<<<<<
 *                 self.sub_bin_width_x
 *             ) % self.n_sub_bins_x
 */
    if (unlikely(!__pyx_v_poly->r.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1257, __pyx_L1_error)}
    __pyx_t_7 = __pyx_v_i;
    __pyx_t_8 = -1;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_inds.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_inds.shape[0])) __pyx_t_8 = 0;
    if (unlikely(__pyx_t_8 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_8);
      __PYX_ERR(0, 1257, __pyx_L1_error)
    }
    __pyx_t_9 = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_7 * __pyx_v_inds.strides[0]) )));
    __pyx_t_10 = 0;
    __pyx_t_8 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_poly->r.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_poly->r.shape[0])) __pyx_t_8 = 0;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_poly->r.shape[1];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_8 = 1;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_poly->r.shape[1])) __pyx_t_8 = 1;
    if (unlikely(__pyx_t_8 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_8);
      __PYX_ERR(0, 1257, __pyx_L1_error)
    }
    if (unlikely(!__pyx_v_self->half_width_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1257, __pyx_L1_error)}
    __pyx_t_11 = 0;
    __pyx_t_8 = -1;
    if (__pyx_t_11 < 0) {
      __pyx_t_11 += __pyx_v_self->half_width_xyz.shape[0];
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_8 = 0;
    } else if (unlikely(__pyx_t_11 >= __pyx_v_self->half_width_xyz.shape[0])) __pyx_t_8 = 0;
    if (unlikely(__pyx_t_8 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_8);
      __PYX_ERR(0, 1257, __pyx_L1_error)
    }
    __pyx_t_12 = ((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_poly->r.data + __pyx_t_9 * __pyx_v_poly->r.strides[0]) )) + __pyx_t_10)) ))) + (*((double *) ( /* dim=0 */ (__pyx_v_self->half_width_xyz.data + __pyx_t_11 * __pyx_v_self->half_width_xyz.strides[0]) ))));

    /* "chromo/fields.pyx":1258
 *             sub_bin_x = np.floor(
 *                 (poly.r[inds[i], 0] + self.half_width_xyz[0]) /
 *                 self.sub_bin_width_x             # <<<<<<<<<<<<<<
 *             ) % self.n_sub_bins_x
 *             sub_bin_y = np.floor(
 */
    if (unlikely(__pyx_v_self->sub_bin_width_x == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1257, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1257
 *             # Get sub-bin indices
 *             sub_bin_x = np.floor(
 *                 (poly.r[inds[i], 0] + self.half_width_xyz[0]) /             # <<<<<<<<<<<<<<
 *                 self.sub_bin_width_x
 *             ) % self.n_sub_bins_x
 */
    __pyx_t_5 = PyFloat_FromDouble((__pyx_t_12 / __pyx_v_self->sub_bin_width_x)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_13 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_13)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_1 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_13, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "chromo/fields.pyx":1259
 *                 (poly.r[inds[i], 0] + self.half_width_xyz[0]) /
 *                 self.sub_bin_width_x
 *             ) % self.n_sub_bins_x             # <<<<<<<<<<<<<<
 *             sub_bin_y = np.floor(
 *                 (poly.r[inds[i], 1] + self.half_width_xyz[1]) /
 */
    __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_self->n_sub_bins_x); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyNumber_Remainder(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_14 = __Pyx_PyInt_As_long(__pyx_t_5); if (unlikely((__pyx_t_14 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1259, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_sub_bin_x = __pyx_t_14;

    /* "chromo/fields.pyx":1260
 *                 self.sub_bin_width_x
 *             ) % self.n_sub_bins_x
 *             sub_bin_y = np.floor(             # <<<<<<<<<<<<<<
 *                 (poly.r[inds[i], 1] + self.half_width_xyz[1]) /
 *                 self.sub_bin_width_y
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_floor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "chromo/fields.pyx":1261
 *             ) % self.n_sub_bins_x
 *             sub_bin_y = np.floor(
 *                 (poly.r[inds[i], 1] + self.half_width_xyz[1]) /             # <<<<<<<<<<<<<<
 *                 self.sub_bin_width_y
 *             ) % self.n_sub_bins_y
 */
    if (unlikely(!__pyx_v_poly->r.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1261, __pyx_L1_error)}
    __pyx_t_11 = __pyx_v_i;
    __pyx_t_8 = -1;
    if (__pyx_t_11 < 0) {
      __pyx_t_11 += __pyx_v_inds.shape[0];
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_8 = 0;
    } else if (unlikely(__pyx_t_11 >= __pyx_v_inds.shape[0])) __pyx_t_8 = 0;
    if (unlikely(__pyx_t_8 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_8);
      __PYX_ERR(0, 1261, __pyx_L1_error)
    }
    __pyx_t_7 = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_11 * __pyx_v_inds.strides[0]) )));
    __pyx_t_10 = 1;
    __pyx_t_8 = -1;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_poly->r.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_poly->r.shape[0])) __pyx_t_8 = 0;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_poly->r.shape[1];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_8 = 1;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_poly->r.shape[1])) __pyx_t_8 = 1;
    if (unlikely(__pyx_t_8 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_8);
      __PYX_ERR(0, 1261, __pyx_L1_error)
    }
    if (unlikely(!__pyx_v_self->half_width_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1261, __pyx_L1_error)}
    __pyx_t_9 = 1;
    __pyx_t_8 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->half_width_xyz.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->half_width_xyz.shape[0])) __pyx_t_8 = 0;
    if (unlikely(__pyx_t_8 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_8);
      __PYX_ERR(0, 1261, __pyx_L1_error)
    }
    __pyx_t_12 = ((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_poly->r.data + __pyx_t_7 * __pyx_v_poly->r.strides[0]) )) + __pyx_t_10)) ))) + (*((double *) ( /* dim=0 */ (__pyx_v_self->half_width_xyz.data + __pyx_t_9 * __pyx_v_self->half_width_xyz.strides[0]) ))));

    /* "chromo/fields.pyx":1262
 *             sub_bin_y = np.floor(
 *                 (poly.r[inds[i], 1] + self.half_width_xyz[1]) /
 *                 self.sub_bin_width_y             # <<<<<<<<<<<<<<
 *             ) % self.n_sub_bins_y
 *             sub_bin_z = np.floor(
 */
    if (unlikely(__pyx_v_self->sub_bin_width_y == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1261, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1261
 *             ) % self.n_sub_bins_x
 *             sub_bin_y = np.floor(
 *                 (poly.r[inds[i], 1] + self.half_width_xyz[1]) /             # <<<<<<<<<<<<<<
 *                 self.sub_bin_width_y
 *             ) % self.n_sub_bins_y
 */
    __pyx_t_6 = PyFloat_FromDouble((__pyx_t_12 / __pyx_v_self->sub_bin_width_y)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_13 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_13)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_5 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_13, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "chromo/fields.pyx":1263
 *                 (poly.r[inds[i], 1] + self.half_width_xyz[1]) /
 *                 self.sub_bin_width_y
 *             ) % self.n_sub_bins_y             # <<<<<<<<<<<<<<
 *             sub_bin_z = np.floor(
 *                 (poly.r[inds[i], 2] + self.half_width_xyz[2]) /
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->n_sub_bins_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyNumber_Remainder(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_14 = __Pyx_PyInt_As_long(__pyx_t_6); if (unlikely((__pyx_t_14 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1263, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_sub_bin_y = __pyx_t_14;

    /* "chromo/fields.pyx":1264
 *                 self.sub_bin_width_y
 *             ) % self.n_sub_bins_y
 *             sub_bin_z = np.floor(             # <<<<<<<<<<<<<<
 *                 (poly.r[inds[i], 2] + self.half_width_xyz[2]) /
 *                 self.sub_bin_width_z
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_floor); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "chromo/fields.pyx":1265
 *             ) % self.n_sub_bins_y
 *             sub_bin_z = np.floor(
 *                 (poly.r[inds[i], 2] + self.half_width_xyz[2]) /             # <<<<<<<<<<<<<<
 *                 self.sub_bin_width_z
 *             ) % self.n_sub_bins_z
 */
    if (unlikely(!__pyx_v_poly->r.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1265, __pyx_L1_error)}
    __pyx_t_9 = __pyx_v_i;
    __pyx_t_8 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_inds.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_inds.shape[0])) __pyx_t_8 = 0;
    if (unlikely(__pyx_t_8 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_8);
      __PYX_ERR(0, 1265, __pyx_L1_error)
    }
    __pyx_t_11 = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_9 * __pyx_v_inds.strides[0]) )));
    __pyx_t_10 = 2;
    __pyx_t_8 = -1;
    if (__pyx_t_11 < 0) {
      __pyx_t_11 += __pyx_v_poly->r.shape[0];
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_8 = 0;
    } else if (unlikely(__pyx_t_11 >= __pyx_v_poly->r.shape[0])) __pyx_t_8 = 0;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_poly->r.shape[1];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_8 = 1;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_poly->r.shape[1])) __pyx_t_8 = 1;
    if (unlikely(__pyx_t_8 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_8);
      __PYX_ERR(0, 1265, __pyx_L1_error)
    }
    if (unlikely(!__pyx_v_self->half_width_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1265, __pyx_L1_error)}
    __pyx_t_7 = 2;
    __pyx_t_8 = -1;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->half_width_xyz.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->half_width_xyz.shape[0])) __pyx_t_8 = 0;
    if (unlikely(__pyx_t_8 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_8);
      __PYX_ERR(0, 1265, __pyx_L1_error)
    }
    __pyx_t_12 = ((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_poly->r.data + __pyx_t_11 * __pyx_v_poly->r.strides[0]) )) + __pyx_t_10)) ))) + (*((double *) ( /* dim=0 */ (__pyx_v_self->half_width_xyz.data + __pyx_t_7 * __pyx_v_self->half_width_xyz.strides[0]) ))));

    /* "chromo/fields.pyx":1266
 *             sub_bin_z = np.floor(
 *                 (poly.r[inds[i], 2] + self.half_width_xyz[2]) /
 *                 self.sub_bin_width_z             # <<<<<<<<<<<<<<
 *             ) % self.n_sub_bins_z
 * 
 */
    if (unlikely(__pyx_v_self->sub_bin_width_z == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1265, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1265
 *             ) % self.n_sub_bins_y
 *             sub_bin_z = np.floor(
 *                 (poly.r[inds[i], 2] + self.half_width_xyz[2]) /             # <<<<<<<<<<<<<<
 *                 self.sub_bin_width_z
 *             ) % self.n_sub_bins_z
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_t_12 / __pyx_v_self->sub_bin_width_z)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_13 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_13)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_6 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_13, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1);
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "chromo/fields.pyx":1267
 *                 (poly.r[inds[i], 2] + self.half_width_xyz[2]) /
 *                 self.sub_bin_width_z
 *             ) % self.n_sub_bins_z             # <<<<<<<<<<<<<<
 * 
 *             # Identify sub-bin weights in x, y, z directions
 */
    __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_self->n_sub_bins_z); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyNumber_Remainder(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_14 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_14 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1267, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_sub_bin_z = __pyx_t_14;

    /* "chromo/fields.pyx":1271
 *             # Identify sub-bin weights in x, y, z directions
 *             self.weight_xyz_with_trial[0, 0] = \
 *                 self.sub_bins_to_weights_x[sub_bin_x][0]             # <<<<<<<<<<<<<<
 *             self.weight_xyz_with_trial[0, 1] = \
 *                 self.sub_bins_to_weights_y[sub_bin_y][0]
 */
    if (unlikely(__pyx_v_self->sub_bins_to_weights_x == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1271, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_sub_bin_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->sub_bins_to_weights_x, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1271, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "chromo/fields.pyx":1270
 * 
 *             # Identify sub-bin weights in x, y, z directions
 *             self.weight_xyz_with_trial[0, 0] = \             # <<<<<<<<<<<<<<
 *                 self.sub_bins_to_weights_x[sub_bin_x][0]
 *             self.weight_xyz_with_trial[0, 1] = \
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1270, __pyx_L1_error)}
    __pyx_t_7 = 0;
    __pyx_t_9 = 0;
    __pyx_t_8 = -1;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_8 = 0;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 1;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_8 = 1;
    if (unlikely(__pyx_t_8 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_8);
      __PYX_ERR(0, 1270, __pyx_L1_error)
    }
    *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_7 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_9)) )) = __pyx_t_12;

    /* "chromo/fields.pyx":1273
 *                 self.sub_bins_to_weights_x[sub_bin_x][0]
 *             self.weight_xyz_with_trial[0, 1] = \
 *                 self.sub_bins_to_weights_y[sub_bin_y][0]             # <<<<<<<<<<<<<<
 *             self.weight_xyz_with_trial[0, 2] = \
 *                 self.sub_bins_to_weights_z[sub_bin_z][0]
 */
    if (unlikely(__pyx_v_self->sub_bins_to_weights_y == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1273, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_sub_bin_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->sub_bins_to_weights_y, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1273, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "chromo/fields.pyx":1272
 *             self.weight_xyz_with_trial[0, 0] = \
 *                 self.sub_bins_to_weights_x[sub_bin_x][0]
 *             self.weight_xyz_with_trial[0, 1] = \             # <<<<<<<<<<<<<<
 *                 self.sub_bins_to_weights_y[sub_bin_y][0]
 *             self.weight_xyz_with_trial[0, 2] = \
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1272, __pyx_L1_error)}
    __pyx_t_9 = 0;
    __pyx_t_7 = 1;
    __pyx_t_8 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_8 = 0;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 1;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_8 = 1;
    if (unlikely(__pyx_t_8 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_8);
      __PYX_ERR(0, 1272, __pyx_L1_error)
    }
    *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_9 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_7)) )) = __pyx_t_12;

    /* "chromo/fields.pyx":1275
 *                 self.sub_bins_to_weights_y[sub_bin_y][0]
 *             self.weight_xyz_with_trial[0, 2] = \
 *                 self.sub_bins_to_weights_z[sub_bin_z][0]             # <<<<<<<<<<<<<<
 * 
 *             if state_change == 0:
 */
    if (unlikely(__pyx_v_self->sub_bins_to_weights_z == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1275, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_sub_bin_z); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->sub_bins_to_weights_z, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1275, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "chromo/fields.pyx":1274
 *             self.weight_xyz_with_trial[0, 1] = \
 *                 self.sub_bins_to_weights_y[sub_bin_y][0]
 *             self.weight_xyz_with_trial[0, 2] = \             # <<<<<<<<<<<<<<
 *                 self.sub_bins_to_weights_z[sub_bin_z][0]
 * 
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1274, __pyx_L1_error)}
    __pyx_t_7 = 0;
    __pyx_t_9 = 2;
    __pyx_t_8 = -1;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_8 = 0;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 1;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_8 = 1;
    if (unlikely(__pyx_t_8 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_8);
      __PYX_ERR(0, 1274, __pyx_L1_error)
    }
    *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_7 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_9)) )) = __pyx_t_12;

    /* "chromo/fields.pyx":1277
 *                 self.sub_bins_to_weights_z[sub_bin_z][0]
 * 
 *             if state_change == 0:             # <<<<<<<<<<<<<<
 * 
 *                 sub_bin_x_trial = np.floor(
 */
    __pyx_t_15 = ((__pyx_v_state_change == 0) != 0);
    if (__pyx_t_15) {

      /* "chromo/fields.pyx":1279
 *             if state_change == 0:
 * 
 *                 sub_bin_x_trial = np.floor(             # <<<<<<<<<<<<<<
 *                     (poly.r_trial[inds[i], 0] + self.half_width_xyz[0]) /
 *                     self.sub_bin_width_x
 */
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1279, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_floor); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1279, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "chromo/fields.pyx":1280
 * 
 *                 sub_bin_x_trial = np.floor(
 *                     (poly.r_trial[inds[i], 0] + self.half_width_xyz[0]) /             # <<<<<<<<<<<<<<
 *                     self.sub_bin_width_x
 *                 ) % self.n_sub_bins_x
 */
      if (unlikely(!__pyx_v_poly->r_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1280, __pyx_L1_error)}
      __pyx_t_9 = __pyx_v_i;
      __pyx_t_8 = -1;
      if (__pyx_t_9 < 0) {
        __pyx_t_9 += __pyx_v_inds.shape[0];
        if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 0;
      } else if (unlikely(__pyx_t_9 >= __pyx_v_inds.shape[0])) __pyx_t_8 = 0;
      if (unlikely(__pyx_t_8 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_8);
        __PYX_ERR(0, 1280, __pyx_L1_error)
      }
      __pyx_t_7 = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_9 * __pyx_v_inds.strides[0]) )));
      __pyx_t_10 = 0;
      __pyx_t_8 = -1;
      if (__pyx_t_7 < 0) {
        __pyx_t_7 += __pyx_v_poly->r_trial.shape[0];
        if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
      } else if (unlikely(__pyx_t_7 >= __pyx_v_poly->r_trial.shape[0])) __pyx_t_8 = 0;
      if (__pyx_t_10 < 0) {
        __pyx_t_10 += __pyx_v_poly->r_trial.shape[1];
        if (unlikely(__pyx_t_10 < 0)) __pyx_t_8 = 1;
      } else if (unlikely(__pyx_t_10 >= __pyx_v_poly->r_trial.shape[1])) __pyx_t_8 = 1;
      if (unlikely(__pyx_t_8 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_8);
        __PYX_ERR(0, 1280, __pyx_L1_error)
      }
      if (unlikely(!__pyx_v_self->half_width_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1280, __pyx_L1_error)}
      __pyx_t_11 = 0;
      __pyx_t_8 = -1;
      if (__pyx_t_11 < 0) {
        __pyx_t_11 += __pyx_v_self->half_width_xyz.shape[0];
        if (unlikely(__pyx_t_11 < 0)) __pyx_t_8 = 0;
      } else if (unlikely(__pyx_t_11 >= __pyx_v_self->half_width_xyz.shape[0])) __pyx_t_8 = 0;
      if (unlikely(__pyx_t_8 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_8);
        __PYX_ERR(0, 1280, __pyx_L1_error)
      }
      __pyx_t_12 = ((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_poly->r_trial.data + __pyx_t_7 * __pyx_v_poly->r_trial.strides[0]) )) + __pyx_t_10)) ))) + (*((double *) ( /* dim=0 */ (__pyx_v_self->half_width_xyz.data + __pyx_t_11 * __pyx_v_self->half_width_xyz.strides[0]) ))));

      /* "chromo/fields.pyx":1281
 *                 sub_bin_x_trial = np.floor(
 *                     (poly.r_trial[inds[i], 0] + self.half_width_xyz[0]) /
 *                     self.sub_bin_width_x             # <<<<<<<<<<<<<<
 *                 ) % self.n_sub_bins_x
 *                 sub_bin_y_trial = np.floor(
 */
      if (unlikely(__pyx_v_self->sub_bin_width_x == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 1280, __pyx_L1_error)
      }

      /* "chromo/fields.pyx":1280
 * 
 *                 sub_bin_x_trial = np.floor(
 *                     (poly.r_trial[inds[i], 0] + self.half_width_xyz[0]) /             # <<<<<<<<<<<<<<
 *                     self.sub_bin_width_x
 *                 ) % self.n_sub_bins_x
 */
      __pyx_t_5 = PyFloat_FromDouble((__pyx_t_12 / __pyx_v_self->sub_bin_width_x)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1280, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_13 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_1 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_13, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5);
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1279, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "chromo/fields.pyx":1282
 *                     (poly.r_trial[inds[i], 0] + self.half_width_xyz[0]) /
 *                     self.sub_bin_width_x
 *                 ) % self.n_sub_bins_x             # <<<<<<<<<<<<<<
 *                 sub_bin_y_trial = np.floor(
 *                     (poly.r_trial[inds[i], 1] + self.half_width_xyz[1]) /
 */
      __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_self->n_sub_bins_x); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = PyNumber_Remainder(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_14 = __Pyx_PyInt_As_long(__pyx_t_5); if (unlikely((__pyx_t_14 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1282, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_sub_bin_x_trial = __pyx_t_14;

      /* "chromo/fields.pyx":1283
 *                     self.sub_bin_width_x
 *                 ) % self.n_sub_bins_x
 *                 sub_bin_y_trial = np.floor(             # <<<<<<<<<<<<<<
 *                     (poly.r_trial[inds[i], 1] + self.half_width_xyz[1]) /
 *                     self.sub_bin_width_y
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1283, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_floor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1283, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "chromo/fields.pyx":1284
 *                 ) % self.n_sub_bins_x
 *                 sub_bin_y_trial = np.floor(
 *                     (poly.r_trial[inds[i], 1] + self.half_width_xyz[1]) /             # <<<<<<<<<<<<<<
 *                     self.sub_bin_width_y
 *                 ) % self.n_sub_bins_y
 */
      if (unlikely(!__pyx_v_poly->r_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1284, __pyx_L1_error)}
      __pyx_t_11 = __pyx_v_i;
      __pyx_t_8 = -1;
      if (__pyx_t_11 < 0) {
        __pyx_t_11 += __pyx_v_inds.shape[0];
        if (unlikely(__pyx_t_11 < 0)) __pyx_t_8 = 0;
      } else if (unlikely(__pyx_t_11 >= __pyx_v_inds.shape[0])) __pyx_t_8 = 0;
      if (unlikely(__pyx_t_8 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_8);
        __PYX_ERR(0, 1284, __pyx_L1_error)
      }
      __pyx_t_9 = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_11 * __pyx_v_inds.strides[0]) )));
      __pyx_t_10 = 1;
      __pyx_t_8 = -1;
      if (__pyx_t_9 < 0) {
        __pyx_t_9 += __pyx_v_poly->r_trial.shape[0];
        if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 0;
      } else if (unlikely(__pyx_t_9 >= __pyx_v_poly->r_trial.shape[0])) __pyx_t_8 = 0;
      if (__pyx_t_10 < 0) {
        __pyx_t_10 += __pyx_v_poly->r_trial.shape[1];
        if (unlikely(__pyx_t_10 < 0)) __pyx_t_8 = 1;
      } else if (unlikely(__pyx_t_10 >= __pyx_v_poly->r_trial.shape[1])) __pyx_t_8 = 1;
      if (unlikely(__pyx_t_8 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_8);
        __PYX_ERR(0, 1284, __pyx_L1_error)
      }
      if (unlikely(!__pyx_v_self->half_width_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1284, __pyx_L1_error)}
      __pyx_t_7 = 1;
      __pyx_t_8 = -1;
      if (__pyx_t_7 < 0) {
        __pyx_t_7 += __pyx_v_self->half_width_xyz.shape[0];
        if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
      } else if (unlikely(__pyx_t_7 >= __pyx_v_self->half_width_xyz.shape[0])) __pyx_t_8 = 0;
      if (unlikely(__pyx_t_8 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_8);
        __PYX_ERR(0, 1284, __pyx_L1_error)
      }
      __pyx_t_12 = ((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_poly->r_trial.data + __pyx_t_9 * __pyx_v_poly->r_trial.strides[0]) )) + __pyx_t_10)) ))) + (*((double *) ( /* dim=0 */ (__pyx_v_self->half_width_xyz.data + __pyx_t_7 * __pyx_v_self->half_width_xyz.strides[0]) ))));

      /* "chromo/fields.pyx":1285
 *                 sub_bin_y_trial = np.floor(
 *                     (poly.r_trial[inds[i], 1] + self.half_width_xyz[1]) /
 *                     self.sub_bin_width_y             # <<<<<<<<<<<<<<
 *                 ) % self.n_sub_bins_y
 *                 sub_bin_z_trial = np.floor(
 */
      if (unlikely(__pyx_v_self->sub_bin_width_y == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 1284, __pyx_L1_error)
      }

      /* "chromo/fields.pyx":1284
 *                 ) % self.n_sub_bins_x
 *                 sub_bin_y_trial = np.floor(
 *                     (poly.r_trial[inds[i], 1] + self.half_width_xyz[1]) /             # <<<<<<<<<<<<<<
 *                     self.sub_bin_width_y
 *                 ) % self.n_sub_bins_y
 */
      __pyx_t_6 = PyFloat_FromDouble((__pyx_t_12 / __pyx_v_self->sub_bin_width_y)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1284, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_13 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_5 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_13, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6);
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1283, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "chromo/fields.pyx":1286
 *                     (poly.r_trial[inds[i], 1] + self.half_width_xyz[1]) /
 *                     self.sub_bin_width_y
 *                 ) % self.n_sub_bins_y             # <<<<<<<<<<<<<<
 *                 sub_bin_z_trial = np.floor(
 *                     (poly.r_trial[inds[i], 2] + self.half_width_xyz[2]) /
 */
      __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->n_sub_bins_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = PyNumber_Remainder(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_14 = __Pyx_PyInt_As_long(__pyx_t_6); if (unlikely((__pyx_t_14 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1286, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_sub_bin_y_trial = __pyx_t_14;

      /* "chromo/fields.pyx":1287
 *                     self.sub_bin_width_y
 *                 ) % self.n_sub_bins_y
 *                 sub_bin_z_trial = np.floor(             # <<<<<<<<<<<<<<
 *                     (poly.r_trial[inds[i], 2] + self.half_width_xyz[2]) /
 *                     self.sub_bin_width_z
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_floor); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "chromo/fields.pyx":1288
 *                 ) % self.n_sub_bins_y
 *                 sub_bin_z_trial = np.floor(
 *                     (poly.r_trial[inds[i], 2] + self.half_width_xyz[2]) /             # <<<<<<<<<<<<<<
 *                     self.sub_bin_width_z
 *                 ) % self.n_sub_bins_z
 */
      if (unlikely(!__pyx_v_poly->r_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1288, __pyx_L1_error)}
      __pyx_t_7 = __pyx_v_i;
      __pyx_t_8 = -1;
      if (__pyx_t_7 < 0) {
        __pyx_t_7 += __pyx_v_inds.shape[0];
        if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
      } else if (unlikely(__pyx_t_7 >= __pyx_v_inds.shape[0])) __pyx_t_8 = 0;
      if (unlikely(__pyx_t_8 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_8);
        __PYX_ERR(0, 1288, __pyx_L1_error)
      }
      __pyx_t_11 = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_7 * __pyx_v_inds.strides[0]) )));
      __pyx_t_10 = 2;
      __pyx_t_8 = -1;
      if (__pyx_t_11 < 0) {
        __pyx_t_11 += __pyx_v_poly->r_trial.shape[0];
        if (unlikely(__pyx_t_11 < 0)) __pyx_t_8 = 0;
      } else if (unlikely(__pyx_t_11 >= __pyx_v_poly->r_trial.shape[0])) __pyx_t_8 = 0;
      if (__pyx_t_10 < 0) {
        __pyx_t_10 += __pyx_v_poly->r_trial.shape[1];
        if (unlikely(__pyx_t_10 < 0)) __pyx_t_8 = 1;
      } else if (unlikely(__pyx_t_10 >= __pyx_v_poly->r_trial.shape[1])) __pyx_t_8 = 1;
      if (unlikely(__pyx_t_8 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_8);
        __PYX_ERR(0, 1288, __pyx_L1_error)
      }
      if (unlikely(!__pyx_v_self->half_width_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1288, __pyx_L1_error)}
      __pyx_t_9 = 2;
      __pyx_t_8 = -1;
      if (__pyx_t_9 < 0) {
        __pyx_t_9 += __pyx_v_self->half_width_xyz.shape[0];
        if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 0;
      } else if (unlikely(__pyx_t_9 >= __pyx_v_self->half_width_xyz.shape[0])) __pyx_t_8 = 0;
      if (unlikely(__pyx_t_8 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_8);
        __PYX_ERR(0, 1288, __pyx_L1_error)
      }
      __pyx_t_12 = ((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_poly->r_trial.data + __pyx_t_11 * __pyx_v_poly->r_trial.strides[0]) )) + __pyx_t_10)) ))) + (*((double *) ( /* dim=0 */ (__pyx_v_self->half_width_xyz.data + __pyx_t_9 * __pyx_v_self->half_width_xyz.strides[0]) ))));

      /* "chromo/fields.pyx":1289
 *                 sub_bin_z_trial = np.floor(
 *                     (poly.r_trial[inds[i], 2] + self.half_width_xyz[2]) /
 *                     self.sub_bin_width_z             # <<<<<<<<<<<<<<
 *                 ) % self.n_sub_bins_z
 * 
 */
      if (unlikely(__pyx_v_self->sub_bin_width_z == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 1288, __pyx_L1_error)
      }

      /* "chromo/fields.pyx":1288
 *                 ) % self.n_sub_bins_y
 *                 sub_bin_z_trial = np.floor(
 *                     (poly.r_trial[inds[i], 2] + self.half_width_xyz[2]) /             # <<<<<<<<<<<<<<
 *                     self.sub_bin_width_z
 *                 ) % self.n_sub_bins_z
 */
      __pyx_t_1 = PyFloat_FromDouble((__pyx_t_12 / __pyx_v_self->sub_bin_width_z)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1288, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_13 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_6 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_13, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1);
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "chromo/fields.pyx":1290
 *                     (poly.r_trial[inds[i], 2] + self.half_width_xyz[2]) /
 *                     self.sub_bin_width_z
 *                 ) % self.n_sub_bins_z             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
      __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_self->n_sub_bins_z); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1290, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = PyNumber_Remainder(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1290, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_14 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_14 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1290, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_sub_bin_z_trial = __pyx_t_14;

      /* "chromo/fields.pyx":1277
 *                 self.sub_bins_to_weights_z[sub_bin_z][0]
 * 
 *             if state_change == 0:             # <<<<<<<<<<<<<<
 * 
 *                 sub_bin_x_trial = np.floor(
 */
      goto __pyx_L5;
    }

    /* "chromo/fields.pyx":1293
 * 
 *             else:
 *                 sub_bin_x_trial = sub_bin_x             # <<<<<<<<<<<<<<
 *                 sub_bin_y_trial = sub_bin_y
 *                 sub_bin_z_trial = sub_bin_z
 */
    /*else*/ {
      __pyx_v_sub_bin_x_trial = __pyx_v_sub_bin_x;

      /* "chromo/fields.pyx":1294
 *             else:
 *                 sub_bin_x_trial = sub_bin_x
 *                 sub_bin_y_trial = sub_bin_y             # <<<<<<<<<<<<<<
 *                 sub_bin_z_trial = sub_bin_z
 *                 for j in range(3):
 */
      __pyx_v_sub_bin_y_trial = __pyx_v_sub_bin_y;

      /* "chromo/fields.pyx":1295
 *                 sub_bin_x_trial = sub_bin_x
 *                 sub_bin_y_trial = sub_bin_y
 *                 sub_bin_z_trial = sub_bin_z             # <<<<<<<<<<<<<<
 *                 for j in range(3):
 *                     self.xyz_with_trial[1, j] = self.xyz_with_trial[0, j]
 */
      __pyx_v_sub_bin_z_trial = __pyx_v_sub_bin_z;

      /* "chromo/fields.pyx":1296
 *                 sub_bin_y_trial = sub_bin_y
 *                 sub_bin_z_trial = sub_bin_z
 *                 for j in range(3):             # <<<<<<<<<<<<<<
 *                     self.xyz_with_trial[1, j] = self.xyz_with_trial[0, j]
 * 
 */
      for (__pyx_t_14 = 0; __pyx_t_14 < 3; __pyx_t_14+=1) {
        __pyx_v_j = __pyx_t_14;

        /* "chromo/fields.pyx":1297
 *                 sub_bin_z_trial = sub_bin_z
 *                 for j in range(3):
 *                     self.xyz_with_trial[1, j] = self.xyz_with_trial[0, j]             # <<<<<<<<<<<<<<
 * 
 *             self.weight_xyz_with_trial[1, 0] = \
 */
        if (unlikely(!__pyx_v_self->xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1297, __pyx_L1_error)}
        __pyx_t_9 = 0;
        __pyx_t_7 = __pyx_v_j;
        __pyx_t_8 = -1;
        if (__pyx_t_9 < 0) {
          __pyx_t_9 += __pyx_v_self->xyz_with_trial.shape[0];
          if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 0;
        } else if (unlikely(__pyx_t_9 >= __pyx_v_self->xyz_with_trial.shape[0])) __pyx_t_8 = 0;
        if (__pyx_t_7 < 0) {
          __pyx_t_7 += __pyx_v_self->xyz_with_trial.shape[1];
          if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 1;
        } else if (unlikely(__pyx_t_7 >= __pyx_v_self->xyz_with_trial.shape[1])) __pyx_t_8 = 1;
        if (unlikely(__pyx_t_8 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_8);
          __PYX_ERR(0, 1297, __pyx_L1_error)
        }
        if (unlikely(!__pyx_v_self->xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1297, __pyx_L1_error)}
        __pyx_t_10 = 1;
        __pyx_t_11 = __pyx_v_j;
        __pyx_t_8 = -1;
        if (__pyx_t_10 < 0) {
          __pyx_t_10 += __pyx_v_self->xyz_with_trial.shape[0];
          if (unlikely(__pyx_t_10 < 0)) __pyx_t_8 = 0;
        } else if (unlikely(__pyx_t_10 >= __pyx_v_self->xyz_with_trial.shape[0])) __pyx_t_8 = 0;
        if (__pyx_t_11 < 0) {
          __pyx_t_11 += __pyx_v_self->xyz_with_trial.shape[1];
          if (unlikely(__pyx_t_11 < 0)) __pyx_t_8 = 1;
        } else if (unlikely(__pyx_t_11 >= __pyx_v_self->xyz_with_trial.shape[1])) __pyx_t_8 = 1;
        if (unlikely(__pyx_t_8 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_8);
          __PYX_ERR(0, 1297, __pyx_L1_error)
        }
        *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->xyz_with_trial.data + __pyx_t_10 * __pyx_v_self->xyz_with_trial.strides[0]) )) + __pyx_t_11)) )) = (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->xyz_with_trial.data + __pyx_t_9 * __pyx_v_self->xyz_with_trial.strides[0]) )) + __pyx_t_7)) )));
      }
    }
    __pyx_L5:;

    /* "chromo/fields.pyx":1300
 * 
 *             self.weight_xyz_with_trial[1, 0] = \
 *                 self.sub_bins_to_weights_x[sub_bin_x_trial][0]             # <<<<<<<<<<<<<<
 *             self.weight_xyz_with_trial[1, 1] = \
 *                 self.sub_bins_to_weights_y[sub_bin_y_trial][0]
 */
    if (unlikely(__pyx_v_self->sub_bins_to_weights_x == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1300, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_sub_bin_x_trial); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->sub_bins_to_weights_x, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1300, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "chromo/fields.pyx":1299
 *                     self.xyz_with_trial[1, j] = self.xyz_with_trial[0, j]
 * 
 *             self.weight_xyz_with_trial[1, 0] = \             # <<<<<<<<<<<<<<
 *                 self.sub_bins_to_weights_x[sub_bin_x_trial][0]
 *             self.weight_xyz_with_trial[1, 1] = \
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1299, __pyx_L1_error)}
    __pyx_t_7 = 1;
    __pyx_t_9 = 0;
    __pyx_t_8 = -1;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_8 = 0;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 1;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_8 = 1;
    if (unlikely(__pyx_t_8 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_8);
      __PYX_ERR(0, 1299, __pyx_L1_error)
    }
    *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_7 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_9)) )) = __pyx_t_12;

    /* "chromo/fields.pyx":1302
 *                 self.sub_bins_to_weights_x[sub_bin_x_trial][0]
 *             self.weight_xyz_with_trial[1, 1] = \
 *                 self.sub_bins_to_weights_y[sub_bin_y_trial][0]             # <<<<<<<<<<<<<<
 *             self.weight_xyz_with_trial[1, 2] = \
 *                 self.sub_bins_to_weights_z[sub_bin_z_trial][0]
 */
    if (unlikely(__pyx_v_self->sub_bins_to_weights_y == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1302, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_sub_bin_y_trial); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->sub_bins_to_weights_y, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1302, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "chromo/fields.pyx":1301
 *             self.weight_xyz_with_trial[1, 0] = \
 *                 self.sub_bins_to_weights_x[sub_bin_x_trial][0]
 *             self.weight_xyz_with_trial[1, 1] = \             # <<<<<<<<<<<<<<
 *                 self.sub_bins_to_weights_y[sub_bin_y_trial][0]
 *             self.weight_xyz_with_trial[1, 2] = \
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1301, __pyx_L1_error)}
    __pyx_t_9 = 1;
    __pyx_t_7 = 1;
    __pyx_t_8 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_8 = 0;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 1;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_8 = 1;
    if (unlikely(__pyx_t_8 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_8);
      __PYX_ERR(0, 1301, __pyx_L1_error)
    }
    *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_9 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_7)) )) = __pyx_t_12;

    /* "chromo/fields.pyx":1304
 *                 self.sub_bins_to_weights_y[sub_bin_y_trial][0]
 *             self.weight_xyz_with_trial[1, 2] = \
 *                 self.sub_bins_to_weights_z[sub_bin_z_trial][0]             # <<<<<<<<<<<<<<
 * 
 *             self.index_xyz_with_trial[0, 0] = \
 */
    if (unlikely(__pyx_v_self->sub_bins_to_weights_z == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1304, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_sub_bin_z_trial); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->sub_bins_to_weights_z, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "chromo/fields.pyx":1303
 *             self.weight_xyz_with_trial[1, 1] = \
 *                 self.sub_bins_to_weights_y[sub_bin_y_trial][0]
 *             self.weight_xyz_with_trial[1, 2] = \             # <<<<<<<<<<<<<<
 *                 self.sub_bins_to_weights_z[sub_bin_z_trial][0]
 * 
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1303, __pyx_L1_error)}
    __pyx_t_7 = 1;
    __pyx_t_9 = 2;
    __pyx_t_8 = -1;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_8 = 0;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 1;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_8 = 1;
    if (unlikely(__pyx_t_8 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_8);
      __PYX_ERR(0, 1303, __pyx_L1_error)
    }
    *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_7 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_9)) )) = __pyx_t_12;

    /* "chromo/fields.pyx":1307
 * 
 *             self.index_xyz_with_trial[0, 0] = \
 *                 self.sub_bins_to_bins_x[sub_bin_x][0]             # <<<<<<<<<<<<<<
 *             self.index_xyz_with_trial[0, 1] = \
 *                 self.sub_bins_to_bins_y[sub_bin_y][0]
 */
    if (unlikely(__pyx_v_self->sub_bins_to_bins_x == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1307, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_sub_bin_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->sub_bins_to_bins_x, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_14 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_14 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1307, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "chromo/fields.pyx":1306
 *                 self.sub_bins_to_weights_z[sub_bin_z_trial][0]
 * 
 *             self.index_xyz_with_trial[0, 0] = \             # <<<<<<<<<<<<<<
 *                 self.sub_bins_to_bins_x[sub_bin_x][0]
 *             self.index_xyz_with_trial[0, 1] = \
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1306, __pyx_L1_error)}
    __pyx_t_9 = 0;
    __pyx_t_7 = 0;
    __pyx_t_8 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_8 = 0;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 1;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_8 = 1;
    if (unlikely(__pyx_t_8 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_8);
      __PYX_ERR(0, 1306, __pyx_L1_error)
    }
    *((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_9 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_7)) )) = __pyx_t_14;

    /* "chromo/fields.pyx":1309
 *                 self.sub_bins_to_bins_x[sub_bin_x][0]
 *             self.index_xyz_with_trial[0, 1] = \
 *                 self.sub_bins_to_bins_y[sub_bin_y][0]             # <<<<<<<<<<<<<<
 *             self.index_xyz_with_trial[0, 2] = \
 *                 self.sub_bins_to_bins_z[sub_bin_z][0]
 */
    if (unlikely(__pyx_v_self->sub_bins_to_bins_y == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1309, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_sub_bin_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->sub_bins_to_bins_y, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_14 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_14 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1309, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "chromo/fields.pyx":1308
 *             self.index_xyz_with_trial[0, 0] = \
 *                 self.sub_bins_to_bins_x[sub_bin_x][0]
 *             self.index_xyz_with_trial[0, 1] = \             # <<<<<<<<<<<<<<
 *                 self.sub_bins_to_bins_y[sub_bin_y][0]
 *             self.index_xyz_with_trial[0, 2] = \
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1308, __pyx_L1_error)}
    __pyx_t_7 = 0;
    __pyx_t_9 = 1;
    __pyx_t_8 = -1;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_8 = 0;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 1;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_8 = 1;
    if (unlikely(__pyx_t_8 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_8);
      __PYX_ERR(0, 1308, __pyx_L1_error)
    }
    *((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_7 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_9)) )) = __pyx_t_14;

    /* "chromo/fields.pyx":1311
 *                 self.sub_bins_to_bins_y[sub_bin_y][0]
 *             self.index_xyz_with_trial[0, 2] = \
 *                 self.sub_bins_to_bins_z[sub_bin_z][0]             # <<<<<<<<<<<<<<
 *             self.index_xyz_with_trial[1, 0] = \
 *                 self.sub_bins_to_bins_x[sub_bin_x_trial][0]
 */
    if (unlikely(__pyx_v_self->sub_bins_to_bins_z == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1311, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_sub_bin_z); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->sub_bins_to_bins_z, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_14 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_14 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1311, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "chromo/fields.pyx":1310
 *             self.index_xyz_with_trial[0, 1] = \
 *                 self.sub_bins_to_bins_y[sub_bin_y][0]
 *             self.index_xyz_with_trial[0, 2] = \             # <<<<<<<<<<<<<<
 *                 self.sub_bins_to_bins_z[sub_bin_z][0]
 *             self.index_xyz_with_trial[1, 0] = \
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1310, __pyx_L1_error)}
    __pyx_t_9 = 0;
    __pyx_t_7 = 2;
    __pyx_t_8 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_8 = 0;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 1;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_8 = 1;
    if (unlikely(__pyx_t_8 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_8);
      __PYX_ERR(0, 1310, __pyx_L1_error)
    }
    *((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_9 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_7)) )) = __pyx_t_14;

    /* "chromo/fields.pyx":1313
 *                 self.sub_bins_to_bins_z[sub_bin_z][0]
 *             self.index_xyz_with_trial[1, 0] = \
 *                 self.sub_bins_to_bins_x[sub_bin_x_trial][0]             # <<<<<<<<<<<<<<
 *             self.index_xyz_with_trial[1, 1] = \
 *                 self.sub_bins_to_bins_y[sub_bin_y_trial][0]
 */
    if (unlikely(__pyx_v_self->sub_bins_to_bins_x == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1313, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_sub_bin_x_trial); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->sub_bins_to_bins_x, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_14 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_14 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1313, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "chromo/fields.pyx":1312
 *             self.index_xyz_with_trial[0, 2] = \
 *                 self.sub_bins_to_bins_z[sub_bin_z][0]
 *             self.index_xyz_with_trial[1, 0] = \             # <<<<<<<<<<<<<<
 *                 self.sub_bins_to_bins_x[sub_bin_x_trial][0]
 *             self.index_xyz_with_trial[1, 1] = \
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1312, __pyx_L1_error)}
    __pyx_t_7 = 1;
    __pyx_t_9 = 0;
    __pyx_t_8 = -1;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_8 = 0;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 1;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_8 = 1;
    if (unlikely(__pyx_t_8 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_8);
      __PYX_ERR(0, 1312, __pyx_L1_error)
    }
    *((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_7 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_9)) )) = __pyx_t_14;

    /* "chromo/fields.pyx":1315
 *                 self.sub_bins_to_bins_x[sub_bin_x_trial][0]
 *             self.index_xyz_with_trial[1, 1] = \
 *                 self.sub_bins_to_bins_y[sub_bin_y_trial][0]             # <<<<<<<<<<<<<<
 *             self.index_xyz_with_trial[1, 2] = \
 *                 self.sub_bins_to_bins_z[sub_bin_z_trial][0]
 */
    if (unlikely(__pyx_v_self->sub_bins_to_bins_y == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1315, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_sub_bin_y_trial); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->sub_bins_to_bins_y, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_14 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_14 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1315, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "chromo/fields.pyx":1314
 *             self.index_xyz_with_trial[1, 0] = \
 *                 self.sub_bins_to_bins_x[sub_bin_x_trial][0]
 *             self.index_xyz_with_trial[1, 1] = \             # <<<<<<<<<<<<<<
 *                 self.sub_bins_to_bins_y[sub_bin_y_trial][0]
 *             self.index_xyz_with_trial[1, 2] = \
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1314, __pyx_L1_error)}
    __pyx_t_9 = 1;
    __pyx_t_7 = 1;
    __pyx_t_8 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_8 = 0;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 1;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_8 = 1;
    if (unlikely(__pyx_t_8 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_8);
      __PYX_ERR(0, 1314, __pyx_L1_error)
    }
    *((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_9 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_7)) )) = __pyx_t_14;

    /* "chromo/fields.pyx":1317
 *                 self.sub_bins_to_bins_y[sub_bin_y_trial][0]
 *             self.index_xyz_with_trial[1, 2] = \
 *                 self.sub_bins_to_bins_z[sub_bin_z_trial][0]             # <<<<<<<<<<<<<<
 * 
 *             # Get weights and super-indices of eight bins containing bead
 */
    if (unlikely(__pyx_v_self->sub_bins_to_bins_z == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1317, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_sub_bin_z_trial); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->sub_bins_to_bins_z, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_14 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_14 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1317, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "chromo/fields.pyx":1316
 *             self.index_xyz_with_trial[1, 1] = \
 *                 self.sub_bins_to_bins_y[sub_bin_y_trial][0]
 *             self.index_xyz_with_trial[1, 2] = \             # <<<<<<<<<<<<<<
 *                 self.sub_bins_to_bins_z[sub_bin_z_trial][0]
 * 
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1316, __pyx_L1_error)}
    __pyx_t_7 = 1;
    __pyx_t_9 = 2;
    __pyx_t_8 = -1;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_8 = 0;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 1;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_8 = 1;
    if (unlikely(__pyx_t_8 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_8);
      __PYX_ERR(0, 1316, __pyx_L1_error)
    }
    *((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_7 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_9)) )) = __pyx_t_14;

    /* "chromo/fields.pyx":1320
 * 
 *             # Get weights and super-indices of eight bins containing bead
 *             self._generate_weight_vector_with_trial()             # <<<<<<<<<<<<<<
 *             self._generate_index_vector_with_trial()
 * 
 */
    ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->_generate_weight_vector_with_trial(__pyx_v_self);

    /* "chromo/fields.pyx":1321
 *             # Get weights and super-indices of eight bins containing bead
 *             self._generate_weight_vector_with_trial()
 *             self._generate_index_vector_with_trial()             # <<<<<<<<<<<<<<
 * 
 *             # Distribute weights into bins
 */
    ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->_generate_index_vector_with_trial(__pyx_v_self);

    /* "chromo/fields.pyx":1327
 *             # l indicates for which of eight bins density is being calculated
 *             # m indicates polymer (0) or which protein (1 to n_binders)
 *             for k in range(2):             # <<<<<<<<<<<<<<
 *                 for l in range(8):
 *                     poly.densities_temp[k, 0, l] = (
 */
    for (__pyx_t_14 = 0; __pyx_t_14 < 2; __pyx_t_14+=1) {
      __pyx_v_k = __pyx_t_14;

      /* "chromo/fields.pyx":1328
 *             # m indicates polymer (0) or which protein (1 to n_binders)
 *             for k in range(2):
 *                 for l in range(8):             # <<<<<<<<<<<<<<
 *                     poly.densities_temp[k, 0, l] = (
 *                             self.wt_vec_with_trial[k, l] /
 */
      for (__pyx_t_16 = 0; __pyx_t_16 < 8; __pyx_t_16+=1) {
        __pyx_v_l = __pyx_t_16;

        /* "chromo/fields.pyx":1330
 *                 for l in range(8):
 *                     poly.densities_temp[k, 0, l] = (
 *                             self.wt_vec_with_trial[k, l] /             # <<<<<<<<<<<<<<
 *                             self.access_vols[self.nbr_inds_with_trial[k, l]]
 *                     )
 */
        if (unlikely(!__pyx_v_self->wt_vec_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1330, __pyx_L1_error)}
        __pyx_t_9 = __pyx_v_k;
        __pyx_t_7 = __pyx_v_l;
        __pyx_t_8 = -1;
        if (__pyx_t_9 < 0) {
          __pyx_t_9 += __pyx_v_self->wt_vec_with_trial.shape[0];
          if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 0;
        } else if (unlikely(__pyx_t_9 >= __pyx_v_self->wt_vec_with_trial.shape[0])) __pyx_t_8 = 0;
        if (__pyx_t_7 < 0) {
          __pyx_t_7 += __pyx_v_self->wt_vec_with_trial.shape[1];
          if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 1;
        } else if (unlikely(__pyx_t_7 >= __pyx_v_self->wt_vec_with_trial.shape[1])) __pyx_t_8 = 1;
        if (unlikely(__pyx_t_8 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_8);
          __PYX_ERR(0, 1330, __pyx_L1_error)
        }
        __pyx_t_1 = PyFloat_FromDouble((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->wt_vec_with_trial.data + __pyx_t_9 * __pyx_v_self->wt_vec_with_trial.strides[0]) )) + __pyx_t_7)) )))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1330, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);

        /* "chromo/fields.pyx":1331
 *                     poly.densities_temp[k, 0, l] = (
 *                             self.wt_vec_with_trial[k, l] /
 *                             self.access_vols[self.nbr_inds_with_trial[k, l]]             # <<<<<<<<<<<<<<
 *                     )
 *                     for m in range(1, poly.n_binders_p1):
 */
        if (unlikely(__pyx_v_self->access_vols == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 1331, __pyx_L1_error)
        }
        if (unlikely(!__pyx_v_self->nbr_inds_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1331, __pyx_L1_error)}
        __pyx_t_7 = __pyx_v_k;
        __pyx_t_9 = __pyx_v_l;
        __pyx_t_8 = -1;
        if (__pyx_t_7 < 0) {
          __pyx_t_7 += __pyx_v_self->nbr_inds_with_trial.shape[0];
          if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
        } else if (unlikely(__pyx_t_7 >= __pyx_v_self->nbr_inds_with_trial.shape[0])) __pyx_t_8 = 0;
        if (__pyx_t_9 < 0) {
          __pyx_t_9 += __pyx_v_self->nbr_inds_with_trial.shape[1];
          if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 1;
        } else if (unlikely(__pyx_t_9 >= __pyx_v_self->nbr_inds_with_trial.shape[1])) __pyx_t_8 = 1;
        if (unlikely(__pyx_t_8 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_8);
          __PYX_ERR(0, 1331, __pyx_L1_error)
        }
        __pyx_t_5 = __Pyx_PyInt_From_long((*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds_with_trial.data + __pyx_t_7 * __pyx_v_self->nbr_inds_with_trial.strides[0]) )) + __pyx_t_9)) )))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1331, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_self->access_vols, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1331, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "chromo/fields.pyx":1330
 *                 for l in range(8):
 *                     poly.densities_temp[k, 0, l] = (
 *                             self.wt_vec_with_trial[k, l] /             # <<<<<<<<<<<<<<
 *                             self.access_vols[self.nbr_inds_with_trial[k, l]]
 *                     )
 */
        __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1330, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1330, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "chromo/fields.pyx":1329
 *             for k in range(2):
 *                 for l in range(8):
 *                     poly.densities_temp[k, 0, l] = (             # <<<<<<<<<<<<<<
 *                             self.wt_vec_with_trial[k, l] /
 *                             self.access_vols[self.nbr_inds_with_trial[k, l]]
 */
        if (unlikely(!__pyx_v_poly->densities_temp.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1329, __pyx_L1_error)}
        __pyx_t_9 = __pyx_v_k;
        __pyx_t_7 = 0;
        __pyx_t_11 = __pyx_v_l;
        __pyx_t_8 = -1;
        if (__pyx_t_9 < 0) {
          __pyx_t_9 += __pyx_v_poly->densities_temp.shape[0];
          if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 0;
        } else if (unlikely(__pyx_t_9 >= __pyx_v_poly->densities_temp.shape[0])) __pyx_t_8 = 0;
        if (__pyx_t_7 < 0) {
          __pyx_t_7 += __pyx_v_poly->densities_temp.shape[1];
          if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 1;
        } else if (unlikely(__pyx_t_7 >= __pyx_v_poly->densities_temp.shape[1])) __pyx_t_8 = 1;
        if (__pyx_t_11 < 0) {
          __pyx_t_11 += __pyx_v_poly->densities_temp.shape[2];
          if (unlikely(__pyx_t_11 < 0)) __pyx_t_8 = 2;
        } else if (unlikely(__pyx_t_11 >= __pyx_v_poly->densities_temp.shape[2])) __pyx_t_8 = 2;
        if (unlikely(__pyx_t_8 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_8);
          __PYX_ERR(0, 1329, __pyx_L1_error)
        }
        *((double *) ( /* dim=2 */ ((char *) (((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_poly->densities_temp.data + __pyx_t_9 * __pyx_v_poly->densities_temp.strides[0]) ) + __pyx_t_7 * __pyx_v_poly->densities_temp.strides[1]) )) + __pyx_t_11)) )) = __pyx_t_12;

        /* "chromo/fields.pyx":1333
 *                             self.access_vols[self.nbr_inds_with_trial[k, l]]
 *                     )
 *                     for m in range(1, poly.n_binders_p1):             # <<<<<<<<<<<<<<
 *                         # Current Configuration
 *                         if k == 0 or state_change == 0:
 */
        __pyx_t_17 = __pyx_v_poly->n_binders_p1;
        __pyx_t_18 = __pyx_t_17;
        for (__pyx_t_19 = 1; __pyx_t_19 < __pyx_t_18; __pyx_t_19+=1) {
          __pyx_v_m = __pyx_t_19;

          /* "chromo/fields.pyx":1335
 *                     for m in range(1, poly.n_binders_p1):
 *                         # Current Configuration
 *                         if k == 0 or state_change == 0:             # <<<<<<<<<<<<<<
 *                             poly.densities_temp[k, m, l] = \
 *                                 poly.densities_temp[k, 0, l] * \
 */
          __pyx_t_20 = ((__pyx_v_k == 0) != 0);
          if (!__pyx_t_20) {
          } else {
            __pyx_t_15 = __pyx_t_20;
            goto __pyx_L15_bool_binop_done;
          }
          __pyx_t_20 = ((__pyx_v_state_change == 0) != 0);
          __pyx_t_15 = __pyx_t_20;
          __pyx_L15_bool_binop_done:;
          if (__pyx_t_15) {

            /* "chromo/fields.pyx":1337
 *                         if k == 0 or state_change == 0:
 *                             poly.densities_temp[k, m, l] = \
 *                                 poly.densities_temp[k, 0, l] * \             # <<<<<<<<<<<<<<
 *                                 float(poly.states[inds[i], m-1])
 *                         # Trial Configuration of State Change
 */
            if (unlikely(!__pyx_v_poly->densities_temp.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1337, __pyx_L1_error)}
            __pyx_t_11 = __pyx_v_k;
            __pyx_t_7 = 0;
            __pyx_t_9 = __pyx_v_l;
            __pyx_t_8 = -1;
            if (__pyx_t_11 < 0) {
              __pyx_t_11 += __pyx_v_poly->densities_temp.shape[0];
              if (unlikely(__pyx_t_11 < 0)) __pyx_t_8 = 0;
            } else if (unlikely(__pyx_t_11 >= __pyx_v_poly->densities_temp.shape[0])) __pyx_t_8 = 0;
            if (__pyx_t_7 < 0) {
              __pyx_t_7 += __pyx_v_poly->densities_temp.shape[1];
              if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 1;
            } else if (unlikely(__pyx_t_7 >= __pyx_v_poly->densities_temp.shape[1])) __pyx_t_8 = 1;
            if (__pyx_t_9 < 0) {
              __pyx_t_9 += __pyx_v_poly->densities_temp.shape[2];
              if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 2;
            } else if (unlikely(__pyx_t_9 >= __pyx_v_poly->densities_temp.shape[2])) __pyx_t_8 = 2;
            if (unlikely(__pyx_t_8 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_8);
              __PYX_ERR(0, 1337, __pyx_L1_error)
            }

            /* "chromo/fields.pyx":1338
 *                             poly.densities_temp[k, m, l] = \
 *                                 poly.densities_temp[k, 0, l] * \
 *                                 float(poly.states[inds[i], m-1])             # <<<<<<<<<<<<<<
 *                         # Trial Configuration of State Change
 *                         else:
 */
            if (unlikely(!__pyx_v_poly->states.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1338, __pyx_L1_error)}
            __pyx_t_10 = __pyx_v_i;
            __pyx_t_8 = -1;
            if (__pyx_t_10 < 0) {
              __pyx_t_10 += __pyx_v_inds.shape[0];
              if (unlikely(__pyx_t_10 < 0)) __pyx_t_8 = 0;
            } else if (unlikely(__pyx_t_10 >= __pyx_v_inds.shape[0])) __pyx_t_8 = 0;
            if (unlikely(__pyx_t_8 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_8);
              __PYX_ERR(0, 1338, __pyx_L1_error)
            }
            __pyx_t_21 = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_10 * __pyx_v_inds.strides[0]) )));
            __pyx_t_22 = (__pyx_v_m - 1);
            __pyx_t_8 = -1;
            if (__pyx_t_21 < 0) {
              __pyx_t_21 += __pyx_v_poly->states.shape[0];
              if (unlikely(__pyx_t_21 < 0)) __pyx_t_8 = 0;
            } else if (unlikely(__pyx_t_21 >= __pyx_v_poly->states.shape[0])) __pyx_t_8 = 0;
            if (__pyx_t_22 < 0) {
              __pyx_t_22 += __pyx_v_poly->states.shape[1];
              if (unlikely(__pyx_t_22 < 0)) __pyx_t_8 = 1;
            } else if (unlikely(__pyx_t_22 >= __pyx_v_poly->states.shape[1])) __pyx_t_8 = 1;
            if (unlikely(__pyx_t_8 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_8);
              __PYX_ERR(0, 1338, __pyx_L1_error)
            }

            /* "chromo/fields.pyx":1336
 *                         # Current Configuration
 *                         if k == 0 or state_change == 0:
 *                             poly.densities_temp[k, m, l] = \             # <<<<<<<<<<<<<<
 *                                 poly.densities_temp[k, 0, l] * \
 *                                 float(poly.states[inds[i], m-1])
 */
            if (unlikely(!__pyx_v_poly->densities_temp.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1336, __pyx_L1_error)}
            __pyx_t_23 = __pyx_v_k;
            __pyx_t_24 = __pyx_v_m;
            __pyx_t_25 = __pyx_v_l;
            __pyx_t_8 = -1;
            if (__pyx_t_23 < 0) {
              __pyx_t_23 += __pyx_v_poly->densities_temp.shape[0];
              if (unlikely(__pyx_t_23 < 0)) __pyx_t_8 = 0;
            } else if (unlikely(__pyx_t_23 >= __pyx_v_poly->densities_temp.shape[0])) __pyx_t_8 = 0;
            if (__pyx_t_24 < 0) {
              __pyx_t_24 += __pyx_v_poly->densities_temp.shape[1];
              if (unlikely(__pyx_t_24 < 0)) __pyx_t_8 = 1;
            } else if (unlikely(__pyx_t_24 >= __pyx_v_poly->densities_temp.shape[1])) __pyx_t_8 = 1;
            if (__pyx_t_25 < 0) {
              __pyx_t_25 += __pyx_v_poly->densities_temp.shape[2];
              if (unlikely(__pyx_t_25 < 0)) __pyx_t_8 = 2;
            } else if (unlikely(__pyx_t_25 >= __pyx_v_poly->densities_temp.shape[2])) __pyx_t_8 = 2;
            if (unlikely(__pyx_t_8 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_8);
              __PYX_ERR(0, 1336, __pyx_L1_error)
            }
            *((double *) ( /* dim=2 */ ((char *) (((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_poly->densities_temp.data + __pyx_t_23 * __pyx_v_poly->densities_temp.strides[0]) ) + __pyx_t_24 * __pyx_v_poly->densities_temp.strides[1]) )) + __pyx_t_25)) )) = ((*((double *) ( /* dim=2 */ ((char *) (((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_poly->densities_temp.data + __pyx_t_11 * __pyx_v_poly->densities_temp.strides[0]) ) + __pyx_t_7 * __pyx_v_poly->densities_temp.strides[1]) )) + __pyx_t_9)) ))) * ((double)(*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_poly->states.data + __pyx_t_21 * __pyx_v_poly->states.strides[0]) )) + __pyx_t_22)) )))));

            /* "chromo/fields.pyx":1335
 *                     for m in range(1, poly.n_binders_p1):
 *                         # Current Configuration
 *                         if k == 0 or state_change == 0:             # <<<<<<<<<<<<<<
 *                             poly.densities_temp[k, m, l] = \
 *                                 poly.densities_temp[k, 0, l] * \
 */
            goto __pyx_L14;
          }

          /* "chromo/fields.pyx":1342
 *                         else:
 *                             poly.densities_temp[k, m, l] = \
 *                                 poly.densities_temp[k, 0, l] * \             # <<<<<<<<<<<<<<
 *                                 float(poly.states_trial[inds[i], m-1])
 * 
 */
          /*else*/ {
            if (unlikely(!__pyx_v_poly->densities_temp.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1342, __pyx_L1_error)}
            __pyx_t_10 = __pyx_v_k;
            __pyx_t_22 = 0;
            __pyx_t_21 = __pyx_v_l;
            __pyx_t_8 = -1;
            if (__pyx_t_10 < 0) {
              __pyx_t_10 += __pyx_v_poly->densities_temp.shape[0];
              if (unlikely(__pyx_t_10 < 0)) __pyx_t_8 = 0;
            } else if (unlikely(__pyx_t_10 >= __pyx_v_poly->densities_temp.shape[0])) __pyx_t_8 = 0;
            if (__pyx_t_22 < 0) {
              __pyx_t_22 += __pyx_v_poly->densities_temp.shape[1];
              if (unlikely(__pyx_t_22 < 0)) __pyx_t_8 = 1;
            } else if (unlikely(__pyx_t_22 >= __pyx_v_poly->densities_temp.shape[1])) __pyx_t_8 = 1;
            if (__pyx_t_21 < 0) {
              __pyx_t_21 += __pyx_v_poly->densities_temp.shape[2];
              if (unlikely(__pyx_t_21 < 0)) __pyx_t_8 = 2;
            } else if (unlikely(__pyx_t_21 >= __pyx_v_poly->densities_temp.shape[2])) __pyx_t_8 = 2;
            if (unlikely(__pyx_t_8 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_8);
              __PYX_ERR(0, 1342, __pyx_L1_error)
            }

            /* "chromo/fields.pyx":1343
 *                             poly.densities_temp[k, m, l] = \
 *                                 poly.densities_temp[k, 0, l] * \
 *                                 float(poly.states_trial[inds[i], m-1])             # <<<<<<<<<<<<<<
 * 
 *             # Combine repeating elements, stored in poly.density_trial
 */
            if (unlikely(!__pyx_v_poly->states_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1343, __pyx_L1_error)}
            __pyx_t_9 = __pyx_v_i;
            __pyx_t_8 = -1;
            if (__pyx_t_9 < 0) {
              __pyx_t_9 += __pyx_v_inds.shape[0];
              if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 0;
            } else if (unlikely(__pyx_t_9 >= __pyx_v_inds.shape[0])) __pyx_t_8 = 0;
            if (unlikely(__pyx_t_8 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_8);
              __PYX_ERR(0, 1343, __pyx_L1_error)
            }
            __pyx_t_7 = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_9 * __pyx_v_inds.strides[0]) )));
            __pyx_t_11 = (__pyx_v_m - 1);
            __pyx_t_8 = -1;
            if (__pyx_t_7 < 0) {
              __pyx_t_7 += __pyx_v_poly->states_trial.shape[0];
              if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
            } else if (unlikely(__pyx_t_7 >= __pyx_v_poly->states_trial.shape[0])) __pyx_t_8 = 0;
            if (__pyx_t_11 < 0) {
              __pyx_t_11 += __pyx_v_poly->states_trial.shape[1];
              if (unlikely(__pyx_t_11 < 0)) __pyx_t_8 = 1;
            } else if (unlikely(__pyx_t_11 >= __pyx_v_poly->states_trial.shape[1])) __pyx_t_8 = 1;
            if (unlikely(__pyx_t_8 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_8);
              __PYX_ERR(0, 1343, __pyx_L1_error)
            }

            /* "chromo/fields.pyx":1341
 *                         # Trial Configuration of State Change
 *                         else:
 *                             poly.densities_temp[k, m, l] = \             # <<<<<<<<<<<<<<
 *                                 poly.densities_temp[k, 0, l] * \
 *                                 float(poly.states_trial[inds[i], m-1])
 */
            if (unlikely(!__pyx_v_poly->densities_temp.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1341, __pyx_L1_error)}
            __pyx_t_25 = __pyx_v_k;
            __pyx_t_24 = __pyx_v_m;
            __pyx_t_23 = __pyx_v_l;
            __pyx_t_8 = -1;
            if (__pyx_t_25 < 0) {
              __pyx_t_25 += __pyx_v_poly->densities_temp.shape[0];
              if (unlikely(__pyx_t_25 < 0)) __pyx_t_8 = 0;
            } else if (unlikely(__pyx_t_25 >= __pyx_v_poly->densities_temp.shape[0])) __pyx_t_8 = 0;
            if (__pyx_t_24 < 0) {
              __pyx_t_24 += __pyx_v_poly->densities_temp.shape[1];
              if (unlikely(__pyx_t_24 < 0)) __pyx_t_8 = 1;
            } else if (unlikely(__pyx_t_24 >= __pyx_v_poly->densities_temp.shape[1])) __pyx_t_8 = 1;
            if (__pyx_t_23 < 0) {
              __pyx_t_23 += __pyx_v_poly->densities_temp.shape[2];
              if (unlikely(__pyx_t_23 < 0)) __pyx_t_8 = 2;
            } else if (unlikely(__pyx_t_23 >= __pyx_v_poly->densities_temp.shape[2])) __pyx_t_8 = 2;
            if (unlikely(__pyx_t_8 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_8);
              __PYX_ERR(0, 1341, __pyx_L1_error)
            }
            *((double *) ( /* dim=2 */ ((char *) (((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_poly->densities_temp.data + __pyx_t_25 * __pyx_v_poly->densities_temp.strides[0]) ) + __pyx_t_24 * __pyx_v_poly->densities_temp.strides[1]) )) + __pyx_t_23)) )) = ((*((double *) ( /* dim=2 */ ((char *) (((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_poly->densities_temp.data + __pyx_t_10 * __pyx_v_poly->densities_temp.strides[0]) ) + __pyx_t_22 * __pyx_v_poly->densities_temp.strides[1]) )) + __pyx_t_21)) ))) * ((double)(*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_poly->states_trial.data + __pyx_t_7 * __pyx_v_poly->states_trial.strides[0]) )) + __pyx_t_11)) )))));
          }
          __pyx_L14:;
        }
      }
    }

    /* "chromo/fields.pyx":1346
 * 
 *             # Combine repeating elements, stored in poly.density_trial
 *             for k in range(2):             # <<<<<<<<<<<<<<
 *                 # Subtract if current configuration
 *                 if k == 0:
 */
    for (__pyx_t_14 = 0; __pyx_t_14 < 2; __pyx_t_14+=1) {
      __pyx_v_k = __pyx_t_14;

      /* "chromo/fields.pyx":1348
 *             for k in range(2):
 *                 # Subtract if current configuration
 *                 if k == 0:             # <<<<<<<<<<<<<<
 *                     prefactor = -1.
 *                 else:
 */
      __pyx_t_15 = ((__pyx_v_k == 0) != 0);
      if (__pyx_t_15) {

        /* "chromo/fields.pyx":1349
 *                 # Subtract if current configuration
 *                 if k == 0:
 *                     prefactor = -1.             # <<<<<<<<<<<<<<
 *                 else:
 *                     prefactor = 1.
 */
        __pyx_v_prefactor = -1.;

        /* "chromo/fields.pyx":1348
 *             for k in range(2):
 *                 # Subtract if current configuration
 *                 if k == 0:             # <<<<<<<<<<<<<<
 *                     prefactor = -1.
 *                 else:
 */
        goto __pyx_L19;
      }

      /* "chromo/fields.pyx":1351
 *                     prefactor = -1.
 *                 else:
 *                     prefactor = 1.             # <<<<<<<<<<<<<<
 * 
 *                 # Accumulate densities
 */
      /*else*/ {
        __pyx_v_prefactor = 1.;
      }
      __pyx_L19:;

      /* "chromo/fields.pyx":1354
 * 
 *                 # Accumulate densities
 *                 for l in range(8):             # <<<<<<<<<<<<<<
 *                     if self.nbr_inds_with_trial[k, l] in bins_found:
 *                         for m in range(poly.n_binders_p1):
 */
      for (__pyx_t_16 = 0; __pyx_t_16 < 8; __pyx_t_16+=1) {
        __pyx_v_l = __pyx_t_16;

        /* "chromo/fields.pyx":1355
 *                 # Accumulate densities
 *                 for l in range(8):
 *                     if self.nbr_inds_with_trial[k, l] in bins_found:             # <<<<<<<<<<<<<<
 *                         for m in range(poly.n_binders_p1):
 *                             temp = prefactor * poly.densities_temp[k, m, l]
 */
        if (unlikely(!__pyx_v_self->nbr_inds_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1355, __pyx_L1_error)}
        __pyx_t_9 = __pyx_v_k;
        __pyx_t_11 = __pyx_v_l;
        __pyx_t_8 = -1;
        if (__pyx_t_9 < 0) {
          __pyx_t_9 += __pyx_v_self->nbr_inds_with_trial.shape[0];
          if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 0;
        } else if (unlikely(__pyx_t_9 >= __pyx_v_self->nbr_inds_with_trial.shape[0])) __pyx_t_8 = 0;
        if (__pyx_t_11 < 0) {
          __pyx_t_11 += __pyx_v_self->nbr_inds_with_trial.shape[1];
          if (unlikely(__pyx_t_11 < 0)) __pyx_t_8 = 1;
        } else if (unlikely(__pyx_t_11 >= __pyx_v_self->nbr_inds_with_trial.shape[1])) __pyx_t_8 = 1;
        if (unlikely(__pyx_t_8 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_8);
          __PYX_ERR(0, 1355, __pyx_L1_error)
        }
        __pyx_t_5 = __Pyx_PyInt_From_long((*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds_with_trial.data + __pyx_t_9 * __pyx_v_self->nbr_inds_with_trial.strides[0]) )) + __pyx_t_11)) )))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1355, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_15 = (__Pyx_PySet_ContainsTF(__pyx_t_5, __pyx_v_bins_found, Py_EQ)); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1355, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_20 = (__pyx_t_15 != 0);
        if (__pyx_t_20) {

          /* "chromo/fields.pyx":1356
 *                 for l in range(8):
 *                     if self.nbr_inds_with_trial[k, l] in bins_found:
 *                         for m in range(poly.n_binders_p1):             # <<<<<<<<<<<<<<
 *                             temp = prefactor * poly.densities_temp[k, m, l]
 *                             self.density_trial[
 */
          __pyx_t_17 = __pyx_v_poly->n_binders_p1;
          __pyx_t_18 = __pyx_t_17;
          for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_18; __pyx_t_19+=1) {
            __pyx_v_m = __pyx_t_19;

            /* "chromo/fields.pyx":1357
 *                     if self.nbr_inds_with_trial[k, l] in bins_found:
 *                         for m in range(poly.n_binders_p1):
 *                             temp = prefactor * poly.densities_temp[k, m, l]             # <<<<<<<<<<<<<<
 *                             self.density_trial[
 *                                 self.nbr_inds_with_trial[k, l], m
 */
            if (unlikely(!__pyx_v_poly->densities_temp.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1357, __pyx_L1_error)}
            __pyx_t_11 = __pyx_v_k;
            __pyx_t_9 = __pyx_v_m;
            __pyx_t_7 = __pyx_v_l;
            __pyx_t_8 = -1;
            if (__pyx_t_11 < 0) {
              __pyx_t_11 += __pyx_v_poly->densities_temp.shape[0];
              if (unlikely(__pyx_t_11 < 0)) __pyx_t_8 = 0;
            } else if (unlikely(__pyx_t_11 >= __pyx_v_poly->densities_temp.shape[0])) __pyx_t_8 = 0;
            if (__pyx_t_9 < 0) {
              __pyx_t_9 += __pyx_v_poly->densities_temp.shape[1];
              if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 1;
            } else if (unlikely(__pyx_t_9 >= __pyx_v_poly->densities_temp.shape[1])) __pyx_t_8 = 1;
            if (__pyx_t_7 < 0) {
              __pyx_t_7 += __pyx_v_poly->densities_temp.shape[2];
              if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 2;
            } else if (unlikely(__pyx_t_7 >= __pyx_v_poly->densities_temp.shape[2])) __pyx_t_8 = 2;
            if (unlikely(__pyx_t_8 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_8);
              __PYX_ERR(0, 1357, __pyx_L1_error)
            }
            __pyx_t_5 = PyFloat_FromDouble((__pyx_v_prefactor * (*((double *) ( /* dim=2 */ ((char *) (((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_poly->densities_temp.data + __pyx_t_11 * __pyx_v_poly->densities_temp.strides[0]) ) + __pyx_t_9 * __pyx_v_poly->densities_temp.strides[1]) )) + __pyx_t_7)) ))))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1357, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_XDECREF_SET(__pyx_v_temp, __pyx_t_5);
            __pyx_t_5 = 0;

            /* "chromo/fields.pyx":1360
 *                             self.density_trial[
 *                                 self.nbr_inds_with_trial[k, l], m
 *                             ] += temp             # <<<<<<<<<<<<<<
 *                     else:
 *                         bins_found.add(self.nbr_inds_with_trial[k, l])
 */
            __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_v_temp); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1360, __pyx_L1_error)

            /* "chromo/fields.pyx":1358
 *                         for m in range(poly.n_binders_p1):
 *                             temp = prefactor * poly.densities_temp[k, m, l]
 *                             self.density_trial[             # <<<<<<<<<<<<<<
 *                                 self.nbr_inds_with_trial[k, l], m
 *                             ] += temp
 */
            if (unlikely(!__pyx_v_self->density_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1358, __pyx_L1_error)}

            /* "chromo/fields.pyx":1359
 *                             temp = prefactor * poly.densities_temp[k, m, l]
 *                             self.density_trial[
 *                                 self.nbr_inds_with_trial[k, l], m             # <<<<<<<<<<<<<<
 *                             ] += temp
 *                     else:
 */
            if (unlikely(!__pyx_v_self->nbr_inds_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1359, __pyx_L1_error)}
            __pyx_t_7 = __pyx_v_k;
            __pyx_t_9 = __pyx_v_l;
            __pyx_t_8 = -1;
            if (__pyx_t_7 < 0) {
              __pyx_t_7 += __pyx_v_self->nbr_inds_with_trial.shape[0];
              if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
            } else if (unlikely(__pyx_t_7 >= __pyx_v_self->nbr_inds_with_trial.shape[0])) __pyx_t_8 = 0;
            if (__pyx_t_9 < 0) {
              __pyx_t_9 += __pyx_v_self->nbr_inds_with_trial.shape[1];
              if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 1;
            } else if (unlikely(__pyx_t_9 >= __pyx_v_self->nbr_inds_with_trial.shape[1])) __pyx_t_8 = 1;
            if (unlikely(__pyx_t_8 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_8);
              __PYX_ERR(0, 1359, __pyx_L1_error)
            }
            __pyx_t_11 = (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds_with_trial.data + __pyx_t_7 * __pyx_v_self->nbr_inds_with_trial.strides[0]) )) + __pyx_t_9)) )));
            __pyx_t_21 = __pyx_v_m;
            __pyx_t_8 = -1;
            if (__pyx_t_11 < 0) {
              __pyx_t_11 += __pyx_v_self->density_trial.shape[0];
              if (unlikely(__pyx_t_11 < 0)) __pyx_t_8 = 0;
            } else if (unlikely(__pyx_t_11 >= __pyx_v_self->density_trial.shape[0])) __pyx_t_8 = 0;
            if (__pyx_t_21 < 0) {
              __pyx_t_21 += __pyx_v_self->density_trial.shape[1];
              if (unlikely(__pyx_t_21 < 0)) __pyx_t_8 = 1;
            } else if (unlikely(__pyx_t_21 >= __pyx_v_self->density_trial.shape[1])) __pyx_t_8 = 1;
            if (unlikely(__pyx_t_8 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_8);
              __PYX_ERR(0, 1358, __pyx_L1_error)
            }
            *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density_trial.data + __pyx_t_11 * __pyx_v_self->density_trial.strides[0]) )) + __pyx_t_21)) )) += __pyx_t_12;
          }

          /* "chromo/fields.pyx":1355
 *                 # Accumulate densities
 *                 for l in range(8):
 *                     if self.nbr_inds_with_trial[k, l] in bins_found:             # <<<<<<<<<<<<<<
 *                         for m in range(poly.n_binders_p1):
 *                             temp = prefactor * poly.densities_temp[k, m, l]
 */
          goto __pyx_L22;
        }

        /* "chromo/fields.pyx":1362
 *                             ] += temp
 *                     else:
 *                         bins_found.add(self.nbr_inds_with_trial[k, l])             # <<<<<<<<<<<<<<
 *                         for m in range(poly.n_binders_p1):
 *                             temp = prefactor * poly.densities_temp[k, m, l]
 */
        /*else*/ {
          if (unlikely(!__pyx_v_self->nbr_inds_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1362, __pyx_L1_error)}
          __pyx_t_9 = __pyx_v_k;
          __pyx_t_7 = __pyx_v_l;
          __pyx_t_8 = -1;
          if (__pyx_t_9 < 0) {
            __pyx_t_9 += __pyx_v_self->nbr_inds_with_trial.shape[0];
            if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 0;
          } else if (unlikely(__pyx_t_9 >= __pyx_v_self->nbr_inds_with_trial.shape[0])) __pyx_t_8 = 0;
          if (__pyx_t_7 < 0) {
            __pyx_t_7 += __pyx_v_self->nbr_inds_with_trial.shape[1];
            if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 1;
          } else if (unlikely(__pyx_t_7 >= __pyx_v_self->nbr_inds_with_trial.shape[1])) __pyx_t_8 = 1;
          if (unlikely(__pyx_t_8 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_8);
            __PYX_ERR(0, 1362, __pyx_L1_error)
          }
          __pyx_t_5 = __Pyx_PyInt_From_long((*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds_with_trial.data + __pyx_t_9 * __pyx_v_self->nbr_inds_with_trial.strides[0]) )) + __pyx_t_7)) )))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1362, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_26 = PySet_Add(__pyx_v_bins_found, __pyx_t_5); if (unlikely(__pyx_t_26 == ((int)-1))) __PYX_ERR(0, 1362, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "chromo/fields.pyx":1363
 *                     else:
 *                         bins_found.add(self.nbr_inds_with_trial[k, l])
 *                         for m in range(poly.n_binders_p1):             # <<<<<<<<<<<<<<
 *                             temp = prefactor * poly.densities_temp[k, m, l]
 *                             self.density_trial[
 */
          __pyx_t_17 = __pyx_v_poly->n_binders_p1;
          __pyx_t_18 = __pyx_t_17;
          for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_18; __pyx_t_19+=1) {
            __pyx_v_m = __pyx_t_19;

            /* "chromo/fields.pyx":1364
 *                         bins_found.add(self.nbr_inds_with_trial[k, l])
 *                         for m in range(poly.n_binders_p1):
 *                             temp = prefactor * poly.densities_temp[k, m, l]             # <<<<<<<<<<<<<<
 *                             self.density_trial[
 *                                 self.nbr_inds_with_trial[k, l], m
 */
            if (unlikely(!__pyx_v_poly->densities_temp.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1364, __pyx_L1_error)}
            __pyx_t_7 = __pyx_v_k;
            __pyx_t_9 = __pyx_v_m;
            __pyx_t_21 = __pyx_v_l;
            __pyx_t_8 = -1;
            if (__pyx_t_7 < 0) {
              __pyx_t_7 += __pyx_v_poly->densities_temp.shape[0];
              if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
            } else if (unlikely(__pyx_t_7 >= __pyx_v_poly->densities_temp.shape[0])) __pyx_t_8 = 0;
            if (__pyx_t_9 < 0) {
              __pyx_t_9 += __pyx_v_poly->densities_temp.shape[1];
              if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 1;
            } else if (unlikely(__pyx_t_9 >= __pyx_v_poly->densities_temp.shape[1])) __pyx_t_8 = 1;
            if (__pyx_t_21 < 0) {
              __pyx_t_21 += __pyx_v_poly->densities_temp.shape[2];
              if (unlikely(__pyx_t_21 < 0)) __pyx_t_8 = 2;
            } else if (unlikely(__pyx_t_21 >= __pyx_v_poly->densities_temp.shape[2])) __pyx_t_8 = 2;
            if (unlikely(__pyx_t_8 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_8);
              __PYX_ERR(0, 1364, __pyx_L1_error)
            }
            __pyx_t_5 = PyFloat_FromDouble((__pyx_v_prefactor * (*((double *) ( /* dim=2 */ ((char *) (((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_poly->densities_temp.data + __pyx_t_7 * __pyx_v_poly->densities_temp.strides[0]) ) + __pyx_t_9 * __pyx_v_poly->densities_temp.strides[1]) )) + __pyx_t_21)) ))))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1364, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_XDECREF_SET(__pyx_v_temp, __pyx_t_5);
            __pyx_t_5 = 0;

            /* "chromo/fields.pyx":1367
 *                             self.density_trial[
 *                                 self.nbr_inds_with_trial[k, l], m
 *                             ] = temp             # <<<<<<<<<<<<<<
 *         return np.array(list(bins_found))
 * 
 */
            __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_v_temp); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1367, __pyx_L1_error)

            /* "chromo/fields.pyx":1365
 *                         for m in range(poly.n_binders_p1):
 *                             temp = prefactor * poly.densities_temp[k, m, l]
 *                             self.density_trial[             # <<<<<<<<<<<<<<
 *                                 self.nbr_inds_with_trial[k, l], m
 *                             ] = temp
 */
            if (unlikely(!__pyx_v_self->density_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1365, __pyx_L1_error)}

            /* "chromo/fields.pyx":1366
 *                             temp = prefactor * poly.densities_temp[k, m, l]
 *                             self.density_trial[
 *                                 self.nbr_inds_with_trial[k, l], m             # <<<<<<<<<<<<<<
 *                             ] = temp
 *         return np.array(list(bins_found))
 */
            if (unlikely(!__pyx_v_self->nbr_inds_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1366, __pyx_L1_error)}
            __pyx_t_21 = __pyx_v_k;
            __pyx_t_9 = __pyx_v_l;
            __pyx_t_8 = -1;
            if (__pyx_t_21 < 0) {
              __pyx_t_21 += __pyx_v_self->nbr_inds_with_trial.shape[0];
              if (unlikely(__pyx_t_21 < 0)) __pyx_t_8 = 0;
            } else if (unlikely(__pyx_t_21 >= __pyx_v_self->nbr_inds_with_trial.shape[0])) __pyx_t_8 = 0;
            if (__pyx_t_9 < 0) {
              __pyx_t_9 += __pyx_v_self->nbr_inds_with_trial.shape[1];
              if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 1;
            } else if (unlikely(__pyx_t_9 >= __pyx_v_self->nbr_inds_with_trial.shape[1])) __pyx_t_8 = 1;
            if (unlikely(__pyx_t_8 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_8);
              __PYX_ERR(0, 1366, __pyx_L1_error)
            }
            __pyx_t_7 = (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds_with_trial.data + __pyx_t_21 * __pyx_v_self->nbr_inds_with_trial.strides[0]) )) + __pyx_t_9)) )));
            __pyx_t_11 = __pyx_v_m;
            __pyx_t_8 = -1;
            if (__pyx_t_7 < 0) {
              __pyx_t_7 += __pyx_v_self->density_trial.shape[0];
              if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
            } else if (unlikely(__pyx_t_7 >= __pyx_v_self->density_trial.shape[0])) __pyx_t_8 = 0;
            if (__pyx_t_11 < 0) {
              __pyx_t_11 += __pyx_v_self->density_trial.shape[1];
              if (unlikely(__pyx_t_11 < 0)) __pyx_t_8 = 1;
            } else if (unlikely(__pyx_t_11 >= __pyx_v_self->density_trial.shape[1])) __pyx_t_8 = 1;
            if (unlikely(__pyx_t_8 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_8);
              __PYX_ERR(0, 1365, __pyx_L1_error)
            }
            *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density_trial.data + __pyx_t_7 * __pyx_v_self->density_trial.strides[0]) )) + __pyx_t_11)) )) = __pyx_t_12;
          }
        }
        __pyx_L22:;
      }
    }
  }

  /* "chromo/fields.pyx":1368
 *                                 self.nbr_inds_with_trial[k, l], m
 *                             ] = temp
 *         return np.array(list(bins_found))             # <<<<<<<<<<<<<<
 * 
 *     cdef long[:] get_change_in_density(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PySequence_List(__pyx_v_bins_found); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_13 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_13)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_13);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_5 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_13, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_27 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_t_5, PyBUF_WRITABLE); if (unlikely(!__pyx_t_27.memview)) __PYX_ERR(0, 1368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_27;
  __pyx_t_27.memview = NULL;
  __pyx_t_27.data = NULL;
  goto __pyx_L0;

  /* "chromo/fields.pyx":1235
 *         return dE
 * 
 *     cdef long[:] get_change_in_density_quickly(             # <<<<<<<<<<<<<<
 *         self, poly.PolymerBase poly, long[:] inds, long n_inds,
 *         bint state_change
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_13);
  __PYX_XDEC_MEMVIEW(&__pyx_t_27, 1);
  __pyx_r.data = NULL;
  __pyx_r.memview = NULL;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.get_change_in_density_quickly", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  if (unlikely(!__pyx_r.memview)) {
    PyErr_SetString(PyExc_TypeError, "Memoryview return value is not initialized");
  }
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_bins_found);
  __Pyx_XDECREF(__pyx_v_temp);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":1370
 *         return np.array(list(bins_found))
 * 
 *     cdef long[:] get_change_in_density(             # <<<<<<<<<<<<<<
 *         self, poly.PolymerBase poly, long[:] inds, long n_inds,
 *         bint state_change
 */

static __Pyx_memviewslice __pyx_f_6chromo_6fields_19UniformDensityField_get_change_in_density(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, __Pyx_memviewslice __pyx_v_inds, long __pyx_v_n_inds, int __pyx_v_state_change) {
  long __pyx_v_i;
  long __pyx_v_j;
  long __pyx_v_k;
  long __pyx_v_l;
  long __pyx_v_m;
  long __pyx_v_ind;
  double __pyx_v_prefactor;
  PyObject *__pyx_v_bins_found = 0;
  PyObject *__pyx_v_temp = NULL;
  __Pyx_memviewslice __pyx_r = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  long __pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  long __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  double __pyx_t_11;
  double __pyx_t_12;
  int __pyx_t_13;
  long __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  long __pyx_t_17;
  long __pyx_t_18;
  long __pyx_t_19;
  int __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  int __pyx_t_26;
  PyObject *__pyx_t_27 = NULL;
  __Pyx_memviewslice __pyx_t_28 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_change_in_density", 0);
  __Pyx_TraceCall("get_change_in_density", __pyx_f[0], 1370, 0, __PYX_ERR(0, 1370, __pyx_L1_error));

  /* "chromo/fields.pyx":1428
 * 
 *         cdef set bins_found
 *         bins_found = set()             # <<<<<<<<<<<<<<
 * 
 *         for i in range(n_inds):
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bins_found = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "chromo/fields.pyx":1430
 *         bins_found = set()
 * 
 *         for i in range(n_inds):             # <<<<<<<<<<<<<<
 *             # Shift positions so all positive, apply periodic boundaries
 *             # Get the lower neighboring bin index
 */
  __pyx_t_2 = __pyx_v_n_inds;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "chromo/fields.pyx":1434
 *             # Get the lower neighboring bin index
 * 
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 # Load current and trial configuration of the polymer (current
 *                 # in row 0; trial in row 1)
 */
    for (__pyx_t_5 = 0; __pyx_t_5 < 3; __pyx_t_5+=1) {
      __pyx_v_j = __pyx_t_5;

      /* "chromo/fields.pyx":1438
 *                 # in row 0; trial in row 1)
 *                 self.xyz_with_trial[0, j] = (
 *                     (poly.r[inds[i], j] + self.half_width_xyz[j]) %             # <<<<<<<<<<<<<<
 *                     self.width_xyz[j]
 *                 ) - self.half_step_xyz[j]
 */
      if (unlikely(!__pyx_v_poly->r.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1438, __pyx_L1_error)}
      __pyx_t_6 = __pyx_v_i;
      __pyx_t_7 = -1;
      if (__pyx_t_6 < 0) {
        __pyx_t_6 += __pyx_v_inds.shape[0];
        if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_6 >= __pyx_v_inds.shape[0])) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 1438, __pyx_L1_error)
      }
      __pyx_t_8 = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_6 * __pyx_v_inds.strides[0]) )));
      __pyx_t_9 = __pyx_v_j;
      __pyx_t_7 = -1;
      if (__pyx_t_8 < 0) {
        __pyx_t_8 += __pyx_v_poly->r.shape[0];
        if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_8 >= __pyx_v_poly->r.shape[0])) __pyx_t_7 = 0;
      if (__pyx_t_9 < 0) {
        __pyx_t_9 += __pyx_v_poly->r.shape[1];
        if (unlikely(__pyx_t_9 < 0)) __pyx_t_7 = 1;
      } else if (unlikely(__pyx_t_9 >= __pyx_v_poly->r.shape[1])) __pyx_t_7 = 1;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 1438, __pyx_L1_error)
      }
      if (unlikely(!__pyx_v_self->half_width_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1438, __pyx_L1_error)}
      __pyx_t_10 = __pyx_v_j;
      __pyx_t_7 = -1;
      if (__pyx_t_10 < 0) {
        __pyx_t_10 += __pyx_v_self->half_width_xyz.shape[0];
        if (unlikely(__pyx_t_10 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_10 >= __pyx_v_self->half_width_xyz.shape[0])) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 1438, __pyx_L1_error)
      }
      __pyx_t_11 = ((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_poly->r.data + __pyx_t_8 * __pyx_v_poly->r.strides[0]) )) + __pyx_t_9)) ))) + (*((double *) ( /* dim=0 */ (__pyx_v_self->half_width_xyz.data + __pyx_t_10 * __pyx_v_self->half_width_xyz.strides[0]) ))));

      /* "chromo/fields.pyx":1439
 *                 self.xyz_with_trial[0, j] = (
 *                     (poly.r[inds[i], j] + self.half_width_xyz[j]) %
 *                     self.width_xyz[j]             # <<<<<<<<<<<<<<
 *                 ) - self.half_step_xyz[j]
 *                 if state_change == 0:
 */
      if (unlikely(!__pyx_v_self->width_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1439, __pyx_L1_error)}
      __pyx_t_10 = __pyx_v_j;
      __pyx_t_7 = -1;
      if (__pyx_t_10 < 0) {
        __pyx_t_10 += __pyx_v_self->width_xyz.shape[0];
        if (unlikely(__pyx_t_10 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_10 >= __pyx_v_self->width_xyz.shape[0])) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 1439, __pyx_L1_error)
      }
      __pyx_t_12 = (*((double *) ( /* dim=0 */ (__pyx_v_self->width_xyz.data + __pyx_t_10 * __pyx_v_self->width_xyz.strides[0]) )));

      /* "chromo/fields.pyx":1438
 *                 # in row 0; trial in row 1)
 *                 self.xyz_with_trial[0, j] = (
 *                     (poly.r[inds[i], j] + self.half_width_xyz[j]) %             # <<<<<<<<<<<<<<
 *                     self.width_xyz[j]
 *                 ) - self.half_step_xyz[j]
 */
      if (unlikely(__pyx_t_12 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float divmod()");
        __PYX_ERR(0, 1438, __pyx_L1_error)
      }

      /* "chromo/fields.pyx":1440
 *                     (poly.r[inds[i], j] + self.half_width_xyz[j]) %
 *                     self.width_xyz[j]
 *                 ) - self.half_step_xyz[j]             # <<<<<<<<<<<<<<
 *                 if state_change == 0:
 *                     self.xyz_with_trial[1, j] = (
 */
      if (unlikely(!__pyx_v_self->half_step_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1440, __pyx_L1_error)}
      __pyx_t_10 = __pyx_v_j;
      __pyx_t_7 = -1;
      if (__pyx_t_10 < 0) {
        __pyx_t_10 += __pyx_v_self->half_step_xyz.shape[0];
        if (unlikely(__pyx_t_10 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_10 >= __pyx_v_self->half_step_xyz.shape[0])) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 1440, __pyx_L1_error)
      }

      /* "chromo/fields.pyx":1437
 *                 # Load current and trial configuration of the polymer (current
 *                 # in row 0; trial in row 1)
 *                 self.xyz_with_trial[0, j] = (             # <<<<<<<<<<<<<<
 *                     (poly.r[inds[i], j] + self.half_width_xyz[j]) %
 *                     self.width_xyz[j]
 */
      if (unlikely(!__pyx_v_self->xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1437, __pyx_L1_error)}
      __pyx_t_6 = 0;
      __pyx_t_9 = __pyx_v_j;
      __pyx_t_7 = -1;
      if (__pyx_t_6 < 0) {
        __pyx_t_6 += __pyx_v_self->xyz_with_trial.shape[0];
        if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_6 >= __pyx_v_self->xyz_with_trial.shape[0])) __pyx_t_7 = 0;
      if (__pyx_t_9 < 0) {
        __pyx_t_9 += __pyx_v_self->xyz_with_trial.shape[1];
        if (unlikely(__pyx_t_9 < 0)) __pyx_t_7 = 1;
      } else if (unlikely(__pyx_t_9 >= __pyx_v_self->xyz_with_trial.shape[1])) __pyx_t_7 = 1;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 1437, __pyx_L1_error)
      }
      *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->xyz_with_trial.data + __pyx_t_6 * __pyx_v_self->xyz_with_trial.strides[0]) )) + __pyx_t_9)) )) = (__Pyx_mod_double(__pyx_t_11, __pyx_t_12) - (*((double *) ( /* dim=0 */ (__pyx_v_self->half_step_xyz.data + __pyx_t_10 * __pyx_v_self->half_step_xyz.strides[0]) ))));

      /* "chromo/fields.pyx":1441
 *                     self.width_xyz[j]
 *                 ) - self.half_step_xyz[j]
 *                 if state_change == 0:             # <<<<<<<<<<<<<<
 *                     self.xyz_with_trial[1, j] = (
 *                         (poly.r_trial[inds[i], j] + self.half_width_xyz[j]) %
 */
      __pyx_t_13 = ((__pyx_v_state_change == 0) != 0);
      if (__pyx_t_13) {

        /* "chromo/fields.pyx":1443
 *                 if state_change == 0:
 *                     self.xyz_with_trial[1, j] = (
 *                         (poly.r_trial[inds[i], j] + self.half_width_xyz[j]) %             # <<<<<<<<<<<<<<
 *                         self.width_xyz[j]
 *                     ) - self.half_step_xyz[j]
 */
        if (unlikely(!__pyx_v_poly->r_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1443, __pyx_L1_error)}
        __pyx_t_10 = __pyx_v_i;
        __pyx_t_7 = -1;
        if (__pyx_t_10 < 0) {
          __pyx_t_10 += __pyx_v_inds.shape[0];
          if (unlikely(__pyx_t_10 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_10 >= __pyx_v_inds.shape[0])) __pyx_t_7 = 0;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 1443, __pyx_L1_error)
        }
        __pyx_t_9 = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_10 * __pyx_v_inds.strides[0]) )));
        __pyx_t_6 = __pyx_v_j;
        __pyx_t_7 = -1;
        if (__pyx_t_9 < 0) {
          __pyx_t_9 += __pyx_v_poly->r_trial.shape[0];
          if (unlikely(__pyx_t_9 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_9 >= __pyx_v_poly->r_trial.shape[0])) __pyx_t_7 = 0;
        if (__pyx_t_6 < 0) {
          __pyx_t_6 += __pyx_v_poly->r_trial.shape[1];
          if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 1;
        } else if (unlikely(__pyx_t_6 >= __pyx_v_poly->r_trial.shape[1])) __pyx_t_7 = 1;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 1443, __pyx_L1_error)
        }
        if (unlikely(!__pyx_v_self->half_width_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1443, __pyx_L1_error)}
        __pyx_t_8 = __pyx_v_j;
        __pyx_t_7 = -1;
        if (__pyx_t_8 < 0) {
          __pyx_t_8 += __pyx_v_self->half_width_xyz.shape[0];
          if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_8 >= __pyx_v_self->half_width_xyz.shape[0])) __pyx_t_7 = 0;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 1443, __pyx_L1_error)
        }
        __pyx_t_12 = ((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_poly->r_trial.data + __pyx_t_9 * __pyx_v_poly->r_trial.strides[0]) )) + __pyx_t_6)) ))) + (*((double *) ( /* dim=0 */ (__pyx_v_self->half_width_xyz.data + __pyx_t_8 * __pyx_v_self->half_width_xyz.strides[0]) ))));

        /* "chromo/fields.pyx":1444
 *                     self.xyz_with_trial[1, j] = (
 *                         (poly.r_trial[inds[i], j] + self.half_width_xyz[j]) %
 *                         self.width_xyz[j]             # <<<<<<<<<<<<<<
 *                     ) - self.half_step_xyz[j]
 *                 else:
 */
        if (unlikely(!__pyx_v_self->width_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1444, __pyx_L1_error)}
        __pyx_t_8 = __pyx_v_j;
        __pyx_t_7 = -1;
        if (__pyx_t_8 < 0) {
          __pyx_t_8 += __pyx_v_self->width_xyz.shape[0];
          if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_8 >= __pyx_v_self->width_xyz.shape[0])) __pyx_t_7 = 0;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 1444, __pyx_L1_error)
        }
        __pyx_t_11 = (*((double *) ( /* dim=0 */ (__pyx_v_self->width_xyz.data + __pyx_t_8 * __pyx_v_self->width_xyz.strides[0]) )));

        /* "chromo/fields.pyx":1443
 *                 if state_change == 0:
 *                     self.xyz_with_trial[1, j] = (
 *                         (poly.r_trial[inds[i], j] + self.half_width_xyz[j]) %             # <<<<<<<<<<<<<<
 *                         self.width_xyz[j]
 *                     ) - self.half_step_xyz[j]
 */
        if (unlikely(__pyx_t_11 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float divmod()");
          __PYX_ERR(0, 1443, __pyx_L1_error)
        }

        /* "chromo/fields.pyx":1445
 *                         (poly.r_trial[inds[i], j] + self.half_width_xyz[j]) %
 *                         self.width_xyz[j]
 *                     ) - self.half_step_xyz[j]             # <<<<<<<<<<<<<<
 *                 else:
 *                     self.xyz_with_trial[1, j] = self.xyz_with_trial[0, j]
 */
        if (unlikely(!__pyx_v_self->half_step_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1445, __pyx_L1_error)}
        __pyx_t_8 = __pyx_v_j;
        __pyx_t_7 = -1;
        if (__pyx_t_8 < 0) {
          __pyx_t_8 += __pyx_v_self->half_step_xyz.shape[0];
          if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_8 >= __pyx_v_self->half_step_xyz.shape[0])) __pyx_t_7 = 0;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 1445, __pyx_L1_error)
        }

        /* "chromo/fields.pyx":1442
 *                 ) - self.half_step_xyz[j]
 *                 if state_change == 0:
 *                     self.xyz_with_trial[1, j] = (             # <<<<<<<<<<<<<<
 *                         (poly.r_trial[inds[i], j] + self.half_width_xyz[j]) %
 *                         self.width_xyz[j]
 */
        if (unlikely(!__pyx_v_self->xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1442, __pyx_L1_error)}
        __pyx_t_10 = 1;
        __pyx_t_6 = __pyx_v_j;
        __pyx_t_7 = -1;
        if (__pyx_t_10 < 0) {
          __pyx_t_10 += __pyx_v_self->xyz_with_trial.shape[0];
          if (unlikely(__pyx_t_10 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_10 >= __pyx_v_self->xyz_with_trial.shape[0])) __pyx_t_7 = 0;
        if (__pyx_t_6 < 0) {
          __pyx_t_6 += __pyx_v_self->xyz_with_trial.shape[1];
          if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 1;
        } else if (unlikely(__pyx_t_6 >= __pyx_v_self->xyz_with_trial.shape[1])) __pyx_t_7 = 1;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 1442, __pyx_L1_error)
        }
        *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->xyz_with_trial.data + __pyx_t_10 * __pyx_v_self->xyz_with_trial.strides[0]) )) + __pyx_t_6)) )) = (__Pyx_mod_double(__pyx_t_12, __pyx_t_11) - (*((double *) ( /* dim=0 */ (__pyx_v_self->half_step_xyz.data + __pyx_t_8 * __pyx_v_self->half_step_xyz.strides[0]) ))));

        /* "chromo/fields.pyx":1441
 *                     self.width_xyz[j]
 *                 ) - self.half_step_xyz[j]
 *                 if state_change == 0:             # <<<<<<<<<<<<<<
 *                     self.xyz_with_trial[1, j] = (
 *                         (poly.r_trial[inds[i], j] + self.half_width_xyz[j]) %
 */
        goto __pyx_L7;
      }

      /* "chromo/fields.pyx":1447
 *                     ) - self.half_step_xyz[j]
 *                 else:
 *                     self.xyz_with_trial[1, j] = self.xyz_with_trial[0, j]             # <<<<<<<<<<<<<<
 * 
 *                 # Get the lower neighboring bin index
 */
      /*else*/ {
        if (unlikely(!__pyx_v_self->xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1447, __pyx_L1_error)}
        __pyx_t_8 = 0;
        __pyx_t_6 = __pyx_v_j;
        __pyx_t_7 = -1;
        if (__pyx_t_8 < 0) {
          __pyx_t_8 += __pyx_v_self->xyz_with_trial.shape[0];
          if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_8 >= __pyx_v_self->xyz_with_trial.shape[0])) __pyx_t_7 = 0;
        if (__pyx_t_6 < 0) {
          __pyx_t_6 += __pyx_v_self->xyz_with_trial.shape[1];
          if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 1;
        } else if (unlikely(__pyx_t_6 >= __pyx_v_self->xyz_with_trial.shape[1])) __pyx_t_7 = 1;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 1447, __pyx_L1_error)
        }
        if (unlikely(!__pyx_v_self->xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1447, __pyx_L1_error)}
        __pyx_t_10 = 1;
        __pyx_t_9 = __pyx_v_j;
        __pyx_t_7 = -1;
        if (__pyx_t_10 < 0) {
          __pyx_t_10 += __pyx_v_self->xyz_with_trial.shape[0];
          if (unlikely(__pyx_t_10 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_10 >= __pyx_v_self->xyz_with_trial.shape[0])) __pyx_t_7 = 0;
        if (__pyx_t_9 < 0) {
          __pyx_t_9 += __pyx_v_self->xyz_with_trial.shape[1];
          if (unlikely(__pyx_t_9 < 0)) __pyx_t_7 = 1;
        } else if (unlikely(__pyx_t_9 >= __pyx_v_self->xyz_with_trial.shape[1])) __pyx_t_7 = 1;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 1447, __pyx_L1_error)
        }
        *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->xyz_with_trial.data + __pyx_t_10 * __pyx_v_self->xyz_with_trial.strides[0]) )) + __pyx_t_9)) )) = (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->xyz_with_trial.data + __pyx_t_8 * __pyx_v_self->xyz_with_trial.strides[0]) )) + __pyx_t_6)) )));
      }
      __pyx_L7:;

      /* "chromo/fields.pyx":1450
 * 
 *                 # Get the lower neighboring bin index
 *                 for k in range(2):             # <<<<<<<<<<<<<<
 *                     ind = <long>floor(
 *                         (self.xyz_with_trial[k, j]) / self.dxyz[j]
 */
      for (__pyx_t_14 = 0; __pyx_t_14 < 2; __pyx_t_14+=1) {
        __pyx_v_k = __pyx_t_14;

        /* "chromo/fields.pyx":1452
 *                 for k in range(2):
 *                     ind = <long>floor(
 *                         (self.xyz_with_trial[k, j]) / self.dxyz[j]             # <<<<<<<<<<<<<<
 *                     )
 *                     if ind == -1:
 */
        if (unlikely(!__pyx_v_self->xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1452, __pyx_L1_error)}
        __pyx_t_6 = __pyx_v_k;
        __pyx_t_8 = __pyx_v_j;
        __pyx_t_7 = -1;
        if (__pyx_t_6 < 0) {
          __pyx_t_6 += __pyx_v_self->xyz_with_trial.shape[0];
          if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_6 >= __pyx_v_self->xyz_with_trial.shape[0])) __pyx_t_7 = 0;
        if (__pyx_t_8 < 0) {
          __pyx_t_8 += __pyx_v_self->xyz_with_trial.shape[1];
          if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 1;
        } else if (unlikely(__pyx_t_8 >= __pyx_v_self->xyz_with_trial.shape[1])) __pyx_t_7 = 1;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 1452, __pyx_L1_error)
        }
        __pyx_t_11 = (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->xyz_with_trial.data + __pyx_t_6 * __pyx_v_self->xyz_with_trial.strides[0]) )) + __pyx_t_8)) )));
        if (unlikely(!__pyx_v_self->dxyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1452, __pyx_L1_error)}
        __pyx_t_8 = __pyx_v_j;
        __pyx_t_7 = -1;
        if (__pyx_t_8 < 0) {
          __pyx_t_8 += __pyx_v_self->dxyz.shape[0];
          if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_8 >= __pyx_v_self->dxyz.shape[0])) __pyx_t_7 = 0;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 1452, __pyx_L1_error)
        }
        __pyx_t_12 = (*((double *) ( /* dim=0 */ (__pyx_v_self->dxyz.data + __pyx_t_8 * __pyx_v_self->dxyz.strides[0]) )));
        if (unlikely(__pyx_t_12 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 1452, __pyx_L1_error)
        }

        /* "chromo/fields.pyx":1451
 *                 # Get the lower neighboring bin index
 *                 for k in range(2):
 *                     ind = <long>floor(             # <<<<<<<<<<<<<<
 *                         (self.xyz_with_trial[k, j]) / self.dxyz[j]
 *                     )
 */
        __pyx_v_ind = ((long)floor((__pyx_t_11 / __pyx_t_12)));

        /* "chromo/fields.pyx":1454
 *                         (self.xyz_with_trial[k, j]) / self.dxyz[j]
 *                     )
 *                     if ind == -1:             # <<<<<<<<<<<<<<
 *                         self.index_xyz_with_trial[k, j] = self.n_xyz_m1[j]
 *                     else:
 */
        __pyx_t_13 = ((__pyx_v_ind == -1L) != 0);
        if (__pyx_t_13) {

          /* "chromo/fields.pyx":1455
 *                     )
 *                     if ind == -1:
 *                         self.index_xyz_with_trial[k, j] = self.n_xyz_m1[j]             # <<<<<<<<<<<<<<
 *                     else:
 *                         self.index_xyz_with_trial[k, j] = ind
 */
          if (unlikely(!__pyx_v_self->n_xyz_m1.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1455, __pyx_L1_error)}
          __pyx_t_8 = __pyx_v_j;
          __pyx_t_7 = -1;
          if (__pyx_t_8 < 0) {
            __pyx_t_8 += __pyx_v_self->n_xyz_m1.shape[0];
            if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 0;
          } else if (unlikely(__pyx_t_8 >= __pyx_v_self->n_xyz_m1.shape[0])) __pyx_t_7 = 0;
          if (unlikely(__pyx_t_7 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_7);
            __PYX_ERR(0, 1455, __pyx_L1_error)
          }
          if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1455, __pyx_L1_error)}
          __pyx_t_6 = __pyx_v_k;
          __pyx_t_9 = __pyx_v_j;
          __pyx_t_7 = -1;
          if (__pyx_t_6 < 0) {
            __pyx_t_6 += __pyx_v_self->index_xyz_with_trial.shape[0];
            if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
          } else if (unlikely(__pyx_t_6 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_7 = 0;
          if (__pyx_t_9 < 0) {
            __pyx_t_9 += __pyx_v_self->index_xyz_with_trial.shape[1];
            if (unlikely(__pyx_t_9 < 0)) __pyx_t_7 = 1;
          } else if (unlikely(__pyx_t_9 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_7 = 1;
          if (unlikely(__pyx_t_7 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_7);
            __PYX_ERR(0, 1455, __pyx_L1_error)
          }
          *((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_6 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_9)) )) = (*((long *) ( /* dim=0 */ (__pyx_v_self->n_xyz_m1.data + __pyx_t_8 * __pyx_v_self->n_xyz_m1.strides[0]) )));

          /* "chromo/fields.pyx":1454
 *                         (self.xyz_with_trial[k, j]) / self.dxyz[j]
 *                     )
 *                     if ind == -1:             # <<<<<<<<<<<<<<
 *                         self.index_xyz_with_trial[k, j] = self.n_xyz_m1[j]
 *                     else:
 */
          goto __pyx_L10;
        }

        /* "chromo/fields.pyx":1457
 *                         self.index_xyz_with_trial[k, j] = self.n_xyz_m1[j]
 *                     else:
 *                         self.index_xyz_with_trial[k, j] = ind             # <<<<<<<<<<<<<<
 * 
 *                     # Get weight in the lower bin index
 */
        /*else*/ {
          if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1457, __pyx_L1_error)}
          __pyx_t_8 = __pyx_v_k;
          __pyx_t_9 = __pyx_v_j;
          __pyx_t_7 = -1;
          if (__pyx_t_8 < 0) {
            __pyx_t_8 += __pyx_v_self->index_xyz_with_trial.shape[0];
            if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 0;
          } else if (unlikely(__pyx_t_8 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_7 = 0;
          if (__pyx_t_9 < 0) {
            __pyx_t_9 += __pyx_v_self->index_xyz_with_trial.shape[1];
            if (unlikely(__pyx_t_9 < 0)) __pyx_t_7 = 1;
          } else if (unlikely(__pyx_t_9 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_7 = 1;
          if (unlikely(__pyx_t_7 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_7);
            __PYX_ERR(0, 1457, __pyx_L1_error)
          }
          *((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_8 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_9)) )) = __pyx_v_ind;
        }
        __pyx_L10:;

        /* "chromo/fields.pyx":1461
 *                     # Get weight in the lower bin index
 *                     self.weight_xyz_with_trial[k, j] = (
 *                         1 - (self.xyz_with_trial[k, j] / self.dxyz[j] - ind)             # <<<<<<<<<<<<<<
 *                     )
 * 
 */
        if (unlikely(!__pyx_v_self->xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1461, __pyx_L1_error)}
        __pyx_t_9 = __pyx_v_k;
        __pyx_t_8 = __pyx_v_j;
        __pyx_t_7 = -1;
        if (__pyx_t_9 < 0) {
          __pyx_t_9 += __pyx_v_self->xyz_with_trial.shape[0];
          if (unlikely(__pyx_t_9 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_9 >= __pyx_v_self->xyz_with_trial.shape[0])) __pyx_t_7 = 0;
        if (__pyx_t_8 < 0) {
          __pyx_t_8 += __pyx_v_self->xyz_with_trial.shape[1];
          if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 1;
        } else if (unlikely(__pyx_t_8 >= __pyx_v_self->xyz_with_trial.shape[1])) __pyx_t_7 = 1;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 1461, __pyx_L1_error)
        }
        __pyx_t_12 = (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->xyz_with_trial.data + __pyx_t_9 * __pyx_v_self->xyz_with_trial.strides[0]) )) + __pyx_t_8)) )));
        if (unlikely(!__pyx_v_self->dxyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1461, __pyx_L1_error)}
        __pyx_t_8 = __pyx_v_j;
        __pyx_t_7 = -1;
        if (__pyx_t_8 < 0) {
          __pyx_t_8 += __pyx_v_self->dxyz.shape[0];
          if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_8 >= __pyx_v_self->dxyz.shape[0])) __pyx_t_7 = 0;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 1461, __pyx_L1_error)
        }
        __pyx_t_11 = (*((double *) ( /* dim=0 */ (__pyx_v_self->dxyz.data + __pyx_t_8 * __pyx_v_self->dxyz.strides[0]) )));
        if (unlikely(__pyx_t_11 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 1461, __pyx_L1_error)
        }

        /* "chromo/fields.pyx":1460
 * 
 *                     # Get weight in the lower bin index
 *                     self.weight_xyz_with_trial[k, j] = (             # <<<<<<<<<<<<<<
 *                         1 - (self.xyz_with_trial[k, j] / self.dxyz[j] - ind)
 *                     )
 */
        if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1460, __pyx_L1_error)}
        __pyx_t_8 = __pyx_v_k;
        __pyx_t_9 = __pyx_v_j;
        __pyx_t_7 = -1;
        if (__pyx_t_8 < 0) {
          __pyx_t_8 += __pyx_v_self->weight_xyz_with_trial.shape[0];
          if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_8 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_7 = 0;
        if (__pyx_t_9 < 0) {
          __pyx_t_9 += __pyx_v_self->weight_xyz_with_trial.shape[1];
          if (unlikely(__pyx_t_9 < 0)) __pyx_t_7 = 1;
        } else if (unlikely(__pyx_t_9 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_7 = 1;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 1460, __pyx_L1_error)
        }
        *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_8 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_9)) )) = (1.0 - ((__pyx_t_12 / __pyx_t_11) - __pyx_v_ind));
      }
    }

    /* "chromo/fields.pyx":1465
 * 
 *             # Get weights and superindices of eight bins containing bead
 *             self._generate_weight_vector_with_trial()             # <<<<<<<<<<<<<<
 *             self._generate_index_vector_with_trial()
 * 
 */
    ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->_generate_weight_vector_with_trial(__pyx_v_self);

    /* "chromo/fields.pyx":1466
 *             # Get weights and superindices of eight bins containing bead
 *             self._generate_weight_vector_with_trial()
 *             self._generate_index_vector_with_trial()             # <<<<<<<<<<<<<<
 * 
 *             # Distribute weights into bins
 */
    ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->_generate_index_vector_with_trial(__pyx_v_self);

    /* "chromo/fields.pyx":1472
 *             # l indicates for which of eight bins density is being calculated
 *             # m indicates polymer (0) or which protein (1 to n_binders)
 *             for k in range(2):             # <<<<<<<<<<<<<<
 *                 for l in range(8):
 *                     poly.densities_temp[k, 0, l] = (
 */
    for (__pyx_t_5 = 0; __pyx_t_5 < 2; __pyx_t_5+=1) {
      __pyx_v_k = __pyx_t_5;

      /* "chromo/fields.pyx":1473
 *             # m indicates polymer (0) or which protein (1 to n_binders)
 *             for k in range(2):
 *                 for l in range(8):             # <<<<<<<<<<<<<<
 *                     poly.densities_temp[k, 0, l] = (
 *                         self.wt_vec_with_trial[k, l] /
 */
      for (__pyx_t_14 = 0; __pyx_t_14 < 8; __pyx_t_14+=1) {
        __pyx_v_l = __pyx_t_14;

        /* "chromo/fields.pyx":1475
 *                 for l in range(8):
 *                     poly.densities_temp[k, 0, l] = (
 *                         self.wt_vec_with_trial[k, l] /             # <<<<<<<<<<<<<<
 *                         self.access_vols[self.nbr_inds_with_trial[k, l]]
 *                     )
 */
        if (unlikely(!__pyx_v_self->wt_vec_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1475, __pyx_L1_error)}
        __pyx_t_9 = __pyx_v_k;
        __pyx_t_8 = __pyx_v_l;
        __pyx_t_7 = -1;
        if (__pyx_t_9 < 0) {
          __pyx_t_9 += __pyx_v_self->wt_vec_with_trial.shape[0];
          if (unlikely(__pyx_t_9 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_9 >= __pyx_v_self->wt_vec_with_trial.shape[0])) __pyx_t_7 = 0;
        if (__pyx_t_8 < 0) {
          __pyx_t_8 += __pyx_v_self->wt_vec_with_trial.shape[1];
          if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 1;
        } else if (unlikely(__pyx_t_8 >= __pyx_v_self->wt_vec_with_trial.shape[1])) __pyx_t_7 = 1;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 1475, __pyx_L1_error)
        }
        __pyx_t_1 = PyFloat_FromDouble((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->wt_vec_with_trial.data + __pyx_t_9 * __pyx_v_self->wt_vec_with_trial.strides[0]) )) + __pyx_t_8)) )))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1475, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);

        /* "chromo/fields.pyx":1476
 *                     poly.densities_temp[k, 0, l] = (
 *                         self.wt_vec_with_trial[k, l] /
 *                         self.access_vols[self.nbr_inds_with_trial[k, l]]             # <<<<<<<<<<<<<<
 *                     )
 *                     for m in range(1, poly.n_binders_p1):
 */
        if (unlikely(__pyx_v_self->access_vols == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 1476, __pyx_L1_error)
        }
        if (unlikely(!__pyx_v_self->nbr_inds_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1476, __pyx_L1_error)}
        __pyx_t_8 = __pyx_v_k;
        __pyx_t_9 = __pyx_v_l;
        __pyx_t_7 = -1;
        if (__pyx_t_8 < 0) {
          __pyx_t_8 += __pyx_v_self->nbr_inds_with_trial.shape[0];
          if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_8 >= __pyx_v_self->nbr_inds_with_trial.shape[0])) __pyx_t_7 = 0;
        if (__pyx_t_9 < 0) {
          __pyx_t_9 += __pyx_v_self->nbr_inds_with_trial.shape[1];
          if (unlikely(__pyx_t_9 < 0)) __pyx_t_7 = 1;
        } else if (unlikely(__pyx_t_9 >= __pyx_v_self->nbr_inds_with_trial.shape[1])) __pyx_t_7 = 1;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 1476, __pyx_L1_error)
        }
        __pyx_t_15 = __Pyx_PyInt_From_long((*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds_with_trial.data + __pyx_t_8 * __pyx_v_self->nbr_inds_with_trial.strides[0]) )) + __pyx_t_9)) )))); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1476, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_16 = __Pyx_PyDict_GetItem(__pyx_v_self->access_vols, __pyx_t_15); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1476, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

        /* "chromo/fields.pyx":1475
 *                 for l in range(8):
 *                     poly.densities_temp[k, 0, l] = (
 *                         self.wt_vec_with_trial[k, l] /             # <<<<<<<<<<<<<<
 *                         self.access_vols[self.nbr_inds_with_trial[k, l]]
 *                     )
 */
        __pyx_t_15 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_16); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1475, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_15); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1475, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

        /* "chromo/fields.pyx":1474
 *             for k in range(2):
 *                 for l in range(8):
 *                     poly.densities_temp[k, 0, l] = (             # <<<<<<<<<<<<<<
 *                         self.wt_vec_with_trial[k, l] /
 *                         self.access_vols[self.nbr_inds_with_trial[k, l]]
 */
        if (unlikely(!__pyx_v_poly->densities_temp.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1474, __pyx_L1_error)}
        __pyx_t_9 = __pyx_v_k;
        __pyx_t_8 = 0;
        __pyx_t_6 = __pyx_v_l;
        __pyx_t_7 = -1;
        if (__pyx_t_9 < 0) {
          __pyx_t_9 += __pyx_v_poly->densities_temp.shape[0];
          if (unlikely(__pyx_t_9 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_9 >= __pyx_v_poly->densities_temp.shape[0])) __pyx_t_7 = 0;
        if (__pyx_t_8 < 0) {
          __pyx_t_8 += __pyx_v_poly->densities_temp.shape[1];
          if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 1;
        } else if (unlikely(__pyx_t_8 >= __pyx_v_poly->densities_temp.shape[1])) __pyx_t_7 = 1;
        if (__pyx_t_6 < 0) {
          __pyx_t_6 += __pyx_v_poly->densities_temp.shape[2];
          if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 2;
        } else if (unlikely(__pyx_t_6 >= __pyx_v_poly->densities_temp.shape[2])) __pyx_t_7 = 2;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 1474, __pyx_L1_error)
        }
        *((double *) ( /* dim=2 */ ((char *) (((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_poly->densities_temp.data + __pyx_t_9 * __pyx_v_poly->densities_temp.strides[0]) ) + __pyx_t_8 * __pyx_v_poly->densities_temp.strides[1]) )) + __pyx_t_6)) )) = __pyx_t_11;

        /* "chromo/fields.pyx":1478
 *                         self.access_vols[self.nbr_inds_with_trial[k, l]]
 *                     )
 *                     for m in range(1, poly.n_binders_p1):             # <<<<<<<<<<<<<<
 *                         # Current Configuration
 *                         if k == 0 or state_change == 0:
 */
        __pyx_t_17 = __pyx_v_poly->n_binders_p1;
        __pyx_t_18 = __pyx_t_17;
        for (__pyx_t_19 = 1; __pyx_t_19 < __pyx_t_18; __pyx_t_19+=1) {
          __pyx_v_m = __pyx_t_19;

          /* "chromo/fields.pyx":1480
 *                     for m in range(1, poly.n_binders_p1):
 *                         # Current Configuration
 *                         if k == 0 or state_change == 0:             # <<<<<<<<<<<<<<
 *                             poly.densities_temp[k, m, l] =\
 *                                 poly.densities_temp[k, 0, l] *\
 */
          __pyx_t_20 = ((__pyx_v_k == 0) != 0);
          if (!__pyx_t_20) {
          } else {
            __pyx_t_13 = __pyx_t_20;
            goto __pyx_L18_bool_binop_done;
          }
          __pyx_t_20 = ((__pyx_v_state_change == 0) != 0);
          __pyx_t_13 = __pyx_t_20;
          __pyx_L18_bool_binop_done:;
          if (__pyx_t_13) {

            /* "chromo/fields.pyx":1482
 *                         if k == 0 or state_change == 0:
 *                             poly.densities_temp[k, m, l] =\
 *                                 poly.densities_temp[k, 0, l] *\             # <<<<<<<<<<<<<<
 *                                 float(poly.states[inds[i], m-1])
 *                         # Trial Configuration of State Change
 */
            if (unlikely(!__pyx_v_poly->densities_temp.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1482, __pyx_L1_error)}
            __pyx_t_6 = __pyx_v_k;
            __pyx_t_8 = 0;
            __pyx_t_9 = __pyx_v_l;
            __pyx_t_7 = -1;
            if (__pyx_t_6 < 0) {
              __pyx_t_6 += __pyx_v_poly->densities_temp.shape[0];
              if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
            } else if (unlikely(__pyx_t_6 >= __pyx_v_poly->densities_temp.shape[0])) __pyx_t_7 = 0;
            if (__pyx_t_8 < 0) {
              __pyx_t_8 += __pyx_v_poly->densities_temp.shape[1];
              if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 1;
            } else if (unlikely(__pyx_t_8 >= __pyx_v_poly->densities_temp.shape[1])) __pyx_t_7 = 1;
            if (__pyx_t_9 < 0) {
              __pyx_t_9 += __pyx_v_poly->densities_temp.shape[2];
              if (unlikely(__pyx_t_9 < 0)) __pyx_t_7 = 2;
            } else if (unlikely(__pyx_t_9 >= __pyx_v_poly->densities_temp.shape[2])) __pyx_t_7 = 2;
            if (unlikely(__pyx_t_7 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_7);
              __PYX_ERR(0, 1482, __pyx_L1_error)
            }

            /* "chromo/fields.pyx":1483
 *                             poly.densities_temp[k, m, l] =\
 *                                 poly.densities_temp[k, 0, l] *\
 *                                 float(poly.states[inds[i], m-1])             # <<<<<<<<<<<<<<
 *                         # Trial Configuration of State Change
 *                         else:
 */
            if (unlikely(!__pyx_v_poly->states.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1483, __pyx_L1_error)}
            __pyx_t_10 = __pyx_v_i;
            __pyx_t_7 = -1;
            if (__pyx_t_10 < 0) {
              __pyx_t_10 += __pyx_v_inds.shape[0];
              if (unlikely(__pyx_t_10 < 0)) __pyx_t_7 = 0;
            } else if (unlikely(__pyx_t_10 >= __pyx_v_inds.shape[0])) __pyx_t_7 = 0;
            if (unlikely(__pyx_t_7 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_7);
              __PYX_ERR(0, 1483, __pyx_L1_error)
            }
            __pyx_t_21 = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_10 * __pyx_v_inds.strides[0]) )));
            __pyx_t_22 = (__pyx_v_m - 1);
            __pyx_t_7 = -1;
            if (__pyx_t_21 < 0) {
              __pyx_t_21 += __pyx_v_poly->states.shape[0];
              if (unlikely(__pyx_t_21 < 0)) __pyx_t_7 = 0;
            } else if (unlikely(__pyx_t_21 >= __pyx_v_poly->states.shape[0])) __pyx_t_7 = 0;
            if (__pyx_t_22 < 0) {
              __pyx_t_22 += __pyx_v_poly->states.shape[1];
              if (unlikely(__pyx_t_22 < 0)) __pyx_t_7 = 1;
            } else if (unlikely(__pyx_t_22 >= __pyx_v_poly->states.shape[1])) __pyx_t_7 = 1;
            if (unlikely(__pyx_t_7 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_7);
              __PYX_ERR(0, 1483, __pyx_L1_error)
            }

            /* "chromo/fields.pyx":1481
 *                         # Current Configuration
 *                         if k == 0 or state_change == 0:
 *                             poly.densities_temp[k, m, l] =\             # <<<<<<<<<<<<<<
 *                                 poly.densities_temp[k, 0, l] *\
 *                                 float(poly.states[inds[i], m-1])
 */
            if (unlikely(!__pyx_v_poly->densities_temp.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1481, __pyx_L1_error)}
            __pyx_t_23 = __pyx_v_k;
            __pyx_t_24 = __pyx_v_m;
            __pyx_t_25 = __pyx_v_l;
            __pyx_t_7 = -1;
            if (__pyx_t_23 < 0) {
              __pyx_t_23 += __pyx_v_poly->densities_temp.shape[0];
              if (unlikely(__pyx_t_23 < 0)) __pyx_t_7 = 0;
            } else if (unlikely(__pyx_t_23 >= __pyx_v_poly->densities_temp.shape[0])) __pyx_t_7 = 0;
            if (__pyx_t_24 < 0) {
              __pyx_t_24 += __pyx_v_poly->densities_temp.shape[1];
              if (unlikely(__pyx_t_24 < 0)) __pyx_t_7 = 1;
            } else if (unlikely(__pyx_t_24 >= __pyx_v_poly->densities_temp.shape[1])) __pyx_t_7 = 1;
            if (__pyx_t_25 < 0) {
              __pyx_t_25 += __pyx_v_poly->densities_temp.shape[2];
              if (unlikely(__pyx_t_25 < 0)) __pyx_t_7 = 2;
            } else if (unlikely(__pyx_t_25 >= __pyx_v_poly->densities_temp.shape[2])) __pyx_t_7 = 2;
            if (unlikely(__pyx_t_7 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_7);
              __PYX_ERR(0, 1481, __pyx_L1_error)
            }
            *((double *) ( /* dim=2 */ ((char *) (((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_poly->densities_temp.data + __pyx_t_23 * __pyx_v_poly->densities_temp.strides[0]) ) + __pyx_t_24 * __pyx_v_poly->densities_temp.strides[1]) )) + __pyx_t_25)) )) = ((*((double *) ( /* dim=2 */ ((char *) (((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_poly->densities_temp.data + __pyx_t_6 * __pyx_v_poly->densities_temp.strides[0]) ) + __pyx_t_8 * __pyx_v_poly->densities_temp.strides[1]) )) + __pyx_t_9)) ))) * ((double)(*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_poly->states.data + __pyx_t_21 * __pyx_v_poly->states.strides[0]) )) + __pyx_t_22)) )))));

            /* "chromo/fields.pyx":1480
 *                     for m in range(1, poly.n_binders_p1):
 *                         # Current Configuration
 *                         if k == 0 or state_change == 0:             # <<<<<<<<<<<<<<
 *                             poly.densities_temp[k, m, l] =\
 *                                 poly.densities_temp[k, 0, l] *\
 */
            goto __pyx_L17;
          }

          /* "chromo/fields.pyx":1487
 *                         else:
 *                             poly.densities_temp[k, m, l] =\
 *                                 poly.densities_temp[k, 0, l] *\             # <<<<<<<<<<<<<<
 *                                 float(poly.states_trial[inds[i], m-1])
 * 
 */
          /*else*/ {
            if (unlikely(!__pyx_v_poly->densities_temp.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1487, __pyx_L1_error)}
            __pyx_t_10 = __pyx_v_k;
            __pyx_t_22 = 0;
            __pyx_t_21 = __pyx_v_l;
            __pyx_t_7 = -1;
            if (__pyx_t_10 < 0) {
              __pyx_t_10 += __pyx_v_poly->densities_temp.shape[0];
              if (unlikely(__pyx_t_10 < 0)) __pyx_t_7 = 0;
            } else if (unlikely(__pyx_t_10 >= __pyx_v_poly->densities_temp.shape[0])) __pyx_t_7 = 0;
            if (__pyx_t_22 < 0) {
              __pyx_t_22 += __pyx_v_poly->densities_temp.shape[1];
              if (unlikely(__pyx_t_22 < 0)) __pyx_t_7 = 1;
            } else if (unlikely(__pyx_t_22 >= __pyx_v_poly->densities_temp.shape[1])) __pyx_t_7 = 1;
            if (__pyx_t_21 < 0) {
              __pyx_t_21 += __pyx_v_poly->densities_temp.shape[2];
              if (unlikely(__pyx_t_21 < 0)) __pyx_t_7 = 2;
            } else if (unlikely(__pyx_t_21 >= __pyx_v_poly->densities_temp.shape[2])) __pyx_t_7 = 2;
            if (unlikely(__pyx_t_7 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_7);
              __PYX_ERR(0, 1487, __pyx_L1_error)
            }

            /* "chromo/fields.pyx":1488
 *                             poly.densities_temp[k, m, l] =\
 *                                 poly.densities_temp[k, 0, l] *\
 *                                 float(poly.states_trial[inds[i], m-1])             # <<<<<<<<<<<<<<
 * 
 *             # Combine repeating elements, stored in poly.density_trial
 */
            if (unlikely(!__pyx_v_poly->states_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1488, __pyx_L1_error)}
            __pyx_t_9 = __pyx_v_i;
            __pyx_t_7 = -1;
            if (__pyx_t_9 < 0) {
              __pyx_t_9 += __pyx_v_inds.shape[0];
              if (unlikely(__pyx_t_9 < 0)) __pyx_t_7 = 0;
            } else if (unlikely(__pyx_t_9 >= __pyx_v_inds.shape[0])) __pyx_t_7 = 0;
            if (unlikely(__pyx_t_7 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_7);
              __PYX_ERR(0, 1488, __pyx_L1_error)
            }
            __pyx_t_8 = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_9 * __pyx_v_inds.strides[0]) )));
            __pyx_t_6 = (__pyx_v_m - 1);
            __pyx_t_7 = -1;
            if (__pyx_t_8 < 0) {
              __pyx_t_8 += __pyx_v_poly->states_trial.shape[0];
              if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 0;
            } else if (unlikely(__pyx_t_8 >= __pyx_v_poly->states_trial.shape[0])) __pyx_t_7 = 0;
            if (__pyx_t_6 < 0) {
              __pyx_t_6 += __pyx_v_poly->states_trial.shape[1];
              if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 1;
            } else if (unlikely(__pyx_t_6 >= __pyx_v_poly->states_trial.shape[1])) __pyx_t_7 = 1;
            if (unlikely(__pyx_t_7 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_7);
              __PYX_ERR(0, 1488, __pyx_L1_error)
            }

            /* "chromo/fields.pyx":1486
 *                         # Trial Configuration of State Change
 *                         else:
 *                             poly.densities_temp[k, m, l] =\             # <<<<<<<<<<<<<<
 *                                 poly.densities_temp[k, 0, l] *\
 *                                 float(poly.states_trial[inds[i], m-1])
 */
            if (unlikely(!__pyx_v_poly->densities_temp.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1486, __pyx_L1_error)}
            __pyx_t_25 = __pyx_v_k;
            __pyx_t_24 = __pyx_v_m;
            __pyx_t_23 = __pyx_v_l;
            __pyx_t_7 = -1;
            if (__pyx_t_25 < 0) {
              __pyx_t_25 += __pyx_v_poly->densities_temp.shape[0];
              if (unlikely(__pyx_t_25 < 0)) __pyx_t_7 = 0;
            } else if (unlikely(__pyx_t_25 >= __pyx_v_poly->densities_temp.shape[0])) __pyx_t_7 = 0;
            if (__pyx_t_24 < 0) {
              __pyx_t_24 += __pyx_v_poly->densities_temp.shape[1];
              if (unlikely(__pyx_t_24 < 0)) __pyx_t_7 = 1;
            } else if (unlikely(__pyx_t_24 >= __pyx_v_poly->densities_temp.shape[1])) __pyx_t_7 = 1;
            if (__pyx_t_23 < 0) {
              __pyx_t_23 += __pyx_v_poly->densities_temp.shape[2];
              if (unlikely(__pyx_t_23 < 0)) __pyx_t_7 = 2;
            } else if (unlikely(__pyx_t_23 >= __pyx_v_poly->densities_temp.shape[2])) __pyx_t_7 = 2;
            if (unlikely(__pyx_t_7 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_7);
              __PYX_ERR(0, 1486, __pyx_L1_error)
            }
            *((double *) ( /* dim=2 */ ((char *) (((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_poly->densities_temp.data + __pyx_t_25 * __pyx_v_poly->densities_temp.strides[0]) ) + __pyx_t_24 * __pyx_v_poly->densities_temp.strides[1]) )) + __pyx_t_23)) )) = ((*((double *) ( /* dim=2 */ ((char *) (((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_poly->densities_temp.data + __pyx_t_10 * __pyx_v_poly->densities_temp.strides[0]) ) + __pyx_t_22 * __pyx_v_poly->densities_temp.strides[1]) )) + __pyx_t_21)) ))) * ((double)(*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_poly->states_trial.data + __pyx_t_8 * __pyx_v_poly->states_trial.strides[0]) )) + __pyx_t_6)) )))));
          }
          __pyx_L17:;
        }
      }
    }

    /* "chromo/fields.pyx":1491
 * 
 *             # Combine repeating elements, stored in poly.density_trial
 *             for k in range(2):             # <<<<<<<<<<<<<<
 *                 # Subtract if current configuration
 *                 if k == 0:
 */
    for (__pyx_t_5 = 0; __pyx_t_5 < 2; __pyx_t_5+=1) {
      __pyx_v_k = __pyx_t_5;

      /* "chromo/fields.pyx":1493
 *             for k in range(2):
 *                 # Subtract if current configuration
 *                 if k == 0:             # <<<<<<<<<<<<<<
 *                     prefactor = -1.
 *                 else:
 */
      __pyx_t_13 = ((__pyx_v_k == 0) != 0);
      if (__pyx_t_13) {

        /* "chromo/fields.pyx":1494
 *                 # Subtract if current configuration
 *                 if k == 0:
 *                     prefactor = -1.             # <<<<<<<<<<<<<<
 *                 else:
 *                     prefactor = 1.
 */
        __pyx_v_prefactor = -1.;

        /* "chromo/fields.pyx":1493
 *             for k in range(2):
 *                 # Subtract if current configuration
 *                 if k == 0:             # <<<<<<<<<<<<<<
 *                     prefactor = -1.
 *                 else:
 */
        goto __pyx_L22;
      }

      /* "chromo/fields.pyx":1496
 *                     prefactor = -1.
 *                 else:
 *                     prefactor = 1.             # <<<<<<<<<<<<<<
 * 
 *                 # Accumulate densities
 */
      /*else*/ {
        __pyx_v_prefactor = 1.;
      }
      __pyx_L22:;

      /* "chromo/fields.pyx":1499
 * 
 *                 # Accumulate densities
 *                 for l in range(8):             # <<<<<<<<<<<<<<
 *                     if self.nbr_inds_with_trial[k, l] in bins_found:
 *                         for m in range(poly.n_binders_p1):
 */
      for (__pyx_t_14 = 0; __pyx_t_14 < 8; __pyx_t_14+=1) {
        __pyx_v_l = __pyx_t_14;

        /* "chromo/fields.pyx":1500
 *                 # Accumulate densities
 *                 for l in range(8):
 *                     if self.nbr_inds_with_trial[k, l] in bins_found:             # <<<<<<<<<<<<<<
 *                         for m in range(poly.n_binders_p1):
 *                             temp = prefactor * poly.densities_temp[k, m, l]
 */
        if (unlikely(!__pyx_v_self->nbr_inds_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1500, __pyx_L1_error)}
        __pyx_t_9 = __pyx_v_k;
        __pyx_t_6 = __pyx_v_l;
        __pyx_t_7 = -1;
        if (__pyx_t_9 < 0) {
          __pyx_t_9 += __pyx_v_self->nbr_inds_with_trial.shape[0];
          if (unlikely(__pyx_t_9 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_9 >= __pyx_v_self->nbr_inds_with_trial.shape[0])) __pyx_t_7 = 0;
        if (__pyx_t_6 < 0) {
          __pyx_t_6 += __pyx_v_self->nbr_inds_with_trial.shape[1];
          if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 1;
        } else if (unlikely(__pyx_t_6 >= __pyx_v_self->nbr_inds_with_trial.shape[1])) __pyx_t_7 = 1;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 1500, __pyx_L1_error)
        }
        __pyx_t_15 = __Pyx_PyInt_From_long((*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds_with_trial.data + __pyx_t_9 * __pyx_v_self->nbr_inds_with_trial.strides[0]) )) + __pyx_t_6)) )))); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1500, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_13 = (__Pyx_PySet_ContainsTF(__pyx_t_15, __pyx_v_bins_found, Py_EQ)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 1500, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_20 = (__pyx_t_13 != 0);
        if (__pyx_t_20) {

          /* "chromo/fields.pyx":1501
 *                 for l in range(8):
 *                     if self.nbr_inds_with_trial[k, l] in bins_found:
 *                         for m in range(poly.n_binders_p1):             # <<<<<<<<<<<<<<
 *                             temp = prefactor * poly.densities_temp[k, m, l]
 *                             # Fix rounding error
 */
          __pyx_t_17 = __pyx_v_poly->n_binders_p1;
          __pyx_t_18 = __pyx_t_17;
          for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_18; __pyx_t_19+=1) {
            __pyx_v_m = __pyx_t_19;

            /* "chromo/fields.pyx":1502
 *                     if self.nbr_inds_with_trial[k, l] in bins_found:
 *                         for m in range(poly.n_binders_p1):
 *                             temp = prefactor * poly.densities_temp[k, m, l]             # <<<<<<<<<<<<<<
 *                             # Fix rounding error
 *                             if np.abs(temp) > 1E-18:
 */
            if (unlikely(!__pyx_v_poly->densities_temp.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1502, __pyx_L1_error)}
            __pyx_t_6 = __pyx_v_k;
            __pyx_t_9 = __pyx_v_m;
            __pyx_t_8 = __pyx_v_l;
            __pyx_t_7 = -1;
            if (__pyx_t_6 < 0) {
              __pyx_t_6 += __pyx_v_poly->densities_temp.shape[0];
              if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
            } else if (unlikely(__pyx_t_6 >= __pyx_v_poly->densities_temp.shape[0])) __pyx_t_7 = 0;
            if (__pyx_t_9 < 0) {
              __pyx_t_9 += __pyx_v_poly->densities_temp.shape[1];
              if (unlikely(__pyx_t_9 < 0)) __pyx_t_7 = 1;
            } else if (unlikely(__pyx_t_9 >= __pyx_v_poly->densities_temp.shape[1])) __pyx_t_7 = 1;
            if (__pyx_t_8 < 0) {
              __pyx_t_8 += __pyx_v_poly->densities_temp.shape[2];
              if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 2;
            } else if (unlikely(__pyx_t_8 >= __pyx_v_poly->densities_temp.shape[2])) __pyx_t_7 = 2;
            if (unlikely(__pyx_t_7 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_7);
              __PYX_ERR(0, 1502, __pyx_L1_error)
            }
            __pyx_t_15 = PyFloat_FromDouble((__pyx_v_prefactor * (*((double *) ( /* dim=2 */ ((char *) (((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_poly->densities_temp.data + __pyx_t_6 * __pyx_v_poly->densities_temp.strides[0]) ) + __pyx_t_9 * __pyx_v_poly->densities_temp.strides[1]) )) + __pyx_t_8)) ))))); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1502, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_XDECREF_SET(__pyx_v_temp, __pyx_t_15);
            __pyx_t_15 = 0;

            /* "chromo/fields.pyx":1504
 *                             temp = prefactor * poly.densities_temp[k, m, l]
 *                             # Fix rounding error
 *                             if np.abs(temp) > 1E-18:             # <<<<<<<<<<<<<<
 *                                 self.density_trial[
 *                                     self.nbr_inds_with_trial[k, l], m
 */
            __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_np); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1504, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_abs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1504, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            __pyx_t_16 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
              __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_1);
              if (likely(__pyx_t_16)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                __Pyx_INCREF(__pyx_t_16);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_1, function);
              }
            }
            __pyx_t_15 = (__pyx_t_16) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_16, __pyx_v_temp) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_temp);
            __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
            if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1504, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = PyObject_RichCompare(__pyx_t_15, __pyx_float_1Eneg_18, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1504, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __pyx_t_20 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_20 < 0)) __PYX_ERR(0, 1504, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (__pyx_t_20) {

              /* "chromo/fields.pyx":1507
 *                                 self.density_trial[
 *                                     self.nbr_inds_with_trial[k, l], m
 *                                 ] += temp             # <<<<<<<<<<<<<<
 *                     else:
 *                         bins_found.add(self.nbr_inds_with_trial[k, l])
 */
              __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_v_temp); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1507, __pyx_L1_error)

              /* "chromo/fields.pyx":1505
 *                             # Fix rounding error
 *                             if np.abs(temp) > 1E-18:
 *                                 self.density_trial[             # <<<<<<<<<<<<<<
 *                                     self.nbr_inds_with_trial[k, l], m
 *                                 ] += temp
 */
              if (unlikely(!__pyx_v_self->density_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1505, __pyx_L1_error)}

              /* "chromo/fields.pyx":1506
 *                             if np.abs(temp) > 1E-18:
 *                                 self.density_trial[
 *                                     self.nbr_inds_with_trial[k, l], m             # <<<<<<<<<<<<<<
 *                                 ] += temp
 *                     else:
 */
              if (unlikely(!__pyx_v_self->nbr_inds_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1506, __pyx_L1_error)}
              __pyx_t_8 = __pyx_v_k;
              __pyx_t_9 = __pyx_v_l;
              __pyx_t_7 = -1;
              if (__pyx_t_8 < 0) {
                __pyx_t_8 += __pyx_v_self->nbr_inds_with_trial.shape[0];
                if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 0;
              } else if (unlikely(__pyx_t_8 >= __pyx_v_self->nbr_inds_with_trial.shape[0])) __pyx_t_7 = 0;
              if (__pyx_t_9 < 0) {
                __pyx_t_9 += __pyx_v_self->nbr_inds_with_trial.shape[1];
                if (unlikely(__pyx_t_9 < 0)) __pyx_t_7 = 1;
              } else if (unlikely(__pyx_t_9 >= __pyx_v_self->nbr_inds_with_trial.shape[1])) __pyx_t_7 = 1;
              if (unlikely(__pyx_t_7 != -1)) {
                __Pyx_RaiseBufferIndexError(__pyx_t_7);
                __PYX_ERR(0, 1506, __pyx_L1_error)
              }
              __pyx_t_6 = (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds_with_trial.data + __pyx_t_8 * __pyx_v_self->nbr_inds_with_trial.strides[0]) )) + __pyx_t_9)) )));
              __pyx_t_21 = __pyx_v_m;
              __pyx_t_7 = -1;
              if (__pyx_t_6 < 0) {
                __pyx_t_6 += __pyx_v_self->density_trial.shape[0];
                if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
              } else if (unlikely(__pyx_t_6 >= __pyx_v_self->density_trial.shape[0])) __pyx_t_7 = 0;
              if (__pyx_t_21 < 0) {
                __pyx_t_21 += __pyx_v_self->density_trial.shape[1];
                if (unlikely(__pyx_t_21 < 0)) __pyx_t_7 = 1;
              } else if (unlikely(__pyx_t_21 >= __pyx_v_self->density_trial.shape[1])) __pyx_t_7 = 1;
              if (unlikely(__pyx_t_7 != -1)) {
                __Pyx_RaiseBufferIndexError(__pyx_t_7);
                __PYX_ERR(0, 1505, __pyx_L1_error)
              }
              *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density_trial.data + __pyx_t_6 * __pyx_v_self->density_trial.strides[0]) )) + __pyx_t_21)) )) += __pyx_t_11;

              /* "chromo/fields.pyx":1504
 *                             temp = prefactor * poly.densities_temp[k, m, l]
 *                             # Fix rounding error
 *                             if np.abs(temp) > 1E-18:             # <<<<<<<<<<<<<<
 *                                 self.density_trial[
 *                                     self.nbr_inds_with_trial[k, l], m
 */
            }
          }

          /* "chromo/fields.pyx":1500
 *                 # Accumulate densities
 *                 for l in range(8):
 *                     if self.nbr_inds_with_trial[k, l] in bins_found:             # <<<<<<<<<<<<<<
 *                         for m in range(poly.n_binders_p1):
 *                             temp = prefactor * poly.densities_temp[k, m, l]
 */
          goto __pyx_L25;
        }

        /* "chromo/fields.pyx":1509
 *                                 ] += temp
 *                     else:
 *                         bins_found.add(self.nbr_inds_with_trial[k, l])             # <<<<<<<<<<<<<<
 *                         for m in range(poly.n_binders_p1):
 *                             temp = prefactor * poly.densities_temp[k, m, l]
 */
        /*else*/ {
          if (unlikely(!__pyx_v_self->nbr_inds_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1509, __pyx_L1_error)}
          __pyx_t_9 = __pyx_v_k;
          __pyx_t_8 = __pyx_v_l;
          __pyx_t_7 = -1;
          if (__pyx_t_9 < 0) {
            __pyx_t_9 += __pyx_v_self->nbr_inds_with_trial.shape[0];
            if (unlikely(__pyx_t_9 < 0)) __pyx_t_7 = 0;
          } else if (unlikely(__pyx_t_9 >= __pyx_v_self->nbr_inds_with_trial.shape[0])) __pyx_t_7 = 0;
          if (__pyx_t_8 < 0) {
            __pyx_t_8 += __pyx_v_self->nbr_inds_with_trial.shape[1];
            if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 1;
          } else if (unlikely(__pyx_t_8 >= __pyx_v_self->nbr_inds_with_trial.shape[1])) __pyx_t_7 = 1;
          if (unlikely(__pyx_t_7 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_7);
            __PYX_ERR(0, 1509, __pyx_L1_error)
          }
          __pyx_t_1 = __Pyx_PyInt_From_long((*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds_with_trial.data + __pyx_t_9 * __pyx_v_self->nbr_inds_with_trial.strides[0]) )) + __pyx_t_8)) )))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1509, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_26 = PySet_Add(__pyx_v_bins_found, __pyx_t_1); if (unlikely(__pyx_t_26 == ((int)-1))) __PYX_ERR(0, 1509, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "chromo/fields.pyx":1510
 *                     else:
 *                         bins_found.add(self.nbr_inds_with_trial[k, l])
 *                         for m in range(poly.n_binders_p1):             # <<<<<<<<<<<<<<
 *                             temp = prefactor * poly.densities_temp[k, m, l]
 *                             # Fix rounding error
 */
          __pyx_t_17 = __pyx_v_poly->n_binders_p1;
          __pyx_t_18 = __pyx_t_17;
          for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_18; __pyx_t_19+=1) {
            __pyx_v_m = __pyx_t_19;

            /* "chromo/fields.pyx":1511
 *                         bins_found.add(self.nbr_inds_with_trial[k, l])
 *                         for m in range(poly.n_binders_p1):
 *                             temp = prefactor * poly.densities_temp[k, m, l]             # <<<<<<<<<<<<<<
 *                             # Fix rounding error
 *                             if np.abs(temp) > 1E-18:
 */
            if (unlikely(!__pyx_v_poly->densities_temp.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1511, __pyx_L1_error)}
            __pyx_t_8 = __pyx_v_k;
            __pyx_t_9 = __pyx_v_m;
            __pyx_t_21 = __pyx_v_l;
            __pyx_t_7 = -1;
            if (__pyx_t_8 < 0) {
              __pyx_t_8 += __pyx_v_poly->densities_temp.shape[0];
              if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 0;
            } else if (unlikely(__pyx_t_8 >= __pyx_v_poly->densities_temp.shape[0])) __pyx_t_7 = 0;
            if (__pyx_t_9 < 0) {
              __pyx_t_9 += __pyx_v_poly->densities_temp.shape[1];
              if (unlikely(__pyx_t_9 < 0)) __pyx_t_7 = 1;
            } else if (unlikely(__pyx_t_9 >= __pyx_v_poly->densities_temp.shape[1])) __pyx_t_7 = 1;
            if (__pyx_t_21 < 0) {
              __pyx_t_21 += __pyx_v_poly->densities_temp.shape[2];
              if (unlikely(__pyx_t_21 < 0)) __pyx_t_7 = 2;
            } else if (unlikely(__pyx_t_21 >= __pyx_v_poly->densities_temp.shape[2])) __pyx_t_7 = 2;
            if (unlikely(__pyx_t_7 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_7);
              __PYX_ERR(0, 1511, __pyx_L1_error)
            }
            __pyx_t_1 = PyFloat_FromDouble((__pyx_v_prefactor * (*((double *) ( /* dim=2 */ ((char *) (((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_poly->densities_temp.data + __pyx_t_8 * __pyx_v_poly->densities_temp.strides[0]) ) + __pyx_t_9 * __pyx_v_poly->densities_temp.strides[1]) )) + __pyx_t_21)) ))))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1511, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_XDECREF_SET(__pyx_v_temp, __pyx_t_1);
            __pyx_t_1 = 0;

            /* "chromo/fields.pyx":1513
 *                             temp = prefactor * poly.densities_temp[k, m, l]
 *                             # Fix rounding error
 *                             if np.abs(temp) > 1E-18:             # <<<<<<<<<<<<<<
 *                                 self.density_trial[
 *                                     self.nbr_inds_with_trial[k, l], m
 */
            __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_np); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1513, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_abs); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1513, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __pyx_t_15 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_16))) {
              __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_16);
              if (likely(__pyx_t_15)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                __Pyx_INCREF(__pyx_t_15);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_16, function);
              }
            }
            __pyx_t_1 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_16, __pyx_t_15, __pyx_v_temp) : __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_v_temp);
            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1513, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            __pyx_t_16 = PyObject_RichCompare(__pyx_t_1, __pyx_float_1Eneg_18, Py_GT); __Pyx_XGOTREF(__pyx_t_16); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1513, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_20 = __Pyx_PyObject_IsTrue(__pyx_t_16); if (unlikely(__pyx_t_20 < 0)) __PYX_ERR(0, 1513, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            if (__pyx_t_20) {

              /* "chromo/fields.pyx":1516
 *                                 self.density_trial[
 *                                     self.nbr_inds_with_trial[k, l], m
 *                                 ] = temp             # <<<<<<<<<<<<<<
 *                             else:
 *                                 self.density_trial[
 */
              __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_v_temp); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1516, __pyx_L1_error)

              /* "chromo/fields.pyx":1514
 *                             # Fix rounding error
 *                             if np.abs(temp) > 1E-18:
 *                                 self.density_trial[             # <<<<<<<<<<<<<<
 *                                     self.nbr_inds_with_trial[k, l], m
 *                                 ] = temp
 */
              if (unlikely(!__pyx_v_self->density_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1514, __pyx_L1_error)}

              /* "chromo/fields.pyx":1515
 *                             if np.abs(temp) > 1E-18:
 *                                 self.density_trial[
 *                                     self.nbr_inds_with_trial[k, l], m             # <<<<<<<<<<<<<<
 *                                 ] = temp
 *                             else:
 */
              if (unlikely(!__pyx_v_self->nbr_inds_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1515, __pyx_L1_error)}
              __pyx_t_21 = __pyx_v_k;
              __pyx_t_9 = __pyx_v_l;
              __pyx_t_7 = -1;
              if (__pyx_t_21 < 0) {
                __pyx_t_21 += __pyx_v_self->nbr_inds_with_trial.shape[0];
                if (unlikely(__pyx_t_21 < 0)) __pyx_t_7 = 0;
              } else if (unlikely(__pyx_t_21 >= __pyx_v_self->nbr_inds_with_trial.shape[0])) __pyx_t_7 = 0;
              if (__pyx_t_9 < 0) {
                __pyx_t_9 += __pyx_v_self->nbr_inds_with_trial.shape[1];
                if (unlikely(__pyx_t_9 < 0)) __pyx_t_7 = 1;
              } else if (unlikely(__pyx_t_9 >= __pyx_v_self->nbr_inds_with_trial.shape[1])) __pyx_t_7 = 1;
              if (unlikely(__pyx_t_7 != -1)) {
                __Pyx_RaiseBufferIndexError(__pyx_t_7);
                __PYX_ERR(0, 1515, __pyx_L1_error)
              }
              __pyx_t_8 = (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds_with_trial.data + __pyx_t_21 * __pyx_v_self->nbr_inds_with_trial.strides[0]) )) + __pyx_t_9)) )));
              __pyx_t_6 = __pyx_v_m;
              __pyx_t_7 = -1;
              if (__pyx_t_8 < 0) {
                __pyx_t_8 += __pyx_v_self->density_trial.shape[0];
                if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 0;
              } else if (unlikely(__pyx_t_8 >= __pyx_v_self->density_trial.shape[0])) __pyx_t_7 = 0;
              if (__pyx_t_6 < 0) {
                __pyx_t_6 += __pyx_v_self->density_trial.shape[1];
                if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 1;
              } else if (unlikely(__pyx_t_6 >= __pyx_v_self->density_trial.shape[1])) __pyx_t_7 = 1;
              if (unlikely(__pyx_t_7 != -1)) {
                __Pyx_RaiseBufferIndexError(__pyx_t_7);
                __PYX_ERR(0, 1514, __pyx_L1_error)
              }
              *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density_trial.data + __pyx_t_8 * __pyx_v_self->density_trial.strides[0]) )) + __pyx_t_6)) )) = __pyx_t_11;

              /* "chromo/fields.pyx":1513
 *                             temp = prefactor * poly.densities_temp[k, m, l]
 *                             # Fix rounding error
 *                             if np.abs(temp) > 1E-18:             # <<<<<<<<<<<<<<
 *                                 self.density_trial[
 *                                     self.nbr_inds_with_trial[k, l], m
 */
              goto __pyx_L31;
            }

            /* "chromo/fields.pyx":1520
 *                                 self.density_trial[
 *                                     self.nbr_inds_with_trial[k, l], m
 *                                 ] = 0             # <<<<<<<<<<<<<<
 * 
 *         return np.array(list(bins_found))
 */
            /*else*/ {

              /* "chromo/fields.pyx":1518
 *                                 ] = temp
 *                             else:
 *                                 self.density_trial[             # <<<<<<<<<<<<<<
 *                                     self.nbr_inds_with_trial[k, l], m
 *                                 ] = 0
 */
              if (unlikely(!__pyx_v_self->density_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1518, __pyx_L1_error)}

              /* "chromo/fields.pyx":1519
 *                             else:
 *                                 self.density_trial[
 *                                     self.nbr_inds_with_trial[k, l], m             # <<<<<<<<<<<<<<
 *                                 ] = 0
 * 
 */
              if (unlikely(!__pyx_v_self->nbr_inds_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1519, __pyx_L1_error)}
              __pyx_t_9 = __pyx_v_k;
              __pyx_t_21 = __pyx_v_l;
              __pyx_t_7 = -1;
              if (__pyx_t_9 < 0) {
                __pyx_t_9 += __pyx_v_self->nbr_inds_with_trial.shape[0];
                if (unlikely(__pyx_t_9 < 0)) __pyx_t_7 = 0;
              } else if (unlikely(__pyx_t_9 >= __pyx_v_self->nbr_inds_with_trial.shape[0])) __pyx_t_7 = 0;
              if (__pyx_t_21 < 0) {
                __pyx_t_21 += __pyx_v_self->nbr_inds_with_trial.shape[1];
                if (unlikely(__pyx_t_21 < 0)) __pyx_t_7 = 1;
              } else if (unlikely(__pyx_t_21 >= __pyx_v_self->nbr_inds_with_trial.shape[1])) __pyx_t_7 = 1;
              if (unlikely(__pyx_t_7 != -1)) {
                __Pyx_RaiseBufferIndexError(__pyx_t_7);
                __PYX_ERR(0, 1519, __pyx_L1_error)
              }
              __pyx_t_6 = (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds_with_trial.data + __pyx_t_9 * __pyx_v_self->nbr_inds_with_trial.strides[0]) )) + __pyx_t_21)) )));
              __pyx_t_8 = __pyx_v_m;
              __pyx_t_7 = -1;
              if (__pyx_t_6 < 0) {
                __pyx_t_6 += __pyx_v_self->density_trial.shape[0];
                if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
              } else if (unlikely(__pyx_t_6 >= __pyx_v_self->density_trial.shape[0])) __pyx_t_7 = 0;
              if (__pyx_t_8 < 0) {
                __pyx_t_8 += __pyx_v_self->density_trial.shape[1];
                if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 1;
              } else if (unlikely(__pyx_t_8 >= __pyx_v_self->density_trial.shape[1])) __pyx_t_7 = 1;
              if (unlikely(__pyx_t_7 != -1)) {
                __Pyx_RaiseBufferIndexError(__pyx_t_7);
                __PYX_ERR(0, 1518, __pyx_L1_error)
              }
              *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density_trial.data + __pyx_t_6 * __pyx_v_self->density_trial.strides[0]) )) + __pyx_t_8)) )) = 0.0;
            }
            __pyx_L31:;
          }
        }
        __pyx_L25:;
      }
    }
  }

  /* "chromo/fields.pyx":1522
 *                                 ] = 0
 * 
 *         return np.array(list(bins_found))             # <<<<<<<<<<<<<<
 * 
 *     cdef void _generate_weight_vector_with_trial(self):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PySequence_List(__pyx_v_bins_found); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_27 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
    __pyx_t_27 = PyMethod_GET_SELF(__pyx_t_15);
    if (likely(__pyx_t_27)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_27);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_15, function);
    }
  }
  __pyx_t_16 = (__pyx_t_27) ? __Pyx_PyObject_Call2Args(__pyx_t_15, __pyx_t_27, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_27); __pyx_t_27 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_28 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_t_16, PyBUF_WRITABLE); if (unlikely(!__pyx_t_28.memview)) __PYX_ERR(0, 1522, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_r = __pyx_t_28;
  __pyx_t_28.memview = NULL;
  __pyx_t_28.data = NULL;
  goto __pyx_L0;

  /* "chromo/fields.pyx":1370
 *         return np.array(list(bins_found))
 * 
 *     cdef long[:] get_change_in_density(             # <<<<<<<<<<<<<<
 *         self, poly.PolymerBase poly, long[:] inds, long n_inds,
 *         bint state_change
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_27);
  __PYX_XDEC_MEMVIEW(&__pyx_t_28, 1);
  __pyx_r.data = NULL;
  __pyx_r.memview = NULL;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.get_change_in_density", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  if (unlikely(!__pyx_r.memview)) {
    PyErr_SetString(PyExc_TypeError, "Memoryview return value is not initialized");
  }
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_bins_found);
  __Pyx_XDECREF(__pyx_v_temp);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":1524
 *         return np.array(list(bins_found))
 * 
 *     cdef void _generate_weight_vector_with_trial(self):             # <<<<<<<<<<<<<<
 *         """Generate weight array for eight bins containing the bead.
 * 
 */

static void __pyx_f_6chromo_6fields_19UniformDensityField__generate_weight_vector_with_trial(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  int __pyx_v_i;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_generate_weight_vector_with_trial", 0);
  __Pyx_TraceCall("_generate_weight_vector_with_trial", __pyx_f[0], 1524, 0, __PYX_ERR(0, 1524, __pyx_L1_error));

  /* "chromo/fields.pyx":1543
 *         """
 *         cdef int i
 *         for i in range(2):             # <<<<<<<<<<<<<<
 * 
 *             # lower_x, lower_y, lower_z
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 2; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "chromo/fields.pyx":1547
 *             # lower_x, lower_y, lower_z
 *             self.wt_vec_with_trial[i, 0] = (
 *                 self.weight_xyz_with_trial[i, 0] *             # <<<<<<<<<<<<<<
 *                 self.weight_xyz_with_trial[i, 1] *
 *                 self.weight_xyz_with_trial[i, 2]
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1547, __pyx_L1_error)}
    __pyx_t_2 = __pyx_v_i;
    __pyx_t_3 = 0;
    __pyx_t_4 = -1;
    if (__pyx_t_2 < 0) {
      __pyx_t_2 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_2 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_2 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_3 < 0) {
      __pyx_t_3 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_3 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_3 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1547, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1548
 *             self.wt_vec_with_trial[i, 0] = (
 *                 self.weight_xyz_with_trial[i, 0] *
 *                 self.weight_xyz_with_trial[i, 1] *             # <<<<<<<<<<<<<<
 *                 self.weight_xyz_with_trial[i, 2]
 *             )
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1548, __pyx_L1_error)}
    __pyx_t_5 = __pyx_v_i;
    __pyx_t_6 = 1;
    __pyx_t_4 = -1;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_5 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_6 < 0) {
      __pyx_t_6 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_6 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_6 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1548, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1549
 *                 self.weight_xyz_with_trial[i, 0] *
 *                 self.weight_xyz_with_trial[i, 1] *
 *                 self.weight_xyz_with_trial[i, 2]             # <<<<<<<<<<<<<<
 *             )
 * 
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1549, __pyx_L1_error)}
    __pyx_t_7 = __pyx_v_i;
    __pyx_t_8 = 2;
    __pyx_t_4 = -1;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1549, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1546
 * 
 *             # lower_x, lower_y, lower_z
 *             self.wt_vec_with_trial[i, 0] = (             # <<<<<<<<<<<<<<
 *                 self.weight_xyz_with_trial[i, 0] *
 *                 self.weight_xyz_with_trial[i, 1] *
 */
    if (unlikely(!__pyx_v_self->wt_vec_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1546, __pyx_L1_error)}
    __pyx_t_9 = __pyx_v_i;
    __pyx_t_10 = 0;
    __pyx_t_4 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->wt_vec_with_trial.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->wt_vec_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_self->wt_vec_with_trial.shape[1];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_self->wt_vec_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1546, __pyx_L1_error)
    }
    *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->wt_vec_with_trial.data + __pyx_t_9 * __pyx_v_self->wt_vec_with_trial.strides[0]) )) + __pyx_t_10)) )) = (((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_2 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_3)) ))) * (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_5 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_6)) )))) * (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_7 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_8)) ))));

    /* "chromo/fields.pyx":1554
 *             # upper_x, lower_y, lower_z
 *             self.wt_vec_with_trial[i, 1] = (
 *                 (1-self.weight_xyz_with_trial[i, 0]) *             # <<<<<<<<<<<<<<
 *                 self.weight_xyz_with_trial[i, 1] *
 *                 self.weight_xyz_with_trial[i, 2]
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1554, __pyx_L1_error)}
    __pyx_t_8 = __pyx_v_i;
    __pyx_t_7 = 0;
    __pyx_t_4 = -1;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1554, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1555
 *             self.wt_vec_with_trial[i, 1] = (
 *                 (1-self.weight_xyz_with_trial[i, 0]) *
 *                 self.weight_xyz_with_trial[i, 1] *             # <<<<<<<<<<<<<<
 *                 self.weight_xyz_with_trial[i, 2]
 *             )
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1555, __pyx_L1_error)}
    __pyx_t_6 = __pyx_v_i;
    __pyx_t_5 = 1;
    __pyx_t_4 = -1;
    if (__pyx_t_6 < 0) {
      __pyx_t_6 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_6 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_6 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_5 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1555, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1556
 *                 (1-self.weight_xyz_with_trial[i, 0]) *
 *                 self.weight_xyz_with_trial[i, 1] *
 *                 self.weight_xyz_with_trial[i, 2]             # <<<<<<<<<<<<<<
 *             )
 * 
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1556, __pyx_L1_error)}
    __pyx_t_3 = __pyx_v_i;
    __pyx_t_2 = 2;
    __pyx_t_4 = -1;
    if (__pyx_t_3 < 0) {
      __pyx_t_3 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_3 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_3 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_2 < 0) {
      __pyx_t_2 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_2 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_2 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1556, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1553
 * 
 *             # upper_x, lower_y, lower_z
 *             self.wt_vec_with_trial[i, 1] = (             # <<<<<<<<<<<<<<
 *                 (1-self.weight_xyz_with_trial[i, 0]) *
 *                 self.weight_xyz_with_trial[i, 1] *
 */
    if (unlikely(!__pyx_v_self->wt_vec_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1553, __pyx_L1_error)}
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_9 = 1;
    __pyx_t_4 = -1;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_self->wt_vec_with_trial.shape[0];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_self->wt_vec_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->wt_vec_with_trial.shape[1];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->wt_vec_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1553, __pyx_L1_error)
    }
    *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->wt_vec_with_trial.data + __pyx_t_10 * __pyx_v_self->wt_vec_with_trial.strides[0]) )) + __pyx_t_9)) )) = (((1.0 - (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_8 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_7)) )))) * (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_6 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_5)) )))) * (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_3 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_2)) ))));

    /* "chromo/fields.pyx":1561
 *             # lower_x, upper_y, lower_z
 *             self.wt_vec_with_trial[i, 2] = (
 *                 self.weight_xyz_with_trial[i, 0] *             # <<<<<<<<<<<<<<
 *                 (1-self.weight_xyz_with_trial[i, 1]) *
 *                 self.weight_xyz_with_trial[i, 2]
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1561, __pyx_L1_error)}
    __pyx_t_2 = __pyx_v_i;
    __pyx_t_3 = 0;
    __pyx_t_4 = -1;
    if (__pyx_t_2 < 0) {
      __pyx_t_2 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_2 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_2 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_3 < 0) {
      __pyx_t_3 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_3 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_3 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1561, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1562
 *             self.wt_vec_with_trial[i, 2] = (
 *                 self.weight_xyz_with_trial[i, 0] *
 *                 (1-self.weight_xyz_with_trial[i, 1]) *             # <<<<<<<<<<<<<<
 *                 self.weight_xyz_with_trial[i, 2]
 *             )
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1562, __pyx_L1_error)}
    __pyx_t_5 = __pyx_v_i;
    __pyx_t_6 = 1;
    __pyx_t_4 = -1;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_5 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_6 < 0) {
      __pyx_t_6 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_6 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_6 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1562, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1563
 *                 self.weight_xyz_with_trial[i, 0] *
 *                 (1-self.weight_xyz_with_trial[i, 1]) *
 *                 self.weight_xyz_with_trial[i, 2]             # <<<<<<<<<<<<<<
 *             )
 * 
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1563, __pyx_L1_error)}
    __pyx_t_7 = __pyx_v_i;
    __pyx_t_8 = 2;
    __pyx_t_4 = -1;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1563, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1560
 * 
 *             # lower_x, upper_y, lower_z
 *             self.wt_vec_with_trial[i, 2] = (             # <<<<<<<<<<<<<<
 *                 self.weight_xyz_with_trial[i, 0] *
 *                 (1-self.weight_xyz_with_trial[i, 1]) *
 */
    if (unlikely(!__pyx_v_self->wt_vec_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1560, __pyx_L1_error)}
    __pyx_t_9 = __pyx_v_i;
    __pyx_t_10 = 2;
    __pyx_t_4 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->wt_vec_with_trial.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->wt_vec_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_self->wt_vec_with_trial.shape[1];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_self->wt_vec_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1560, __pyx_L1_error)
    }
    *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->wt_vec_with_trial.data + __pyx_t_9 * __pyx_v_self->wt_vec_with_trial.strides[0]) )) + __pyx_t_10)) )) = (((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_2 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_3)) ))) * (1.0 - (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_5 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_6)) ))))) * (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_7 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_8)) ))));

    /* "chromo/fields.pyx":1568
 *             # upper_x, upper_y, lower_z
 *             self.wt_vec_with_trial[i, 3] = (
 *                 (1-self.weight_xyz_with_trial[i, 0]) *             # <<<<<<<<<<<<<<
 *                 (1-self.weight_xyz_with_trial[i, 1]) *
 *                 self.weight_xyz_with_trial[i, 2]
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1568, __pyx_L1_error)}
    __pyx_t_8 = __pyx_v_i;
    __pyx_t_7 = 0;
    __pyx_t_4 = -1;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1568, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1569
 *             self.wt_vec_with_trial[i, 3] = (
 *                 (1-self.weight_xyz_with_trial[i, 0]) *
 *                 (1-self.weight_xyz_with_trial[i, 1]) *             # <<<<<<<<<<<<<<
 *                 self.weight_xyz_with_trial[i, 2]
 *             )
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1569, __pyx_L1_error)}
    __pyx_t_6 = __pyx_v_i;
    __pyx_t_5 = 1;
    __pyx_t_4 = -1;
    if (__pyx_t_6 < 0) {
      __pyx_t_6 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_6 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_6 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_5 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1569, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1570
 *                 (1-self.weight_xyz_with_trial[i, 0]) *
 *                 (1-self.weight_xyz_with_trial[i, 1]) *
 *                 self.weight_xyz_with_trial[i, 2]             # <<<<<<<<<<<<<<
 *             )
 * 
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1570, __pyx_L1_error)}
    __pyx_t_3 = __pyx_v_i;
    __pyx_t_2 = 2;
    __pyx_t_4 = -1;
    if (__pyx_t_3 < 0) {
      __pyx_t_3 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_3 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_3 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_2 < 0) {
      __pyx_t_2 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_2 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_2 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1570, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1567
 * 
 *             # upper_x, upper_y, lower_z
 *             self.wt_vec_with_trial[i, 3] = (             # <<<<<<<<<<<<<<
 *                 (1-self.weight_xyz_with_trial[i, 0]) *
 *                 (1-self.weight_xyz_with_trial[i, 1]) *
 */
    if (unlikely(!__pyx_v_self->wt_vec_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1567, __pyx_L1_error)}
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_9 = 3;
    __pyx_t_4 = -1;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_self->wt_vec_with_trial.shape[0];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_self->wt_vec_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->wt_vec_with_trial.shape[1];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->wt_vec_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1567, __pyx_L1_error)
    }
    *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->wt_vec_with_trial.data + __pyx_t_10 * __pyx_v_self->wt_vec_with_trial.strides[0]) )) + __pyx_t_9)) )) = (((1.0 - (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_8 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_7)) )))) * (1.0 - (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_6 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_5)) ))))) * (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_3 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_2)) ))));

    /* "chromo/fields.pyx":1575
 *             # lower_x, lower_y, upper_z
 *             self.wt_vec_with_trial[i, 4] = (
 *                 self.weight_xyz_with_trial[i, 0] *             # <<<<<<<<<<<<<<
 *                 self.weight_xyz_with_trial[i, 1] *
 *                 (1-self.weight_xyz_with_trial[i, 2])
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1575, __pyx_L1_error)}
    __pyx_t_2 = __pyx_v_i;
    __pyx_t_3 = 0;
    __pyx_t_4 = -1;
    if (__pyx_t_2 < 0) {
      __pyx_t_2 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_2 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_2 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_3 < 0) {
      __pyx_t_3 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_3 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_3 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1575, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1576
 *             self.wt_vec_with_trial[i, 4] = (
 *                 self.weight_xyz_with_trial[i, 0] *
 *                 self.weight_xyz_with_trial[i, 1] *             # <<<<<<<<<<<<<<
 *                 (1-self.weight_xyz_with_trial[i, 2])
 *             )
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1576, __pyx_L1_error)}
    __pyx_t_5 = __pyx_v_i;
    __pyx_t_6 = 1;
    __pyx_t_4 = -1;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_5 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_6 < 0) {
      __pyx_t_6 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_6 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_6 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1576, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1577
 *                 self.weight_xyz_with_trial[i, 0] *
 *                 self.weight_xyz_with_trial[i, 1] *
 *                 (1-self.weight_xyz_with_trial[i, 2])             # <<<<<<<<<<<<<<
 *             )
 * 
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1577, __pyx_L1_error)}
    __pyx_t_7 = __pyx_v_i;
    __pyx_t_8 = 2;
    __pyx_t_4 = -1;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1577, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1574
 * 
 *             # lower_x, lower_y, upper_z
 *             self.wt_vec_with_trial[i, 4] = (             # <<<<<<<<<<<<<<
 *                 self.weight_xyz_with_trial[i, 0] *
 *                 self.weight_xyz_with_trial[i, 1] *
 */
    if (unlikely(!__pyx_v_self->wt_vec_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1574, __pyx_L1_error)}
    __pyx_t_9 = __pyx_v_i;
    __pyx_t_10 = 4;
    __pyx_t_4 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->wt_vec_with_trial.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->wt_vec_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_self->wt_vec_with_trial.shape[1];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_self->wt_vec_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1574, __pyx_L1_error)
    }
    *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->wt_vec_with_trial.data + __pyx_t_9 * __pyx_v_self->wt_vec_with_trial.strides[0]) )) + __pyx_t_10)) )) = (((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_2 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_3)) ))) * (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_5 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_6)) )))) * (1.0 - (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_7 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_8)) )))));

    /* "chromo/fields.pyx":1582
 *             # upper_x, lower_y, upper_z
 *             self.wt_vec_with_trial[i, 5] = (
 *                 (1-self.weight_xyz_with_trial[i, 0]) *             # <<<<<<<<<<<<<<
 *                 self.weight_xyz_with_trial[i, 1] *
 *                 (1-self.weight_xyz_with_trial[i, 2])
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1582, __pyx_L1_error)}
    __pyx_t_8 = __pyx_v_i;
    __pyx_t_7 = 0;
    __pyx_t_4 = -1;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1582, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1583
 *             self.wt_vec_with_trial[i, 5] = (
 *                 (1-self.weight_xyz_with_trial[i, 0]) *
 *                 self.weight_xyz_with_trial[i, 1] *             # <<<<<<<<<<<<<<
 *                 (1-self.weight_xyz_with_trial[i, 2])
 *             )
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1583, __pyx_L1_error)}
    __pyx_t_6 = __pyx_v_i;
    __pyx_t_5 = 1;
    __pyx_t_4 = -1;
    if (__pyx_t_6 < 0) {
      __pyx_t_6 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_6 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_6 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_5 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1583, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1584
 *                 (1-self.weight_xyz_with_trial[i, 0]) *
 *                 self.weight_xyz_with_trial[i, 1] *
 *                 (1-self.weight_xyz_with_trial[i, 2])             # <<<<<<<<<<<<<<
 *             )
 * 
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1584, __pyx_L1_error)}
    __pyx_t_3 = __pyx_v_i;
    __pyx_t_2 = 2;
    __pyx_t_4 = -1;
    if (__pyx_t_3 < 0) {
      __pyx_t_3 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_3 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_3 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_2 < 0) {
      __pyx_t_2 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_2 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_2 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1584, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1581
 * 
 *             # upper_x, lower_y, upper_z
 *             self.wt_vec_with_trial[i, 5] = (             # <<<<<<<<<<<<<<
 *                 (1-self.weight_xyz_with_trial[i, 0]) *
 *                 self.weight_xyz_with_trial[i, 1] *
 */
    if (unlikely(!__pyx_v_self->wt_vec_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1581, __pyx_L1_error)}
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_9 = 5;
    __pyx_t_4 = -1;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_self->wt_vec_with_trial.shape[0];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_self->wt_vec_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->wt_vec_with_trial.shape[1];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->wt_vec_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1581, __pyx_L1_error)
    }
    *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->wt_vec_with_trial.data + __pyx_t_10 * __pyx_v_self->wt_vec_with_trial.strides[0]) )) + __pyx_t_9)) )) = (((1.0 - (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_8 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_7)) )))) * (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_6 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_5)) )))) * (1.0 - (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_3 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_2)) )))));

    /* "chromo/fields.pyx":1589
 *             # lower_x, upper_y, upper_z
 *             self.wt_vec_with_trial[i, 6] = (
 *                 self.weight_xyz_with_trial[i, 0] *             # <<<<<<<<<<<<<<
 *                 (1-self.weight_xyz_with_trial[i, 1]) *
 *                 (1-self.weight_xyz_with_trial[i, 2])
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1589, __pyx_L1_error)}
    __pyx_t_2 = __pyx_v_i;
    __pyx_t_3 = 0;
    __pyx_t_4 = -1;
    if (__pyx_t_2 < 0) {
      __pyx_t_2 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_2 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_2 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_3 < 0) {
      __pyx_t_3 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_3 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_3 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1589, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1590
 *             self.wt_vec_with_trial[i, 6] = (
 *                 self.weight_xyz_with_trial[i, 0] *
 *                 (1-self.weight_xyz_with_trial[i, 1]) *             # <<<<<<<<<<<<<<
 *                 (1-self.weight_xyz_with_trial[i, 2])
 *             )
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1590, __pyx_L1_error)}
    __pyx_t_5 = __pyx_v_i;
    __pyx_t_6 = 1;
    __pyx_t_4 = -1;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_5 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_6 < 0) {
      __pyx_t_6 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_6 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_6 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1590, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1591
 *                 self.weight_xyz_with_trial[i, 0] *
 *                 (1-self.weight_xyz_with_trial[i, 1]) *
 *                 (1-self.weight_xyz_with_trial[i, 2])             # <<<<<<<<<<<<<<
 *             )
 *             # upper_x, upper_y, upper_z
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1591, __pyx_L1_error)}
    __pyx_t_7 = __pyx_v_i;
    __pyx_t_8 = 2;
    __pyx_t_4 = -1;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1591, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1588
 * 
 *             # lower_x, upper_y, upper_z
 *             self.wt_vec_with_trial[i, 6] = (             # <<<<<<<<<<<<<<
 *                 self.weight_xyz_with_trial[i, 0] *
 *                 (1-self.weight_xyz_with_trial[i, 1]) *
 */
    if (unlikely(!__pyx_v_self->wt_vec_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1588, __pyx_L1_error)}
    __pyx_t_9 = __pyx_v_i;
    __pyx_t_10 = 6;
    __pyx_t_4 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->wt_vec_with_trial.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->wt_vec_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_self->wt_vec_with_trial.shape[1];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_self->wt_vec_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1588, __pyx_L1_error)
    }
    *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->wt_vec_with_trial.data + __pyx_t_9 * __pyx_v_self->wt_vec_with_trial.strides[0]) )) + __pyx_t_10)) )) = (((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_2 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_3)) ))) * (1.0 - (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_5 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_6)) ))))) * (1.0 - (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_7 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_8)) )))));

    /* "chromo/fields.pyx":1595
 *             # upper_x, upper_y, upper_z
 *             self.wt_vec_with_trial[i, 7] = (
 *                 (1-self.weight_xyz_with_trial[i, 0]) *             # <<<<<<<<<<<<<<
 *                 (1-self.weight_xyz_with_trial[i, 1]) *
 *                 (1-self.weight_xyz_with_trial[i, 2])
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1595, __pyx_L1_error)}
    __pyx_t_8 = __pyx_v_i;
    __pyx_t_7 = 0;
    __pyx_t_4 = -1;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1595, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1596
 *             self.wt_vec_with_trial[i, 7] = (
 *                 (1-self.weight_xyz_with_trial[i, 0]) *
 *                 (1-self.weight_xyz_with_trial[i, 1]) *             # <<<<<<<<<<<<<<
 *                 (1-self.weight_xyz_with_trial[i, 2])
 *             )
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1596, __pyx_L1_error)}
    __pyx_t_6 = __pyx_v_i;
    __pyx_t_5 = 1;
    __pyx_t_4 = -1;
    if (__pyx_t_6 < 0) {
      __pyx_t_6 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_6 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_6 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_5 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1596, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1597
 *                 (1-self.weight_xyz_with_trial[i, 0]) *
 *                 (1-self.weight_xyz_with_trial[i, 1]) *
 *                 (1-self.weight_xyz_with_trial[i, 2])             # <<<<<<<<<<<<<<
 *             )
 * 
 */
    if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1597, __pyx_L1_error)}
    __pyx_t_3 = __pyx_v_i;
    __pyx_t_2 = 2;
    __pyx_t_4 = -1;
    if (__pyx_t_3 < 0) {
      __pyx_t_3 += __pyx_v_self->weight_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_3 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_3 >= __pyx_v_self->weight_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_2 < 0) {
      __pyx_t_2 += __pyx_v_self->weight_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_2 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_2 >= __pyx_v_self->weight_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1597, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1594
 *             )
 *             # upper_x, upper_y, upper_z
 *             self.wt_vec_with_trial[i, 7] = (             # <<<<<<<<<<<<<<
 *                 (1-self.weight_xyz_with_trial[i, 0]) *
 *                 (1-self.weight_xyz_with_trial[i, 1]) *
 */
    if (unlikely(!__pyx_v_self->wt_vec_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1594, __pyx_L1_error)}
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_9 = 7;
    __pyx_t_4 = -1;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_self->wt_vec_with_trial.shape[0];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_self->wt_vec_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->wt_vec_with_trial.shape[1];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->wt_vec_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1594, __pyx_L1_error)
    }
    *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->wt_vec_with_trial.data + __pyx_t_10 * __pyx_v_self->wt_vec_with_trial.strides[0]) )) + __pyx_t_9)) )) = (((1.0 - (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_8 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_7)) )))) * (1.0 - (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_6 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_5)) ))))) * (1.0 - (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz_with_trial.data + __pyx_t_3 * __pyx_v_self->weight_xyz_with_trial.strides[0]) )) + __pyx_t_2)) )))));
  }

  /* "chromo/fields.pyx":1524
 *         return np.array(list(bins_found))
 * 
 *     cdef void _generate_weight_vector_with_trial(self):             # <<<<<<<<<<<<<<
 *         """Generate weight array for eight bins containing the bead.
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("chromo.fields.UniformDensityField._generate_weight_vector_with_trial", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "chromo/fields.pyx":1600
 *             )
 * 
 *     cdef void _generate_index_vector_with_trial(self):             # <<<<<<<<<<<<<<
 *         """Generate vector of eight superindices containing a bead.
 * 
 */

static void __pyx_f_6chromo_6fields_19UniformDensityField__generate_index_vector_with_trial(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  int __pyx_v_i;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_generate_index_vector_with_trial", 0);
  __Pyx_TraceCall("_generate_index_vector_with_trial", __pyx_f[0], 1600, 0, __PYX_ERR(0, 1600, __pyx_L1_error));

  /* "chromo/fields.pyx":1617
 *         """
 *         cdef int i
 *         for i in range(2):             # <<<<<<<<<<<<<<
 * 
 *             # lower_x, lower_y, lower_z
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 2; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "chromo/fields.pyx":1620
 * 
 *             # lower_x, lower_y, lower_z
 *             self.nbr_inds_with_trial[i, 0] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *                 (self.index_xyz_with_trial[i, 0]),
 *                 (self.index_xyz_with_trial[i, 1]),
 */
    if (unlikely(!__pyx_v_self->inds_xyz_to_super.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1620, __pyx_L1_error)}

    /* "chromo/fields.pyx":1621
 *             # lower_x, lower_y, lower_z
 *             self.nbr_inds_with_trial[i, 0] = self.inds_xyz_to_super[
 *                 (self.index_xyz_with_trial[i, 0]),             # <<<<<<<<<<<<<<
 *                 (self.index_xyz_with_trial[i, 1]),
 *                 (self.index_xyz_with_trial[i, 2])
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1621, __pyx_L1_error)}
    __pyx_t_2 = __pyx_v_i;
    __pyx_t_3 = 0;
    __pyx_t_4 = -1;
    if (__pyx_t_2 < 0) {
      __pyx_t_2 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_2 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_2 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_3 < 0) {
      __pyx_t_3 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_3 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_3 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1621, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1622
 *             self.nbr_inds_with_trial[i, 0] = self.inds_xyz_to_super[
 *                 (self.index_xyz_with_trial[i, 0]),
 *                 (self.index_xyz_with_trial[i, 1]),             # <<<<<<<<<<<<<<
 *                 (self.index_xyz_with_trial[i, 2])
 *             ]
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1622, __pyx_L1_error)}
    __pyx_t_5 = __pyx_v_i;
    __pyx_t_6 = 1;
    __pyx_t_4 = -1;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_5 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_6 < 0) {
      __pyx_t_6 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_6 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_6 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1622, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1623
 *                 (self.index_xyz_with_trial[i, 0]),
 *                 (self.index_xyz_with_trial[i, 1]),
 *                 (self.index_xyz_with_trial[i, 2])             # <<<<<<<<<<<<<<
 *             ]
 * 
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1623, __pyx_L1_error)}
    __pyx_t_7 = __pyx_v_i;
    __pyx_t_8 = 2;
    __pyx_t_4 = -1;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1623, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1620
 * 
 *             # lower_x, lower_y, lower_z
 *             self.nbr_inds_with_trial[i, 0] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *                 (self.index_xyz_with_trial[i, 0]),
 *                 (self.index_xyz_with_trial[i, 1]),
 */
    __pyx_t_9 = (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_2 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_3)) )));
    __pyx_t_10 = (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_5 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_6)) )));
    __pyx_t_11 = (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_7 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_8)) )));
    __pyx_t_4 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->inds_xyz_to_super.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->inds_xyz_to_super.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_self->inds_xyz_to_super.shape[1];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_self->inds_xyz_to_super.shape[1])) __pyx_t_4 = 1;
    if (__pyx_t_11 < 0) {
      __pyx_t_11 += __pyx_v_self->inds_xyz_to_super.shape[2];
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_4 = 2;
    } else if (unlikely(__pyx_t_11 >= __pyx_v_self->inds_xyz_to_super.shape[2])) __pyx_t_4 = 2;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1620, __pyx_L1_error)
    }
    if (unlikely(!__pyx_v_self->nbr_inds_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1620, __pyx_L1_error)}
    __pyx_t_12 = __pyx_v_i;
    __pyx_t_13 = 0;
    __pyx_t_4 = -1;
    if (__pyx_t_12 < 0) {
      __pyx_t_12 += __pyx_v_self->nbr_inds_with_trial.shape[0];
      if (unlikely(__pyx_t_12 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_12 >= __pyx_v_self->nbr_inds_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_13 < 0) {
      __pyx_t_13 += __pyx_v_self->nbr_inds_with_trial.shape[1];
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_13 >= __pyx_v_self->nbr_inds_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1620, __pyx_L1_error)
    }
    *((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds_with_trial.data + __pyx_t_12 * __pyx_v_self->nbr_inds_with_trial.strides[0]) )) + __pyx_t_13)) )) = (*((long *) ( /* dim=2 */ ((char *) (((long *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->inds_xyz_to_super.data + __pyx_t_9 * __pyx_v_self->inds_xyz_to_super.strides[0]) ) + __pyx_t_10 * __pyx_v_self->inds_xyz_to_super.strides[1]) )) + __pyx_t_11)) )));

    /* "chromo/fields.pyx":1627
 * 
 *             # upper_x, lower_y, lower_z
 *             self.nbr_inds_with_trial[i, 1] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *                 (1 + self.index_xyz_with_trial[i, 0]),
 *                 (self.index_xyz_with_trial[i, 1]),
 */
    if (unlikely(!__pyx_v_self->inds_xyz_to_super.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1627, __pyx_L1_error)}

    /* "chromo/fields.pyx":1628
 *             # upper_x, lower_y, lower_z
 *             self.nbr_inds_with_trial[i, 1] = self.inds_xyz_to_super[
 *                 (1 + self.index_xyz_with_trial[i, 0]),             # <<<<<<<<<<<<<<
 *                 (self.index_xyz_with_trial[i, 1]),
 *                 (self.index_xyz_with_trial[i, 2])
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1628, __pyx_L1_error)}
    __pyx_t_8 = __pyx_v_i;
    __pyx_t_7 = 0;
    __pyx_t_4 = -1;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1628, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1629
 *             self.nbr_inds_with_trial[i, 1] = self.inds_xyz_to_super[
 *                 (1 + self.index_xyz_with_trial[i, 0]),
 *                 (self.index_xyz_with_trial[i, 1]),             # <<<<<<<<<<<<<<
 *                 (self.index_xyz_with_trial[i, 2])
 *             ]
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1629, __pyx_L1_error)}
    __pyx_t_6 = __pyx_v_i;
    __pyx_t_5 = 1;
    __pyx_t_4 = -1;
    if (__pyx_t_6 < 0) {
      __pyx_t_6 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_6 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_6 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_5 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1629, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1630
 *                 (1 + self.index_xyz_with_trial[i, 0]),
 *                 (self.index_xyz_with_trial[i, 1]),
 *                 (self.index_xyz_with_trial[i, 2])             # <<<<<<<<<<<<<<
 *             ]
 * 
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1630, __pyx_L1_error)}
    __pyx_t_3 = __pyx_v_i;
    __pyx_t_2 = 2;
    __pyx_t_4 = -1;
    if (__pyx_t_3 < 0) {
      __pyx_t_3 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_3 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_3 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_2 < 0) {
      __pyx_t_2 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_2 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_2 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1630, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1627
 * 
 *             # upper_x, lower_y, lower_z
 *             self.nbr_inds_with_trial[i, 1] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *                 (1 + self.index_xyz_with_trial[i, 0]),
 *                 (self.index_xyz_with_trial[i, 1]),
 */
    __pyx_t_11 = (1 + (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_8 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_7)) ))));
    __pyx_t_10 = (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_6 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_5)) )));
    __pyx_t_9 = (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_3 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_2)) )));
    __pyx_t_4 = -1;
    if (__pyx_t_11 < 0) {
      __pyx_t_11 += __pyx_v_self->inds_xyz_to_super.shape[0];
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_11 >= __pyx_v_self->inds_xyz_to_super.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_self->inds_xyz_to_super.shape[1];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_self->inds_xyz_to_super.shape[1])) __pyx_t_4 = 1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->inds_xyz_to_super.shape[2];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_4 = 2;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->inds_xyz_to_super.shape[2])) __pyx_t_4 = 2;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1627, __pyx_L1_error)
    }
    if (unlikely(!__pyx_v_self->nbr_inds_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1627, __pyx_L1_error)}
    __pyx_t_13 = __pyx_v_i;
    __pyx_t_12 = 1;
    __pyx_t_4 = -1;
    if (__pyx_t_13 < 0) {
      __pyx_t_13 += __pyx_v_self->nbr_inds_with_trial.shape[0];
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_13 >= __pyx_v_self->nbr_inds_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_12 < 0) {
      __pyx_t_12 += __pyx_v_self->nbr_inds_with_trial.shape[1];
      if (unlikely(__pyx_t_12 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_12 >= __pyx_v_self->nbr_inds_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1627, __pyx_L1_error)
    }
    *((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds_with_trial.data + __pyx_t_13 * __pyx_v_self->nbr_inds_with_trial.strides[0]) )) + __pyx_t_12)) )) = (*((long *) ( /* dim=2 */ ((char *) (((long *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->inds_xyz_to_super.data + __pyx_t_11 * __pyx_v_self->inds_xyz_to_super.strides[0]) ) + __pyx_t_10 * __pyx_v_self->inds_xyz_to_super.strides[1]) )) + __pyx_t_9)) )));

    /* "chromo/fields.pyx":1634
 * 
 *             # lower_x, upper_y, lower_z
 *             self.nbr_inds_with_trial[i, 2] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *                 (self.index_xyz_with_trial[i, 0]),
 *                 (1 + self.index_xyz_with_trial[i, 1]),
 */
    if (unlikely(!__pyx_v_self->inds_xyz_to_super.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1634, __pyx_L1_error)}

    /* "chromo/fields.pyx":1635
 *             # lower_x, upper_y, lower_z
 *             self.nbr_inds_with_trial[i, 2] = self.inds_xyz_to_super[
 *                 (self.index_xyz_with_trial[i, 0]),             # <<<<<<<<<<<<<<
 *                 (1 + self.index_xyz_with_trial[i, 1]),
 *                 (self.index_xyz_with_trial[i, 2])
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1635, __pyx_L1_error)}
    __pyx_t_2 = __pyx_v_i;
    __pyx_t_3 = 0;
    __pyx_t_4 = -1;
    if (__pyx_t_2 < 0) {
      __pyx_t_2 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_2 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_2 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_3 < 0) {
      __pyx_t_3 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_3 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_3 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1635, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1636
 *             self.nbr_inds_with_trial[i, 2] = self.inds_xyz_to_super[
 *                 (self.index_xyz_with_trial[i, 0]),
 *                 (1 + self.index_xyz_with_trial[i, 1]),             # <<<<<<<<<<<<<<
 *                 (self.index_xyz_with_trial[i, 2])
 *             ]
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1636, __pyx_L1_error)}
    __pyx_t_5 = __pyx_v_i;
    __pyx_t_6 = 1;
    __pyx_t_4 = -1;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_5 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_6 < 0) {
      __pyx_t_6 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_6 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_6 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1636, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1637
 *                 (self.index_xyz_with_trial[i, 0]),
 *                 (1 + self.index_xyz_with_trial[i, 1]),
 *                 (self.index_xyz_with_trial[i, 2])             # <<<<<<<<<<<<<<
 *             ]
 * 
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1637, __pyx_L1_error)}
    __pyx_t_7 = __pyx_v_i;
    __pyx_t_8 = 2;
    __pyx_t_4 = -1;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1637, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1634
 * 
 *             # lower_x, upper_y, lower_z
 *             self.nbr_inds_with_trial[i, 2] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *                 (self.index_xyz_with_trial[i, 0]),
 *                 (1 + self.index_xyz_with_trial[i, 1]),
 */
    __pyx_t_9 = (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_2 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_3)) )));
    __pyx_t_10 = (1 + (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_5 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_6)) ))));
    __pyx_t_11 = (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_7 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_8)) )));
    __pyx_t_4 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->inds_xyz_to_super.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->inds_xyz_to_super.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_self->inds_xyz_to_super.shape[1];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_self->inds_xyz_to_super.shape[1])) __pyx_t_4 = 1;
    if (__pyx_t_11 < 0) {
      __pyx_t_11 += __pyx_v_self->inds_xyz_to_super.shape[2];
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_4 = 2;
    } else if (unlikely(__pyx_t_11 >= __pyx_v_self->inds_xyz_to_super.shape[2])) __pyx_t_4 = 2;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1634, __pyx_L1_error)
    }
    if (unlikely(!__pyx_v_self->nbr_inds_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1634, __pyx_L1_error)}
    __pyx_t_12 = __pyx_v_i;
    __pyx_t_13 = 2;
    __pyx_t_4 = -1;
    if (__pyx_t_12 < 0) {
      __pyx_t_12 += __pyx_v_self->nbr_inds_with_trial.shape[0];
      if (unlikely(__pyx_t_12 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_12 >= __pyx_v_self->nbr_inds_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_13 < 0) {
      __pyx_t_13 += __pyx_v_self->nbr_inds_with_trial.shape[1];
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_13 >= __pyx_v_self->nbr_inds_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1634, __pyx_L1_error)
    }
    *((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds_with_trial.data + __pyx_t_12 * __pyx_v_self->nbr_inds_with_trial.strides[0]) )) + __pyx_t_13)) )) = (*((long *) ( /* dim=2 */ ((char *) (((long *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->inds_xyz_to_super.data + __pyx_t_9 * __pyx_v_self->inds_xyz_to_super.strides[0]) ) + __pyx_t_10 * __pyx_v_self->inds_xyz_to_super.strides[1]) )) + __pyx_t_11)) )));

    /* "chromo/fields.pyx":1641
 * 
 *             # upper_x, upper_y, lower_z
 *             self.nbr_inds_with_trial[i, 3] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *                 (1 + self.index_xyz_with_trial[i, 0]),
 *                 (1 + self.index_xyz_with_trial[i, 1]),
 */
    if (unlikely(!__pyx_v_self->inds_xyz_to_super.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1641, __pyx_L1_error)}

    /* "chromo/fields.pyx":1642
 *             # upper_x, upper_y, lower_z
 *             self.nbr_inds_with_trial[i, 3] = self.inds_xyz_to_super[
 *                 (1 + self.index_xyz_with_trial[i, 0]),             # <<<<<<<<<<<<<<
 *                 (1 + self.index_xyz_with_trial[i, 1]),
 *                 (self.index_xyz_with_trial[i, 2])
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1642, __pyx_L1_error)}
    __pyx_t_8 = __pyx_v_i;
    __pyx_t_7 = 0;
    __pyx_t_4 = -1;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1642, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1643
 *             self.nbr_inds_with_trial[i, 3] = self.inds_xyz_to_super[
 *                 (1 + self.index_xyz_with_trial[i, 0]),
 *                 (1 + self.index_xyz_with_trial[i, 1]),             # <<<<<<<<<<<<<<
 *                 (self.index_xyz_with_trial[i, 2])
 *             ]
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1643, __pyx_L1_error)}
    __pyx_t_6 = __pyx_v_i;
    __pyx_t_5 = 1;
    __pyx_t_4 = -1;
    if (__pyx_t_6 < 0) {
      __pyx_t_6 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_6 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_6 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_5 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1643, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1644
 *                 (1 + self.index_xyz_with_trial[i, 0]),
 *                 (1 + self.index_xyz_with_trial[i, 1]),
 *                 (self.index_xyz_with_trial[i, 2])             # <<<<<<<<<<<<<<
 *             ]
 * 
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1644, __pyx_L1_error)}
    __pyx_t_3 = __pyx_v_i;
    __pyx_t_2 = 2;
    __pyx_t_4 = -1;
    if (__pyx_t_3 < 0) {
      __pyx_t_3 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_3 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_3 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_2 < 0) {
      __pyx_t_2 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_2 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_2 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1644, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1641
 * 
 *             # upper_x, upper_y, lower_z
 *             self.nbr_inds_with_trial[i, 3] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *                 (1 + self.index_xyz_with_trial[i, 0]),
 *                 (1 + self.index_xyz_with_trial[i, 1]),
 */
    __pyx_t_11 = (1 + (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_8 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_7)) ))));
    __pyx_t_10 = (1 + (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_6 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_5)) ))));
    __pyx_t_9 = (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_3 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_2)) )));
    __pyx_t_4 = -1;
    if (__pyx_t_11 < 0) {
      __pyx_t_11 += __pyx_v_self->inds_xyz_to_super.shape[0];
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_11 >= __pyx_v_self->inds_xyz_to_super.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_self->inds_xyz_to_super.shape[1];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_self->inds_xyz_to_super.shape[1])) __pyx_t_4 = 1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->inds_xyz_to_super.shape[2];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_4 = 2;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->inds_xyz_to_super.shape[2])) __pyx_t_4 = 2;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1641, __pyx_L1_error)
    }
    if (unlikely(!__pyx_v_self->nbr_inds_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1641, __pyx_L1_error)}
    __pyx_t_13 = __pyx_v_i;
    __pyx_t_12 = 3;
    __pyx_t_4 = -1;
    if (__pyx_t_13 < 0) {
      __pyx_t_13 += __pyx_v_self->nbr_inds_with_trial.shape[0];
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_13 >= __pyx_v_self->nbr_inds_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_12 < 0) {
      __pyx_t_12 += __pyx_v_self->nbr_inds_with_trial.shape[1];
      if (unlikely(__pyx_t_12 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_12 >= __pyx_v_self->nbr_inds_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1641, __pyx_L1_error)
    }
    *((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds_with_trial.data + __pyx_t_13 * __pyx_v_self->nbr_inds_with_trial.strides[0]) )) + __pyx_t_12)) )) = (*((long *) ( /* dim=2 */ ((char *) (((long *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->inds_xyz_to_super.data + __pyx_t_11 * __pyx_v_self->inds_xyz_to_super.strides[0]) ) + __pyx_t_10 * __pyx_v_self->inds_xyz_to_super.strides[1]) )) + __pyx_t_9)) )));

    /* "chromo/fields.pyx":1648
 * 
 *             # lower_x, lower_y, upper_z
 *             self.nbr_inds_with_trial[i, 4] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *                 (self.index_xyz_with_trial[i, 0]),
 *                 (self.index_xyz_with_trial[i, 1]),
 */
    if (unlikely(!__pyx_v_self->inds_xyz_to_super.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1648, __pyx_L1_error)}

    /* "chromo/fields.pyx":1649
 *             # lower_x, lower_y, upper_z
 *             self.nbr_inds_with_trial[i, 4] = self.inds_xyz_to_super[
 *                 (self.index_xyz_with_trial[i, 0]),             # <<<<<<<<<<<<<<
 *                 (self.index_xyz_with_trial[i, 1]),
 *                 (1 + self.index_xyz_with_trial[i, 2])
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1649, __pyx_L1_error)}
    __pyx_t_2 = __pyx_v_i;
    __pyx_t_3 = 0;
    __pyx_t_4 = -1;
    if (__pyx_t_2 < 0) {
      __pyx_t_2 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_2 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_2 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_3 < 0) {
      __pyx_t_3 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_3 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_3 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1649, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1650
 *             self.nbr_inds_with_trial[i, 4] = self.inds_xyz_to_super[
 *                 (self.index_xyz_with_trial[i, 0]),
 *                 (self.index_xyz_with_trial[i, 1]),             # <<<<<<<<<<<<<<
 *                 (1 + self.index_xyz_with_trial[i, 2])
 *             ]
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1650, __pyx_L1_error)}
    __pyx_t_5 = __pyx_v_i;
    __pyx_t_6 = 1;
    __pyx_t_4 = -1;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_5 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_6 < 0) {
      __pyx_t_6 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_6 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_6 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1650, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1651
 *                 (self.index_xyz_with_trial[i, 0]),
 *                 (self.index_xyz_with_trial[i, 1]),
 *                 (1 + self.index_xyz_with_trial[i, 2])             # <<<<<<<<<<<<<<
 *             ]
 * 
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1651, __pyx_L1_error)}
    __pyx_t_7 = __pyx_v_i;
    __pyx_t_8 = 2;
    __pyx_t_4 = -1;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1651, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1648
 * 
 *             # lower_x, lower_y, upper_z
 *             self.nbr_inds_with_trial[i, 4] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *                 (self.index_xyz_with_trial[i, 0]),
 *                 (self.index_xyz_with_trial[i, 1]),
 */
    __pyx_t_9 = (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_2 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_3)) )));
    __pyx_t_10 = (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_5 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_6)) )));
    __pyx_t_11 = (1 + (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_7 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_8)) ))));
    __pyx_t_4 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->inds_xyz_to_super.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->inds_xyz_to_super.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_self->inds_xyz_to_super.shape[1];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_self->inds_xyz_to_super.shape[1])) __pyx_t_4 = 1;
    if (__pyx_t_11 < 0) {
      __pyx_t_11 += __pyx_v_self->inds_xyz_to_super.shape[2];
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_4 = 2;
    } else if (unlikely(__pyx_t_11 >= __pyx_v_self->inds_xyz_to_super.shape[2])) __pyx_t_4 = 2;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1648, __pyx_L1_error)
    }
    if (unlikely(!__pyx_v_self->nbr_inds_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1648, __pyx_L1_error)}
    __pyx_t_12 = __pyx_v_i;
    __pyx_t_13 = 4;
    __pyx_t_4 = -1;
    if (__pyx_t_12 < 0) {
      __pyx_t_12 += __pyx_v_self->nbr_inds_with_trial.shape[0];
      if (unlikely(__pyx_t_12 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_12 >= __pyx_v_self->nbr_inds_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_13 < 0) {
      __pyx_t_13 += __pyx_v_self->nbr_inds_with_trial.shape[1];
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_13 >= __pyx_v_self->nbr_inds_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1648, __pyx_L1_error)
    }
    *((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds_with_trial.data + __pyx_t_12 * __pyx_v_self->nbr_inds_with_trial.strides[0]) )) + __pyx_t_13)) )) = (*((long *) ( /* dim=2 */ ((char *) (((long *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->inds_xyz_to_super.data + __pyx_t_9 * __pyx_v_self->inds_xyz_to_super.strides[0]) ) + __pyx_t_10 * __pyx_v_self->inds_xyz_to_super.strides[1]) )) + __pyx_t_11)) )));

    /* "chromo/fields.pyx":1655
 * 
 *             # upper_x, lower_y, upper_z
 *             self.nbr_inds_with_trial[i, 5] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *                 (1 + self.index_xyz_with_trial[i, 0]),
 *                 (self.index_xyz_with_trial[i, 1]),
 */
    if (unlikely(!__pyx_v_self->inds_xyz_to_super.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1655, __pyx_L1_error)}

    /* "chromo/fields.pyx":1656
 *             # upper_x, lower_y, upper_z
 *             self.nbr_inds_with_trial[i, 5] = self.inds_xyz_to_super[
 *                 (1 + self.index_xyz_with_trial[i, 0]),             # <<<<<<<<<<<<<<
 *                 (self.index_xyz_with_trial[i, 1]),
 *                 (1 + self.index_xyz_with_trial[i, 2])
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1656, __pyx_L1_error)}
    __pyx_t_8 = __pyx_v_i;
    __pyx_t_7 = 0;
    __pyx_t_4 = -1;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1656, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1657
 *             self.nbr_inds_with_trial[i, 5] = self.inds_xyz_to_super[
 *                 (1 + self.index_xyz_with_trial[i, 0]),
 *                 (self.index_xyz_with_trial[i, 1]),             # <<<<<<<<<<<<<<
 *                 (1 + self.index_xyz_with_trial[i, 2])
 *             ]
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1657, __pyx_L1_error)}
    __pyx_t_6 = __pyx_v_i;
    __pyx_t_5 = 1;
    __pyx_t_4 = -1;
    if (__pyx_t_6 < 0) {
      __pyx_t_6 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_6 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_6 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_5 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1657, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1658
 *                 (1 + self.index_xyz_with_trial[i, 0]),
 *                 (self.index_xyz_with_trial[i, 1]),
 *                 (1 + self.index_xyz_with_trial[i, 2])             # <<<<<<<<<<<<<<
 *             ]
 * 
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1658, __pyx_L1_error)}
    __pyx_t_3 = __pyx_v_i;
    __pyx_t_2 = 2;
    __pyx_t_4 = -1;
    if (__pyx_t_3 < 0) {
      __pyx_t_3 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_3 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_3 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_2 < 0) {
      __pyx_t_2 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_2 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_2 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1658, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1655
 * 
 *             # upper_x, lower_y, upper_z
 *             self.nbr_inds_with_trial[i, 5] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *                 (1 + self.index_xyz_with_trial[i, 0]),
 *                 (self.index_xyz_with_trial[i, 1]),
 */
    __pyx_t_11 = (1 + (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_8 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_7)) ))));
    __pyx_t_10 = (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_6 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_5)) )));
    __pyx_t_9 = (1 + (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_3 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_2)) ))));
    __pyx_t_4 = -1;
    if (__pyx_t_11 < 0) {
      __pyx_t_11 += __pyx_v_self->inds_xyz_to_super.shape[0];
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_11 >= __pyx_v_self->inds_xyz_to_super.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_self->inds_xyz_to_super.shape[1];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_self->inds_xyz_to_super.shape[1])) __pyx_t_4 = 1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->inds_xyz_to_super.shape[2];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_4 = 2;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->inds_xyz_to_super.shape[2])) __pyx_t_4 = 2;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1655, __pyx_L1_error)
    }
    if (unlikely(!__pyx_v_self->nbr_inds_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1655, __pyx_L1_error)}
    __pyx_t_13 = __pyx_v_i;
    __pyx_t_12 = 5;
    __pyx_t_4 = -1;
    if (__pyx_t_13 < 0) {
      __pyx_t_13 += __pyx_v_self->nbr_inds_with_trial.shape[0];
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_13 >= __pyx_v_self->nbr_inds_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_12 < 0) {
      __pyx_t_12 += __pyx_v_self->nbr_inds_with_trial.shape[1];
      if (unlikely(__pyx_t_12 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_12 >= __pyx_v_self->nbr_inds_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1655, __pyx_L1_error)
    }
    *((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds_with_trial.data + __pyx_t_13 * __pyx_v_self->nbr_inds_with_trial.strides[0]) )) + __pyx_t_12)) )) = (*((long *) ( /* dim=2 */ ((char *) (((long *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->inds_xyz_to_super.data + __pyx_t_11 * __pyx_v_self->inds_xyz_to_super.strides[0]) ) + __pyx_t_10 * __pyx_v_self->inds_xyz_to_super.strides[1]) )) + __pyx_t_9)) )));

    /* "chromo/fields.pyx":1662
 * 
 *             # lower_x, upper_y, upper_z
 *             self.nbr_inds_with_trial[i, 6] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *                 (self.index_xyz_with_trial[i, 0]),
 *                 (1 + self.index_xyz_with_trial[i, 1]),
 */
    if (unlikely(!__pyx_v_self->inds_xyz_to_super.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1662, __pyx_L1_error)}

    /* "chromo/fields.pyx":1663
 *             # lower_x, upper_y, upper_z
 *             self.nbr_inds_with_trial[i, 6] = self.inds_xyz_to_super[
 *                 (self.index_xyz_with_trial[i, 0]),             # <<<<<<<<<<<<<<
 *                 (1 + self.index_xyz_with_trial[i, 1]),
 *                 (1 + self.index_xyz_with_trial[i, 2])
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1663, __pyx_L1_error)}
    __pyx_t_2 = __pyx_v_i;
    __pyx_t_3 = 0;
    __pyx_t_4 = -1;
    if (__pyx_t_2 < 0) {
      __pyx_t_2 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_2 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_2 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_3 < 0) {
      __pyx_t_3 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_3 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_3 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1663, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1664
 *             self.nbr_inds_with_trial[i, 6] = self.inds_xyz_to_super[
 *                 (self.index_xyz_with_trial[i, 0]),
 *                 (1 + self.index_xyz_with_trial[i, 1]),             # <<<<<<<<<<<<<<
 *                 (1 + self.index_xyz_with_trial[i, 2])
 *             ]
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1664, __pyx_L1_error)}
    __pyx_t_5 = __pyx_v_i;
    __pyx_t_6 = 1;
    __pyx_t_4 = -1;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_5 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_6 < 0) {
      __pyx_t_6 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_6 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_6 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1664, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1665
 *                 (self.index_xyz_with_trial[i, 0]),
 *                 (1 + self.index_xyz_with_trial[i, 1]),
 *                 (1 + self.index_xyz_with_trial[i, 2])             # <<<<<<<<<<<<<<
 *             ]
 * 
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1665, __pyx_L1_error)}
    __pyx_t_7 = __pyx_v_i;
    __pyx_t_8 = 2;
    __pyx_t_4 = -1;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1665, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1662
 * 
 *             # lower_x, upper_y, upper_z
 *             self.nbr_inds_with_trial[i, 6] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *                 (self.index_xyz_with_trial[i, 0]),
 *                 (1 + self.index_xyz_with_trial[i, 1]),
 */
    __pyx_t_9 = (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_2 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_3)) )));
    __pyx_t_10 = (1 + (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_5 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_6)) ))));
    __pyx_t_11 = (1 + (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_7 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_8)) ))));
    __pyx_t_4 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->inds_xyz_to_super.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->inds_xyz_to_super.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_self->inds_xyz_to_super.shape[1];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_self->inds_xyz_to_super.shape[1])) __pyx_t_4 = 1;
    if (__pyx_t_11 < 0) {
      __pyx_t_11 += __pyx_v_self->inds_xyz_to_super.shape[2];
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_4 = 2;
    } else if (unlikely(__pyx_t_11 >= __pyx_v_self->inds_xyz_to_super.shape[2])) __pyx_t_4 = 2;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1662, __pyx_L1_error)
    }
    if (unlikely(!__pyx_v_self->nbr_inds_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1662, __pyx_L1_error)}
    __pyx_t_12 = __pyx_v_i;
    __pyx_t_13 = 6;
    __pyx_t_4 = -1;
    if (__pyx_t_12 < 0) {
      __pyx_t_12 += __pyx_v_self->nbr_inds_with_trial.shape[0];
      if (unlikely(__pyx_t_12 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_12 >= __pyx_v_self->nbr_inds_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_13 < 0) {
      __pyx_t_13 += __pyx_v_self->nbr_inds_with_trial.shape[1];
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_13 >= __pyx_v_self->nbr_inds_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1662, __pyx_L1_error)
    }
    *((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds_with_trial.data + __pyx_t_12 * __pyx_v_self->nbr_inds_with_trial.strides[0]) )) + __pyx_t_13)) )) = (*((long *) ( /* dim=2 */ ((char *) (((long *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->inds_xyz_to_super.data + __pyx_t_9 * __pyx_v_self->inds_xyz_to_super.strides[0]) ) + __pyx_t_10 * __pyx_v_self->inds_xyz_to_super.strides[1]) )) + __pyx_t_11)) )));

    /* "chromo/fields.pyx":1669
 * 
 *             # upper_x, upper_y, upper_z
 *             self.nbr_inds_with_trial[i, 7] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *                 (1 + self.index_xyz_with_trial[i, 0]),
 *                 (1 + self.index_xyz_with_trial[i, 1]),
 */
    if (unlikely(!__pyx_v_self->inds_xyz_to_super.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1669, __pyx_L1_error)}

    /* "chromo/fields.pyx":1670
 *             # upper_x, upper_y, upper_z
 *             self.nbr_inds_with_trial[i, 7] = self.inds_xyz_to_super[
 *                 (1 + self.index_xyz_with_trial[i, 0]),             # <<<<<<<<<<<<<<
 *                 (1 + self.index_xyz_with_trial[i, 1]),
 *                 (1 + self.index_xyz_with_trial[i, 2])
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1670, __pyx_L1_error)}
    __pyx_t_8 = __pyx_v_i;
    __pyx_t_7 = 0;
    __pyx_t_4 = -1;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_7 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1670, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1671
 *             self.nbr_inds_with_trial[i, 7] = self.inds_xyz_to_super[
 *                 (1 + self.index_xyz_with_trial[i, 0]),
 *                 (1 + self.index_xyz_with_trial[i, 1]),             # <<<<<<<<<<<<<<
 *                 (1 + self.index_xyz_with_trial[i, 2])
 *             ]
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1671, __pyx_L1_error)}
    __pyx_t_6 = __pyx_v_i;
    __pyx_t_5 = 1;
    __pyx_t_4 = -1;
    if (__pyx_t_6 < 0) {
      __pyx_t_6 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_6 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_6 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_5 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1671, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1672
 *                 (1 + self.index_xyz_with_trial[i, 0]),
 *                 (1 + self.index_xyz_with_trial[i, 1]),
 *                 (1 + self.index_xyz_with_trial[i, 2])             # <<<<<<<<<<<<<<
 *             ]
 * 
 */
    if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1672, __pyx_L1_error)}
    __pyx_t_3 = __pyx_v_i;
    __pyx_t_2 = 2;
    __pyx_t_4 = -1;
    if (__pyx_t_3 < 0) {
      __pyx_t_3 += __pyx_v_self->index_xyz_with_trial.shape[0];
      if (unlikely(__pyx_t_3 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_3 >= __pyx_v_self->index_xyz_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_2 < 0) {
      __pyx_t_2 += __pyx_v_self->index_xyz_with_trial.shape[1];
      if (unlikely(__pyx_t_2 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_2 >= __pyx_v_self->index_xyz_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1672, __pyx_L1_error)
    }

    /* "chromo/fields.pyx":1669
 * 
 *             # upper_x, upper_y, upper_z
 *             self.nbr_inds_with_trial[i, 7] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *                 (1 + self.index_xyz_with_trial[i, 0]),
 *                 (1 + self.index_xyz_with_trial[i, 1]),
 */
    __pyx_t_11 = (1 + (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_8 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_7)) ))));
    __pyx_t_10 = (1 + (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_6 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_5)) ))));
    __pyx_t_9 = (1 + (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz_with_trial.data + __pyx_t_3 * __pyx_v_self->index_xyz_with_trial.strides[0]) )) + __pyx_t_2)) ))));
    __pyx_t_4 = -1;
    if (__pyx_t_11 < 0) {
      __pyx_t_11 += __pyx_v_self->inds_xyz_to_super.shape[0];
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_11 >= __pyx_v_self->inds_xyz_to_super.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_self->inds_xyz_to_super.shape[1];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_self->inds_xyz_to_super.shape[1])) __pyx_t_4 = 1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->inds_xyz_to_super.shape[2];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_4 = 2;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->inds_xyz_to_super.shape[2])) __pyx_t_4 = 2;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1669, __pyx_L1_error)
    }
    if (unlikely(!__pyx_v_self->nbr_inds_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1669, __pyx_L1_error)}
    __pyx_t_13 = __pyx_v_i;
    __pyx_t_12 = 7;
    __pyx_t_4 = -1;
    if (__pyx_t_13 < 0) {
      __pyx_t_13 += __pyx_v_self->nbr_inds_with_trial.shape[0];
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_4 = 0;
    } else if (unlikely(__pyx_t_13 >= __pyx_v_self->nbr_inds_with_trial.shape[0])) __pyx_t_4 = 0;
    if (__pyx_t_12 < 0) {
      __pyx_t_12 += __pyx_v_self->nbr_inds_with_trial.shape[1];
      if (unlikely(__pyx_t_12 < 0)) __pyx_t_4 = 1;
    } else if (unlikely(__pyx_t_12 >= __pyx_v_self->nbr_inds_with_trial.shape[1])) __pyx_t_4 = 1;
    if (unlikely(__pyx_t_4 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_4);
      __PYX_ERR(0, 1669, __pyx_L1_error)
    }
    *((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds_with_trial.data + __pyx_t_13 * __pyx_v_self->nbr_inds_with_trial.strides[0]) )) + __pyx_t_12)) )) = (*((long *) ( /* dim=2 */ ((char *) (((long *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->inds_xyz_to_super.data + __pyx_t_11 * __pyx_v_self->inds_xyz_to_super.strides[0]) ) + __pyx_t_10 * __pyx_v_self->inds_xyz_to_super.strides[1]) )) + __pyx_t_9)) )));
  }

  /* "chromo/fields.pyx":1600
 *             )
 * 
 *     cdef void _generate_index_vector_with_trial(self):             # <<<<<<<<<<<<<<
 *         """Generate vector of eight superindices containing a bead.
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("chromo.fields.UniformDensityField._generate_index_vector_with_trial", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "chromo/fields.pyx":1675
 *             ]
 * 
 *     cdef double get_dE_binders_and_beads(             # <<<<<<<<<<<<<<
 *         self, poly.PolymerBase poly, long[:] inds, long n_inds,
 *         long[:] bin_inds, bint state_change
 */

static double __pyx_f_6chromo_6fields_19UniformDensityField_get_dE_binders_and_beads(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, __Pyx_memviewslice __pyx_v_inds, long __pyx_v_n_inds, __Pyx_memviewslice __pyx_v_bin_inds, int __pyx_v_state_change) {
  long __pyx_v_n_bins;
  long __pyx_v_i;
  long __pyx_v_j;
  double __pyx_v_tot_density_change;
  double __pyx_v_dE_binders_beads;
  __Pyx_memviewslice __pyx_v_delta_rho_squared = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_delta_rho_interact_squared = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_binder_info = 0;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_n_double_bound = NULL;
  PyObject *__pyx_v_next_binder_info = NULL;
  PyObject *__pyx_v_tot_density_change_interact = NULL;
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_7 = NULL;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_t_9;
  long __pyx_t_10;
  long __pyx_t_11;
  long __pyx_t_12;
  long __pyx_t_13;
  long __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  PyObject *(*__pyx_t_28)(PyObject *);
  Py_ssize_t __pyx_t_29;
  Py_ssize_t __pyx_t_30;
  Py_ssize_t __pyx_t_31;
  Py_ssize_t __pyx_t_32;
  Py_ssize_t __pyx_t_33;
  Py_ssize_t __pyx_t_34;
  Py_ssize_t __pyx_t_35;
  Py_ssize_t __pyx_t_36;
  Py_ssize_t __pyx_t_37;
  Py_ssize_t __pyx_t_38;
  Py_ssize_t __pyx_t_39;
  Py_ssize_t __pyx_t_40;
  Py_ssize_t __pyx_t_41;
  Py_ssize_t __pyx_t_42;
  int __pyx_t_43;
  double __pyx_t_44;
  PyObject *__pyx_t_45 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_dE_binders_and_beads", 0);
  __Pyx_TraceCall("get_dE_binders_and_beads", __pyx_f[0], 1675, 0, __PYX_ERR(0, 1675, __pyx_L1_error));

  /* "chromo/fields.pyx":1718
 * 
 *         # Change in squared density for each binder
 *         n_bins = len(bin_inds)             # <<<<<<<<<<<<<<
 *         delta_rho_squared = np.zeros((n_bins, poly.num_binders), dtype=float)
 *         delta_rho_interact_squared = np.zeros(
 */
  __pyx_t_1 = __Pyx_MemoryView_Len(__pyx_v_bin_inds); 
  __pyx_v_n_bins = __pyx_t_1;

  /* "chromo/fields.pyx":1719
 *         # Change in squared density for each binder
 *         n_bins = len(bin_inds)
 *         delta_rho_squared = np.zeros((n_bins, poly.num_binders), dtype=float)             # <<<<<<<<<<<<<<
 *         delta_rho_interact_squared = np.zeros(
 *             (n_bins, poly.num_binders, poly.num_binders), dtype=float
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_n_bins); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_poly->num_binders); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(0, 1719, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_double(__pyx_t_2, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1719, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_delta_rho_squared = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "chromo/fields.pyx":1720
 *         n_bins = len(bin_inds)
 *         delta_rho_squared = np.zeros((n_bins, poly.num_binders), dtype=float)
 *         delta_rho_interact_squared = np.zeros(             # <<<<<<<<<<<<<<
 *             (n_bins, poly.num_binders, poly.num_binders), dtype=float
 *         )
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":1721
 *         delta_rho_squared = np.zeros((n_bins, poly.num_binders), dtype=float)
 *         delta_rho_interact_squared = np.zeros(
 *             (n_bins, poly.num_binders, poly.num_binders), dtype=float             # <<<<<<<<<<<<<<
 *         )
 *         for i in range(n_bins):
 */
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_n_bins); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_poly->num_binders); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_poly->num_binders); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;

  /* "chromo/fields.pyx":1720
 *         n_bins = len(bin_inds)
 *         delta_rho_squared = np.zeros((n_bins, poly.num_binders), dtype=float)
 *         delta_rho_interact_squared = np.zeros(             # <<<<<<<<<<<<<<
 *             (n_bins, poly.num_binders, poly.num_binders), dtype=float
 *         )
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7);
  __pyx_t_7 = 0;

  /* "chromo/fields.pyx":1721
 *         delta_rho_squared = np.zeros((n_bins, poly.num_binders), dtype=float)
 *         delta_rho_interact_squared = np.zeros(
 *             (n_bins, poly.num_binders, poly.num_binders), dtype=float             # <<<<<<<<<<<<<<
 *         )
 *         for i in range(n_bins):
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(0, 1721, __pyx_L1_error)

  /* "chromo/fields.pyx":1720
 *         n_bins = len(bin_inds)
 *         delta_rho_squared = np.zeros((n_bins, poly.num_binders), dtype=float)
 *         delta_rho_interact_squared = np.zeros(             # <<<<<<<<<<<<<<
 *             (n_bins, poly.num_binders, poly.num_binders), dtype=float
 *         )
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_d_d_dc_double(__pyx_t_4, PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 1720, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_delta_rho_interact_squared = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "chromo/fields.pyx":1723
 *             (n_bins, poly.num_binders, poly.num_binders), dtype=float
 *         )
 *         for i in range(n_bins):             # <<<<<<<<<<<<<<
 *             for j in range(poly.num_binders):
 * 
 */
  __pyx_t_9 = __pyx_v_n_bins;
  __pyx_t_10 = __pyx_t_9;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
    __pyx_v_i = __pyx_t_11;

    /* "chromo/fields.pyx":1724
 *         )
 *         for i in range(n_bins):
 *             for j in range(poly.num_binders):             # <<<<<<<<<<<<<<
 * 
 *                 delta_rho_squared[i, j] = (
 */
    __pyx_t_12 = __pyx_v_poly->num_binders;
    __pyx_t_13 = __pyx_t_12;
    for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
      __pyx_v_j = __pyx_t_14;

      /* "chromo/fields.pyx":1727
 * 
 *                 delta_rho_squared[i, j] = (
 *                     self.density[bin_inds[i], j+1] +             # <<<<<<<<<<<<<<
 *                     self.density_trial[bin_inds[i], j+1]
 *                 ) ** 2 - self.density[bin_inds[i], j+1] ** 2
 */
      if (unlikely(!__pyx_v_self->density.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1727, __pyx_L1_error)}
      __pyx_t_15 = __pyx_v_i;
      __pyx_t_16 = -1;
      if (__pyx_t_15 < 0) {
        __pyx_t_15 += __pyx_v_bin_inds.shape[0];
        if (unlikely(__pyx_t_15 < 0)) __pyx_t_16 = 0;
      } else if (unlikely(__pyx_t_15 >= __pyx_v_bin_inds.shape[0])) __pyx_t_16 = 0;
      if (unlikely(__pyx_t_16 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_16);
        __PYX_ERR(0, 1727, __pyx_L1_error)
      }
      __pyx_t_17 = (*((long *) ( /* dim=0 */ (__pyx_v_bin_inds.data + __pyx_t_15 * __pyx_v_bin_inds.strides[0]) )));
      __pyx_t_18 = (__pyx_v_j + 1);
      __pyx_t_16 = -1;
      if (__pyx_t_17 < 0) {
        __pyx_t_17 += __pyx_v_self->density.shape[0];
        if (unlikely(__pyx_t_17 < 0)) __pyx_t_16 = 0;
      } else if (unlikely(__pyx_t_17 >= __pyx_v_self->density.shape[0])) __pyx_t_16 = 0;
      if (__pyx_t_18 < 0) {
        __pyx_t_18 += __pyx_v_self->density.shape[1];
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_16 = 1;
      } else if (unlikely(__pyx_t_18 >= __pyx_v_self->density.shape[1])) __pyx_t_16 = 1;
      if (unlikely(__pyx_t_16 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_16);
        __PYX_ERR(0, 1727, __pyx_L1_error)
      }

      /* "chromo/fields.pyx":1728
 *                 delta_rho_squared[i, j] = (
 *                     self.density[bin_inds[i], j+1] +
 *                     self.density_trial[bin_inds[i], j+1]             # <<<<<<<<<<<<<<
 *                 ) ** 2 - self.density[bin_inds[i], j+1] ** 2
 * 
 */
      if (unlikely(!__pyx_v_self->density_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1728, __pyx_L1_error)}
      __pyx_t_19 = __pyx_v_i;
      __pyx_t_16 = -1;
      if (__pyx_t_19 < 0) {
        __pyx_t_19 += __pyx_v_bin_inds.shape[0];
        if (unlikely(__pyx_t_19 < 0)) __pyx_t_16 = 0;
      } else if (unlikely(__pyx_t_19 >= __pyx_v_bin_inds.shape[0])) __pyx_t_16 = 0;
      if (unlikely(__pyx_t_16 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_16);
        __PYX_ERR(0, 1728, __pyx_L1_error)
      }
      __pyx_t_20 = (*((long *) ( /* dim=0 */ (__pyx_v_bin_inds.data + __pyx_t_19 * __pyx_v_bin_inds.strides[0]) )));
      __pyx_t_21 = (__pyx_v_j + 1);
      __pyx_t_16 = -1;
      if (__pyx_t_20 < 0) {
        __pyx_t_20 += __pyx_v_self->density_trial.shape[0];
        if (unlikely(__pyx_t_20 < 0)) __pyx_t_16 = 0;
      } else if (unlikely(__pyx_t_20 >= __pyx_v_self->density_trial.shape[0])) __pyx_t_16 = 0;
      if (__pyx_t_21 < 0) {
        __pyx_t_21 += __pyx_v_self->density_trial.shape[1];
        if (unlikely(__pyx_t_21 < 0)) __pyx_t_16 = 1;
      } else if (unlikely(__pyx_t_21 >= __pyx_v_self->density_trial.shape[1])) __pyx_t_16 = 1;
      if (unlikely(__pyx_t_16 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_16);
        __PYX_ERR(0, 1728, __pyx_L1_error)
      }

      /* "chromo/fields.pyx":1729
 *                     self.density[bin_inds[i], j+1] +
 *                     self.density_trial[bin_inds[i], j+1]
 *                 ) ** 2 - self.density[bin_inds[i], j+1] ** 2             # <<<<<<<<<<<<<<
 * 
 *                 for k in range(poly.num_binders):
 */
      if (unlikely(!__pyx_v_self->density.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1729, __pyx_L1_error)}
      __pyx_t_22 = __pyx_v_i;
      __pyx_t_16 = -1;
      if (__pyx_t_22 < 0) {
        __pyx_t_22 += __pyx_v_bin_inds.shape[0];
        if (unlikely(__pyx_t_22 < 0)) __pyx_t_16 = 0;
      } else if (unlikely(__pyx_t_22 >= __pyx_v_bin_inds.shape[0])) __pyx_t_16 = 0;
      if (unlikely(__pyx_t_16 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_16);
        __PYX_ERR(0, 1729, __pyx_L1_error)
      }
      __pyx_t_23 = (*((long *) ( /* dim=0 */ (__pyx_v_bin_inds.data + __pyx_t_22 * __pyx_v_bin_inds.strides[0]) )));
      __pyx_t_24 = (__pyx_v_j + 1);
      __pyx_t_16 = -1;
      if (__pyx_t_23 < 0) {
        __pyx_t_23 += __pyx_v_self->density.shape[0];
        if (unlikely(__pyx_t_23 < 0)) __pyx_t_16 = 0;
      } else if (unlikely(__pyx_t_23 >= __pyx_v_self->density.shape[0])) __pyx_t_16 = 0;
      if (__pyx_t_24 < 0) {
        __pyx_t_24 += __pyx_v_self->density.shape[1];
        if (unlikely(__pyx_t_24 < 0)) __pyx_t_16 = 1;
      } else if (unlikely(__pyx_t_24 >= __pyx_v_self->density.shape[1])) __pyx_t_16 = 1;
      if (unlikely(__pyx_t_16 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_16);
        __PYX_ERR(0, 1729, __pyx_L1_error)
      }

      /* "chromo/fields.pyx":1726
 *             for j in range(poly.num_binders):
 * 
 *                 delta_rho_squared[i, j] = (             # <<<<<<<<<<<<<<
 *                     self.density[bin_inds[i], j+1] +
 *                     self.density_trial[bin_inds[i], j+1]
 */
      __pyx_t_25 = __pyx_v_i;
      __pyx_t_26 = __pyx_v_j;
      __pyx_t_16 = -1;
      if (__pyx_t_25 < 0) {
        __pyx_t_25 += __pyx_v_delta_rho_squared.shape[0];
        if (unlikely(__pyx_t_25 < 0)) __pyx_t_16 = 0;
      } else if (unlikely(__pyx_t_25 >= __pyx_v_delta_rho_squared.shape[0])) __pyx_t_16 = 0;
      if (__pyx_t_26 < 0) {
        __pyx_t_26 += __pyx_v_delta_rho_squared.shape[1];
        if (unlikely(__pyx_t_26 < 0)) __pyx_t_16 = 1;
      } else if (unlikely(__pyx_t_26 >= __pyx_v_delta_rho_squared.shape[1])) __pyx_t_16 = 1;
      if (unlikely(__pyx_t_16 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_16);
        __PYX_ERR(0, 1726, __pyx_L1_error)
      }
      *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_delta_rho_squared.data + __pyx_t_25 * __pyx_v_delta_rho_squared.strides[0]) )) + __pyx_t_26)) )) = (pow(((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density.data + __pyx_t_17 * __pyx_v_self->density.strides[0]) )) + __pyx_t_18)) ))) + (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density_trial.data + __pyx_t_20 * __pyx_v_self->density_trial.strides[0]) )) + __pyx_t_21)) )))), 2.0) - pow((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density.data + __pyx_t_23 * __pyx_v_self->density.strides[0]) )) + __pyx_t_24)) ))), 2.0));

      /* "chromo/fields.pyx":1731
 *                 ) ** 2 - self.density[bin_inds[i], j+1] ** 2
 * 
 *                 for k in range(poly.num_binders):             # <<<<<<<<<<<<<<
 *                     delta_rho_interact_squared[i, j, k] = ((
 *                         self.density[bin_inds[i], j+1] +
 */
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_poly->num_binders); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1731, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1731, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
        __pyx_t_4 = __pyx_t_7; __Pyx_INCREF(__pyx_t_4); __pyx_t_27 = 0;
        __pyx_t_28 = NULL;
      } else {
        __pyx_t_27 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1731, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_28 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1731, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      for (;;) {
        if (likely(!__pyx_t_28)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_27 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_27); __Pyx_INCREF(__pyx_t_7); __pyx_t_27++; if (unlikely(0 < 0)) __PYX_ERR(0, 1731, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_27); __pyx_t_27++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1731, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          } else {
            if (__pyx_t_27 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_27); __Pyx_INCREF(__pyx_t_7); __pyx_t_27++; if (unlikely(0 < 0)) __PYX_ERR(0, 1731, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_27); __pyx_t_27++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1731, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          }
        } else {
          __pyx_t_7 = __pyx_t_28(__pyx_t_4);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1731, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "chromo/fields.pyx":1733
 *                 for k in range(poly.num_binders):
 *                     delta_rho_interact_squared[i, j, k] = ((
 *                         self.density[bin_inds[i], j+1] +             # <<<<<<<<<<<<<<
 *                         self.density_trial[bin_inds[i], j+1]
 *                     ) * (
 */
        if (unlikely(!__pyx_v_self->density.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1733, __pyx_L1_error)}
        __pyx_t_22 = __pyx_v_i;
        __pyx_t_16 = -1;
        if (__pyx_t_22 < 0) {
          __pyx_t_22 += __pyx_v_bin_inds.shape[0];
          if (unlikely(__pyx_t_22 < 0)) __pyx_t_16 = 0;
        } else if (unlikely(__pyx_t_22 >= __pyx_v_bin_inds.shape[0])) __pyx_t_16 = 0;
        if (unlikely(__pyx_t_16 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_16);
          __PYX_ERR(0, 1733, __pyx_L1_error)
        }
        __pyx_t_24 = (*((long *) ( /* dim=0 */ (__pyx_v_bin_inds.data + __pyx_t_22 * __pyx_v_bin_inds.strides[0]) )));
        __pyx_t_23 = (__pyx_v_j + 1);
        __pyx_t_16 = -1;
        if (__pyx_t_24 < 0) {
          __pyx_t_24 += __pyx_v_self->density.shape[0];
          if (unlikely(__pyx_t_24 < 0)) __pyx_t_16 = 0;
        } else if (unlikely(__pyx_t_24 >= __pyx_v_self->density.shape[0])) __pyx_t_16 = 0;
        if (__pyx_t_23 < 0) {
          __pyx_t_23 += __pyx_v_self->density.shape[1];
          if (unlikely(__pyx_t_23 < 0)) __pyx_t_16 = 1;
        } else if (unlikely(__pyx_t_23 >= __pyx_v_self->density.shape[1])) __pyx_t_16 = 1;
        if (unlikely(__pyx_t_16 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_16);
          __PYX_ERR(0, 1733, __pyx_L1_error)
        }

        /* "chromo/fields.pyx":1734
 *                     delta_rho_interact_squared[i, j, k] = ((
 *                         self.density[bin_inds[i], j+1] +
 *                         self.density_trial[bin_inds[i], j+1]             # <<<<<<<<<<<<<<
 *                     ) * (
 *                         self.density[bin_inds[i], k+1] +
 */
        if (unlikely(!__pyx_v_self->density_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1734, __pyx_L1_error)}
        __pyx_t_19 = __pyx_v_i;
        __pyx_t_16 = -1;
        if (__pyx_t_19 < 0) {
          __pyx_t_19 += __pyx_v_bin_inds.shape[0];
          if (unlikely(__pyx_t_19 < 0)) __pyx_t_16 = 0;
        } else if (unlikely(__pyx_t_19 >= __pyx_v_bin_inds.shape[0])) __pyx_t_16 = 0;
        if (unlikely(__pyx_t_16 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_16);
          __PYX_ERR(0, 1734, __pyx_L1_error)
        }
        __pyx_t_21 = (*((long *) ( /* dim=0 */ (__pyx_v_bin_inds.data + __pyx_t_19 * __pyx_v_bin_inds.strides[0]) )));
        __pyx_t_20 = (__pyx_v_j + 1);
        __pyx_t_16 = -1;
        if (__pyx_t_21 < 0) {
          __pyx_t_21 += __pyx_v_self->density_trial.shape[0];
          if (unlikely(__pyx_t_21 < 0)) __pyx_t_16 = 0;
        } else if (unlikely(__pyx_t_21 >= __pyx_v_self->density_trial.shape[0])) __pyx_t_16 = 0;
        if (__pyx_t_20 < 0) {
          __pyx_t_20 += __pyx_v_self->density_trial.shape[1];
          if (unlikely(__pyx_t_20 < 0)) __pyx_t_16 = 1;
        } else if (unlikely(__pyx_t_20 >= __pyx_v_self->density_trial.shape[1])) __pyx_t_16 = 1;
        if (unlikely(__pyx_t_16 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_16);
          __PYX_ERR(0, 1734, __pyx_L1_error)
        }

        /* "chromo/fields.pyx":1736
 *                         self.density_trial[bin_inds[i], j+1]
 *                     ) * (
 *                         self.density[bin_inds[i], k+1] +             # <<<<<<<<<<<<<<
 *                         self.density_trial[bin_inds[i], k+1]
 *                     )) - (
 */
        if (unlikely(!__pyx_v_self->density.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1736, __pyx_L1_error)}
        __pyx_t_15 = __pyx_v_i;
        __pyx_t_16 = -1;
        if (__pyx_t_15 < 0) {
          __pyx_t_15 += __pyx_v_bin_inds.shape[0];
          if (unlikely(__pyx_t_15 < 0)) __pyx_t_16 = 0;
        } else if (unlikely(__pyx_t_15 >= __pyx_v_bin_inds.shape[0])) __pyx_t_16 = 0;
        if (unlikely(__pyx_t_16 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_16);
          __PYX_ERR(0, 1736, __pyx_L1_error)
        }
        __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_v_k, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1736, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_29 = __Pyx_PyIndex_AsSsize_t(__pyx_t_7); if (unlikely((__pyx_t_29 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1736, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_18 = (*((long *) ( /* dim=0 */ (__pyx_v_bin_inds.data + __pyx_t_15 * __pyx_v_bin_inds.strides[0]) )));
        __pyx_t_17 = __pyx_t_29;
        __pyx_t_16 = -1;
        if (__pyx_t_18 < 0) {
          __pyx_t_18 += __pyx_v_self->density.shape[0];
          if (unlikely(__pyx_t_18 < 0)) __pyx_t_16 = 0;
        } else if (unlikely(__pyx_t_18 >= __pyx_v_self->density.shape[0])) __pyx_t_16 = 0;
        if (__pyx_t_17 < 0) {
          __pyx_t_17 += __pyx_v_self->density.shape[1];
          if (unlikely(__pyx_t_17 < 0)) __pyx_t_16 = 1;
        } else if (unlikely(__pyx_t_17 >= __pyx_v_self->density.shape[1])) __pyx_t_16 = 1;
        if (unlikely(__pyx_t_16 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_16);
          __PYX_ERR(0, 1736, __pyx_L1_error)
        }

        /* "chromo/fields.pyx":1737
 *                     ) * (
 *                         self.density[bin_inds[i], k+1] +
 *                         self.density_trial[bin_inds[i], k+1]             # <<<<<<<<<<<<<<
 *                     )) - (
 *                         self.density[bin_inds[i], j+1] *
 */
        if (unlikely(!__pyx_v_self->density_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1737, __pyx_L1_error)}
        __pyx_t_26 = __pyx_v_i;
        __pyx_t_16 = -1;
        if (__pyx_t_26 < 0) {
          __pyx_t_26 += __pyx_v_bin_inds.shape[0];
          if (unlikely(__pyx_t_26 < 0)) __pyx_t_16 = 0;
        } else if (unlikely(__pyx_t_26 >= __pyx_v_bin_inds.shape[0])) __pyx_t_16 = 0;
        if (unlikely(__pyx_t_16 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_16);
          __PYX_ERR(0, 1737, __pyx_L1_error)
        }
        __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_v_k, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1737, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_30 = __Pyx_PyIndex_AsSsize_t(__pyx_t_7); if (unlikely((__pyx_t_30 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1737, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_25 = (*((long *) ( /* dim=0 */ (__pyx_v_bin_inds.data + __pyx_t_26 * __pyx_v_bin_inds.strides[0]) )));
        __pyx_t_31 = __pyx_t_30;
        __pyx_t_16 = -1;
        if (__pyx_t_25 < 0) {
          __pyx_t_25 += __pyx_v_self->density_trial.shape[0];
          if (unlikely(__pyx_t_25 < 0)) __pyx_t_16 = 0;
        } else if (unlikely(__pyx_t_25 >= __pyx_v_self->density_trial.shape[0])) __pyx_t_16 = 0;
        if (__pyx_t_31 < 0) {
          __pyx_t_31 += __pyx_v_self->density_trial.shape[1];
          if (unlikely(__pyx_t_31 < 0)) __pyx_t_16 = 1;
        } else if (unlikely(__pyx_t_31 >= __pyx_v_self->density_trial.shape[1])) __pyx_t_16 = 1;
        if (unlikely(__pyx_t_16 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_16);
          __PYX_ERR(0, 1737, __pyx_L1_error)
        }

        /* "chromo/fields.pyx":1739
 *                         self.density_trial[bin_inds[i], k+1]
 *                     )) - (
 *                         self.density[bin_inds[i], j+1] *             # <<<<<<<<<<<<<<
 *                         self.density[bin_inds[i], k+1]
 *                     )
 */
        if (unlikely(!__pyx_v_self->density.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1739, __pyx_L1_error)}
        __pyx_t_32 = __pyx_v_i;
        __pyx_t_16 = -1;
        if (__pyx_t_32 < 0) {
          __pyx_t_32 += __pyx_v_bin_inds.shape[0];
          if (unlikely(__pyx_t_32 < 0)) __pyx_t_16 = 0;
        } else if (unlikely(__pyx_t_32 >= __pyx_v_bin_inds.shape[0])) __pyx_t_16 = 0;
        if (unlikely(__pyx_t_16 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_16);
          __PYX_ERR(0, 1739, __pyx_L1_error)
        }
        __pyx_t_33 = (*((long *) ( /* dim=0 */ (__pyx_v_bin_inds.data + __pyx_t_32 * __pyx_v_bin_inds.strides[0]) )));
        __pyx_t_34 = (__pyx_v_j + 1);
        __pyx_t_16 = -1;
        if (__pyx_t_33 < 0) {
          __pyx_t_33 += __pyx_v_self->density.shape[0];
          if (unlikely(__pyx_t_33 < 0)) __pyx_t_16 = 0;
        } else if (unlikely(__pyx_t_33 >= __pyx_v_self->density.shape[0])) __pyx_t_16 = 0;
        if (__pyx_t_34 < 0) {
          __pyx_t_34 += __pyx_v_self->density.shape[1];
          if (unlikely(__pyx_t_34 < 0)) __pyx_t_16 = 1;
        } else if (unlikely(__pyx_t_34 >= __pyx_v_self->density.shape[1])) __pyx_t_16 = 1;
        if (unlikely(__pyx_t_16 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_16);
          __PYX_ERR(0, 1739, __pyx_L1_error)
        }

        /* "chromo/fields.pyx":1740
 *                     )) - (
 *                         self.density[bin_inds[i], j+1] *
 *                         self.density[bin_inds[i], k+1]             # <<<<<<<<<<<<<<
 *                     )
 * 
 */
        if (unlikely(!__pyx_v_self->density.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1740, __pyx_L1_error)}
        __pyx_t_35 = __pyx_v_i;
        __pyx_t_16 = -1;
        if (__pyx_t_35 < 0) {
          __pyx_t_35 += __pyx_v_bin_inds.shape[0];
          if (unlikely(__pyx_t_35 < 0)) __pyx_t_16 = 0;
        } else if (unlikely(__pyx_t_35 >= __pyx_v_bin_inds.shape[0])) __pyx_t_16 = 0;
        if (unlikely(__pyx_t_16 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_16);
          __PYX_ERR(0, 1740, __pyx_L1_error)
        }
        __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_v_k, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1740, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_36 = __Pyx_PyIndex_AsSsize_t(__pyx_t_7); if (unlikely((__pyx_t_36 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1740, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_37 = (*((long *) ( /* dim=0 */ (__pyx_v_bin_inds.data + __pyx_t_35 * __pyx_v_bin_inds.strides[0]) )));
        __pyx_t_38 = __pyx_t_36;
        __pyx_t_16 = -1;
        if (__pyx_t_37 < 0) {
          __pyx_t_37 += __pyx_v_self->density.shape[0];
          if (unlikely(__pyx_t_37 < 0)) __pyx_t_16 = 0;
        } else if (unlikely(__pyx_t_37 >= __pyx_v_self->density.shape[0])) __pyx_t_16 = 0;
        if (__pyx_t_38 < 0) {
          __pyx_t_38 += __pyx_v_self->density.shape[1];
          if (unlikely(__pyx_t_38 < 0)) __pyx_t_16 = 1;
        } else if (unlikely(__pyx_t_38 >= __pyx_v_self->density.shape[1])) __pyx_t_16 = 1;
        if (unlikely(__pyx_t_16 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_16);
          __PYX_ERR(0, 1740, __pyx_L1_error)
        }

        /* "chromo/fields.pyx":1732
 * 
 *                 for k in range(poly.num_binders):
 *                     delta_rho_interact_squared[i, j, k] = ((             # <<<<<<<<<<<<<<
 *                         self.density[bin_inds[i], j+1] +
 *                         self.density_trial[bin_inds[i], j+1]
 */
        __pyx_t_39 = __Pyx_PyIndex_AsSsize_t(__pyx_v_k); if (unlikely((__pyx_t_39 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1732, __pyx_L1_error)
        __pyx_t_40 = __pyx_v_i;
        __pyx_t_41 = __pyx_v_j;
        __pyx_t_42 = __pyx_t_39;
        __pyx_t_16 = -1;
        if (__pyx_t_40 < 0) {
          __pyx_t_40 += __pyx_v_delta_rho_interact_squared.shape[0];
          if (unlikely(__pyx_t_40 < 0)) __pyx_t_16 = 0;
        } else if (unlikely(__pyx_t_40 >= __pyx_v_delta_rho_interact_squared.shape[0])) __pyx_t_16 = 0;
        if (__pyx_t_41 < 0) {
          __pyx_t_41 += __pyx_v_delta_rho_interact_squared.shape[1];
          if (unlikely(__pyx_t_41 < 0)) __pyx_t_16 = 1;
        } else if (unlikely(__pyx_t_41 >= __pyx_v_delta_rho_interact_squared.shape[1])) __pyx_t_16 = 1;
        if (__pyx_t_42 < 0) {
          __pyx_t_42 += __pyx_v_delta_rho_interact_squared.shape[2];
          if (unlikely(__pyx_t_42 < 0)) __pyx_t_16 = 2;
        } else if (unlikely(__pyx_t_42 >= __pyx_v_delta_rho_interact_squared.shape[2])) __pyx_t_16 = 2;
        if (unlikely(__pyx_t_16 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_16);
          __PYX_ERR(0, 1732, __pyx_L1_error)
        }
        *((double *) ( /* dim=2 */ ((char *) (((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_delta_rho_interact_squared.data + __pyx_t_40 * __pyx_v_delta_rho_interact_squared.strides[0]) ) + __pyx_t_41 * __pyx_v_delta_rho_interact_squared.strides[1]) )) + __pyx_t_42)) )) = ((((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density.data + __pyx_t_24 * __pyx_v_self->density.strides[0]) )) + __pyx_t_23)) ))) + (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density_trial.data + __pyx_t_21 * __pyx_v_self->density_trial.strides[0]) )) + __pyx_t_20)) )))) * ((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density.data + __pyx_t_18 * __pyx_v_self->density.strides[0]) )) + __pyx_t_17)) ))) + (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density_trial.data + __pyx_t_25 * __pyx_v_self->density_trial.strides[0]) )) + __pyx_t_31)) ))))) - ((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density.data + __pyx_t_33 * __pyx_v_self->density.strides[0]) )) + __pyx_t_34)) ))) * (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density.data + __pyx_t_37 * __pyx_v_self->density.strides[0]) )) + __pyx_t_38)) )))));

        /* "chromo/fields.pyx":1731
 *                 ) ** 2 - self.density[bin_inds[i], j+1] ** 2
 * 
 *                 for k in range(poly.num_binders):             # <<<<<<<<<<<<<<
 *                     delta_rho_interact_squared[i, j, k] = ((
 *                         self.density[bin_inds[i], j+1] +
 */
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }

  /* "chromo/fields.pyx":1744
 * 
 *         # Fix rounding error
 *         for i in range(n_bins):             # <<<<<<<<<<<<<<
 *             for j in range(poly.num_binders):
 *                 if np.abs(delta_rho_squared[i, j]) < 1E-18:
 */
  __pyx_t_9 = __pyx_v_n_bins;
  __pyx_t_10 = __pyx_t_9;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
    __pyx_v_i = __pyx_t_11;

    /* "chromo/fields.pyx":1745
 *         # Fix rounding error
 *         for i in range(n_bins):
 *             for j in range(poly.num_binders):             # <<<<<<<<<<<<<<
 *                 if np.abs(delta_rho_squared[i, j]) < 1E-18:
 *                     delta_rho_squared[i, j] = 0
 */
    __pyx_t_12 = __pyx_v_poly->num_binders;
    __pyx_t_13 = __pyx_t_12;
    for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
      __pyx_v_j = __pyx_t_14;

      /* "chromo/fields.pyx":1746
 *         for i in range(n_bins):
 *             for j in range(poly.num_binders):
 *                 if np.abs(delta_rho_squared[i, j]) < 1E-18:             # <<<<<<<<<<<<<<
 *                     delta_rho_squared[i, j] = 0
 *                 for k in range(poly.num_binders):
 */
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1746, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_abs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1746, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_35 = __pyx_v_i;
      __pyx_t_38 = __pyx_v_j;
      __pyx_t_16 = -1;
      if (__pyx_t_35 < 0) {
        __pyx_t_35 += __pyx_v_delta_rho_squared.shape[0];
        if (unlikely(__pyx_t_35 < 0)) __pyx_t_16 = 0;
      } else if (unlikely(__pyx_t_35 >= __pyx_v_delta_rho_squared.shape[0])) __pyx_t_16 = 0;
      if (__pyx_t_38 < 0) {
        __pyx_t_38 += __pyx_v_delta_rho_squared.shape[1];
        if (unlikely(__pyx_t_38 < 0)) __pyx_t_16 = 1;
      } else if (unlikely(__pyx_t_38 >= __pyx_v_delta_rho_squared.shape[1])) __pyx_t_16 = 1;
      if (unlikely(__pyx_t_16 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_16);
        __PYX_ERR(0, 1746, __pyx_L1_error)
      }
      __pyx_t_7 = PyFloat_FromDouble((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_delta_rho_squared.data + __pyx_t_35 * __pyx_v_delta_rho_squared.strides[0]) )) + __pyx_t_38)) )))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1746, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1746, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_float_1Eneg_18, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1746, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_43 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_43 < 0)) __PYX_ERR(0, 1746, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_43) {

        /* "chromo/fields.pyx":1747
 *             for j in range(poly.num_binders):
 *                 if np.abs(delta_rho_squared[i, j]) < 1E-18:
 *                     delta_rho_squared[i, j] = 0             # <<<<<<<<<<<<<<
 *                 for k in range(poly.num_binders):
 *                     if np.abs(delta_rho_interact_squared[i, j, k]) < 1E-18:
 */
        __pyx_t_38 = __pyx_v_i;
        __pyx_t_35 = __pyx_v_j;
        __pyx_t_16 = -1;
        if (__pyx_t_38 < 0) {
          __pyx_t_38 += __pyx_v_delta_rho_squared.shape[0];
          if (unlikely(__pyx_t_38 < 0)) __pyx_t_16 = 0;
        } else if (unlikely(__pyx_t_38 >= __pyx_v_delta_rho_squared.shape[0])) __pyx_t_16 = 0;
        if (__pyx_t_35 < 0) {
          __pyx_t_35 += __pyx_v_delta_rho_squared.shape[1];
          if (unlikely(__pyx_t_35 < 0)) __pyx_t_16 = 1;
        } else if (unlikely(__pyx_t_35 >= __pyx_v_delta_rho_squared.shape[1])) __pyx_t_16 = 1;
        if (unlikely(__pyx_t_16 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_16);
          __PYX_ERR(0, 1747, __pyx_L1_error)
        }
        *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_delta_rho_squared.data + __pyx_t_38 * __pyx_v_delta_rho_squared.strides[0]) )) + __pyx_t_35)) )) = 0.0;

        /* "chromo/fields.pyx":1746
 *         for i in range(n_bins):
 *             for j in range(poly.num_binders):
 *                 if np.abs(delta_rho_squared[i, j]) < 1E-18:             # <<<<<<<<<<<<<<
 *                     delta_rho_squared[i, j] = 0
 *                 for k in range(poly.num_binders):
 */
      }

      /* "chromo/fields.pyx":1748
 *                 if np.abs(delta_rho_squared[i, j]) < 1E-18:
 *                     delta_rho_squared[i, j] = 0
 *                 for k in range(poly.num_binders):             # <<<<<<<<<<<<<<
 *                     if np.abs(delta_rho_interact_squared[i, j, k]) < 1E-18:
 *                         delta_rho_interact_squared[i, j, k] = 0
 */
      __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_poly->num_binders); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1748, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1748, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
        __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_27 = 0;
        __pyx_t_28 = NULL;
      } else {
        __pyx_t_27 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_28 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1748, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (likely(!__pyx_t_28)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_27 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_27); __Pyx_INCREF(__pyx_t_4); __pyx_t_27++; if (unlikely(0 < 0)) __PYX_ERR(0, 1748, __pyx_L1_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_27); __pyx_t_27++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1748, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_27 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_27); __Pyx_INCREF(__pyx_t_4); __pyx_t_27++; if (unlikely(0 < 0)) __PYX_ERR(0, 1748, __pyx_L1_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_27); __pyx_t_27++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1748, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_28(__pyx_t_3);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1748, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "chromo/fields.pyx":1749
 *                     delta_rho_squared[i, j] = 0
 *                 for k in range(poly.num_binders):
 *                     if np.abs(delta_rho_interact_squared[i, j, k]) < 1E-18:             # <<<<<<<<<<<<<<
 *                         delta_rho_interact_squared[i, j, k] = 0
 * 
 */
        __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1749, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_abs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1749, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_36 = __Pyx_PyIndex_AsSsize_t(__pyx_v_k); if (unlikely((__pyx_t_36 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1749, __pyx_L1_error)
        __pyx_t_35 = __pyx_v_i;
        __pyx_t_38 = __pyx_v_j;
        __pyx_t_37 = __pyx_t_36;
        __pyx_t_16 = -1;
        if (__pyx_t_35 < 0) {
          __pyx_t_35 += __pyx_v_delta_rho_interact_squared.shape[0];
          if (unlikely(__pyx_t_35 < 0)) __pyx_t_16 = 0;
        } else if (unlikely(__pyx_t_35 >= __pyx_v_delta_rho_interact_squared.shape[0])) __pyx_t_16 = 0;
        if (__pyx_t_38 < 0) {
          __pyx_t_38 += __pyx_v_delta_rho_interact_squared.shape[1];
          if (unlikely(__pyx_t_38 < 0)) __pyx_t_16 = 1;
        } else if (unlikely(__pyx_t_38 >= __pyx_v_delta_rho_interact_squared.shape[1])) __pyx_t_16 = 1;
        if (__pyx_t_37 < 0) {
          __pyx_t_37 += __pyx_v_delta_rho_interact_squared.shape[2];
          if (unlikely(__pyx_t_37 < 0)) __pyx_t_16 = 2;
        } else if (unlikely(__pyx_t_37 >= __pyx_v_delta_rho_interact_squared.shape[2])) __pyx_t_16 = 2;
        if (unlikely(__pyx_t_16 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_16);
          __PYX_ERR(0, 1749, __pyx_L1_error)
        }
        __pyx_t_7 = PyFloat_FromDouble((*((double *) ( /* dim=2 */ ((char *) (((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_delta_rho_interact_squared.data + __pyx_t_35 * __pyx_v_delta_rho_interact_squared.strides[0]) ) + __pyx_t_38 * __pyx_v_delta_rho_interact_squared.strides[1]) )) + __pyx_t_37)) )))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1749, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_2 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_2, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1749, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_float_1Eneg_18, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1749, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_43 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_43 < 0)) __PYX_ERR(0, 1749, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (__pyx_t_43) {

          /* "chromo/fields.pyx":1750
 *                 for k in range(poly.num_binders):
 *                     if np.abs(delta_rho_interact_squared[i, j, k]) < 1E-18:
 *                         delta_rho_interact_squared[i, j, k] = 0             # <<<<<<<<<<<<<<
 * 
 *         # Count num. nucleosomes bound by reader proteins at both histone tails
 */
          __pyx_t_36 = __Pyx_PyIndex_AsSsize_t(__pyx_v_k); if (unlikely((__pyx_t_36 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1750, __pyx_L1_error)
          __pyx_t_37 = __pyx_v_i;
          __pyx_t_38 = __pyx_v_j;
          __pyx_t_35 = __pyx_t_36;
          __pyx_t_16 = -1;
          if (__pyx_t_37 < 0) {
            __pyx_t_37 += __pyx_v_delta_rho_interact_squared.shape[0];
            if (unlikely(__pyx_t_37 < 0)) __pyx_t_16 = 0;
          } else if (unlikely(__pyx_t_37 >= __pyx_v_delta_rho_interact_squared.shape[0])) __pyx_t_16 = 0;
          if (__pyx_t_38 < 0) {
            __pyx_t_38 += __pyx_v_delta_rho_interact_squared.shape[1];
            if (unlikely(__pyx_t_38 < 0)) __pyx_t_16 = 1;
          } else if (unlikely(__pyx_t_38 >= __pyx_v_delta_rho_interact_squared.shape[1])) __pyx_t_16 = 1;
          if (__pyx_t_35 < 0) {
            __pyx_t_35 += __pyx_v_delta_rho_interact_squared.shape[2];
            if (unlikely(__pyx_t_35 < 0)) __pyx_t_16 = 2;
          } else if (unlikely(__pyx_t_35 >= __pyx_v_delta_rho_interact_squared.shape[2])) __pyx_t_16 = 2;
          if (unlikely(__pyx_t_16 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_16);
            __PYX_ERR(0, 1750, __pyx_L1_error)
          }
          *((double *) ( /* dim=2 */ ((char *) (((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_delta_rho_interact_squared.data + __pyx_t_37 * __pyx_v_delta_rho_interact_squared.strides[0]) ) + __pyx_t_38 * __pyx_v_delta_rho_interact_squared.strides[1]) )) + __pyx_t_35)) )) = 0.0;

          /* "chromo/fields.pyx":1749
 *                     delta_rho_squared[i, j] = 0
 *                 for k in range(poly.num_binders):
 *                     if np.abs(delta_rho_interact_squared[i, j, k]) < 1E-18:             # <<<<<<<<<<<<<<
 *                         delta_rho_interact_squared[i, j, k] = 0
 * 
 */
        }

        /* "chromo/fields.pyx":1748
 *                 if np.abs(delta_rho_squared[i, j]) < 1E-18:
 *                     delta_rho_squared[i, j] = 0
 *                 for k in range(poly.num_binders):             # <<<<<<<<<<<<<<
 *                     if np.abs(delta_rho_interact_squared[i, j, k]) < 1E-18:
 *                         delta_rho_interact_squared[i, j, k] = 0
 */
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }

  /* "chromo/fields.pyx":1753
 * 
 *         # Count num. nucleosomes bound by reader proteins at both histone tails
 *         self.count_doubly_bound(             # <<<<<<<<<<<<<<
 *             poly, inds, n_inds, trial=1, state_change=state_change
 *         )
 */
  ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->count_doubly_bound(__pyx_v_self, __pyx_v_poly, __pyx_v_inds, __pyx_v_n_inds, 1, __pyx_v_state_change);

  /* "chromo/fields.pyx":1756
 *             poly, inds, n_inds, trial=1, state_change=state_change
 *         )
 *         self.count_doubly_bound(             # <<<<<<<<<<<<<<
 *             poly, inds, n_inds, trial=0, state_change=state_change
 *         )
 */
  ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->count_doubly_bound(__pyx_v_self, __pyx_v_poly, __pyx_v_inds, __pyx_v_n_inds, 0, __pyx_v_state_change);

  /* "chromo/fields.pyx":1760
 *         )
 * 
 *         dE_binders_beads = 0.0             # <<<<<<<<<<<<<<
 *         for i, binder_info in enumerate(self.binder_dict):
 *             # Calculate total density change
 */
  __pyx_v_dE_binders_beads = 0.0;

  /* "chromo/fields.pyx":1761
 * 
 *         dE_binders_beads = 0.0
 *         for i, binder_info in enumerate(self.binder_dict):             # <<<<<<<<<<<<<<
 *             # Calculate total density change
 *             tot_density_change = 0.0
 */
  __pyx_t_9 = 0;
  __pyx_t_3 = __pyx_v_self->binder_dict; __Pyx_INCREF(__pyx_t_3); __pyx_t_27 = 0;
  for (;;) {
    if (__pyx_t_27 >= PyList_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_27); __Pyx_INCREF(__pyx_t_5); __pyx_t_27++; if (unlikely(0 < 0)) __PYX_ERR(0, 1761, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_27); __pyx_t_27++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    if (!(likely(PyDict_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(0, 1761, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_binder_info, ((PyObject*)__pyx_t_5));
    __pyx_t_5 = 0;
    __pyx_v_i = __pyx_t_9;
    __pyx_t_9 = (__pyx_t_9 + 1);

    /* "chromo/fields.pyx":1763
 *         for i, binder_info in enumerate(self.binder_dict):
 *             # Calculate total density change
 *             tot_density_change = 0.0             # <<<<<<<<<<<<<<
 *             for j in range(n_bins):
 *                 tot_density_change += delta_rho_squared[j, i]
 */
    __pyx_v_tot_density_change = 0.0;

    /* "chromo/fields.pyx":1764
 *             # Calculate total density change
 *             tot_density_change = 0.0
 *             for j in range(n_bins):             # <<<<<<<<<<<<<<
 *                 tot_density_change += delta_rho_squared[j, i]
 * 
 */
    __pyx_t_10 = __pyx_v_n_bins;
    __pyx_t_11 = __pyx_t_10;
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_v_j = __pyx_t_12;

      /* "chromo/fields.pyx":1765
 *             tot_density_change = 0.0
 *             for j in range(n_bins):
 *                 tot_density_change += delta_rho_squared[j, i]             # <<<<<<<<<<<<<<
 * 
 *             # Oligomerization
 */
      __pyx_t_35 = __pyx_v_j;
      __pyx_t_38 = __pyx_v_i;
      __pyx_t_16 = -1;
      if (__pyx_t_35 < 0) {
        __pyx_t_35 += __pyx_v_delta_rho_squared.shape[0];
        if (unlikely(__pyx_t_35 < 0)) __pyx_t_16 = 0;
      } else if (unlikely(__pyx_t_35 >= __pyx_v_delta_rho_squared.shape[0])) __pyx_t_16 = 0;
      if (__pyx_t_38 < 0) {
        __pyx_t_38 += __pyx_v_delta_rho_squared.shape[1];
        if (unlikely(__pyx_t_38 < 0)) __pyx_t_16 = 1;
      } else if (unlikely(__pyx_t_38 >= __pyx_v_delta_rho_squared.shape[1])) __pyx_t_16 = 1;
      if (unlikely(__pyx_t_16 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_16);
        __PYX_ERR(0, 1765, __pyx_L1_error)
      }
      __pyx_v_tot_density_change = (__pyx_v_tot_density_change + (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_delta_rho_squared.data + __pyx_t_35 * __pyx_v_delta_rho_squared.strides[0]) )) + __pyx_t_38)) ))));
    }

    /* "chromo/fields.pyx":1768
 * 
 *             # Oligomerization
 *             dE_binders_beads +=\             # <<<<<<<<<<<<<<
 *                 binder_info['field_energy_prefactor'] * tot_density_change
 * 
 */
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_dE_binders_beads); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "chromo/fields.pyx":1769
 *             # Oligomerization
 *             dE_binders_beads +=\
 *                 binder_info['field_energy_prefactor'] * tot_density_change             # <<<<<<<<<<<<<<
 * 
 *             # Intranucleosome interaction
 */
    if (unlikely(__pyx_v_binder_info == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1769, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_binder_info, __pyx_n_s_field_energy_prefactor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_tot_density_change); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "chromo/fields.pyx":1768
 * 
 *             # Oligomerization
 *             dE_binders_beads +=\             # <<<<<<<<<<<<<<
 *                 binder_info['field_energy_prefactor'] * tot_density_change
 * 
 */
    __pyx_t_7 = PyNumber_InPlaceAdd(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_44 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_44 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1768, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_dE_binders_beads = __pyx_t_44;

    /* "chromo/fields.pyx":1772
 * 
 *             # Intranucleosome interaction
 *             n_double_bound = self.doubly_bound_trial[i] - self.doubly_bound[i]             # <<<<<<<<<<<<<<
 *             dE_binders_beads +=\
 *                 binder_info['interaction_energy_intranucleosome'] * n_double_bound
 */
    if (unlikely(!__pyx_v_self->doubly_bound_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1772, __pyx_L1_error)}
    __pyx_t_38 = __pyx_v_i;
    __pyx_t_16 = -1;
    if (__pyx_t_38 < 0) {
      __pyx_t_38 += __pyx_v_self->doubly_bound_trial.shape[0];
      if (unlikely(__pyx_t_38 < 0)) __pyx_t_16 = 0;
    } else if (unlikely(__pyx_t_38 >= __pyx_v_self->doubly_bound_trial.shape[0])) __pyx_t_16 = 0;
    if (unlikely(__pyx_t_16 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_16);
      __PYX_ERR(0, 1772, __pyx_L1_error)
    }
    if (unlikely(!__pyx_v_self->doubly_bound.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1772, __pyx_L1_error)}
    __pyx_t_35 = __pyx_v_i;
    __pyx_t_16 = -1;
    if (__pyx_t_35 < 0) {
      __pyx_t_35 += __pyx_v_self->doubly_bound.shape[0];
      if (unlikely(__pyx_t_35 < 0)) __pyx_t_16 = 0;
    } else if (unlikely(__pyx_t_35 >= __pyx_v_self->doubly_bound.shape[0])) __pyx_t_16 = 0;
    if (unlikely(__pyx_t_16 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_16);
      __PYX_ERR(0, 1772, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_PyInt_From_long(((*((long *) ( /* dim=0 */ (__pyx_v_self->doubly_bound_trial.data + __pyx_t_38 * __pyx_v_self->doubly_bound_trial.strides[0]) ))) - (*((long *) ( /* dim=0 */ (__pyx_v_self->doubly_bound.data + __pyx_t_35 * __pyx_v_self->doubly_bound.strides[0]) ))))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_XDECREF_SET(__pyx_v_n_double_bound, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "chromo/fields.pyx":1773
 *             # Intranucleosome interaction
 *             n_double_bound = self.doubly_bound_trial[i] - self.doubly_bound[i]
 *             dE_binders_beads +=\             # <<<<<<<<<<<<<<
 *                 binder_info['interaction_energy_intranucleosome'] * n_double_bound
 * 
 */
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_dE_binders_beads); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);

    /* "chromo/fields.pyx":1774
 *             n_double_bound = self.doubly_bound_trial[i] - self.doubly_bound[i]
 *             dE_binders_beads +=\
 *                 binder_info['interaction_energy_intranucleosome'] * n_double_bound             # <<<<<<<<<<<<<<
 * 
 *         # Cross-talk Interaction
 */
    if (unlikely(__pyx_v_binder_info == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1774, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_binder_info, __pyx_n_s_interaction_energy_intranucleoso); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_2, __pyx_v_n_double_bound); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "chromo/fields.pyx":1773
 *             # Intranucleosome interaction
 *             n_double_bound = self.doubly_bound_trial[i] - self.doubly_bound[i]
 *             dE_binders_beads +=\             # <<<<<<<<<<<<<<
 *                 binder_info['interaction_energy_intranucleosome'] * n_double_bound
 * 
 */
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_44 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_44 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1773, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_dE_binders_beads = __pyx_t_44;

    /* "chromo/fields.pyx":1761
 * 
 *         dE_binders_beads = 0.0
 *         for i, binder_info in enumerate(self.binder_dict):             # <<<<<<<<<<<<<<
 *             # Calculate total density change
 *             tot_density_change = 0.0
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "chromo/fields.pyx":1777
 * 
 *         # Cross-talk Interaction
 *         for i, binder_info in enumerate(self.binder_dict):             # <<<<<<<<<<<<<<
 *             for j, next_binder_info in enumerate(self.binder_dict):
 *                 tot_density_change_interact = 0
 */
  __pyx_t_9 = 0;
  __pyx_t_3 = __pyx_v_self->binder_dict; __Pyx_INCREF(__pyx_t_3); __pyx_t_27 = 0;
  for (;;) {
    if (__pyx_t_27 >= PyList_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_27); __Pyx_INCREF(__pyx_t_2); __pyx_t_27++; if (unlikely(0 < 0)) __PYX_ERR(0, 1777, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_27); __pyx_t_27++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1777, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 1777, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_binder_info, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;
    __pyx_v_i = __pyx_t_9;
    __pyx_t_9 = (__pyx_t_9 + 1);

    /* "chromo/fields.pyx":1778
 *         # Cross-talk Interaction
 *         for i, binder_info in enumerate(self.binder_dict):
 *             for j, next_binder_info in enumerate(self.binder_dict):             # <<<<<<<<<<<<<<
 *                 tot_density_change_interact = 0
 *                 for k in range(n_bins):
 */
    __pyx_t_10 = 0;
    __pyx_t_2 = __pyx_v_self->binder_dict; __Pyx_INCREF(__pyx_t_2); __pyx_t_36 = 0;
    for (;;) {
      if (__pyx_t_36 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_36); __Pyx_INCREF(__pyx_t_5); __pyx_t_36++; if (unlikely(0 < 0)) __PYX_ERR(0, 1778, __pyx_L1_error)
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_36); __pyx_t_36++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1778, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_next_binder_info, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_v_j = __pyx_t_10;
      __pyx_t_10 = (__pyx_t_10 + 1);

      /* "chromo/fields.pyx":1779
 *         for i, binder_info in enumerate(self.binder_dict):
 *             for j, next_binder_info in enumerate(self.binder_dict):
 *                 tot_density_change_interact = 0             # <<<<<<<<<<<<<<
 *                 for k in range(n_bins):
 *                     tot_density_change_interact += delta_rho_interact_squared[k, i, j]
 */
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_XDECREF_SET(__pyx_v_tot_density_change_interact, __pyx_int_0);

      /* "chromo/fields.pyx":1780
 *             for j, next_binder_info in enumerate(self.binder_dict):
 *                 tot_density_change_interact = 0
 *                 for k in range(n_bins):             # <<<<<<<<<<<<<<
 *                     tot_density_change_interact += delta_rho_interact_squared[k, i, j]
 * 
 */
      __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_n_bins); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
        __pyx_t_5 = __pyx_t_7; __Pyx_INCREF(__pyx_t_5); __pyx_t_30 = 0;
        __pyx_t_28 = NULL;
      } else {
        __pyx_t_30 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1780, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_28 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1780, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      for (;;) {
        if (likely(!__pyx_t_28)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            if (__pyx_t_30 >= PyList_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_30); __Pyx_INCREF(__pyx_t_7); __pyx_t_30++; if (unlikely(0 < 0)) __PYX_ERR(0, 1780, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_5, __pyx_t_30); __pyx_t_30++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1780, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          } else {
            if (__pyx_t_30 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_30); __Pyx_INCREF(__pyx_t_7); __pyx_t_30++; if (unlikely(0 < 0)) __PYX_ERR(0, 1780, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_5, __pyx_t_30); __pyx_t_30++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1780, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          }
        } else {
          __pyx_t_7 = __pyx_t_28(__pyx_t_5);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1780, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "chromo/fields.pyx":1781
 *                 tot_density_change_interact = 0
 *                 for k in range(n_bins):
 *                     tot_density_change_interact += delta_rho_interact_squared[k, i, j]             # <<<<<<<<<<<<<<
 * 
 *                 dE_binders_beads +=\
 */
        __pyx_t_29 = __Pyx_PyIndex_AsSsize_t(__pyx_v_k); if (unlikely((__pyx_t_29 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1781, __pyx_L1_error)
        __pyx_t_35 = __pyx_t_29;
        __pyx_t_38 = __pyx_v_i;
        __pyx_t_37 = __pyx_v_j;
        __pyx_t_16 = -1;
        if (__pyx_t_35 < 0) {
          __pyx_t_35 += __pyx_v_delta_rho_interact_squared.shape[0];
          if (unlikely(__pyx_t_35 < 0)) __pyx_t_16 = 0;
        } else if (unlikely(__pyx_t_35 >= __pyx_v_delta_rho_interact_squared.shape[0])) __pyx_t_16 = 0;
        if (__pyx_t_38 < 0) {
          __pyx_t_38 += __pyx_v_delta_rho_interact_squared.shape[1];
          if (unlikely(__pyx_t_38 < 0)) __pyx_t_16 = 1;
        } else if (unlikely(__pyx_t_38 >= __pyx_v_delta_rho_interact_squared.shape[1])) __pyx_t_16 = 1;
        if (__pyx_t_37 < 0) {
          __pyx_t_37 += __pyx_v_delta_rho_interact_squared.shape[2];
          if (unlikely(__pyx_t_37 < 0)) __pyx_t_16 = 2;
        } else if (unlikely(__pyx_t_37 >= __pyx_v_delta_rho_interact_squared.shape[2])) __pyx_t_16 = 2;
        if (unlikely(__pyx_t_16 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_16);
          __PYX_ERR(0, 1781, __pyx_L1_error)
        }
        __pyx_t_7 = PyFloat_FromDouble((*((double *) ( /* dim=2 */ ((char *) (((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_delta_rho_interact_squared.data + __pyx_t_35 * __pyx_v_delta_rho_interact_squared.strides[0]) ) + __pyx_t_38 * __pyx_v_delta_rho_interact_squared.strides[1]) )) + __pyx_t_37)) )))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1781, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_tot_density_change_interact, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1781, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF_SET(__pyx_v_tot_density_change_interact, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "chromo/fields.pyx":1780
 *             for j, next_binder_info in enumerate(self.binder_dict):
 *                 tot_density_change_interact = 0
 *                 for k in range(n_bins):             # <<<<<<<<<<<<<<
 *                     tot_density_change_interact += delta_rho_interact_squared[k, i, j]
 * 
 */
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "chromo/fields.pyx":1783
 *                     tot_density_change_interact += delta_rho_interact_squared[k, i, j]
 * 
 *                 dE_binders_beads +=\             # <<<<<<<<<<<<<<
 *                     binder_info["cross_talk_field_energy_prefactor"][next_binder_info["name"]] *\
 *                     tot_density_change_interact
 */
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_dE_binders_beads); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1783, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);

      /* "chromo/fields.pyx":1784
 * 
 *                 dE_binders_beads +=\
 *                     binder_info["cross_talk_field_energy_prefactor"][next_binder_info["name"]] *\             # <<<<<<<<<<<<<<
 *                     tot_density_change_interact
 * 
 */
      if (unlikely(__pyx_v_binder_info == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1784, __pyx_L1_error)
      }
      __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_binder_info, __pyx_n_s_cross_talk_field_energy_prefacto); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1784, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyObject_Dict_GetItem(__pyx_v_next_binder_info, __pyx_n_s_name_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1784, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_45 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_45)) __PYX_ERR(0, 1784, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_45);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "chromo/fields.pyx":1785
 *                 dE_binders_beads +=\
 *                     binder_info["cross_talk_field_energy_prefactor"][next_binder_info["name"]] *\
 *                     tot_density_change_interact             # <<<<<<<<<<<<<<
 * 
 *         # Nonspecific bead interaction energy
 */
      __pyx_t_7 = PyNumber_Multiply(__pyx_t_45, __pyx_v_tot_density_change_interact); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1784, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_45); __pyx_t_45 = 0;

      /* "chromo/fields.pyx":1783
 *                     tot_density_change_interact += delta_rho_interact_squared[k, i, j]
 * 
 *                 dE_binders_beads +=\             # <<<<<<<<<<<<<<
 *                     binder_info["cross_talk_field_energy_prefactor"][next_binder_info["name"]] *\
 *                     tot_density_change_interact
 */
      __pyx_t_45 = PyNumber_InPlaceAdd(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_45)) __PYX_ERR(0, 1783, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_45);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_44 = __pyx_PyFloat_AsDouble(__pyx_t_45); if (unlikely((__pyx_t_44 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1783, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_45); __pyx_t_45 = 0;
      __pyx_v_dE_binders_beads = __pyx_t_44;

      /* "chromo/fields.pyx":1778
 *         # Cross-talk Interaction
 *         for i, binder_info in enumerate(self.binder_dict):
 *             for j, next_binder_info in enumerate(self.binder_dict):             # <<<<<<<<<<<<<<
 *                 tot_density_change_interact = 0
 *                 for k in range(n_bins):
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "chromo/fields.pyx":1777
 * 
 *         # Cross-talk Interaction
 *         for i, binder_info in enumerate(self.binder_dict):             # <<<<<<<<<<<<<<
 *             for j, next_binder_info in enumerate(self.binder_dict):
 *                 tot_density_change_interact = 0
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "chromo/fields.pyx":1788
 * 
 *         # Nonspecific bead interaction energy
 *         dE_binders_beads += self.nonspecific_interact_dE(poly, bin_inds, n_bins)             # <<<<<<<<<<<<<<
 * 
 *         return dE_binders_beads
 */
  __pyx_v_dE_binders_beads = (__pyx_v_dE_binders_beads + ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->nonspecific_interact_dE(__pyx_v_self, __pyx_v_poly, __pyx_v_bin_inds, __pyx_v_n_bins));

  /* "chromo/fields.pyx":1790
 *         dE_binders_beads += self.nonspecific_interact_dE(poly, bin_inds, n_bins)
 * 
 *         return dE_binders_beads             # <<<<<<<<<<<<<<
 * 
 *     cdef double nonspecific_interact_dE(
 */
  __pyx_r = __pyx_v_dE_binders_beads;
  goto __pyx_L0;

  /* "chromo/fields.pyx":1675
 *             ]
 * 
 *     cdef double get_dE_binders_and_beads(             # <<<<<<<<<<<<<<
 *         self, poly.PolymerBase poly, long[:] inds, long n_inds,
 *         long[:] bin_inds, bint state_change
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __Pyx_XDECREF(__pyx_t_45);
  __Pyx_WriteUnraisable("chromo.fields.UniformDensityField.get_dE_binders_and_beads", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_delta_rho_squared, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_delta_rho_interact_squared, 1);
  __Pyx_XDECREF(__pyx_v_binder_info);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_n_double_bound);
  __Pyx_XDECREF(__pyx_v_next_binder_info);
  __Pyx_XDECREF(__pyx_v_tot_density_change_interact);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":1792
 *         return dE_binders_beads
 * 
 *     cdef double nonspecific_interact_dE(             # <<<<<<<<<<<<<<
 *         self, poly.PolymerBase poly, long[:] bin_inds, long n_bins
 *     ):
 */

static double __pyx_f_6chromo_6fields_19UniformDensityField_nonspecific_interact_dE(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, __Pyx_memviewslice __pyx_v_bin_inds, long __pyx_v_n_bins) {
  double __pyx_v_bead_V;
  double __pyx_v_nonspecific_dE;
  double __pyx_v_access_vol;
  __Pyx_memviewslice __pyx_v_vol_fracs = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_v_i;
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  __Pyx_memviewslice __pyx_t_4 = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_t_5;
  long __pyx_t_6;
  long __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("nonspecific_interact_dE", 0);
  __Pyx_TraceCall("nonspecific_interact_dE", __pyx_f[0], 1792, 0, __PYX_ERR(0, 1792, __pyx_L1_error));

  /* "chromo/fields.pyx":1820
 *         cdef double[:, ::1] vol_fracs
 * 
 *         bead_V = poly.beads[0].vol             # <<<<<<<<<<<<<<
 *         vol_fracs = self.get_volume_fractions_with_trial(
 *             bead_V, bin_inds, n_bins
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_poly->beads, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_vol); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1820, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_bead_V = __pyx_t_3;

  /* "chromo/fields.pyx":1821
 * 
 *         bead_V = poly.beads[0].vol
 *         vol_fracs = self.get_volume_fractions_with_trial(             # <<<<<<<<<<<<<<
 *             bead_V, bin_inds, n_bins
 *         )
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_volume_fractions_with_trial(__pyx_v_self, __pyx_v_bead_V, __pyx_v_bin_inds, __pyx_v_n_bins); if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(0, 1821, __pyx_L1_error)
  __pyx_v_vol_fracs = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "chromo/fields.pyx":1824
 *             bead_V, bin_inds, n_bins
 *         )
 *         nonspecific_dE = 0             # <<<<<<<<<<<<<<
 *         for i in range(n_bins):
 *             access_vol = self.access_vols[bin_inds[i]]
 */
  __pyx_v_nonspecific_dE = 0.0;

  /* "chromo/fields.pyx":1825
 *         )
 *         nonspecific_dE = 0
 *         for i in range(n_bins):             # <<<<<<<<<<<<<<
 *             access_vol = self.access_vols[bin_inds[i]]
 * 
 */
  __pyx_t_5 = __pyx_v_n_bins;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "chromo/fields.pyx":1826
 *         nonspecific_dE = 0
 *         for i in range(n_bins):
 *             access_vol = self.access_vols[bin_inds[i]]             # <<<<<<<<<<<<<<
 * 
 *             # Trial Volume Fractions
 */
    if (unlikely(__pyx_v_self->access_vols == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1826, __pyx_L1_error)
    }
    __pyx_t_8 = __pyx_v_i;
    __pyx_t_9 = -1;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_bin_inds.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_bin_inds.shape[0])) __pyx_t_9 = 0;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      __PYX_ERR(0, 1826, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyInt_From_long((*((long *) ( /* dim=0 */ (__pyx_v_bin_inds.data + __pyx_t_8 * __pyx_v_bin_inds.strides[0]) )))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1826, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->access_vols, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1826, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1826, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_access_vol = __pyx_t_3;

    /* "chromo/fields.pyx":1829
 * 
 *             # Trial Volume Fractions
 *             if vol_fracs[1, i] > self.vf_limit:             # <<<<<<<<<<<<<<
 *                 nonspecific_dE += E_HUGE * vol_fracs[1, i]
 *             else:
 */
    __pyx_t_8 = 1;
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_9 = -1;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_vol_fracs.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_vol_fracs.shape[0])) __pyx_t_9 = 0;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_vol_fracs.shape[1];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_9 = 1;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_vol_fracs.shape[1])) __pyx_t_9 = 1;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      __PYX_ERR(0, 1829, __pyx_L1_error)
    }
    __pyx_t_11 = (((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_vol_fracs.data + __pyx_t_8 * __pyx_v_vol_fracs.strides[0]) )) + __pyx_t_10)) ))) > __pyx_v_self->vf_limit) != 0);
    if (__pyx_t_11) {

      /* "chromo/fields.pyx":1830
 *             # Trial Volume Fractions
 *             if vol_fracs[1, i] > self.vf_limit:
 *                 nonspecific_dE += E_HUGE * vol_fracs[1, i]             # <<<<<<<<<<<<<<
 *             else:
 *                 nonspecific_dE += self.chi * (access_vol / bead_V) *\
 */
      __pyx_t_10 = 1;
      __pyx_t_8 = __pyx_v_i;
      __pyx_t_9 = -1;
      if (__pyx_t_10 < 0) {
        __pyx_t_10 += __pyx_v_vol_fracs.shape[0];
        if (unlikely(__pyx_t_10 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_10 >= __pyx_v_vol_fracs.shape[0])) __pyx_t_9 = 0;
      if (__pyx_t_8 < 0) {
        __pyx_t_8 += __pyx_v_vol_fracs.shape[1];
        if (unlikely(__pyx_t_8 < 0)) __pyx_t_9 = 1;
      } else if (unlikely(__pyx_t_8 >= __pyx_v_vol_fracs.shape[1])) __pyx_t_9 = 1;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        __PYX_ERR(0, 1830, __pyx_L1_error)
      }
      __pyx_v_nonspecific_dE = (__pyx_v_nonspecific_dE + (__pyx_v_6chromo_6fields_E_HUGE * (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_vol_fracs.data + __pyx_t_10 * __pyx_v_vol_fracs.strides[0]) )) + __pyx_t_8)) )))));

      /* "chromo/fields.pyx":1829
 * 
 *             # Trial Volume Fractions
 *             if vol_fracs[1, i] > self.vf_limit:             # <<<<<<<<<<<<<<
 *                 nonspecific_dE += E_HUGE * vol_fracs[1, i]
 *             else:
 */
      goto __pyx_L5;
    }

    /* "chromo/fields.pyx":1832
 *                 nonspecific_dE += E_HUGE * vol_fracs[1, i]
 *             else:
 *                 nonspecific_dE += self.chi * (access_vol / bead_V) *\             # <<<<<<<<<<<<<<
 *                                   vol_fracs[1, i] ** 2
 * 
 */
    /*else*/ {
      if (unlikely(__pyx_v_bead_V == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 1832, __pyx_L1_error)
      }

      /* "chromo/fields.pyx":1833
 *             else:
 *                 nonspecific_dE += self.chi * (access_vol / bead_V) *\
 *                                   vol_fracs[1, i] ** 2             # <<<<<<<<<<<<<<
 * 
 *             # Current volume fractions
 */
      __pyx_t_8 = 1;
      __pyx_t_10 = __pyx_v_i;
      __pyx_t_9 = -1;
      if (__pyx_t_8 < 0) {
        __pyx_t_8 += __pyx_v_vol_fracs.shape[0];
        if (unlikely(__pyx_t_8 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_8 >= __pyx_v_vol_fracs.shape[0])) __pyx_t_9 = 0;
      if (__pyx_t_10 < 0) {
        __pyx_t_10 += __pyx_v_vol_fracs.shape[1];
        if (unlikely(__pyx_t_10 < 0)) __pyx_t_9 = 1;
      } else if (unlikely(__pyx_t_10 >= __pyx_v_vol_fracs.shape[1])) __pyx_t_9 = 1;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        __PYX_ERR(0, 1833, __pyx_L1_error)
      }

      /* "chromo/fields.pyx":1832
 *                 nonspecific_dE += E_HUGE * vol_fracs[1, i]
 *             else:
 *                 nonspecific_dE += self.chi * (access_vol / bead_V) *\             # <<<<<<<<<<<<<<
 *                                   vol_fracs[1, i] ** 2
 * 
 */
      __pyx_v_nonspecific_dE = (__pyx_v_nonspecific_dE + ((__pyx_v_self->chi * (__pyx_v_access_vol / __pyx_v_bead_V)) * pow((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_vol_fracs.data + __pyx_t_8 * __pyx_v_vol_fracs.strides[0]) )) + __pyx_t_10)) ))), 2.0)));
    }
    __pyx_L5:;

    /* "chromo/fields.pyx":1836
 * 
 *             # Current volume fractions
 *             if vol_fracs[0, i] > self.vf_limit:             # <<<<<<<<<<<<<<
 *                 nonspecific_dE -= E_HUGE * vol_fracs[0, i]
 *             else:
 */
    __pyx_t_10 = 0;
    __pyx_t_8 = __pyx_v_i;
    __pyx_t_9 = -1;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_vol_fracs.shape[0];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_vol_fracs.shape[0])) __pyx_t_9 = 0;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_vol_fracs.shape[1];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_9 = 1;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_vol_fracs.shape[1])) __pyx_t_9 = 1;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      __PYX_ERR(0, 1836, __pyx_L1_error)
    }
    __pyx_t_11 = (((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_vol_fracs.data + __pyx_t_10 * __pyx_v_vol_fracs.strides[0]) )) + __pyx_t_8)) ))) > __pyx_v_self->vf_limit) != 0);
    if (__pyx_t_11) {

      /* "chromo/fields.pyx":1837
 *             # Current volume fractions
 *             if vol_fracs[0, i] > self.vf_limit:
 *                 nonspecific_dE -= E_HUGE * vol_fracs[0, i]             # <<<<<<<<<<<<<<
 *             else:
 *                 nonspecific_dE -= self.chi * (access_vol / bead_V) *\
 */
      __pyx_t_8 = 0;
      __pyx_t_10 = __pyx_v_i;
      __pyx_t_9 = -1;
      if (__pyx_t_8 < 0) {
        __pyx_t_8 += __pyx_v_vol_fracs.shape[0];
        if (unlikely(__pyx_t_8 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_8 >= __pyx_v_vol_fracs.shape[0])) __pyx_t_9 = 0;
      if (__pyx_t_10 < 0) {
        __pyx_t_10 += __pyx_v_vol_fracs.shape[1];
        if (unlikely(__pyx_t_10 < 0)) __pyx_t_9 = 1;
      } else if (unlikely(__pyx_t_10 >= __pyx_v_vol_fracs.shape[1])) __pyx_t_9 = 1;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        __PYX_ERR(0, 1837, __pyx_L1_error)
      }
      __pyx_v_nonspecific_dE = (__pyx_v_nonspecific_dE - (__pyx_v_6chromo_6fields_E_HUGE * (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_vol_fracs.data + __pyx_t_8 * __pyx_v_vol_fracs.strides[0]) )) + __pyx_t_10)) )))));

      /* "chromo/fields.pyx":1836
 * 
 *             # Current volume fractions
 *             if vol_fracs[0, i] > self.vf_limit:             # <<<<<<<<<<<<<<
 *                 nonspecific_dE -= E_HUGE * vol_fracs[0, i]
 *             else:
 */
      goto __pyx_L6;
    }

    /* "chromo/fields.pyx":1839
 *                 nonspecific_dE -= E_HUGE * vol_fracs[0, i]
 *             else:
 *                 nonspecific_dE -= self.chi * (access_vol / bead_V) *\             # <<<<<<<<<<<<<<
 *                                   vol_fracs[0, i] ** 2
 * 
 */
    /*else*/ {
      if (unlikely(__pyx_v_bead_V == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 1839, __pyx_L1_error)
      }

      /* "chromo/fields.pyx":1840
 *             else:
 *                 nonspecific_dE -= self.chi * (access_vol / bead_V) *\
 *                                   vol_fracs[0, i] ** 2             # <<<<<<<<<<<<<<
 * 
 *         return nonspecific_dE
 */
      __pyx_t_10 = 0;
      __pyx_t_8 = __pyx_v_i;
      __pyx_t_9 = -1;
      if (__pyx_t_10 < 0) {
        __pyx_t_10 += __pyx_v_vol_fracs.shape[0];
        if (unlikely(__pyx_t_10 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_10 >= __pyx_v_vol_fracs.shape[0])) __pyx_t_9 = 0;
      if (__pyx_t_8 < 0) {
        __pyx_t_8 += __pyx_v_vol_fracs.shape[1];
        if (unlikely(__pyx_t_8 < 0)) __pyx_t_9 = 1;
      } else if (unlikely(__pyx_t_8 >= __pyx_v_vol_fracs.shape[1])) __pyx_t_9 = 1;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        __PYX_ERR(0, 1840, __pyx_L1_error)
      }

      /* "chromo/fields.pyx":1839
 *                 nonspecific_dE -= E_HUGE * vol_fracs[0, i]
 *             else:
 *                 nonspecific_dE -= self.chi * (access_vol / bead_V) *\             # <<<<<<<<<<<<<<
 *                                   vol_fracs[0, i] ** 2
 * 
 */
      __pyx_v_nonspecific_dE = (__pyx_v_nonspecific_dE - ((__pyx_v_self->chi * (__pyx_v_access_vol / __pyx_v_bead_V)) * pow((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_vol_fracs.data + __pyx_t_10 * __pyx_v_vol_fracs.strides[0]) )) + __pyx_t_8)) ))), 2.0)));
    }
    __pyx_L6:;
  }

  /* "chromo/fields.pyx":1842
 *                                   vol_fracs[0, i] ** 2
 * 
 *         return nonspecific_dE             # <<<<<<<<<<<<<<
 * 
 *     cdef double[:, ::1] get_volume_fractions_with_trial(
 */
  __pyx_r = __pyx_v_nonspecific_dE;
  goto __pyx_L0;

  /* "chromo/fields.pyx":1792
 *         return dE_binders_beads
 * 
 *     cdef double nonspecific_interact_dE(             # <<<<<<<<<<<<<<
 *         self, poly.PolymerBase poly, long[:] bin_inds, long n_bins
 *     ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __PYX_XDEC_MEMVIEW(&__pyx_t_4, 1);
  __Pyx_WriteUnraisable("chromo.fields.UniformDensityField.nonspecific_interact_dE", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_vol_fracs, 1);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":1844
 *         return nonspecific_dE
 * 
 *     cdef double[:, ::1] get_volume_fractions_with_trial(             # <<<<<<<<<<<<<<
 *         self, double bead_V, long[:] bin_inds, long n_bins
 *     ):
 */

static __Pyx_memviewslice __pyx_f_6chromo_6fields_19UniformDensityField_get_volume_fractions_with_trial(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, double __pyx_v_bead_V, __Pyx_memviewslice __pyx_v_bin_inds, long __pyx_v_n_bins) {
  long __pyx_v_j;
  double __pyx_v_density;
  double __pyx_v_change_in_density;
  __Pyx_memviewslice __pyx_v_vol_fracs = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_r = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_memviewslice __pyx_t_5 = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_t_6;
  long __pyx_t_7;
  long __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_volume_fractions_with_trial", 0);
  __Pyx_TraceCall("get_volume_fractions_with_trial", __pyx_f[0], 1844, 0, __PYX_ERR(0, 1844, __pyx_L1_error));

  /* "chromo/fields.pyx":1868
 *         cdef long i, j
 *         cdef double density, change_in_density
 *         cdef double[:, ::1] vol_fracs = np.empty((2, n_bins), dtype=float)             # <<<<<<<<<<<<<<
 * 
 *         for j in range(n_bins):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_n_bins); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(0, 1868, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_double(__pyx_t_4, PyBUF_WRITABLE); if (unlikely(!__pyx_t_5.memview)) __PYX_ERR(0, 1868, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_vol_fracs = __pyx_t_5;
  __pyx_t_5.memview = NULL;
  __pyx_t_5.data = NULL;

  /* "chromo/fields.pyx":1870
 *         cdef double[:, ::1] vol_fracs = np.empty((2, n_bins), dtype=float)
 * 
 *         for j in range(n_bins):             # <<<<<<<<<<<<<<
 *             density = self.density[bin_inds[j], 0]
 *             change_in_density = self.density_trial[bin_inds[j], 0]
 */
  __pyx_t_6 = __pyx_v_n_bins;
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_j = __pyx_t_8;

    /* "chromo/fields.pyx":1871
 * 
 *         for j in range(n_bins):
 *             density = self.density[bin_inds[j], 0]             # <<<<<<<<<<<<<<
 *             change_in_density = self.density_trial[bin_inds[j], 0]
 *             vol_fracs[0, j] = density * bead_V
 */
    if (unlikely(!__pyx_v_self->density.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1871, __pyx_L1_error)}
    __pyx_t_9 = __pyx_v_j;
    __pyx_t_10 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_bin_inds.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_bin_inds.shape[0])) __pyx_t_10 = 0;
    if (unlikely(__pyx_t_10 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_10);
      __PYX_ERR(0, 1871, __pyx_L1_error)
    }
    __pyx_t_11 = (*((long *) ( /* dim=0 */ (__pyx_v_bin_inds.data + __pyx_t_9 * __pyx_v_bin_inds.strides[0]) )));
    __pyx_t_12 = 0;
    __pyx_t_10 = -1;
    if (__pyx_t_11 < 0) {
      __pyx_t_11 += __pyx_v_self->density.shape[0];
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_10 = 0;
    } else if (unlikely(__pyx_t_11 >= __pyx_v_self->density.shape[0])) __pyx_t_10 = 0;
    if (__pyx_t_12 < 0) {
      __pyx_t_12 += __pyx_v_self->density.shape[1];
      if (unlikely(__pyx_t_12 < 0)) __pyx_t_10 = 1;
    } else if (unlikely(__pyx_t_12 >= __pyx_v_self->density.shape[1])) __pyx_t_10 = 1;
    if (unlikely(__pyx_t_10 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_10);
      __PYX_ERR(0, 1871, __pyx_L1_error)
    }
    __pyx_v_density = (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density.data + __pyx_t_11 * __pyx_v_self->density.strides[0]) )) + __pyx_t_12)) )));

    /* "chromo/fields.pyx":1872
 *         for j in range(n_bins):
 *             density = self.density[bin_inds[j], 0]
 *             change_in_density = self.density_trial[bin_inds[j], 0]             # <<<<<<<<<<<<<<
 *             vol_fracs[0, j] = density * bead_V
 *             vol_fracs[1, j] = vol_fracs[0, j] + (change_in_density * bead_V)
 */
    if (unlikely(!__pyx_v_self->density_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1872, __pyx_L1_error)}
    __pyx_t_9 = __pyx_v_j;
    __pyx_t_10 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_bin_inds.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_bin_inds.shape[0])) __pyx_t_10 = 0;
    if (unlikely(__pyx_t_10 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_10);
      __PYX_ERR(0, 1872, __pyx_L1_error)
    }
    __pyx_t_12 = (*((long *) ( /* dim=0 */ (__pyx_v_bin_inds.data + __pyx_t_9 * __pyx_v_bin_inds.strides[0]) )));
    __pyx_t_11 = 0;
    __pyx_t_10 = -1;
    if (__pyx_t_12 < 0) {
      __pyx_t_12 += __pyx_v_self->density_trial.shape[0];
      if (unlikely(__pyx_t_12 < 0)) __pyx_t_10 = 0;
    } else if (unlikely(__pyx_t_12 >= __pyx_v_self->density_trial.shape[0])) __pyx_t_10 = 0;
    if (__pyx_t_11 < 0) {
      __pyx_t_11 += __pyx_v_self->density_trial.shape[1];
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_10 = 1;
    } else if (unlikely(__pyx_t_11 >= __pyx_v_self->density_trial.shape[1])) __pyx_t_10 = 1;
    if (unlikely(__pyx_t_10 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_10);
      __PYX_ERR(0, 1872, __pyx_L1_error)
    }
    __pyx_v_change_in_density = (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density_trial.data + __pyx_t_12 * __pyx_v_self->density_trial.strides[0]) )) + __pyx_t_11)) )));

    /* "chromo/fields.pyx":1873
 *             density = self.density[bin_inds[j], 0]
 *             change_in_density = self.density_trial[bin_inds[j], 0]
 *             vol_fracs[0, j] = density * bead_V             # <<<<<<<<<<<<<<
 *             vol_fracs[1, j] = vol_fracs[0, j] + (change_in_density * bead_V)
 *         return vol_fracs
 */
    __pyx_t_9 = 0;
    __pyx_t_11 = __pyx_v_j;
    __pyx_t_10 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_vol_fracs.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_vol_fracs.shape[0])) __pyx_t_10 = 0;
    if (__pyx_t_11 < 0) {
      __pyx_t_11 += __pyx_v_vol_fracs.shape[1];
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_10 = 1;
    } else if (unlikely(__pyx_t_11 >= __pyx_v_vol_fracs.shape[1])) __pyx_t_10 = 1;
    if (unlikely(__pyx_t_10 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_10);
      __PYX_ERR(0, 1873, __pyx_L1_error)
    }
    *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_vol_fracs.data + __pyx_t_9 * __pyx_v_vol_fracs.strides[0]) )) + __pyx_t_11)) )) = (__pyx_v_density * __pyx_v_bead_V);

    /* "chromo/fields.pyx":1874
 *             change_in_density = self.density_trial[bin_inds[j], 0]
 *             vol_fracs[0, j] = density * bead_V
 *             vol_fracs[1, j] = vol_fracs[0, j] + (change_in_density * bead_V)             # <<<<<<<<<<<<<<
 *         return vol_fracs
 * 
 */
    __pyx_t_11 = 0;
    __pyx_t_9 = __pyx_v_j;
    __pyx_t_10 = -1;
    if (__pyx_t_11 < 0) {
      __pyx_t_11 += __pyx_v_vol_fracs.shape[0];
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_10 = 0;
    } else if (unlikely(__pyx_t_11 >= __pyx_v_vol_fracs.shape[0])) __pyx_t_10 = 0;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_vol_fracs.shape[1];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 1;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_vol_fracs.shape[1])) __pyx_t_10 = 1;
    if (unlikely(__pyx_t_10 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_10);
      __PYX_ERR(0, 1874, __pyx_L1_error)
    }
    __pyx_t_12 = 1;
    __pyx_t_13 = __pyx_v_j;
    __pyx_t_10 = -1;
    if (__pyx_t_12 < 0) {
      __pyx_t_12 += __pyx_v_vol_fracs.shape[0];
      if (unlikely(__pyx_t_12 < 0)) __pyx_t_10 = 0;
    } else if (unlikely(__pyx_t_12 >= __pyx_v_vol_fracs.shape[0])) __pyx_t_10 = 0;
    if (__pyx_t_13 < 0) {
      __pyx_t_13 += __pyx_v_vol_fracs.shape[1];
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_10 = 1;
    } else if (unlikely(__pyx_t_13 >= __pyx_v_vol_fracs.shape[1])) __pyx_t_10 = 1;
    if (unlikely(__pyx_t_10 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_10);
      __PYX_ERR(0, 1874, __pyx_L1_error)
    }
    *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_vol_fracs.data + __pyx_t_12 * __pyx_v_vol_fracs.strides[0]) )) + __pyx_t_13)) )) = ((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_vol_fracs.data + __pyx_t_11 * __pyx_v_vol_fracs.strides[0]) )) + __pyx_t_9)) ))) + (__pyx_v_change_in_density * __pyx_v_bead_V));
  }

  /* "chromo/fields.pyx":1875
 *             vol_fracs[0, j] = density * bead_V
 *             vol_fracs[1, j] = vol_fracs[0, j] + (change_in_density * bead_V)
 *         return vol_fracs             # <<<<<<<<<<<<<<
 * 
 *     cdef void count_doubly_bound(
 */
  __PYX_INC_MEMVIEW(&__pyx_v_vol_fracs, 0);
  __pyx_r = __pyx_v_vol_fracs;
  goto __pyx_L0;

  /* "chromo/fields.pyx":1844
 *         return nonspecific_dE
 * 
 *     cdef double[:, ::1] get_volume_fractions_with_trial(             # <<<<<<<<<<<<<<
 *         self, double bead_V, long[:] bin_inds, long n_bins
 *     ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __PYX_XDEC_MEMVIEW(&__pyx_t_5, 1);
  __pyx_r.data = NULL;
  __pyx_r.memview = NULL;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.get_volume_fractions_with_trial", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  if (unlikely(!__pyx_r.memview)) {
    PyErr_SetString(PyExc_TypeError, "Memoryview return value is not initialized");
  }
  __pyx_L2:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_vol_fracs, 1);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":1877
 *         return vol_fracs
 * 
 *     cdef void count_doubly_bound(             # <<<<<<<<<<<<<<
 *         self, poly.PolymerBase poly, long[:] inds, long n_inds, bint trial,
 *         bint state_change
 */

static void __pyx_f_6chromo_6fields_19UniformDensityField_count_doubly_bound(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, __Pyx_memviewslice __pyx_v_inds, long __pyx_v_n_inds, int __pyx_v_trial, int __pyx_v_state_change) {
  long __pyx_v_i;
  long __pyx_v_j;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  long __pyx_t_2;
  long __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  long __pyx_t_6;
  long __pyx_t_7;
  long __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count_doubly_bound", 0);
  __Pyx_TraceCall("count_doubly_bound", __pyx_f[0], 1877, 0, __PYX_ERR(0, 1877, __pyx_L1_error));

  /* "chromo/fields.pyx":1913
 * 
 *         # Count doubly-bound beads for current configuration
 *         if trial == 0:             # <<<<<<<<<<<<<<
 *             for j in range(poly.num_binders):
 *                 self.doubly_bound[j] = 0
 */
  switch (__pyx_v_trial) {
    case 0:

    /* "chromo/fields.pyx":1914
 *         # Count doubly-bound beads for current configuration
 *         if trial == 0:
 *             for j in range(poly.num_binders):             # <<<<<<<<<<<<<<
 *                 self.doubly_bound[j] = 0
 *                 for i in range(n_inds):
 */
    __pyx_t_1 = __pyx_v_poly->num_binders;
    __pyx_t_2 = __pyx_t_1;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_j = __pyx_t_3;

      /* "chromo/fields.pyx":1915
 *         if trial == 0:
 *             for j in range(poly.num_binders):
 *                 self.doubly_bound[j] = 0             # <<<<<<<<<<<<<<
 *                 for i in range(n_inds):
 *                     if poly.states[inds[i], j] == 2:
 */
      if (unlikely(!__pyx_v_self->doubly_bound.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1915, __pyx_L1_error)}
      __pyx_t_4 = __pyx_v_j;
      __pyx_t_5 = -1;
      if (__pyx_t_4 < 0) {
        __pyx_t_4 += __pyx_v_self->doubly_bound.shape[0];
        if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
      } else if (unlikely(__pyx_t_4 >= __pyx_v_self->doubly_bound.shape[0])) __pyx_t_5 = 0;
      if (unlikely(__pyx_t_5 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_5);
        __PYX_ERR(0, 1915, __pyx_L1_error)
      }
      *((long *) ( /* dim=0 */ (__pyx_v_self->doubly_bound.data + __pyx_t_4 * __pyx_v_self->doubly_bound.strides[0]) )) = 0;

      /* "chromo/fields.pyx":1916
 *             for j in range(poly.num_binders):
 *                 self.doubly_bound[j] = 0
 *                 for i in range(n_inds):             # <<<<<<<<<<<<<<
 *                     if poly.states[inds[i], j] == 2:
 *                         self.doubly_bound[j] += 1
 */
      __pyx_t_6 = __pyx_v_n_inds;
      __pyx_t_7 = __pyx_t_6;
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_i = __pyx_t_8;

        /* "chromo/fields.pyx":1917
 *                 self.doubly_bound[j] = 0
 *                 for i in range(n_inds):
 *                     if poly.states[inds[i], j] == 2:             # <<<<<<<<<<<<<<
 *                         self.doubly_bound[j] += 1
 * 
 */
        if (unlikely(!__pyx_v_poly->states.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1917, __pyx_L1_error)}
        __pyx_t_4 = __pyx_v_i;
        __pyx_t_5 = -1;
        if (__pyx_t_4 < 0) {
          __pyx_t_4 += __pyx_v_inds.shape[0];
          if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
        } else if (unlikely(__pyx_t_4 >= __pyx_v_inds.shape[0])) __pyx_t_5 = 0;
        if (unlikely(__pyx_t_5 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_5);
          __PYX_ERR(0, 1917, __pyx_L1_error)
        }
        __pyx_t_9 = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_4 * __pyx_v_inds.strides[0]) )));
        __pyx_t_10 = __pyx_v_j;
        __pyx_t_5 = -1;
        if (__pyx_t_9 < 0) {
          __pyx_t_9 += __pyx_v_poly->states.shape[0];
          if (unlikely(__pyx_t_9 < 0)) __pyx_t_5 = 0;
        } else if (unlikely(__pyx_t_9 >= __pyx_v_poly->states.shape[0])) __pyx_t_5 = 0;
        if (__pyx_t_10 < 0) {
          __pyx_t_10 += __pyx_v_poly->states.shape[1];
          if (unlikely(__pyx_t_10 < 0)) __pyx_t_5 = 1;
        } else if (unlikely(__pyx_t_10 >= __pyx_v_poly->states.shape[1])) __pyx_t_5 = 1;
        if (unlikely(__pyx_t_5 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_5);
          __PYX_ERR(0, 1917, __pyx_L1_error)
        }
        __pyx_t_11 = (((*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_poly->states.data + __pyx_t_9 * __pyx_v_poly->states.strides[0]) )) + __pyx_t_10)) ))) == 2) != 0);
        if (__pyx_t_11) {

          /* "chromo/fields.pyx":1918
 *                 for i in range(n_inds):
 *                     if poly.states[inds[i], j] == 2:
 *                         self.doubly_bound[j] += 1             # <<<<<<<<<<<<<<
 * 
 *         # Count doubly-bound beads for trial configuration
 */
          if (unlikely(!__pyx_v_self->doubly_bound.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1918, __pyx_L1_error)}
          __pyx_t_4 = __pyx_v_j;
          __pyx_t_5 = -1;
          if (__pyx_t_4 < 0) {
            __pyx_t_4 += __pyx_v_self->doubly_bound.shape[0];
            if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
          } else if (unlikely(__pyx_t_4 >= __pyx_v_self->doubly_bound.shape[0])) __pyx_t_5 = 0;
          if (unlikely(__pyx_t_5 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_5);
            __PYX_ERR(0, 1918, __pyx_L1_error)
          }
          *((long *) ( /* dim=0 */ (__pyx_v_self->doubly_bound.data + __pyx_t_4 * __pyx_v_self->doubly_bound.strides[0]) )) += 1;

          /* "chromo/fields.pyx":1917
 *                 self.doubly_bound[j] = 0
 *                 for i in range(n_inds):
 *                     if poly.states[inds[i], j] == 2:             # <<<<<<<<<<<<<<
 *                         self.doubly_bound[j] += 1
 * 
 */
        }
      }
    }

    /* "chromo/fields.pyx":1913
 * 
 *         # Count doubly-bound beads for current configuration
 *         if trial == 0:             # <<<<<<<<<<<<<<
 *             for j in range(poly.num_binders):
 *                 self.doubly_bound[j] = 0
 */
    break;
    case 1:

    /* "chromo/fields.pyx":1922
 *         # Count doubly-bound beads for trial configuration
 *         elif trial == 1:
 *             if state_change == 1:             # <<<<<<<<<<<<<<
 *                 for j in range(poly.num_binders):
 *                     self.doubly_bound_trial[j] = 0
 */
    __pyx_t_11 = ((__pyx_v_state_change == 1) != 0);
    if (__pyx_t_11) {

      /* "chromo/fields.pyx":1923
 *         elif trial == 1:
 *             if state_change == 1:
 *                 for j in range(poly.num_binders):             # <<<<<<<<<<<<<<
 *                     self.doubly_bound_trial[j] = 0
 *                     for i in range(n_inds):
 */
      __pyx_t_1 = __pyx_v_poly->num_binders;
      __pyx_t_2 = __pyx_t_1;
      for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
        __pyx_v_j = __pyx_t_3;

        /* "chromo/fields.pyx":1924
 *             if state_change == 1:
 *                 for j in range(poly.num_binders):
 *                     self.doubly_bound_trial[j] = 0             # <<<<<<<<<<<<<<
 *                     for i in range(n_inds):
 *                         if poly.states_trial[inds[i], j] == 2:
 */
        if (unlikely(!__pyx_v_self->doubly_bound_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1924, __pyx_L1_error)}
        __pyx_t_4 = __pyx_v_j;
        __pyx_t_5 = -1;
        if (__pyx_t_4 < 0) {
          __pyx_t_4 += __pyx_v_self->doubly_bound_trial.shape[0];
          if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
        } else if (unlikely(__pyx_t_4 >= __pyx_v_self->doubly_bound_trial.shape[0])) __pyx_t_5 = 0;
        if (unlikely(__pyx_t_5 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_5);
          __PYX_ERR(0, 1924, __pyx_L1_error)
        }
        *((long *) ( /* dim=0 */ (__pyx_v_self->doubly_bound_trial.data + __pyx_t_4 * __pyx_v_self->doubly_bound_trial.strides[0]) )) = 0;

        /* "chromo/fields.pyx":1925
 *                 for j in range(poly.num_binders):
 *                     self.doubly_bound_trial[j] = 0
 *                     for i in range(n_inds):             # <<<<<<<<<<<<<<
 *                         if poly.states_trial[inds[i], j] == 2:
 *                             self.doubly_bound_trial[j] += 1
 */
        __pyx_t_6 = __pyx_v_n_inds;
        __pyx_t_7 = __pyx_t_6;
        for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
          __pyx_v_i = __pyx_t_8;

          /* "chromo/fields.pyx":1926
 *                     self.doubly_bound_trial[j] = 0
 *                     for i in range(n_inds):
 *                         if poly.states_trial[inds[i], j] == 2:             # <<<<<<<<<<<<<<
 *                             self.doubly_bound_trial[j] += 1
 *             else:
 */
          if (unlikely(!__pyx_v_poly->states_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1926, __pyx_L1_error)}
          __pyx_t_4 = __pyx_v_i;
          __pyx_t_5 = -1;
          if (__pyx_t_4 < 0) {
            __pyx_t_4 += __pyx_v_inds.shape[0];
            if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
          } else if (unlikely(__pyx_t_4 >= __pyx_v_inds.shape[0])) __pyx_t_5 = 0;
          if (unlikely(__pyx_t_5 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_5);
            __PYX_ERR(0, 1926, __pyx_L1_error)
          }
          __pyx_t_10 = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_4 * __pyx_v_inds.strides[0]) )));
          __pyx_t_9 = __pyx_v_j;
          __pyx_t_5 = -1;
          if (__pyx_t_10 < 0) {
            __pyx_t_10 += __pyx_v_poly->states_trial.shape[0];
            if (unlikely(__pyx_t_10 < 0)) __pyx_t_5 = 0;
          } else if (unlikely(__pyx_t_10 >= __pyx_v_poly->states_trial.shape[0])) __pyx_t_5 = 0;
          if (__pyx_t_9 < 0) {
            __pyx_t_9 += __pyx_v_poly->states_trial.shape[1];
            if (unlikely(__pyx_t_9 < 0)) __pyx_t_5 = 1;
          } else if (unlikely(__pyx_t_9 >= __pyx_v_poly->states_trial.shape[1])) __pyx_t_5 = 1;
          if (unlikely(__pyx_t_5 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_5);
            __PYX_ERR(0, 1926, __pyx_L1_error)
          }
          __pyx_t_11 = (((*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_poly->states_trial.data + __pyx_t_10 * __pyx_v_poly->states_trial.strides[0]) )) + __pyx_t_9)) ))) == 2) != 0);
          if (__pyx_t_11) {

            /* "chromo/fields.pyx":1927
 *                     for i in range(n_inds):
 *                         if poly.states_trial[inds[i], j] == 2:
 *                             self.doubly_bound_trial[j] += 1             # <<<<<<<<<<<<<<
 *             else:
 *                 for j in range(poly.num_binders):
 */
            if (unlikely(!__pyx_v_self->doubly_bound_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1927, __pyx_L1_error)}
            __pyx_t_4 = __pyx_v_j;
            __pyx_t_5 = -1;
            if (__pyx_t_4 < 0) {
              __pyx_t_4 += __pyx_v_self->doubly_bound_trial.shape[0];
              if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
            } else if (unlikely(__pyx_t_4 >= __pyx_v_self->doubly_bound_trial.shape[0])) __pyx_t_5 = 0;
            if (unlikely(__pyx_t_5 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_5);
              __PYX_ERR(0, 1927, __pyx_L1_error)
            }
            *((long *) ( /* dim=0 */ (__pyx_v_self->doubly_bound_trial.data + __pyx_t_4 * __pyx_v_self->doubly_bound_trial.strides[0]) )) += 1;

            /* "chromo/fields.pyx":1926
 *                     self.doubly_bound_trial[j] = 0
 *                     for i in range(n_inds):
 *                         if poly.states_trial[inds[i], j] == 2:             # <<<<<<<<<<<<<<
 *                             self.doubly_bound_trial[j] += 1
 *             else:
 */
          }
        }
      }

      /* "chromo/fields.pyx":1922
 *         # Count doubly-bound beads for trial configuration
 *         elif trial == 1:
 *             if state_change == 1:             # <<<<<<<<<<<<<<
 *                 for j in range(poly.num_binders):
 *                     self.doubly_bound_trial[j] = 0
 */
      goto __pyx_L8;
    }

    /* "chromo/fields.pyx":1929
 *                             self.doubly_bound_trial[j] += 1
 *             else:
 *                 for j in range(poly.num_binders):             # <<<<<<<<<<<<<<
 *                     self.doubly_bound_trial[j] = 0
 *                     for i in range(n_inds):
 */
    /*else*/ {
      __pyx_t_1 = __pyx_v_poly->num_binders;
      __pyx_t_2 = __pyx_t_1;
      for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
        __pyx_v_j = __pyx_t_3;

        /* "chromo/fields.pyx":1930
 *             else:
 *                 for j in range(poly.num_binders):
 *                     self.doubly_bound_trial[j] = 0             # <<<<<<<<<<<<<<
 *                     for i in range(n_inds):
 *                         if poly.states[inds[i], j] == 2:
 */
        if (unlikely(!__pyx_v_self->doubly_bound_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1930, __pyx_L1_error)}
        __pyx_t_4 = __pyx_v_j;
        __pyx_t_5 = -1;
        if (__pyx_t_4 < 0) {
          __pyx_t_4 += __pyx_v_self->doubly_bound_trial.shape[0];
          if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
        } else if (unlikely(__pyx_t_4 >= __pyx_v_self->doubly_bound_trial.shape[0])) __pyx_t_5 = 0;
        if (unlikely(__pyx_t_5 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_5);
          __PYX_ERR(0, 1930, __pyx_L1_error)
        }
        *((long *) ( /* dim=0 */ (__pyx_v_self->doubly_bound_trial.data + __pyx_t_4 * __pyx_v_self->doubly_bound_trial.strides[0]) )) = 0;

        /* "chromo/fields.pyx":1931
 *                 for j in range(poly.num_binders):
 *                     self.doubly_bound_trial[j] = 0
 *                     for i in range(n_inds):             # <<<<<<<<<<<<<<
 *                         if poly.states[inds[i], j] == 2:
 *                             self.doubly_bound_trial[j] += 1
 */
        __pyx_t_6 = __pyx_v_n_inds;
        __pyx_t_7 = __pyx_t_6;
        for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
          __pyx_v_i = __pyx_t_8;

          /* "chromo/fields.pyx":1932
 *                     self.doubly_bound_trial[j] = 0
 *                     for i in range(n_inds):
 *                         if poly.states[inds[i], j] == 2:             # <<<<<<<<<<<<<<
 *                             self.doubly_bound_trial[j] += 1
 * 
 */
          if (unlikely(!__pyx_v_poly->states.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1932, __pyx_L1_error)}
          __pyx_t_4 = __pyx_v_i;
          __pyx_t_5 = -1;
          if (__pyx_t_4 < 0) {
            __pyx_t_4 += __pyx_v_inds.shape[0];
            if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
          } else if (unlikely(__pyx_t_4 >= __pyx_v_inds.shape[0])) __pyx_t_5 = 0;
          if (unlikely(__pyx_t_5 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_5);
            __PYX_ERR(0, 1932, __pyx_L1_error)
          }
          __pyx_t_9 = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_4 * __pyx_v_inds.strides[0]) )));
          __pyx_t_10 = __pyx_v_j;
          __pyx_t_5 = -1;
          if (__pyx_t_9 < 0) {
            __pyx_t_9 += __pyx_v_poly->states.shape[0];
            if (unlikely(__pyx_t_9 < 0)) __pyx_t_5 = 0;
          } else if (unlikely(__pyx_t_9 >= __pyx_v_poly->states.shape[0])) __pyx_t_5 = 0;
          if (__pyx_t_10 < 0) {
            __pyx_t_10 += __pyx_v_poly->states.shape[1];
            if (unlikely(__pyx_t_10 < 0)) __pyx_t_5 = 1;
          } else if (unlikely(__pyx_t_10 >= __pyx_v_poly->states.shape[1])) __pyx_t_5 = 1;
          if (unlikely(__pyx_t_5 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_5);
            __PYX_ERR(0, 1932, __pyx_L1_error)
          }
          __pyx_t_11 = (((*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_poly->states.data + __pyx_t_9 * __pyx_v_poly->states.strides[0]) )) + __pyx_t_10)) ))) == 2) != 0);
          if (__pyx_t_11) {

            /* "chromo/fields.pyx":1933
 *                     for i in range(n_inds):
 *                         if poly.states[inds[i], j] == 2:
 *                             self.doubly_bound_trial[j] += 1             # <<<<<<<<<<<<<<
 * 
 *         # Raise error if invalid `trial` flag is passed
 */
            if (unlikely(!__pyx_v_self->doubly_bound_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1933, __pyx_L1_error)}
            __pyx_t_4 = __pyx_v_j;
            __pyx_t_5 = -1;
            if (__pyx_t_4 < 0) {
              __pyx_t_4 += __pyx_v_self->doubly_bound_trial.shape[0];
              if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
            } else if (unlikely(__pyx_t_4 >= __pyx_v_self->doubly_bound_trial.shape[0])) __pyx_t_5 = 0;
            if (unlikely(__pyx_t_5 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_5);
              __PYX_ERR(0, 1933, __pyx_L1_error)
            }
            *((long *) ( /* dim=0 */ (__pyx_v_self->doubly_bound_trial.data + __pyx_t_4 * __pyx_v_self->doubly_bound_trial.strides[0]) )) += 1;

            /* "chromo/fields.pyx":1932
 *                     self.doubly_bound_trial[j] = 0
 *                     for i in range(n_inds):
 *                         if poly.states[inds[i], j] == 2:             # <<<<<<<<<<<<<<
 *                             self.doubly_bound_trial[j] += 1
 * 
 */
          }
        }
      }
    }
    __pyx_L8:;

    /* "chromo/fields.pyx":1921
 * 
 *         # Count doubly-bound beads for trial configuration
 *         elif trial == 1:             # <<<<<<<<<<<<<<
 *             if state_change == 1:
 *                 for j in range(poly.num_binders):
 */
    break;
    default:

    /* "chromo/fields.pyx":1937
 *         # Raise error if invalid `trial` flag is passed
 *         else:
 *             raise ValueError("Invalid current/trial state indicator.")             # <<<<<<<<<<<<<<
 * 
 *     cpdef double compute_E(self, poly.PolymerBase poly):
 */
    __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1937, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_Raise(__pyx_t_12, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __PYX_ERR(0, 1937, __pyx_L1_error)
    break;
  }

  /* "chromo/fields.pyx":1877
 *         return vol_fracs
 * 
 *     cdef void count_doubly_bound(             # <<<<<<<<<<<<<<
 *         self, poly.PolymerBase poly, long[:] inds, long n_inds, bint trial,
 *         bint state_change
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("chromo.fields.UniformDensityField.count_doubly_bound", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "chromo/fields.pyx":1939
 *             raise ValueError("Invalid current/trial state indicator.")
 * 
 *     cpdef double compute_E(self, poly.PolymerBase poly):             # <<<<<<<<<<<<<<
 *         """Compute total field energy for the current polymer configuration.
 * 
 */

static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_21compute_E(PyObject *__pyx_v_self, PyObject *__pyx_v_poly); /*proto*/
static double __pyx_f_6chromo_6fields_19UniformDensityField_compute_E(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, int __pyx_skip_dispatch) {
  long __pyx_v_n_inds;
  double __pyx_v_E;
  __Pyx_memviewslice __pyx_v_inds = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  long __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_E", 0);
  __Pyx_TraceCall("compute_E", __pyx_f[0], 1939, 0, __PYX_ERR(0, 1939, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compute_E); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1939, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6chromo_6fields_19UniformDensityField_21compute_E)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_poly)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_poly));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1939, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1939, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_5;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "chromo/fields.pyx":1962
 *         cdef long[:] inds
 * 
 *         n_inds = poly.num_beads             # <<<<<<<<<<<<<<
 *         inds = np.arange(0, n_inds, 1)
 *         self.update_all_densities(poly, inds, n_inds)
 */
  __pyx_t_6 = __pyx_v_poly->num_beads;
  __pyx_v_n_inds = __pyx_t_6;

  /* "chromo/fields.pyx":1963
 * 
 *         n_inds = poly.num_beads
 *         inds = np.arange(0, n_inds, 1)             # <<<<<<<<<<<<<<
 *         self.update_all_densities(poly, inds, n_inds)
 *         E = self.get_E_binders_and_beads(poly, inds, n_inds)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_arange); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_n_inds); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_int_0, __pyx_t_2, __pyx_int_1};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1963, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_int_0, __pyx_t_2, __pyx_int_1};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1963, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_2);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_int_1);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 1963, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_inds = __pyx_t_9;
  __pyx_t_9.memview = NULL;
  __pyx_t_9.data = NULL;

  /* "chromo/fields.pyx":1964
 *         n_inds = poly.num_beads
 *         inds = np.arange(0, n_inds, 1)
 *         self.update_all_densities(poly, inds, n_inds)             # <<<<<<<<<<<<<<
 *         E = self.get_E_binders_and_beads(poly, inds, n_inds)
 *         return E
 */
  ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->update_all_densities(__pyx_v_self, __pyx_v_poly, __pyx_v_inds, __pyx_v_n_inds, 0);

  /* "chromo/fields.pyx":1965
 *         inds = np.arange(0, n_inds, 1)
 *         self.update_all_densities(poly, inds, n_inds)
 *         E = self.get_E_binders_and_beads(poly, inds, n_inds)             # <<<<<<<<<<<<<<
 *         return E
 * 
 */
  __pyx_v_E = ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_E_binders_and_beads(__pyx_v_self, __pyx_v_poly, __pyx_v_inds, __pyx_v_n_inds);

  /* "chromo/fields.pyx":1966
 *         self.update_all_densities(poly, inds, n_inds)
 *         E = self.get_E_binders_and_beads(poly, inds, n_inds)
 *         return E             # <<<<<<<<<<<<<<
 * 
 *     cdef void update_affected_densities(self):
 */
  __pyx_r = __pyx_v_E;
  goto __pyx_L0;

  /* "chromo/fields.pyx":1939
 *             raise ValueError("Invalid current/trial state indicator.")
 * 
 *     cpdef double compute_E(self, poly.PolymerBase poly):             # <<<<<<<<<<<<<<
 *         """Compute total field energy for the current polymer configuration.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_WriteUnraisable("chromo.fields.UniformDensityField.compute_E", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_inds, 1);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_21compute_E(PyObject *__pyx_v_self, PyObject *__pyx_v_poly); /*proto*/
static char __pyx_doc_6chromo_6fields_19UniformDensityField_20compute_E[] = "Compute total field energy for the current polymer configuration.\n        \n        Notes\n        -----\n        Load the positions and states of the entire polymer. Then determine the\n        number density of beads in each bin of the field. Use these densities\n        and binder states on each bead to determine an overall field energy.\n\n        Parameters\n        ----------\n        poly : poly.PolymerBase\n            Polymer object undergoing transformation in field\n\n        Returns\n        -------\n        double\n            Total energy associated with the field\n        ";
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_21compute_E(PyObject *__pyx_v_self, PyObject *__pyx_v_poly) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_E (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_poly), __pyx_ptype_6chromo_8polymers_PolymerBase, 1, "poly", 0))) __PYX_ERR(0, 1939, __pyx_L1_error)
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_20compute_E(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((struct __pyx_obj_6chromo_8polymers_PolymerBase *)__pyx_v_poly));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_20compute_E(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_E", 0);
  __Pyx_TraceCall("compute_E (wrapper)", __pyx_f[0], 1939, 0, __PYX_ERR(0, 1939, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_6chromo_6fields_19UniformDensityField_compute_E(__pyx_v_self, __pyx_v_poly, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.compute_E", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":1968
 *         return E
 * 
 *     cdef void update_affected_densities(self):             # <<<<<<<<<<<<<<
 *         """Update densities in affected bins when a move is accepted.
 *         """
 */

static void __pyx_f_6chromo_6fields_19UniformDensityField_update_affected_densities(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  long __pyx_v_i;
  long __pyx_v_j;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  long __pyx_t_2;
  long __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  long __pyx_t_7;
  long __pyx_t_8;
  long __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_affected_densities", 0);
  __Pyx_TraceCall("update_affected_densities", __pyx_f[0], 1968, 0, __PYX_ERR(0, 1968, __pyx_L1_error));

  /* "chromo/fields.pyx":1971
 *         """Update densities in affected bins when a move is accepted.
 *         """
 *         for i in range(self.n_bins):             # <<<<<<<<<<<<<<
 *             if self.affected_bins_last_move[i] == 1:
 *                 for j in range(self.num_binders+1):
 */
  __pyx_t_1 = __pyx_v_self->n_bins;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "chromo/fields.pyx":1972
 *         """
 *         for i in range(self.n_bins):
 *             if self.affected_bins_last_move[i] == 1:             # <<<<<<<<<<<<<<
 *                 for j in range(self.num_binders+1):
 *                     self.density[i, j] += self.density_trial[i, j]
 */
    if (unlikely(!__pyx_v_self->affected_bins_last_move.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1972, __pyx_L1_error)}
    __pyx_t_4 = __pyx_v_i;
    __pyx_t_5 = -1;
    if (__pyx_t_4 < 0) {
      __pyx_t_4 += __pyx_v_self->affected_bins_last_move.shape[0];
      if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
    } else if (unlikely(__pyx_t_4 >= __pyx_v_self->affected_bins_last_move.shape[0])) __pyx_t_5 = 0;
    if (unlikely(__pyx_t_5 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_5);
      __PYX_ERR(0, 1972, __pyx_L1_error)
    }
    __pyx_t_6 = (((*((long *) ( /* dim=0 */ (__pyx_v_self->affected_bins_last_move.data + __pyx_t_4 * __pyx_v_self->affected_bins_last_move.strides[0]) ))) == 1) != 0);
    if (__pyx_t_6) {

      /* "chromo/fields.pyx":1973
 *         for i in range(self.n_bins):
 *             if self.affected_bins_last_move[i] == 1:
 *                 for j in range(self.num_binders+1):             # <<<<<<<<<<<<<<
 *                     self.density[i, j] += self.density_trial[i, j]
 *                     self.density_trial[i, j] = 0
 */
      __pyx_t_7 = (__pyx_v_self->num_binders + 1);
      __pyx_t_8 = __pyx_t_7;
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_j = __pyx_t_9;

        /* "chromo/fields.pyx":1974
 *             if self.affected_bins_last_move[i] == 1:
 *                 for j in range(self.num_binders+1):
 *                     self.density[i, j] += self.density_trial[i, j]             # <<<<<<<<<<<<<<
 *                     self.density_trial[i, j] = 0
 * 
 */
        if (unlikely(!__pyx_v_self->density_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1974, __pyx_L1_error)}
        __pyx_t_4 = __pyx_v_i;
        __pyx_t_10 = __pyx_v_j;
        __pyx_t_5 = -1;
        if (__pyx_t_4 < 0) {
          __pyx_t_4 += __pyx_v_self->density_trial.shape[0];
          if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
        } else if (unlikely(__pyx_t_4 >= __pyx_v_self->density_trial.shape[0])) __pyx_t_5 = 0;
        if (__pyx_t_10 < 0) {
          __pyx_t_10 += __pyx_v_self->density_trial.shape[1];
          if (unlikely(__pyx_t_10 < 0)) __pyx_t_5 = 1;
        } else if (unlikely(__pyx_t_10 >= __pyx_v_self->density_trial.shape[1])) __pyx_t_5 = 1;
        if (unlikely(__pyx_t_5 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_5);
          __PYX_ERR(0, 1974, __pyx_L1_error)
        }
        if (unlikely(!__pyx_v_self->density.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1974, __pyx_L1_error)}
        __pyx_t_11 = __pyx_v_i;
        __pyx_t_12 = __pyx_v_j;
        __pyx_t_5 = -1;
        if (__pyx_t_11 < 0) {
          __pyx_t_11 += __pyx_v_self->density.shape[0];
          if (unlikely(__pyx_t_11 < 0)) __pyx_t_5 = 0;
        } else if (unlikely(__pyx_t_11 >= __pyx_v_self->density.shape[0])) __pyx_t_5 = 0;
        if (__pyx_t_12 < 0) {
          __pyx_t_12 += __pyx_v_self->density.shape[1];
          if (unlikely(__pyx_t_12 < 0)) __pyx_t_5 = 1;
        } else if (unlikely(__pyx_t_12 >= __pyx_v_self->density.shape[1])) __pyx_t_5 = 1;
        if (unlikely(__pyx_t_5 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_5);
          __PYX_ERR(0, 1974, __pyx_L1_error)
        }
        *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density.data + __pyx_t_11 * __pyx_v_self->density.strides[0]) )) + __pyx_t_12)) )) += (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density_trial.data + __pyx_t_4 * __pyx_v_self->density_trial.strides[0]) )) + __pyx_t_10)) )));

        /* "chromo/fields.pyx":1975
 *                 for j in range(self.num_binders+1):
 *                     self.density[i, j] += self.density_trial[i, j]
 *                     self.density_trial[i, j] = 0             # <<<<<<<<<<<<<<
 * 
 *     cpdef void update_all_densities(
 */
        if (unlikely(!__pyx_v_self->density_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1975, __pyx_L1_error)}
        __pyx_t_10 = __pyx_v_i;
        __pyx_t_4 = __pyx_v_j;
        __pyx_t_5 = -1;
        if (__pyx_t_10 < 0) {
          __pyx_t_10 += __pyx_v_self->density_trial.shape[0];
          if (unlikely(__pyx_t_10 < 0)) __pyx_t_5 = 0;
        } else if (unlikely(__pyx_t_10 >= __pyx_v_self->density_trial.shape[0])) __pyx_t_5 = 0;
        if (__pyx_t_4 < 0) {
          __pyx_t_4 += __pyx_v_self->density_trial.shape[1];
          if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 1;
        } else if (unlikely(__pyx_t_4 >= __pyx_v_self->density_trial.shape[1])) __pyx_t_5 = 1;
        if (unlikely(__pyx_t_5 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_5);
          __PYX_ERR(0, 1975, __pyx_L1_error)
        }
        *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density_trial.data + __pyx_t_10 * __pyx_v_self->density_trial.strides[0]) )) + __pyx_t_4)) )) = 0.0;
      }

      /* "chromo/fields.pyx":1972
 *         """
 *         for i in range(self.n_bins):
 *             if self.affected_bins_last_move[i] == 1:             # <<<<<<<<<<<<<<
 *                 for j in range(self.num_binders+1):
 *                     self.density[i, j] += self.density_trial[i, j]
 */
    }
  }

  /* "chromo/fields.pyx":1968
 *         return E
 * 
 *     cdef void update_affected_densities(self):             # <<<<<<<<<<<<<<
 *         """Update densities in affected bins when a move is accepted.
 *         """
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("chromo.fields.UniformDensityField.update_affected_densities", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "chromo/fields.pyx":1977
 *                     self.density_trial[i, j] = 0
 * 
 *     cpdef void update_all_densities(             # <<<<<<<<<<<<<<
 *         self, poly.PolymerBase poly, long[:]& inds, long n_inds
 *     ):
 */

static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_23update_all_densities(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static void __pyx_f_6chromo_6fields_19UniformDensityField_update_all_densities(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, __Pyx_memviewslice &__pyx_v_inds, long __pyx_v_n_inds, int __pyx_skip_dispatch) {
  double __pyx_v_density;
  long __pyx_v_i;
  long __pyx_v_j;
  long __pyx_v_l;
  long __pyx_v_m;
  long __pyx_v_ind;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  long __pyx_t_9;
  long __pyx_t_10;
  long __pyx_t_11;
  long __pyx_t_12;
  long __pyx_t_13;
  long __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  double __pyx_t_19;
  double __pyx_t_20;
  int __pyx_t_21;
  long __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_all_densities", 0);
  __Pyx_TraceCall("update_all_densities", __pyx_f[0], 1977, 0, __PYX_ERR(0, 1977, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_all_densities); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1977, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6chromo_6fields_19UniformDensityField_23update_all_densities)) {
        __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_inds, 1, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1977, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_n_inds); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1977, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[4] = {__pyx_t_6, ((PyObject *)__pyx_v_poly), __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1977, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[4] = {__pyx_t_6, ((PyObject *)__pyx_v_poly), __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1977, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1977, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_6) {
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
          }
          __Pyx_INCREF(((PyObject *)__pyx_v_poly));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_poly));
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, ((PyObject *)__pyx_v_poly));
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_t_4);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1977, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "chromo/fields.pyx":2002
 * 
 *         # Re-initialize all densities
 *         for i in range(self.n_bins):             # <<<<<<<<<<<<<<
 *             for j in range(poly.num_binders+1):
 *                 self.density[i, j] = 0
 */
  __pyx_t_9 = __pyx_v_self->n_bins;
  __pyx_t_10 = __pyx_t_9;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
    __pyx_v_i = __pyx_t_11;

    /* "chromo/fields.pyx":2003
 *         # Re-initialize all densities
 *         for i in range(self.n_bins):
 *             for j in range(poly.num_binders+1):             # <<<<<<<<<<<<<<
 *                 self.density[i, j] = 0
 *                 self.density_trial[i, j] = 0
 */
    __pyx_t_12 = (__pyx_v_poly->num_binders + 1);
    __pyx_t_13 = __pyx_t_12;
    for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
      __pyx_v_j = __pyx_t_14;

      /* "chromo/fields.pyx":2004
 *         for i in range(self.n_bins):
 *             for j in range(poly.num_binders+1):
 *                 self.density[i, j] = 0             # <<<<<<<<<<<<<<
 *                 self.density_trial[i, j] = 0
 * 
 */
      if (unlikely(!__pyx_v_self->density.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2004, __pyx_L1_error)}
      __pyx_t_15 = __pyx_v_i;
      __pyx_t_16 = __pyx_v_j;
      __pyx_t_7 = -1;
      if (__pyx_t_15 < 0) {
        __pyx_t_15 += __pyx_v_self->density.shape[0];
        if (unlikely(__pyx_t_15 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_15 >= __pyx_v_self->density.shape[0])) __pyx_t_7 = 0;
      if (__pyx_t_16 < 0) {
        __pyx_t_16 += __pyx_v_self->density.shape[1];
        if (unlikely(__pyx_t_16 < 0)) __pyx_t_7 = 1;
      } else if (unlikely(__pyx_t_16 >= __pyx_v_self->density.shape[1])) __pyx_t_7 = 1;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 2004, __pyx_L1_error)
      }
      *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density.data + __pyx_t_15 * __pyx_v_self->density.strides[0]) )) + __pyx_t_16)) )) = 0.0;

      /* "chromo/fields.pyx":2005
 *             for j in range(poly.num_binders+1):
 *                 self.density[i, j] = 0
 *                 self.density_trial[i, j] = 0             # <<<<<<<<<<<<<<
 * 
 *         # Iterate through beads and add their densities to corresponding bins
 */
      if (unlikely(!__pyx_v_self->density_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2005, __pyx_L1_error)}
      __pyx_t_16 = __pyx_v_i;
      __pyx_t_15 = __pyx_v_j;
      __pyx_t_7 = -1;
      if (__pyx_t_16 < 0) {
        __pyx_t_16 += __pyx_v_self->density_trial.shape[0];
        if (unlikely(__pyx_t_16 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_16 >= __pyx_v_self->density_trial.shape[0])) __pyx_t_7 = 0;
      if (__pyx_t_15 < 0) {
        __pyx_t_15 += __pyx_v_self->density_trial.shape[1];
        if (unlikely(__pyx_t_15 < 0)) __pyx_t_7 = 1;
      } else if (unlikely(__pyx_t_15 >= __pyx_v_self->density_trial.shape[1])) __pyx_t_7 = 1;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 2005, __pyx_L1_error)
      }
      *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density_trial.data + __pyx_t_16 * __pyx_v_self->density_trial.strides[0]) )) + __pyx_t_15)) )) = 0.0;
    }
  }

  /* "chromo/fields.pyx":2008
 * 
 *         # Iterate through beads and add their densities to corresponding bins
 *         for i in range(n_inds):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 * 
 */
  __pyx_t_9 = __pyx_v_n_inds;
  __pyx_t_10 = __pyx_t_9;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
    __pyx_v_i = __pyx_t_11;

    /* "chromo/fields.pyx":2009
 *         # Iterate through beads and add their densities to corresponding bins
 *         for i in range(n_inds):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 * 
 *                 # Load current configuration of the polymer
 */
    for (__pyx_t_12 = 0; __pyx_t_12 < 3; __pyx_t_12+=1) {
      __pyx_v_j = __pyx_t_12;

      /* "chromo/fields.pyx":2013
 *                 # Load current configuration of the polymer
 *                 self.xyz[j] = (
 *                     (poly.r[inds[i], j] + self.half_width_xyz[j]) %             # <<<<<<<<<<<<<<
 *                     self.width_xyz[j]
 *                 ) - self.half_step_xyz[j]
 */
      if (unlikely(!__pyx_v_poly->r.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2013, __pyx_L1_error)}
      __pyx_t_15 = __pyx_v_i;
      __pyx_t_7 = -1;
      if (__pyx_t_15 < 0) {
        __pyx_t_15 += __pyx_v_inds.shape[0];
        if (unlikely(__pyx_t_15 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_15 >= __pyx_v_inds.shape[0])) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 2013, __pyx_L1_error)
      }
      __pyx_t_16 = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_15 * __pyx_v_inds.strides[0]) )));
      __pyx_t_17 = __pyx_v_j;
      __pyx_t_7 = -1;
      if (__pyx_t_16 < 0) {
        __pyx_t_16 += __pyx_v_poly->r.shape[0];
        if (unlikely(__pyx_t_16 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_16 >= __pyx_v_poly->r.shape[0])) __pyx_t_7 = 0;
      if (__pyx_t_17 < 0) {
        __pyx_t_17 += __pyx_v_poly->r.shape[1];
        if (unlikely(__pyx_t_17 < 0)) __pyx_t_7 = 1;
      } else if (unlikely(__pyx_t_17 >= __pyx_v_poly->r.shape[1])) __pyx_t_7 = 1;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 2013, __pyx_L1_error)
      }
      if (unlikely(!__pyx_v_self->half_width_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2013, __pyx_L1_error)}
      __pyx_t_18 = __pyx_v_j;
      __pyx_t_7 = -1;
      if (__pyx_t_18 < 0) {
        __pyx_t_18 += __pyx_v_self->half_width_xyz.shape[0];
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_18 >= __pyx_v_self->half_width_xyz.shape[0])) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 2013, __pyx_L1_error)
      }
      __pyx_t_19 = ((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_poly->r.data + __pyx_t_16 * __pyx_v_poly->r.strides[0]) )) + __pyx_t_17)) ))) + (*((double *) ( /* dim=0 */ (__pyx_v_self->half_width_xyz.data + __pyx_t_18 * __pyx_v_self->half_width_xyz.strides[0]) ))));

      /* "chromo/fields.pyx":2014
 *                 self.xyz[j] = (
 *                     (poly.r[inds[i], j] + self.half_width_xyz[j]) %
 *                     self.width_xyz[j]             # <<<<<<<<<<<<<<
 *                 ) - self.half_step_xyz[j]
 * 
 */
      if (unlikely(!__pyx_v_self->width_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2014, __pyx_L1_error)}
      __pyx_t_18 = __pyx_v_j;
      __pyx_t_7 = -1;
      if (__pyx_t_18 < 0) {
        __pyx_t_18 += __pyx_v_self->width_xyz.shape[0];
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_18 >= __pyx_v_self->width_xyz.shape[0])) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 2014, __pyx_L1_error)
      }
      __pyx_t_20 = (*((double *) ( /* dim=0 */ (__pyx_v_self->width_xyz.data + __pyx_t_18 * __pyx_v_self->width_xyz.strides[0]) )));

      /* "chromo/fields.pyx":2013
 *                 # Load current configuration of the polymer
 *                 self.xyz[j] = (
 *                     (poly.r[inds[i], j] + self.half_width_xyz[j]) %             # <<<<<<<<<<<<<<
 *                     self.width_xyz[j]
 *                 ) - self.half_step_xyz[j]
 */
      if (unlikely(__pyx_t_20 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float divmod()");
        __PYX_ERR(0, 2013, __pyx_L1_error)
      }

      /* "chromo/fields.pyx":2015
 *                     (poly.r[inds[i], j] + self.half_width_xyz[j]) %
 *                     self.width_xyz[j]
 *                 ) - self.half_step_xyz[j]             # <<<<<<<<<<<<<<
 * 
 *                 # Get the lower neighboring bin index
 */
      if (unlikely(!__pyx_v_self->half_step_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2015, __pyx_L1_error)}
      __pyx_t_18 = __pyx_v_j;
      __pyx_t_7 = -1;
      if (__pyx_t_18 < 0) {
        __pyx_t_18 += __pyx_v_self->half_step_xyz.shape[0];
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_18 >= __pyx_v_self->half_step_xyz.shape[0])) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 2015, __pyx_L1_error)
      }

      /* "chromo/fields.pyx":2012
 * 
 *                 # Load current configuration of the polymer
 *                 self.xyz[j] = (             # <<<<<<<<<<<<<<
 *                     (poly.r[inds[i], j] + self.half_width_xyz[j]) %
 *                     self.width_xyz[j]
 */
      if (unlikely(!__pyx_v_self->xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2012, __pyx_L1_error)}
      __pyx_t_15 = __pyx_v_j;
      __pyx_t_7 = -1;
      if (__pyx_t_15 < 0) {
        __pyx_t_15 += __pyx_v_self->xyz.shape[0];
        if (unlikely(__pyx_t_15 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_15 >= __pyx_v_self->xyz.shape[0])) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 2012, __pyx_L1_error)
      }
      *((double *) ( /* dim=0 */ (__pyx_v_self->xyz.data + __pyx_t_15 * __pyx_v_self->xyz.strides[0]) )) = (__Pyx_mod_double(__pyx_t_19, __pyx_t_20) - (*((double *) ( /* dim=0 */ (__pyx_v_self->half_step_xyz.data + __pyx_t_18 * __pyx_v_self->half_step_xyz.strides[0]) ))));

      /* "chromo/fields.pyx":2018
 * 
 *                 # Get the lower neighboring bin index
 *                 ind = <long>floor((self.xyz[j]) / self.dxyz[j])             # <<<<<<<<<<<<<<
 *                 if ind == -1:
 *                     self.index_xyz[j] = self.n_xyz_m1[j]
 */
      if (unlikely(!__pyx_v_self->xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2018, __pyx_L1_error)}
      __pyx_t_18 = __pyx_v_j;
      __pyx_t_7 = -1;
      if (__pyx_t_18 < 0) {
        __pyx_t_18 += __pyx_v_self->xyz.shape[0];
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_18 >= __pyx_v_self->xyz.shape[0])) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 2018, __pyx_L1_error)
      }
      __pyx_t_20 = (*((double *) ( /* dim=0 */ (__pyx_v_self->xyz.data + __pyx_t_18 * __pyx_v_self->xyz.strides[0]) )));
      if (unlikely(!__pyx_v_self->dxyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2018, __pyx_L1_error)}
      __pyx_t_18 = __pyx_v_j;
      __pyx_t_7 = -1;
      if (__pyx_t_18 < 0) {
        __pyx_t_18 += __pyx_v_self->dxyz.shape[0];
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_18 >= __pyx_v_self->dxyz.shape[0])) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 2018, __pyx_L1_error)
      }
      __pyx_t_19 = (*((double *) ( /* dim=0 */ (__pyx_v_self->dxyz.data + __pyx_t_18 * __pyx_v_self->dxyz.strides[0]) )));
      if (unlikely(__pyx_t_19 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 2018, __pyx_L1_error)
      }
      __pyx_v_ind = ((long)floor((__pyx_t_20 / __pyx_t_19)));

      /* "chromo/fields.pyx":2019
 *                 # Get the lower neighboring bin index
 *                 ind = <long>floor((self.xyz[j]) / self.dxyz[j])
 *                 if ind == -1:             # <<<<<<<<<<<<<<
 *                     self.index_xyz[j] = self.n_xyz_m1[j]
 *                 else:
 */
      __pyx_t_21 = ((__pyx_v_ind == -1L) != 0);
      if (__pyx_t_21) {

        /* "chromo/fields.pyx":2020
 *                 ind = <long>floor((self.xyz[j]) / self.dxyz[j])
 *                 if ind == -1:
 *                     self.index_xyz[j] = self.n_xyz_m1[j]             # <<<<<<<<<<<<<<
 *                 else:
 *                     self.index_xyz[j] = ind
 */
        if (unlikely(!__pyx_v_self->n_xyz_m1.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2020, __pyx_L1_error)}
        __pyx_t_18 = __pyx_v_j;
        __pyx_t_7 = -1;
        if (__pyx_t_18 < 0) {
          __pyx_t_18 += __pyx_v_self->n_xyz_m1.shape[0];
          if (unlikely(__pyx_t_18 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_18 >= __pyx_v_self->n_xyz_m1.shape[0])) __pyx_t_7 = 0;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 2020, __pyx_L1_error)
        }
        if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2020, __pyx_L1_error)}
        __pyx_t_15 = __pyx_v_j;
        __pyx_t_7 = -1;
        if (__pyx_t_15 < 0) {
          __pyx_t_15 += __pyx_v_self->index_xyz.shape[0];
          if (unlikely(__pyx_t_15 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_15 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_7 = 0;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 2020, __pyx_L1_error)
        }
        *((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_15 * __pyx_v_self->index_xyz.strides[0]) )) = (*((long *) ( /* dim=0 */ (__pyx_v_self->n_xyz_m1.data + __pyx_t_18 * __pyx_v_self->n_xyz_m1.strides[0]) )));

        /* "chromo/fields.pyx":2019
 *                 # Get the lower neighboring bin index
 *                 ind = <long>floor((self.xyz[j]) / self.dxyz[j])
 *                 if ind == -1:             # <<<<<<<<<<<<<<
 *                     self.index_xyz[j] = self.n_xyz_m1[j]
 *                 else:
 */
        goto __pyx_L11;
      }

      /* "chromo/fields.pyx":2022
 *                     self.index_xyz[j] = self.n_xyz_m1[j]
 *                 else:
 *                     self.index_xyz[j] = ind             # <<<<<<<<<<<<<<
 * 
 *                 # Get weight in the lower bin index
 */
      /*else*/ {
        if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2022, __pyx_L1_error)}
        __pyx_t_18 = __pyx_v_j;
        __pyx_t_7 = -1;
        if (__pyx_t_18 < 0) {
          __pyx_t_18 += __pyx_v_self->index_xyz.shape[0];
          if (unlikely(__pyx_t_18 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_18 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_7 = 0;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 2022, __pyx_L1_error)
        }
        *((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_18 * __pyx_v_self->index_xyz.strides[0]) )) = __pyx_v_ind;
      }
      __pyx_L11:;

      /* "chromo/fields.pyx":2025
 * 
 *                 # Get weight in the lower bin index
 *                 self.weight_xyz[j] = (1 - (self.xyz[j] / self.dxyz[j] - ind))             # <<<<<<<<<<<<<<
 * 
 *             # Get weights and superindices of eight bins containing beads
 */
      if (unlikely(!__pyx_v_self->xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2025, __pyx_L1_error)}
      __pyx_t_18 = __pyx_v_j;
      __pyx_t_7 = -1;
      if (__pyx_t_18 < 0) {
        __pyx_t_18 += __pyx_v_self->xyz.shape[0];
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_18 >= __pyx_v_self->xyz.shape[0])) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 2025, __pyx_L1_error)
      }
      __pyx_t_19 = (*((double *) ( /* dim=0 */ (__pyx_v_self->xyz.data + __pyx_t_18 * __pyx_v_self->xyz.strides[0]) )));
      if (unlikely(!__pyx_v_self->dxyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2025, __pyx_L1_error)}
      __pyx_t_18 = __pyx_v_j;
      __pyx_t_7 = -1;
      if (__pyx_t_18 < 0) {
        __pyx_t_18 += __pyx_v_self->dxyz.shape[0];
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_18 >= __pyx_v_self->dxyz.shape[0])) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 2025, __pyx_L1_error)
      }
      __pyx_t_20 = (*((double *) ( /* dim=0 */ (__pyx_v_self->dxyz.data + __pyx_t_18 * __pyx_v_self->dxyz.strides[0]) )));
      if (unlikely(__pyx_t_20 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 2025, __pyx_L1_error)
      }
      if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2025, __pyx_L1_error)}
      __pyx_t_18 = __pyx_v_j;
      __pyx_t_7 = -1;
      if (__pyx_t_18 < 0) {
        __pyx_t_18 += __pyx_v_self->weight_xyz.shape[0];
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_18 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 2025, __pyx_L1_error)
      }
      *((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_18 * __pyx_v_self->weight_xyz.strides[0]) )) = (1.0 - ((__pyx_t_19 / __pyx_t_20) - __pyx_v_ind));
    }

    /* "chromo/fields.pyx":2028
 * 
 *             # Get weights and superindices of eight bins containing beads
 *             self._generate_weight_vector()             # <<<<<<<<<<<<<<
 *             self._generate_index_vector()
 * 
 */
    ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->_generate_weight_vector(__pyx_v_self);

    /* "chromo/fields.pyx":2029
 *             # Get weights and superindices of eight bins containing beads
 *             self._generate_weight_vector()
 *             self._generate_index_vector()             # <<<<<<<<<<<<<<
 * 
 *             # Distribute weights into bins
 */
    ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->_generate_index_vector(__pyx_v_self);

    /* "chromo/fields.pyx":2034
 *             # l indicates for which of eight bins density is being calculated
 *             # m indicates polymer (0) or which protein (1 to n_binders)
 *             for l in range(8):             # <<<<<<<<<<<<<<
 *                 density = self.wt_vec[l] / self.access_vols[self.nbr_inds[l]]
 *                 self.density[self.nbr_inds[l], 0] += density
 */
    for (__pyx_t_12 = 0; __pyx_t_12 < 8; __pyx_t_12+=1) {
      __pyx_v_l = __pyx_t_12;

      /* "chromo/fields.pyx":2035
 *             # m indicates polymer (0) or which protein (1 to n_binders)
 *             for l in range(8):
 *                 density = self.wt_vec[l] / self.access_vols[self.nbr_inds[l]]             # <<<<<<<<<<<<<<
 *                 self.density[self.nbr_inds[l], 0] += density
 *                 for m in range(1, poly.n_binders_p1):
 */
      if (unlikely(!__pyx_v_self->wt_vec.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2035, __pyx_L1_error)}
      __pyx_t_18 = __pyx_v_l;
      __pyx_t_7 = -1;
      if (__pyx_t_18 < 0) {
        __pyx_t_18 += __pyx_v_self->wt_vec.shape[0];
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_18 >= __pyx_v_self->wt_vec.shape[0])) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 2035, __pyx_L1_error)
      }
      __pyx_t_1 = PyFloat_FromDouble((*((double *) ( /* dim=0 */ (__pyx_v_self->wt_vec.data + __pyx_t_18 * __pyx_v_self->wt_vec.strides[0]) )))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2035, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely(__pyx_v_self->access_vols == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 2035, __pyx_L1_error)
      }
      if (unlikely(!__pyx_v_self->nbr_inds.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2035, __pyx_L1_error)}
      __pyx_t_18 = __pyx_v_l;
      __pyx_t_7 = -1;
      if (__pyx_t_18 < 0) {
        __pyx_t_18 += __pyx_v_self->nbr_inds.shape[0];
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_18 >= __pyx_v_self->nbr_inds.shape[0])) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 2035, __pyx_L1_error)
      }
      __pyx_t_2 = __Pyx_PyInt_From_long((*((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds.data + __pyx_t_18 * __pyx_v_self->nbr_inds.strides[0]) )))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2035, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->access_vols, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2035, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2035, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_20 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_20 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2035, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_density = __pyx_t_20;

      /* "chromo/fields.pyx":2036
 *             for l in range(8):
 *                 density = self.wt_vec[l] / self.access_vols[self.nbr_inds[l]]
 *                 self.density[self.nbr_inds[l], 0] += density             # <<<<<<<<<<<<<<
 *                 for m in range(1, poly.n_binders_p1):
 *                     self.density[self.nbr_inds[l], m] += density *\
 */
      if (unlikely(!__pyx_v_self->density.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2036, __pyx_L1_error)}
      if (unlikely(!__pyx_v_self->nbr_inds.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2036, __pyx_L1_error)}
      __pyx_t_18 = __pyx_v_l;
      __pyx_t_7 = -1;
      if (__pyx_t_18 < 0) {
        __pyx_t_18 += __pyx_v_self->nbr_inds.shape[0];
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_18 >= __pyx_v_self->nbr_inds.shape[0])) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 2036, __pyx_L1_error)
      }
      __pyx_t_15 = (*((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds.data + __pyx_t_18 * __pyx_v_self->nbr_inds.strides[0]) )));
      __pyx_t_17 = 0;
      __pyx_t_7 = -1;
      if (__pyx_t_15 < 0) {
        __pyx_t_15 += __pyx_v_self->density.shape[0];
        if (unlikely(__pyx_t_15 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_15 >= __pyx_v_self->density.shape[0])) __pyx_t_7 = 0;
      if (__pyx_t_17 < 0) {
        __pyx_t_17 += __pyx_v_self->density.shape[1];
        if (unlikely(__pyx_t_17 < 0)) __pyx_t_7 = 1;
      } else if (unlikely(__pyx_t_17 >= __pyx_v_self->density.shape[1])) __pyx_t_7 = 1;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 2036, __pyx_L1_error)
      }
      *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density.data + __pyx_t_15 * __pyx_v_self->density.strides[0]) )) + __pyx_t_17)) )) += __pyx_v_density;

      /* "chromo/fields.pyx":2037
 *                 density = self.wt_vec[l] / self.access_vols[self.nbr_inds[l]]
 *                 self.density[self.nbr_inds[l], 0] += density
 *                 for m in range(1, poly.n_binders_p1):             # <<<<<<<<<<<<<<
 *                     self.density[self.nbr_inds[l], m] += density *\
 *                         float(poly.states[inds[i], m-1])
 */
      __pyx_t_13 = __pyx_v_poly->n_binders_p1;
      __pyx_t_14 = __pyx_t_13;
      for (__pyx_t_22 = 1; __pyx_t_22 < __pyx_t_14; __pyx_t_22+=1) {
        __pyx_v_m = __pyx_t_22;

        /* "chromo/fields.pyx":2039
 *                 for m in range(1, poly.n_binders_p1):
 *                     self.density[self.nbr_inds[l], m] += density *\
 *                         float(poly.states[inds[i], m-1])             # <<<<<<<<<<<<<<
 * 
 *     cpdef void update_all_densities_for_all_polymers(self):
 */
        if (unlikely(!__pyx_v_poly->states.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2039, __pyx_L1_error)}
        __pyx_t_18 = __pyx_v_i;
        __pyx_t_7 = -1;
        if (__pyx_t_18 < 0) {
          __pyx_t_18 += __pyx_v_inds.shape[0];
          if (unlikely(__pyx_t_18 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_18 >= __pyx_v_inds.shape[0])) __pyx_t_7 = 0;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 2039, __pyx_L1_error)
        }
        __pyx_t_17 = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_18 * __pyx_v_inds.strides[0]) )));
        __pyx_t_15 = (__pyx_v_m - 1);
        __pyx_t_7 = -1;
        if (__pyx_t_17 < 0) {
          __pyx_t_17 += __pyx_v_poly->states.shape[0];
          if (unlikely(__pyx_t_17 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_17 >= __pyx_v_poly->states.shape[0])) __pyx_t_7 = 0;
        if (__pyx_t_15 < 0) {
          __pyx_t_15 += __pyx_v_poly->states.shape[1];
          if (unlikely(__pyx_t_15 < 0)) __pyx_t_7 = 1;
        } else if (unlikely(__pyx_t_15 >= __pyx_v_poly->states.shape[1])) __pyx_t_7 = 1;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 2039, __pyx_L1_error)
        }

        /* "chromo/fields.pyx":2038
 *                 self.density[self.nbr_inds[l], 0] += density
 *                 for m in range(1, poly.n_binders_p1):
 *                     self.density[self.nbr_inds[l], m] += density *\             # <<<<<<<<<<<<<<
 *                         float(poly.states[inds[i], m-1])
 * 
 */
        if (unlikely(!__pyx_v_self->density.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2038, __pyx_L1_error)}
        if (unlikely(!__pyx_v_self->nbr_inds.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2038, __pyx_L1_error)}
        __pyx_t_16 = __pyx_v_l;
        __pyx_t_7 = -1;
        if (__pyx_t_16 < 0) {
          __pyx_t_16 += __pyx_v_self->nbr_inds.shape[0];
          if (unlikely(__pyx_t_16 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_16 >= __pyx_v_self->nbr_inds.shape[0])) __pyx_t_7 = 0;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 2038, __pyx_L1_error)
        }
        __pyx_t_23 = (*((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds.data + __pyx_t_16 * __pyx_v_self->nbr_inds.strides[0]) )));
        __pyx_t_24 = __pyx_v_m;
        __pyx_t_7 = -1;
        if (__pyx_t_23 < 0) {
          __pyx_t_23 += __pyx_v_self->density.shape[0];
          if (unlikely(__pyx_t_23 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_23 >= __pyx_v_self->density.shape[0])) __pyx_t_7 = 0;
        if (__pyx_t_24 < 0) {
          __pyx_t_24 += __pyx_v_self->density.shape[1];
          if (unlikely(__pyx_t_24 < 0)) __pyx_t_7 = 1;
        } else if (unlikely(__pyx_t_24 >= __pyx_v_self->density.shape[1])) __pyx_t_7 = 1;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 2038, __pyx_L1_error)
        }
        *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density.data + __pyx_t_23 * __pyx_v_self->density.strides[0]) )) + __pyx_t_24)) )) += (__pyx_v_density * ((double)(*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_poly->states.data + __pyx_t_17 * __pyx_v_poly->states.strides[0]) )) + __pyx_t_15)) )))));
      }
    }
  }

  /* "chromo/fields.pyx":1977
 *                     self.density_trial[i, j] = 0
 * 
 *     cpdef void update_all_densities(             # <<<<<<<<<<<<<<
 *         self, poly.PolymerBase poly, long[:]& inds, long n_inds
 *     ):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("chromo.fields.UniformDensityField.update_all_densities", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_23update_all_densities(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6chromo_6fields_19UniformDensityField_22update_all_densities[] = "Update the density of the field for a single polymer.\n        \n        Notes\n        -----\n        Updates the voxel densities stored in the field object. See notes for\n        `self.get_change_in_density()` for details on implementation.\n\n        Parameters\n        ----------\n        poly : poly.PolymerBase\n            Polymer for which densities are calculated\n        inds : long[:] by reference\n            Array of bead indices for the entire polymer (to avoid re-computing\n            this)\n        n_inds : long\n            Number of beads in the polymer\n        ";
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_23update_all_densities(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly = 0;
  __Pyx_memviewslice __pyx_v_inds = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_v_n_inds;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_all_densities (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_poly,&__pyx_n_s_inds,&__pyx_n_s_n_inds,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_poly)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_inds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("update_all_densities", 1, 3, 3, 1); __PYX_ERR(0, 1977, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_inds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("update_all_densities", 1, 3, 3, 2); __PYX_ERR(0, 1977, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "update_all_densities") < 0)) __PYX_ERR(0, 1977, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_poly = ((struct __pyx_obj_6chromo_8polymers_PolymerBase *)values[0]);
    __pyx_v_inds = __Pyx_PyObject_to_MemoryviewSlice_ds_long(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_inds.memview)) __PYX_ERR(0, 1978, __pyx_L3_error)
    __pyx_v_n_inds = __Pyx_PyInt_As_long(values[2]); if (unlikely((__pyx_v_n_inds == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1978, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update_all_densities", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1977, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.update_all_densities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_poly), __pyx_ptype_6chromo_8polymers_PolymerBase, 1, "poly", 0))) __PYX_ERR(0, 1978, __pyx_L1_error)
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_22update_all_densities(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), __pyx_v_poly, __pyx_v_inds, __pyx_v_n_inds);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_22update_all_densities(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, __Pyx_memviewslice __pyx_v_inds, long __pyx_v_n_inds) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_all_densities", 0);
  __Pyx_TraceCall("update_all_densities (wrapper)", __pyx_f[0], 1977, 0, __PYX_ERR(0, 1977, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_inds.memview)) { __Pyx_RaiseUnboundLocalError("inds"); __PYX_ERR(0, 1977, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_void_to_None(__pyx_f_6chromo_6fields_19UniformDensityField_update_all_densities(__pyx_v_self, __pyx_v_poly, __pyx_v_inds, __pyx_v_n_inds, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.update_all_densities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_inds, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":2041
 *                         float(poly.states[inds[i], m-1])
 * 
 *     cpdef void update_all_densities_for_all_polymers(self):             # <<<<<<<<<<<<<<
 *         """Update the density map for every polymer in the field.
 * 
 */

static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_25update_all_densities_for_all_polymers(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static void __pyx_f_6chromo_6fields_19UniformDensityField_update_all_densities_for_all_polymers(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, int __pyx_skip_dispatch) {
  double __pyx_v_density;
  long __pyx_v_h;
  long __pyx_v_i;
  long __pyx_v_j;
  long __pyx_v_l;
  long __pyx_v_m;
  long __pyx_v_ind;
  long __pyx_v_n_binders_p1;
  long __pyx_v_n_inds;
  __Pyx_memviewslice __pyx_v_inds = { 0, 0, { 0 }, { 0 }, { 0 } };
  struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  long __pyx_t_5;
  long __pyx_t_6;
  long __pyx_t_7;
  long __pyx_t_8;
  long __pyx_t_9;
  long __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_t_13;
  __Pyx_memviewslice __pyx_t_14 = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  double __pyx_t_18;
  double __pyx_t_19;
  int __pyx_t_20;
  long __pyx_t_21;
  long __pyx_t_22;
  long __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_all_densities_for_all_polymers", 0);
  __Pyx_TraceCall("update_all_densities_for_all_polymers", __pyx_f[0], 2041, 0, __PYX_ERR(0, 2041, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_all_densities_for_all_pol); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2041, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6chromo_6fields_19UniformDensityField_25update_all_densities_for_all_polymers)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2041, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "chromo/fields.pyx":2058
 * 
 *         # Re-initialize all densities and trial densities
 *         for i in range(self.n_bins):             # <<<<<<<<<<<<<<
 *             for j in range(self.num_binders):
 *                 self.density[i, j] = 0
 */
  __pyx_t_5 = __pyx_v_self->n_bins;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "chromo/fields.pyx":2059
 *         # Re-initialize all densities and trial densities
 *         for i in range(self.n_bins):
 *             for j in range(self.num_binders):             # <<<<<<<<<<<<<<
 *                 self.density[i, j] = 0
 *                 self.density_trial[i, j] = 0
 */
    __pyx_t_8 = __pyx_v_self->num_binders;
    __pyx_t_9 = __pyx_t_8;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_j = __pyx_t_10;

      /* "chromo/fields.pyx":2060
 *         for i in range(self.n_bins):
 *             for j in range(self.num_binders):
 *                 self.density[i, j] = 0             # <<<<<<<<<<<<<<
 *                 self.density_trial[i, j] = 0
 * 
 */
      if (unlikely(!__pyx_v_self->density.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2060, __pyx_L1_error)}
      __pyx_t_11 = __pyx_v_i;
      __pyx_t_12 = __pyx_v_j;
      __pyx_t_13 = -1;
      if (__pyx_t_11 < 0) {
        __pyx_t_11 += __pyx_v_self->density.shape[0];
        if (unlikely(__pyx_t_11 < 0)) __pyx_t_13 = 0;
      } else if (unlikely(__pyx_t_11 >= __pyx_v_self->density.shape[0])) __pyx_t_13 = 0;
      if (__pyx_t_12 < 0) {
        __pyx_t_12 += __pyx_v_self->density.shape[1];
        if (unlikely(__pyx_t_12 < 0)) __pyx_t_13 = 1;
      } else if (unlikely(__pyx_t_12 >= __pyx_v_self->density.shape[1])) __pyx_t_13 = 1;
      if (unlikely(__pyx_t_13 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_13);
        __PYX_ERR(0, 2060, __pyx_L1_error)
      }
      *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density.data + __pyx_t_11 * __pyx_v_self->density.strides[0]) )) + __pyx_t_12)) )) = 0.0;

      /* "chromo/fields.pyx":2061
 *             for j in range(self.num_binders):
 *                 self.density[i, j] = 0
 *                 self.density_trial[i, j] = 0             # <<<<<<<<<<<<<<
 * 
 *         for h in range(self.n_polymers):
 */
      if (unlikely(!__pyx_v_self->density_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2061, __pyx_L1_error)}
      __pyx_t_12 = __pyx_v_i;
      __pyx_t_11 = __pyx_v_j;
      __pyx_t_13 = -1;
      if (__pyx_t_12 < 0) {
        __pyx_t_12 += __pyx_v_self->density_trial.shape[0];
        if (unlikely(__pyx_t_12 < 0)) __pyx_t_13 = 0;
      } else if (unlikely(__pyx_t_12 >= __pyx_v_self->density_trial.shape[0])) __pyx_t_13 = 0;
      if (__pyx_t_11 < 0) {
        __pyx_t_11 += __pyx_v_self->density_trial.shape[1];
        if (unlikely(__pyx_t_11 < 0)) __pyx_t_13 = 1;
      } else if (unlikely(__pyx_t_11 >= __pyx_v_self->density_trial.shape[1])) __pyx_t_13 = 1;
      if (unlikely(__pyx_t_13 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_13);
        __PYX_ERR(0, 2061, __pyx_L1_error)
      }
      *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density_trial.data + __pyx_t_12 * __pyx_v_self->density_trial.strides[0]) )) + __pyx_t_11)) )) = 0.0;
    }
  }

  /* "chromo/fields.pyx":2063
 *                 self.density_trial[i, j] = 0
 * 
 *         for h in range(self.n_polymers):             # <<<<<<<<<<<<<<
 *             poly = self.polymers[h]
 *             inds = np.arange(poly.num_beads)
 */
  __pyx_t_5 = __pyx_v_self->__pyx_base.n_polymers;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_h = __pyx_t_7;

    /* "chromo/fields.pyx":2064
 * 
 *         for h in range(self.n_polymers):
 *             poly = self.polymers[h]             # <<<<<<<<<<<<<<
 *             inds = np.arange(poly.num_beads)
 *             n_inds = poly.num_beads
 */
    if (unlikely(__pyx_v_self->__pyx_base.polymers == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2064, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_self->__pyx_base.polymers, __pyx_v_h, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2064, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6chromo_8polymers_PolymerBase))))) __PYX_ERR(0, 2064, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_poly, ((struct __pyx_obj_6chromo_8polymers_PolymerBase *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "chromo/fields.pyx":2065
 *         for h in range(self.n_polymers):
 *             poly = self.polymers[h]
 *             inds = np.arange(poly.num_beads)             # <<<<<<<<<<<<<<
 *             n_inds = poly.num_beads
 *             n_binders_p1 = poly.n_binders_p1
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2065, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_arange); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2065, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_poly->num_beads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2065, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2065, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_14 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_14.memview)) __PYX_ERR(0, 2065, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_XDEC_MEMVIEW(&__pyx_v_inds, 1);
    __pyx_v_inds = __pyx_t_14;
    __pyx_t_14.memview = NULL;
    __pyx_t_14.data = NULL;

    /* "chromo/fields.pyx":2066
 *             poly = self.polymers[h]
 *             inds = np.arange(poly.num_beads)
 *             n_inds = poly.num_beads             # <<<<<<<<<<<<<<
 *             n_binders_p1 = poly.n_binders_p1
 * 
 */
    __pyx_t_8 = __pyx_v_poly->num_beads;
    __pyx_v_n_inds = __pyx_t_8;

    /* "chromo/fields.pyx":2067
 *             inds = np.arange(poly.num_beads)
 *             n_inds = poly.num_beads
 *             n_binders_p1 = poly.n_binders_p1             # <<<<<<<<<<<<<<
 * 
 *             # Iterate through beads and add densities to corresponding bins
 */
    __pyx_t_8 = __pyx_v_poly->n_binders_p1;
    __pyx_v_n_binders_p1 = __pyx_t_8;

    /* "chromo/fields.pyx":2070
 * 
 *             # Iterate through beads and add densities to corresponding bins
 *             for i in range(n_inds):             # <<<<<<<<<<<<<<
 *                 for j in range(3):
 * 
 */
    __pyx_t_8 = __pyx_v_n_inds;
    __pyx_t_9 = __pyx_t_8;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_i = __pyx_t_10;

      /* "chromo/fields.pyx":2071
 *             # Iterate through beads and add densities to corresponding bins
 *             for i in range(n_inds):
 *                 for j in range(3):             # <<<<<<<<<<<<<<
 * 
 *                     # Load current configuration of the polymer
 */
      for (__pyx_t_15 = 0; __pyx_t_15 < 3; __pyx_t_15+=1) {
        __pyx_v_j = __pyx_t_15;

        /* "chromo/fields.pyx":2075
 *                     # Load current configuration of the polymer
 *                     self.xyz[j] = (
 *                         (poly.r[inds[i], j] + self.half_width_xyz[j]) %             # <<<<<<<<<<<<<<
 *                         self.width_xyz[j]
 *                     ) - self.half_step_xyz[j]
 */
        if (unlikely(!__pyx_v_poly->r.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2075, __pyx_L1_error)}
        __pyx_t_11 = __pyx_v_i;
        __pyx_t_13 = -1;
        if (__pyx_t_11 < 0) {
          __pyx_t_11 += __pyx_v_inds.shape[0];
          if (unlikely(__pyx_t_11 < 0)) __pyx_t_13 = 0;
        } else if (unlikely(__pyx_t_11 >= __pyx_v_inds.shape[0])) __pyx_t_13 = 0;
        if (unlikely(__pyx_t_13 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_13);
          __PYX_ERR(0, 2075, __pyx_L1_error)
        }
        __pyx_t_12 = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_11 * __pyx_v_inds.strides[0]) )));
        __pyx_t_16 = __pyx_v_j;
        __pyx_t_13 = -1;
        if (__pyx_t_12 < 0) {
          __pyx_t_12 += __pyx_v_poly->r.shape[0];
          if (unlikely(__pyx_t_12 < 0)) __pyx_t_13 = 0;
        } else if (unlikely(__pyx_t_12 >= __pyx_v_poly->r.shape[0])) __pyx_t_13 = 0;
        if (__pyx_t_16 < 0) {
          __pyx_t_16 += __pyx_v_poly->r.shape[1];
          if (unlikely(__pyx_t_16 < 0)) __pyx_t_13 = 1;
        } else if (unlikely(__pyx_t_16 >= __pyx_v_poly->r.shape[1])) __pyx_t_13 = 1;
        if (unlikely(__pyx_t_13 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_13);
          __PYX_ERR(0, 2075, __pyx_L1_error)
        }
        if (unlikely(!__pyx_v_self->half_width_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2075, __pyx_L1_error)}
        __pyx_t_17 = __pyx_v_j;
        __pyx_t_13 = -1;
        if (__pyx_t_17 < 0) {
          __pyx_t_17 += __pyx_v_self->half_width_xyz.shape[0];
          if (unlikely(__pyx_t_17 < 0)) __pyx_t_13 = 0;
        } else if (unlikely(__pyx_t_17 >= __pyx_v_self->half_width_xyz.shape[0])) __pyx_t_13 = 0;
        if (unlikely(__pyx_t_13 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_13);
          __PYX_ERR(0, 2075, __pyx_L1_error)
        }
        __pyx_t_18 = ((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_poly->r.data + __pyx_t_12 * __pyx_v_poly->r.strides[0]) )) + __pyx_t_16)) ))) + (*((double *) ( /* dim=0 */ (__pyx_v_self->half_width_xyz.data + __pyx_t_17 * __pyx_v_self->half_width_xyz.strides[0]) ))));

        /* "chromo/fields.pyx":2076
 *                     self.xyz[j] = (
 *                         (poly.r[inds[i], j] + self.half_width_xyz[j]) %
 *                         self.width_xyz[j]             # <<<<<<<<<<<<<<
 *                     ) - self.half_step_xyz[j]
 * 
 */
        if (unlikely(!__pyx_v_self->width_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2076, __pyx_L1_error)}
        __pyx_t_17 = __pyx_v_j;
        __pyx_t_13 = -1;
        if (__pyx_t_17 < 0) {
          __pyx_t_17 += __pyx_v_self->width_xyz.shape[0];
          if (unlikely(__pyx_t_17 < 0)) __pyx_t_13 = 0;
        } else if (unlikely(__pyx_t_17 >= __pyx_v_self->width_xyz.shape[0])) __pyx_t_13 = 0;
        if (unlikely(__pyx_t_13 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_13);
          __PYX_ERR(0, 2076, __pyx_L1_error)
        }
        __pyx_t_19 = (*((double *) ( /* dim=0 */ (__pyx_v_self->width_xyz.data + __pyx_t_17 * __pyx_v_self->width_xyz.strides[0]) )));

        /* "chromo/fields.pyx":2075
 *                     # Load current configuration of the polymer
 *                     self.xyz[j] = (
 *                         (poly.r[inds[i], j] + self.half_width_xyz[j]) %             # <<<<<<<<<<<<<<
 *                         self.width_xyz[j]
 *                     ) - self.half_step_xyz[j]
 */
        if (unlikely(__pyx_t_19 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float divmod()");
          __PYX_ERR(0, 2075, __pyx_L1_error)
        }

        /* "chromo/fields.pyx":2077
 *                         (poly.r[inds[i], j] + self.half_width_xyz[j]) %
 *                         self.width_xyz[j]
 *                     ) - self.half_step_xyz[j]             # <<<<<<<<<<<<<<
 * 
 *                     # Get the lower neighboring bin index
 */
        if (unlikely(!__pyx_v_self->half_step_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2077, __pyx_L1_error)}
        __pyx_t_17 = __pyx_v_j;
        __pyx_t_13 = -1;
        if (__pyx_t_17 < 0) {
          __pyx_t_17 += __pyx_v_self->half_step_xyz.shape[0];
          if (unlikely(__pyx_t_17 < 0)) __pyx_t_13 = 0;
        } else if (unlikely(__pyx_t_17 >= __pyx_v_self->half_step_xyz.shape[0])) __pyx_t_13 = 0;
        if (unlikely(__pyx_t_13 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_13);
          __PYX_ERR(0, 2077, __pyx_L1_error)
        }

        /* "chromo/fields.pyx":2074
 * 
 *                     # Load current configuration of the polymer
 *                     self.xyz[j] = (             # <<<<<<<<<<<<<<
 *                         (poly.r[inds[i], j] + self.half_width_xyz[j]) %
 *                         self.width_xyz[j]
 */
        if (unlikely(!__pyx_v_self->xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2074, __pyx_L1_error)}
        __pyx_t_11 = __pyx_v_j;
        __pyx_t_13 = -1;
        if (__pyx_t_11 < 0) {
          __pyx_t_11 += __pyx_v_self->xyz.shape[0];
          if (unlikely(__pyx_t_11 < 0)) __pyx_t_13 = 0;
        } else if (unlikely(__pyx_t_11 >= __pyx_v_self->xyz.shape[0])) __pyx_t_13 = 0;
        if (unlikely(__pyx_t_13 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_13);
          __PYX_ERR(0, 2074, __pyx_L1_error)
        }
        *((double *) ( /* dim=0 */ (__pyx_v_self->xyz.data + __pyx_t_11 * __pyx_v_self->xyz.strides[0]) )) = (__Pyx_mod_double(__pyx_t_18, __pyx_t_19) - (*((double *) ( /* dim=0 */ (__pyx_v_self->half_step_xyz.data + __pyx_t_17 * __pyx_v_self->half_step_xyz.strides[0]) ))));

        /* "chromo/fields.pyx":2080
 * 
 *                     # Get the lower neighboring bin index
 *                     ind = <long>floor((self.xyz[j]) / self.dxyz[j])             # <<<<<<<<<<<<<<
 *                     if ind == -1:
 *                         self.index_xyz[j] = self.n_xyz_m1[j]
 */
        if (unlikely(!__pyx_v_self->xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2080, __pyx_L1_error)}
        __pyx_t_17 = __pyx_v_j;
        __pyx_t_13 = -1;
        if (__pyx_t_17 < 0) {
          __pyx_t_17 += __pyx_v_self->xyz.shape[0];
          if (unlikely(__pyx_t_17 < 0)) __pyx_t_13 = 0;
        } else if (unlikely(__pyx_t_17 >= __pyx_v_self->xyz.shape[0])) __pyx_t_13 = 0;
        if (unlikely(__pyx_t_13 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_13);
          __PYX_ERR(0, 2080, __pyx_L1_error)
        }
        __pyx_t_19 = (*((double *) ( /* dim=0 */ (__pyx_v_self->xyz.data + __pyx_t_17 * __pyx_v_self->xyz.strides[0]) )));
        if (unlikely(!__pyx_v_self->dxyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2080, __pyx_L1_error)}
        __pyx_t_17 = __pyx_v_j;
        __pyx_t_13 = -1;
        if (__pyx_t_17 < 0) {
          __pyx_t_17 += __pyx_v_self->dxyz.shape[0];
          if (unlikely(__pyx_t_17 < 0)) __pyx_t_13 = 0;
        } else if (unlikely(__pyx_t_17 >= __pyx_v_self->dxyz.shape[0])) __pyx_t_13 = 0;
        if (unlikely(__pyx_t_13 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_13);
          __PYX_ERR(0, 2080, __pyx_L1_error)
        }
        __pyx_t_18 = (*((double *) ( /* dim=0 */ (__pyx_v_self->dxyz.data + __pyx_t_17 * __pyx_v_self->dxyz.strides[0]) )));
        if (unlikely(__pyx_t_18 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 2080, __pyx_L1_error)
        }
        __pyx_v_ind = ((long)floor((__pyx_t_19 / __pyx_t_18)));

        /* "chromo/fields.pyx":2081
 *                     # Get the lower neighboring bin index
 *                     ind = <long>floor((self.xyz[j]) / self.dxyz[j])
 *                     if ind == -1:             # <<<<<<<<<<<<<<
 *                         self.index_xyz[j] = self.n_xyz_m1[j]
 *                     else:
 */
        __pyx_t_20 = ((__pyx_v_ind == -1L) != 0);
        if (__pyx_t_20) {

          /* "chromo/fields.pyx":2082
 *                     ind = <long>floor((self.xyz[j]) / self.dxyz[j])
 *                     if ind == -1:
 *                         self.index_xyz[j] = self.n_xyz_m1[j]             # <<<<<<<<<<<<<<
 *                     else:
 *                         self.index_xyz[j] = ind
 */
          if (unlikely(!__pyx_v_self->n_xyz_m1.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2082, __pyx_L1_error)}
          __pyx_t_17 = __pyx_v_j;
          __pyx_t_13 = -1;
          if (__pyx_t_17 < 0) {
            __pyx_t_17 += __pyx_v_self->n_xyz_m1.shape[0];
            if (unlikely(__pyx_t_17 < 0)) __pyx_t_13 = 0;
          } else if (unlikely(__pyx_t_17 >= __pyx_v_self->n_xyz_m1.shape[0])) __pyx_t_13 = 0;
          if (unlikely(__pyx_t_13 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_13);
            __PYX_ERR(0, 2082, __pyx_L1_error)
          }
          if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2082, __pyx_L1_error)}
          __pyx_t_11 = __pyx_v_j;
          __pyx_t_13 = -1;
          if (__pyx_t_11 < 0) {
            __pyx_t_11 += __pyx_v_self->index_xyz.shape[0];
            if (unlikely(__pyx_t_11 < 0)) __pyx_t_13 = 0;
          } else if (unlikely(__pyx_t_11 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_13 = 0;
          if (unlikely(__pyx_t_13 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_13);
            __PYX_ERR(0, 2082, __pyx_L1_error)
          }
          *((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_11 * __pyx_v_self->index_xyz.strides[0]) )) = (*((long *) ( /* dim=0 */ (__pyx_v_self->n_xyz_m1.data + __pyx_t_17 * __pyx_v_self->n_xyz_m1.strides[0]) )));

          /* "chromo/fields.pyx":2081
 *                     # Get the lower neighboring bin index
 *                     ind = <long>floor((self.xyz[j]) / self.dxyz[j])
 *                     if ind == -1:             # <<<<<<<<<<<<<<
 *                         self.index_xyz[j] = self.n_xyz_m1[j]
 *                     else:
 */
          goto __pyx_L13;
        }

        /* "chromo/fields.pyx":2084
 *                         self.index_xyz[j] = self.n_xyz_m1[j]
 *                     else:
 *                         self.index_xyz[j] = ind             # <<<<<<<<<<<<<<
 * 
 *                     # Get weight in the lower bin index
 */
        /*else*/ {
          if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2084, __pyx_L1_error)}
          __pyx_t_17 = __pyx_v_j;
          __pyx_t_13 = -1;
          if (__pyx_t_17 < 0) {
            __pyx_t_17 += __pyx_v_self->index_xyz.shape[0];
            if (unlikely(__pyx_t_17 < 0)) __pyx_t_13 = 0;
          } else if (unlikely(__pyx_t_17 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_13 = 0;
          if (unlikely(__pyx_t_13 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_13);
            __PYX_ERR(0, 2084, __pyx_L1_error)
          }
          *((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_17 * __pyx_v_self->index_xyz.strides[0]) )) = __pyx_v_ind;
        }
        __pyx_L13:;

        /* "chromo/fields.pyx":2087
 * 
 *                     # Get weight in the lower bin index
 *                     self.weight_xyz[j] = (1 - (self.xyz[j] / self.dxyz[j] - ind))             # <<<<<<<<<<<<<<
 *                 # Get weights and superindices of eight bins containing beads
 *                 self._generate_weight_vector()
 */
        if (unlikely(!__pyx_v_self->xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2087, __pyx_L1_error)}
        __pyx_t_17 = __pyx_v_j;
        __pyx_t_13 = -1;
        if (__pyx_t_17 < 0) {
          __pyx_t_17 += __pyx_v_self->xyz.shape[0];
          if (unlikely(__pyx_t_17 < 0)) __pyx_t_13 = 0;
        } else if (unlikely(__pyx_t_17 >= __pyx_v_self->xyz.shape[0])) __pyx_t_13 = 0;
        if (unlikely(__pyx_t_13 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_13);
          __PYX_ERR(0, 2087, __pyx_L1_error)
        }
        __pyx_t_18 = (*((double *) ( /* dim=0 */ (__pyx_v_self->xyz.data + __pyx_t_17 * __pyx_v_self->xyz.strides[0]) )));
        if (unlikely(!__pyx_v_self->dxyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2087, __pyx_L1_error)}
        __pyx_t_17 = __pyx_v_j;
        __pyx_t_13 = -1;
        if (__pyx_t_17 < 0) {
          __pyx_t_17 += __pyx_v_self->dxyz.shape[0];
          if (unlikely(__pyx_t_17 < 0)) __pyx_t_13 = 0;
        } else if (unlikely(__pyx_t_17 >= __pyx_v_self->dxyz.shape[0])) __pyx_t_13 = 0;
        if (unlikely(__pyx_t_13 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_13);
          __PYX_ERR(0, 2087, __pyx_L1_error)
        }
        __pyx_t_19 = (*((double *) ( /* dim=0 */ (__pyx_v_self->dxyz.data + __pyx_t_17 * __pyx_v_self->dxyz.strides[0]) )));
        if (unlikely(__pyx_t_19 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 2087, __pyx_L1_error)
        }
        if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2087, __pyx_L1_error)}
        __pyx_t_17 = __pyx_v_j;
        __pyx_t_13 = -1;
        if (__pyx_t_17 < 0) {
          __pyx_t_17 += __pyx_v_self->weight_xyz.shape[0];
          if (unlikely(__pyx_t_17 < 0)) __pyx_t_13 = 0;
        } else if (unlikely(__pyx_t_17 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_13 = 0;
        if (unlikely(__pyx_t_13 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_13);
          __PYX_ERR(0, 2087, __pyx_L1_error)
        }
        *((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_17 * __pyx_v_self->weight_xyz.strides[0]) )) = (1.0 - ((__pyx_t_18 / __pyx_t_19) - __pyx_v_ind));
      }

      /* "chromo/fields.pyx":2089
 *                     self.weight_xyz[j] = (1 - (self.xyz[j] / self.dxyz[j] - ind))
 *                 # Get weights and superindices of eight bins containing beads
 *                 self._generate_weight_vector()             # <<<<<<<<<<<<<<
 *                 self._generate_index_vector()
 * 
 */
      ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->_generate_weight_vector(__pyx_v_self);

      /* "chromo/fields.pyx":2090
 *                 # Get weights and superindices of eight bins containing beads
 *                 self._generate_weight_vector()
 *                 self._generate_index_vector()             # <<<<<<<<<<<<<<
 * 
 *                 # Distribute weights into bins
 */
      ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->_generate_index_vector(__pyx_v_self);

      /* "chromo/fields.pyx":2095
 *                 # l indicates for which of 8 bins density is being calculated
 *                 # m indicates polymer (0) or which protein (1 to n_binders)
 *                 for l in range(8):             # <<<<<<<<<<<<<<
 *                     density = self.wt_vec[l] / self.access_vols[self.nbr_inds[l]]
 *                     self.density[self.nbr_inds[l], 0] += density
 */
      for (__pyx_t_15 = 0; __pyx_t_15 < 8; __pyx_t_15+=1) {
        __pyx_v_l = __pyx_t_15;

        /* "chromo/fields.pyx":2096
 *                 # m indicates polymer (0) or which protein (1 to n_binders)
 *                 for l in range(8):
 *                     density = self.wt_vec[l] / self.access_vols[self.nbr_inds[l]]             # <<<<<<<<<<<<<<
 *                     self.density[self.nbr_inds[l], 0] += density
 *                     for m in range(1, n_binders_p1):
 */
        if (unlikely(!__pyx_v_self->wt_vec.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2096, __pyx_L1_error)}
        __pyx_t_17 = __pyx_v_l;
        __pyx_t_13 = -1;
        if (__pyx_t_17 < 0) {
          __pyx_t_17 += __pyx_v_self->wt_vec.shape[0];
          if (unlikely(__pyx_t_17 < 0)) __pyx_t_13 = 0;
        } else if (unlikely(__pyx_t_17 >= __pyx_v_self->wt_vec.shape[0])) __pyx_t_13 = 0;
        if (unlikely(__pyx_t_13 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_13);
          __PYX_ERR(0, 2096, __pyx_L1_error)
        }
        __pyx_t_1 = PyFloat_FromDouble((*((double *) ( /* dim=0 */ (__pyx_v_self->wt_vec.data + __pyx_t_17 * __pyx_v_self->wt_vec.strides[0]) )))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2096, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (unlikely(__pyx_v_self->access_vols == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 2096, __pyx_L1_error)
        }
        if (unlikely(!__pyx_v_self->nbr_inds.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2096, __pyx_L1_error)}
        __pyx_t_17 = __pyx_v_l;
        __pyx_t_13 = -1;
        if (__pyx_t_17 < 0) {
          __pyx_t_17 += __pyx_v_self->nbr_inds.shape[0];
          if (unlikely(__pyx_t_17 < 0)) __pyx_t_13 = 0;
        } else if (unlikely(__pyx_t_17 >= __pyx_v_self->nbr_inds.shape[0])) __pyx_t_13 = 0;
        if (unlikely(__pyx_t_13 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_13);
          __PYX_ERR(0, 2096, __pyx_L1_error)
        }
        __pyx_t_3 = __Pyx_PyInt_From_long((*((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds.data + __pyx_t_17 * __pyx_v_self->nbr_inds.strides[0]) )))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2096, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_self->access_vols, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2096, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2096, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_19 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_19 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2096, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_v_density = __pyx_t_19;

        /* "chromo/fields.pyx":2097
 *                 for l in range(8):
 *                     density = self.wt_vec[l] / self.access_vols[self.nbr_inds[l]]
 *                     self.density[self.nbr_inds[l], 0] += density             # <<<<<<<<<<<<<<
 *                     for m in range(1, n_binders_p1):
 *                         self.density[self.nbr_inds[l], m] += density *\
 */
        if (unlikely(!__pyx_v_self->density.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2097, __pyx_L1_error)}
        if (unlikely(!__pyx_v_self->nbr_inds.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2097, __pyx_L1_error)}
        __pyx_t_17 = __pyx_v_l;
        __pyx_t_13 = -1;
        if (__pyx_t_17 < 0) {
          __pyx_t_17 += __pyx_v_self->nbr_inds.shape[0];
          if (unlikely(__pyx_t_17 < 0)) __pyx_t_13 = 0;
        } else if (unlikely(__pyx_t_17 >= __pyx_v_self->nbr_inds.shape[0])) __pyx_t_13 = 0;
        if (unlikely(__pyx_t_13 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_13);
          __PYX_ERR(0, 2097, __pyx_L1_error)
        }
        __pyx_t_11 = (*((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds.data + __pyx_t_17 * __pyx_v_self->nbr_inds.strides[0]) )));
        __pyx_t_16 = 0;
        __pyx_t_13 = -1;
        if (__pyx_t_11 < 0) {
          __pyx_t_11 += __pyx_v_self->density.shape[0];
          if (unlikely(__pyx_t_11 < 0)) __pyx_t_13 = 0;
        } else if (unlikely(__pyx_t_11 >= __pyx_v_self->density.shape[0])) __pyx_t_13 = 0;
        if (__pyx_t_16 < 0) {
          __pyx_t_16 += __pyx_v_self->density.shape[1];
          if (unlikely(__pyx_t_16 < 0)) __pyx_t_13 = 1;
        } else if (unlikely(__pyx_t_16 >= __pyx_v_self->density.shape[1])) __pyx_t_13 = 1;
        if (unlikely(__pyx_t_13 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_13);
          __PYX_ERR(0, 2097, __pyx_L1_error)
        }
        *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density.data + __pyx_t_11 * __pyx_v_self->density.strides[0]) )) + __pyx_t_16)) )) += __pyx_v_density;

        /* "chromo/fields.pyx":2098
 *                     density = self.wt_vec[l] / self.access_vols[self.nbr_inds[l]]
 *                     self.density[self.nbr_inds[l], 0] += density
 *                     for m in range(1, n_binders_p1):             # <<<<<<<<<<<<<<
 *                         self.density[self.nbr_inds[l], m] += density *\
 *                             float(poly.states[inds[i], m-1])
 */
        __pyx_t_21 = __pyx_v_n_binders_p1;
        __pyx_t_22 = __pyx_t_21;
        for (__pyx_t_23 = 1; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
          __pyx_v_m = __pyx_t_23;

          /* "chromo/fields.pyx":2100
 *                     for m in range(1, n_binders_p1):
 *                         self.density[self.nbr_inds[l], m] += density *\
 *                             float(poly.states[inds[i], m-1])             # <<<<<<<<<<<<<<
 * 
 *         # Fix rounding error
 */
          if (unlikely(!__pyx_v_poly->states.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2100, __pyx_L1_error)}
          __pyx_t_17 = __pyx_v_i;
          __pyx_t_13 = -1;
          if (__pyx_t_17 < 0) {
            __pyx_t_17 += __pyx_v_inds.shape[0];
            if (unlikely(__pyx_t_17 < 0)) __pyx_t_13 = 0;
          } else if (unlikely(__pyx_t_17 >= __pyx_v_inds.shape[0])) __pyx_t_13 = 0;
          if (unlikely(__pyx_t_13 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_13);
            __PYX_ERR(0, 2100, __pyx_L1_error)
          }
          __pyx_t_16 = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_17 * __pyx_v_inds.strides[0]) )));
          __pyx_t_11 = (__pyx_v_m - 1);
          __pyx_t_13 = -1;
          if (__pyx_t_16 < 0) {
            __pyx_t_16 += __pyx_v_poly->states.shape[0];
            if (unlikely(__pyx_t_16 < 0)) __pyx_t_13 = 0;
          } else if (unlikely(__pyx_t_16 >= __pyx_v_poly->states.shape[0])) __pyx_t_13 = 0;
          if (__pyx_t_11 < 0) {
            __pyx_t_11 += __pyx_v_poly->states.shape[1];
            if (unlikely(__pyx_t_11 < 0)) __pyx_t_13 = 1;
          } else if (unlikely(__pyx_t_11 >= __pyx_v_poly->states.shape[1])) __pyx_t_13 = 1;
          if (unlikely(__pyx_t_13 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_13);
            __PYX_ERR(0, 2100, __pyx_L1_error)
          }

          /* "chromo/fields.pyx":2099
 *                     self.density[self.nbr_inds[l], 0] += density
 *                     for m in range(1, n_binders_p1):
 *                         self.density[self.nbr_inds[l], m] += density *\             # <<<<<<<<<<<<<<
 *                             float(poly.states[inds[i], m-1])
 * 
 */
          if (unlikely(!__pyx_v_self->density.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2099, __pyx_L1_error)}
          if (unlikely(!__pyx_v_self->nbr_inds.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2099, __pyx_L1_error)}
          __pyx_t_12 = __pyx_v_l;
          __pyx_t_13 = -1;
          if (__pyx_t_12 < 0) {
            __pyx_t_12 += __pyx_v_self->nbr_inds.shape[0];
            if (unlikely(__pyx_t_12 < 0)) __pyx_t_13 = 0;
          } else if (unlikely(__pyx_t_12 >= __pyx_v_self->nbr_inds.shape[0])) __pyx_t_13 = 0;
          if (unlikely(__pyx_t_13 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_13);
            __PYX_ERR(0, 2099, __pyx_L1_error)
          }
          __pyx_t_24 = (*((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds.data + __pyx_t_12 * __pyx_v_self->nbr_inds.strides[0]) )));
          __pyx_t_25 = __pyx_v_m;
          __pyx_t_13 = -1;
          if (__pyx_t_24 < 0) {
            __pyx_t_24 += __pyx_v_self->density.shape[0];
            if (unlikely(__pyx_t_24 < 0)) __pyx_t_13 = 0;
          } else if (unlikely(__pyx_t_24 >= __pyx_v_self->density.shape[0])) __pyx_t_13 = 0;
          if (__pyx_t_25 < 0) {
            __pyx_t_25 += __pyx_v_self->density.shape[1];
            if (unlikely(__pyx_t_25 < 0)) __pyx_t_13 = 1;
          } else if (unlikely(__pyx_t_25 >= __pyx_v_self->density.shape[1])) __pyx_t_13 = 1;
          if (unlikely(__pyx_t_13 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_13);
            __PYX_ERR(0, 2099, __pyx_L1_error)
          }
          *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density.data + __pyx_t_24 * __pyx_v_self->density.strides[0]) )) + __pyx_t_25)) )) += (__pyx_v_density * ((double)(*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_poly->states.data + __pyx_t_16 * __pyx_v_poly->states.strides[0]) )) + __pyx_t_11)) )))));
        }
      }
    }
  }

  /* "chromo/fields.pyx":2103
 * 
 *         # Fix rounding error
 *         for i in range(self.n_bins):             # <<<<<<<<<<<<<<
 *             for j in range(self.num_binders + 1):
 *                 if np.abs(self.density[i, j]) < 1E-18:
 */
  __pyx_t_5 = __pyx_v_self->n_bins;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "chromo/fields.pyx":2104
 *         # Fix rounding error
 *         for i in range(self.n_bins):
 *             for j in range(self.num_binders + 1):             # <<<<<<<<<<<<<<
 *                 if np.abs(self.density[i, j]) < 1E-18:
 *                     self.density[i, j] = 0
 */
    __pyx_t_8 = (__pyx_v_self->num_binders + 1);
    __pyx_t_9 = __pyx_t_8;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_j = __pyx_t_10;

      /* "chromo/fields.pyx":2105
 *         for i in range(self.n_bins):
 *             for j in range(self.num_binders + 1):
 *                 if np.abs(self.density[i, j]) < 1E-18:             # <<<<<<<<<<<<<<
 *                     self.density[i, j] = 0
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2105, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_abs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2105, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_v_self->density.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2105, __pyx_L1_error)}
      __pyx_t_17 = __pyx_v_i;
      __pyx_t_11 = __pyx_v_j;
      __pyx_t_13 = -1;
      if (__pyx_t_17 < 0) {
        __pyx_t_17 += __pyx_v_self->density.shape[0];
        if (unlikely(__pyx_t_17 < 0)) __pyx_t_13 = 0;
      } else if (unlikely(__pyx_t_17 >= __pyx_v_self->density.shape[0])) __pyx_t_13 = 0;
      if (__pyx_t_11 < 0) {
        __pyx_t_11 += __pyx_v_self->density.shape[1];
        if (unlikely(__pyx_t_11 < 0)) __pyx_t_13 = 1;
      } else if (unlikely(__pyx_t_11 >= __pyx_v_self->density.shape[1])) __pyx_t_13 = 1;
      if (unlikely(__pyx_t_13 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_13);
        __PYX_ERR(0, 2105, __pyx_L1_error)
      }
      __pyx_t_2 = PyFloat_FromDouble((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density.data + __pyx_t_17 * __pyx_v_self->density.strides[0]) )) + __pyx_t_11)) )))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2105, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2105, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_float_1Eneg_18, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2105, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_20 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_20 < 0)) __PYX_ERR(0, 2105, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_20) {

        /* "chromo/fields.pyx":2106
 *             for j in range(self.num_binders + 1):
 *                 if np.abs(self.density[i, j]) < 1E-18:
 *                     self.density[i, j] = 0             # <<<<<<<<<<<<<<
 * 
 *     cdef void _generate_weight_vector(self):
 */
        if (unlikely(!__pyx_v_self->density.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2106, __pyx_L1_error)}
        __pyx_t_11 = __pyx_v_i;
        __pyx_t_17 = __pyx_v_j;
        __pyx_t_13 = -1;
        if (__pyx_t_11 < 0) {
          __pyx_t_11 += __pyx_v_self->density.shape[0];
          if (unlikely(__pyx_t_11 < 0)) __pyx_t_13 = 0;
        } else if (unlikely(__pyx_t_11 >= __pyx_v_self->density.shape[0])) __pyx_t_13 = 0;
        if (__pyx_t_17 < 0) {
          __pyx_t_17 += __pyx_v_self->density.shape[1];
          if (unlikely(__pyx_t_17 < 0)) __pyx_t_13 = 1;
        } else if (unlikely(__pyx_t_17 >= __pyx_v_self->density.shape[1])) __pyx_t_13 = 1;
        if (unlikely(__pyx_t_13 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_13);
          __PYX_ERR(0, 2106, __pyx_L1_error)
        }
        *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density.data + __pyx_t_11 * __pyx_v_self->density.strides[0]) )) + __pyx_t_17)) )) = 0.0;

        /* "chromo/fields.pyx":2105
 *         for i in range(self.n_bins):
 *             for j in range(self.num_binders + 1):
 *                 if np.abs(self.density[i, j]) < 1E-18:             # <<<<<<<<<<<<<<
 *                     self.density[i, j] = 0
 * 
 */
      }
    }
  }

  /* "chromo/fields.pyx":2041
 *                         float(poly.states[inds[i], m-1])
 * 
 *     cpdef void update_all_densities_for_all_polymers(self):             # <<<<<<<<<<<<<<
 *         """Update the density map for every polymer in the field.
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __PYX_XDEC_MEMVIEW(&__pyx_t_14, 1);
  __Pyx_WriteUnraisable("chromo.fields.UniformDensityField.update_all_densities_for_all_polymers", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_inds, 1);
  __Pyx_XDECREF((PyObject *)__pyx_v_poly);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_25update_all_densities_for_all_polymers(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6chromo_6fields_19UniformDensityField_24update_all_densities_for_all_polymers[] = "Update the density map for every polymer in the field.\n\n        Notes\n        -----\n        Updates the voxel densities stored in the field object. See notes for\n        `self.get_change_in_density()` for details on implementation.\n        \n        Requires that binders are listed in the same order on each polymer, as\n        listed in `self.binders`.\n        ";
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_25update_all_densities_for_all_polymers(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_all_densities_for_all_polymers (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_24update_all_densities_for_all_polymers(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_24update_all_densities_for_all_polymers(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_all_densities_for_all_polymers", 0);
  __Pyx_TraceCall("update_all_densities_for_all_polymers (wrapper)", __pyx_f[0], 2041, 0, __PYX_ERR(0, 2041, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_f_6chromo_6fields_19UniformDensityField_update_all_densities_for_all_polymers(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.update_all_densities_for_all_polymers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":2108
 *                     self.density[i, j] = 0
 * 
 *     cdef void _generate_weight_vector(self):             # <<<<<<<<<<<<<<
 *         """Generate weight array for eight bins containing the bead.
 * 
 */

static void __pyx_f_6chromo_6fields_19UniformDensityField__generate_weight_vector(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  __Pyx_memviewslice __pyx_t_16 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_generate_weight_vector", 0);
  __Pyx_TraceCall("_generate_weight_vector", __pyx_f[0], 2108, 0, __PYX_ERR(0, 2108, __pyx_L1_error));

  /* "chromo/fields.pyx":2116
 *         implementation.
 *         """
 *         self.wt_vec = np.array([             # <<<<<<<<<<<<<<
 * 
 *             # lower_x, lower_y, lower_z
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":2119
 * 
 *             # lower_x, lower_y, lower_z
 *             self.weight_xyz[0] * self.weight_xyz[1] * self.weight_xyz[2],             # <<<<<<<<<<<<<<
 * 
 *             # upper_x, lower_y, lower_z
 */
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2119, __pyx_L1_error)}
  __pyx_t_4 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_v_self->weight_xyz.shape[0];
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2119, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2119, __pyx_L1_error)}
  __pyx_t_6 = 1;
  __pyx_t_5 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_self->weight_xyz.shape[0];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2119, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2119, __pyx_L1_error)}
  __pyx_t_7 = 2;
  __pyx_t_5 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_v_self->weight_xyz.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2119, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble((((*((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_4 * __pyx_v_self->weight_xyz.strides[0]) ))) * (*((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_6 * __pyx_v_self->weight_xyz.strides[0]) )))) * (*((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_7 * __pyx_v_self->weight_xyz.strides[0]) ))))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "chromo/fields.pyx":2122
 * 
 *             # upper_x, lower_y, lower_z
 *             (1-self.weight_xyz[0]) * self.weight_xyz[1] *             # <<<<<<<<<<<<<<
 *             self.weight_xyz[2],
 * 
 */
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2122, __pyx_L1_error)}
  __pyx_t_7 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_v_self->weight_xyz.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2122, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2122, __pyx_L1_error)}
  __pyx_t_6 = 1;
  __pyx_t_5 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_self->weight_xyz.shape[0];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2122, __pyx_L1_error)
  }

  /* "chromo/fields.pyx":2123
 *             # upper_x, lower_y, lower_z
 *             (1-self.weight_xyz[0]) * self.weight_xyz[1] *
 *             self.weight_xyz[2],             # <<<<<<<<<<<<<<
 * 
 *             # lower_x, upper_y, lower_z
 */
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2123, __pyx_L1_error)}
  __pyx_t_4 = 2;
  __pyx_t_5 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_v_self->weight_xyz.shape[0];
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2123, __pyx_L1_error)
  }

  /* "chromo/fields.pyx":2122
 * 
 *             # upper_x, lower_y, lower_z
 *             (1-self.weight_xyz[0]) * self.weight_xyz[1] *             # <<<<<<<<<<<<<<
 *             self.weight_xyz[2],
 * 
 */
  __pyx_t_8 = PyFloat_FromDouble((((1.0 - (*((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_7 * __pyx_v_self->weight_xyz.strides[0]) )))) * (*((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_6 * __pyx_v_self->weight_xyz.strides[0]) )))) * (*((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_4 * __pyx_v_self->weight_xyz.strides[0]) ))))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "chromo/fields.pyx":2126
 * 
 *             # lower_x, upper_y, lower_z
 *             self.weight_xyz[0] * (1-self.weight_xyz[1]) *             # <<<<<<<<<<<<<<
 *             self.weight_xyz[2],
 * 
 */
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2126, __pyx_L1_error)}
  __pyx_t_4 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_v_self->weight_xyz.shape[0];
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2126, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2126, __pyx_L1_error)}
  __pyx_t_6 = 1;
  __pyx_t_5 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_self->weight_xyz.shape[0];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2126, __pyx_L1_error)
  }

  /* "chromo/fields.pyx":2127
 *             # lower_x, upper_y, lower_z
 *             self.weight_xyz[0] * (1-self.weight_xyz[1]) *
 *             self.weight_xyz[2],             # <<<<<<<<<<<<<<
 * 
 *             # upper_x, upper_y, lower_z
 */
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2127, __pyx_L1_error)}
  __pyx_t_7 = 2;
  __pyx_t_5 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_v_self->weight_xyz.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2127, __pyx_L1_error)
  }

  /* "chromo/fields.pyx":2126
 * 
 *             # lower_x, upper_y, lower_z
 *             self.weight_xyz[0] * (1-self.weight_xyz[1]) *             # <<<<<<<<<<<<<<
 *             self.weight_xyz[2],
 * 
 */
  __pyx_t_9 = PyFloat_FromDouble((((*((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_4 * __pyx_v_self->weight_xyz.strides[0]) ))) * (1.0 - (*((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_6 * __pyx_v_self->weight_xyz.strides[0]) ))))) * (*((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_7 * __pyx_v_self->weight_xyz.strides[0]) ))))); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);

  /* "chromo/fields.pyx":2130
 * 
 *             # upper_x, upper_y, lower_z
 *             (1-self.weight_xyz[0]) * (1-self.weight_xyz[1]) *             # <<<<<<<<<<<<<<
 *             self.weight_xyz[2],
 * 
 */
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2130, __pyx_L1_error)}
  __pyx_t_7 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_v_self->weight_xyz.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2130, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2130, __pyx_L1_error)}
  __pyx_t_6 = 1;
  __pyx_t_5 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_self->weight_xyz.shape[0];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2130, __pyx_L1_error)
  }

  /* "chromo/fields.pyx":2131
 *             # upper_x, upper_y, lower_z
 *             (1-self.weight_xyz[0]) * (1-self.weight_xyz[1]) *
 *             self.weight_xyz[2],             # <<<<<<<<<<<<<<
 * 
 *             # lower_x, lower_y, upper_z
 */
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2131, __pyx_L1_error)}
  __pyx_t_4 = 2;
  __pyx_t_5 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_v_self->weight_xyz.shape[0];
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2131, __pyx_L1_error)
  }

  /* "chromo/fields.pyx":2130
 * 
 *             # upper_x, upper_y, lower_z
 *             (1-self.weight_xyz[0]) * (1-self.weight_xyz[1]) *             # <<<<<<<<<<<<<<
 *             self.weight_xyz[2],
 * 
 */
  __pyx_t_10 = PyFloat_FromDouble((((1.0 - (*((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_7 * __pyx_v_self->weight_xyz.strides[0]) )))) * (1.0 - (*((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_6 * __pyx_v_self->weight_xyz.strides[0]) ))))) * (*((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_4 * __pyx_v_self->weight_xyz.strides[0]) ))))); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);

  /* "chromo/fields.pyx":2134
 * 
 *             # lower_x, lower_y, upper_z
 *             self.weight_xyz[0] * self.weight_xyz[1] *             # <<<<<<<<<<<<<<
 *             (1-self.weight_xyz[2]),
 * 
 */
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2134, __pyx_L1_error)}
  __pyx_t_4 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_v_self->weight_xyz.shape[0];
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2134, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2134, __pyx_L1_error)}
  __pyx_t_6 = 1;
  __pyx_t_5 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_self->weight_xyz.shape[0];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2134, __pyx_L1_error)
  }

  /* "chromo/fields.pyx":2135
 *             # lower_x, lower_y, upper_z
 *             self.weight_xyz[0] * self.weight_xyz[1] *
 *             (1-self.weight_xyz[2]),             # <<<<<<<<<<<<<<
 * 
 *             # upper_x, lower_y, upper_z
 */
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2135, __pyx_L1_error)}
  __pyx_t_7 = 2;
  __pyx_t_5 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_v_self->weight_xyz.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2135, __pyx_L1_error)
  }

  /* "chromo/fields.pyx":2134
 * 
 *             # lower_x, lower_y, upper_z
 *             self.weight_xyz[0] * self.weight_xyz[1] *             # <<<<<<<<<<<<<<
 *             (1-self.weight_xyz[2]),
 * 
 */
  __pyx_t_11 = PyFloat_FromDouble((((*((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_4 * __pyx_v_self->weight_xyz.strides[0]) ))) * (*((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_6 * __pyx_v_self->weight_xyz.strides[0]) )))) * (1.0 - (*((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_7 * __pyx_v_self->weight_xyz.strides[0]) )))))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);

  /* "chromo/fields.pyx":2138
 * 
 *             # upper_x, lower_y, upper_z
 *             (1-self.weight_xyz[0]) * self.weight_xyz[1] *             # <<<<<<<<<<<<<<
 *             (1-self.weight_xyz[2]),
 * 
 */
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2138, __pyx_L1_error)}
  __pyx_t_7 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_v_self->weight_xyz.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2138, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2138, __pyx_L1_error)}
  __pyx_t_6 = 1;
  __pyx_t_5 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_self->weight_xyz.shape[0];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2138, __pyx_L1_error)
  }

  /* "chromo/fields.pyx":2139
 *             # upper_x, lower_y, upper_z
 *             (1-self.weight_xyz[0]) * self.weight_xyz[1] *
 *             (1-self.weight_xyz[2]),             # <<<<<<<<<<<<<<
 * 
 *             # lower_x, upper_y, upper_z
 */
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2139, __pyx_L1_error)}
  __pyx_t_4 = 2;
  __pyx_t_5 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_v_self->weight_xyz.shape[0];
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2139, __pyx_L1_error)
  }

  /* "chromo/fields.pyx":2138
 * 
 *             # upper_x, lower_y, upper_z
 *             (1-self.weight_xyz[0]) * self.weight_xyz[1] *             # <<<<<<<<<<<<<<
 *             (1-self.weight_xyz[2]),
 * 
 */
  __pyx_t_12 = PyFloat_FromDouble((((1.0 - (*((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_7 * __pyx_v_self->weight_xyz.strides[0]) )))) * (*((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_6 * __pyx_v_self->weight_xyz.strides[0]) )))) * (1.0 - (*((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_4 * __pyx_v_self->weight_xyz.strides[0]) )))))); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);

  /* "chromo/fields.pyx":2142
 * 
 *             # lower_x, upper_y, upper_z
 *             self.weight_xyz[0] * (1-self.weight_xyz[1]) *             # <<<<<<<<<<<<<<
 *             (1-self.weight_xyz[2]),
 * 
 */
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2142, __pyx_L1_error)}
  __pyx_t_4 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_v_self->weight_xyz.shape[0];
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2142, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2142, __pyx_L1_error)}
  __pyx_t_6 = 1;
  __pyx_t_5 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_self->weight_xyz.shape[0];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2142, __pyx_L1_error)
  }

  /* "chromo/fields.pyx":2143
 *             # lower_x, upper_y, upper_z
 *             self.weight_xyz[0] * (1-self.weight_xyz[1]) *
 *             (1-self.weight_xyz[2]),             # <<<<<<<<<<<<<<
 * 
 *             # upper_x, upper_y, upper_z
 */
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2143, __pyx_L1_error)}
  __pyx_t_7 = 2;
  __pyx_t_5 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_v_self->weight_xyz.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2143, __pyx_L1_error)
  }

  /* "chromo/fields.pyx":2142
 * 
 *             # lower_x, upper_y, upper_z
 *             self.weight_xyz[0] * (1-self.weight_xyz[1]) *             # <<<<<<<<<<<<<<
 *             (1-self.weight_xyz[2]),
 * 
 */
  __pyx_t_13 = PyFloat_FromDouble((((*((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_4 * __pyx_v_self->weight_xyz.strides[0]) ))) * (1.0 - (*((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_6 * __pyx_v_self->weight_xyz.strides[0]) ))))) * (1.0 - (*((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_7 * __pyx_v_self->weight_xyz.strides[0]) )))))); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);

  /* "chromo/fields.pyx":2146
 * 
 *             # upper_x, upper_y, upper_z
 *             (1-self.weight_xyz[0]) * (1-self.weight_xyz[1]) *             # <<<<<<<<<<<<<<
 *             (1-self.weight_xyz[2])
 * 
 */
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2146, __pyx_L1_error)}
  __pyx_t_7 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_v_self->weight_xyz.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2146, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2146, __pyx_L1_error)}
  __pyx_t_6 = 1;
  __pyx_t_5 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_self->weight_xyz.shape[0];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2146, __pyx_L1_error)
  }

  /* "chromo/fields.pyx":2147
 *             # upper_x, upper_y, upper_z
 *             (1-self.weight_xyz[0]) * (1-self.weight_xyz[1]) *
 *             (1-self.weight_xyz[2])             # <<<<<<<<<<<<<<
 * 
 *         ])
 */
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2147, __pyx_L1_error)}
  __pyx_t_4 = 2;
  __pyx_t_5 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_v_self->weight_xyz.shape[0];
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_v_self->weight_xyz.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2147, __pyx_L1_error)
  }

  /* "chromo/fields.pyx":2146
 * 
 *             # upper_x, upper_y, upper_z
 *             (1-self.weight_xyz[0]) * (1-self.weight_xyz[1]) *             # <<<<<<<<<<<<<<
 *             (1-self.weight_xyz[2])
 * 
 */
  __pyx_t_14 = PyFloat_FromDouble((((1.0 - (*((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_7 * __pyx_v_self->weight_xyz.strides[0]) )))) * (1.0 - (*((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_6 * __pyx_v_self->weight_xyz.strides[0]) ))))) * (1.0 - (*((double *) ( /* dim=0 */ (__pyx_v_self->weight_xyz.data + __pyx_t_4 * __pyx_v_self->weight_xyz.strides[0]) )))))); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);

  /* "chromo/fields.pyx":2116
 *         implementation.
 *         """
 *         self.wt_vec = np.array([             # <<<<<<<<<<<<<<
 * 
 *             # lower_x, lower_y, lower_z
 */
  __pyx_t_15 = PyList_New(8); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_15, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_15, 1, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyList_SET_ITEM(__pyx_t_15, 2, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_10);
  PyList_SET_ITEM(__pyx_t_15, 3, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_11);
  PyList_SET_ITEM(__pyx_t_15, 4, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_12);
  PyList_SET_ITEM(__pyx_t_15, 5, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_13);
  PyList_SET_ITEM(__pyx_t_15, 6, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_14);
  PyList_SET_ITEM(__pyx_t_15, 7, __pyx_t_14);
  __pyx_t_2 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_14 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_14)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_14, __pyx_t_15) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_15);
  __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_16 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_16.memview)) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->wt_vec, 0);
  __pyx_v_self->wt_vec = __pyx_t_16;
  __pyx_t_16.memview = NULL;
  __pyx_t_16.data = NULL;

  /* "chromo/fields.pyx":2108
 *                     self.density[i, j] = 0
 * 
 *     cdef void _generate_weight_vector(self):             # <<<<<<<<<<<<<<
 *         """Generate weight array for eight bins containing the bead.
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __PYX_XDEC_MEMVIEW(&__pyx_t_16, 1);
  __Pyx_WriteUnraisable("chromo.fields.UniformDensityField._generate_weight_vector", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "chromo/fields.pyx":2151
 *         ])
 * 
 *     cdef void _generate_index_vector(self):             # <<<<<<<<<<<<<<
 *         """Generate vector of eight superindices containing a bead.
 * 
 */

static void __pyx_f_6chromo_6fields_19UniformDensityField__generate_index_vector(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_generate_index_vector", 0);
  __Pyx_TraceCall("_generate_index_vector", __pyx_f[0], 2151, 0, __PYX_ERR(0, 2151, __pyx_L1_error));

  /* "chromo/fields.pyx":2169
 *         """
 *         # lower_x, lower_y, lower_z
 *         self.nbr_inds[0] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *             (self.index_xyz[0]), (self.index_xyz[1]), (self.index_xyz[2])
 *         ]
 */
  if (unlikely(!__pyx_v_self->inds_xyz_to_super.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2169, __pyx_L1_error)}

  /* "chromo/fields.pyx":2170
 *         # lower_x, lower_y, lower_z
 *         self.nbr_inds[0] = self.inds_xyz_to_super[
 *             (self.index_xyz[0]), (self.index_xyz[1]), (self.index_xyz[2])             # <<<<<<<<<<<<<<
 *         ]
 * 
 */
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2170, __pyx_L1_error)}
  __pyx_t_1 = 0;
  __pyx_t_2 = -1;
  if (__pyx_t_1 < 0) {
    __pyx_t_1 += __pyx_v_self->index_xyz.shape[0];
    if (unlikely(__pyx_t_1 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_1 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2170, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2170, __pyx_L1_error)}
  __pyx_t_3 = 1;
  __pyx_t_2 = -1;
  if (__pyx_t_3 < 0) {
    __pyx_t_3 += __pyx_v_self->index_xyz.shape[0];
    if (unlikely(__pyx_t_3 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_3 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2170, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2170, __pyx_L1_error)}
  __pyx_t_4 = 2;
  __pyx_t_2 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_v_self->index_xyz.shape[0];
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2170, __pyx_L1_error)
  }

  /* "chromo/fields.pyx":2169
 *         """
 *         # lower_x, lower_y, lower_z
 *         self.nbr_inds[0] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *             (self.index_xyz[0]), (self.index_xyz[1]), (self.index_xyz[2])
 *         ]
 */
  __pyx_t_5 = (*((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_1 * __pyx_v_self->index_xyz.strides[0]) )));
  __pyx_t_6 = (*((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_3 * __pyx_v_self->index_xyz.strides[0]) )));
  __pyx_t_7 = (*((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_4 * __pyx_v_self->index_xyz.strides[0]) )));
  __pyx_t_2 = -1;
  if (__pyx_t_5 < 0) {
    __pyx_t_5 += __pyx_v_self->inds_xyz_to_super.shape[0];
    if (unlikely(__pyx_t_5 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_5 >= __pyx_v_self->inds_xyz_to_super.shape[0])) __pyx_t_2 = 0;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_self->inds_xyz_to_super.shape[1];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_2 = 1;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_self->inds_xyz_to_super.shape[1])) __pyx_t_2 = 1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_v_self->inds_xyz_to_super.shape[2];
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_2 = 2;
  } else if (unlikely(__pyx_t_7 >= __pyx_v_self->inds_xyz_to_super.shape[2])) __pyx_t_2 = 2;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2169, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->nbr_inds.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2169, __pyx_L1_error)}
  __pyx_t_8 = 0;
  __pyx_t_2 = -1;
  if (__pyx_t_8 < 0) {
    __pyx_t_8 += __pyx_v_self->nbr_inds.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_8 >= __pyx_v_self->nbr_inds.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2169, __pyx_L1_error)
  }
  *((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds.data + __pyx_t_8 * __pyx_v_self->nbr_inds.strides[0]) )) = (*((long *) ( /* dim=2 */ ((char *) (((long *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->inds_xyz_to_super.data + __pyx_t_5 * __pyx_v_self->inds_xyz_to_super.strides[0]) ) + __pyx_t_6 * __pyx_v_self->inds_xyz_to_super.strides[1]) )) + __pyx_t_7)) )));

  /* "chromo/fields.pyx":2174
 * 
 *         # upper_x, lower_y, lower_z
 *         self.nbr_inds[1] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *             (1+self.index_xyz[0]), (self.index_xyz[1]), (self.index_xyz[2])
 *         ]
 */
  if (unlikely(!__pyx_v_self->inds_xyz_to_super.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2174, __pyx_L1_error)}

  /* "chromo/fields.pyx":2175
 *         # upper_x, lower_y, lower_z
 *         self.nbr_inds[1] = self.inds_xyz_to_super[
 *             (1+self.index_xyz[0]), (self.index_xyz[1]), (self.index_xyz[2])             # <<<<<<<<<<<<<<
 *         ]
 * 
 */
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2175, __pyx_L1_error)}
  __pyx_t_4 = 0;
  __pyx_t_2 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_v_self->index_xyz.shape[0];
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2175, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2175, __pyx_L1_error)}
  __pyx_t_3 = 1;
  __pyx_t_2 = -1;
  if (__pyx_t_3 < 0) {
    __pyx_t_3 += __pyx_v_self->index_xyz.shape[0];
    if (unlikely(__pyx_t_3 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_3 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2175, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2175, __pyx_L1_error)}
  __pyx_t_1 = 2;
  __pyx_t_2 = -1;
  if (__pyx_t_1 < 0) {
    __pyx_t_1 += __pyx_v_self->index_xyz.shape[0];
    if (unlikely(__pyx_t_1 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_1 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2175, __pyx_L1_error)
  }

  /* "chromo/fields.pyx":2174
 * 
 *         # upper_x, lower_y, lower_z
 *         self.nbr_inds[1] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *             (1+self.index_xyz[0]), (self.index_xyz[1]), (self.index_xyz[2])
 *         ]
 */
  __pyx_t_7 = (1 + (*((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_4 * __pyx_v_self->index_xyz.strides[0]) ))));
  __pyx_t_6 = (*((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_3 * __pyx_v_self->index_xyz.strides[0]) )));
  __pyx_t_5 = (*((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_1 * __pyx_v_self->index_xyz.strides[0]) )));
  __pyx_t_2 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_v_self->inds_xyz_to_super.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_v_self->inds_xyz_to_super.shape[0])) __pyx_t_2 = 0;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_self->inds_xyz_to_super.shape[1];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_2 = 1;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_self->inds_xyz_to_super.shape[1])) __pyx_t_2 = 1;
  if (__pyx_t_5 < 0) {
    __pyx_t_5 += __pyx_v_self->inds_xyz_to_super.shape[2];
    if (unlikely(__pyx_t_5 < 0)) __pyx_t_2 = 2;
  } else if (unlikely(__pyx_t_5 >= __pyx_v_self->inds_xyz_to_super.shape[2])) __pyx_t_2 = 2;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2174, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->nbr_inds.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2174, __pyx_L1_error)}
  __pyx_t_8 = 1;
  __pyx_t_2 = -1;
  if (__pyx_t_8 < 0) {
    __pyx_t_8 += __pyx_v_self->nbr_inds.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_8 >= __pyx_v_self->nbr_inds.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2174, __pyx_L1_error)
  }
  *((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds.data + __pyx_t_8 * __pyx_v_self->nbr_inds.strides[0]) )) = (*((long *) ( /* dim=2 */ ((char *) (((long *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->inds_xyz_to_super.data + __pyx_t_7 * __pyx_v_self->inds_xyz_to_super.strides[0]) ) + __pyx_t_6 * __pyx_v_self->inds_xyz_to_super.strides[1]) )) + __pyx_t_5)) )));

  /* "chromo/fields.pyx":2179
 * 
 *         # lower_x, upper_y, lower_z
 *         self.nbr_inds[2] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *             (self.index_xyz[0]), (1+self.index_xyz[1]), (self.index_xyz[2])
 *         ]
 */
  if (unlikely(!__pyx_v_self->inds_xyz_to_super.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2179, __pyx_L1_error)}

  /* "chromo/fields.pyx":2180
 *         # lower_x, upper_y, lower_z
 *         self.nbr_inds[2] = self.inds_xyz_to_super[
 *             (self.index_xyz[0]), (1+self.index_xyz[1]), (self.index_xyz[2])             # <<<<<<<<<<<<<<
 *         ]
 * 
 */
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2180, __pyx_L1_error)}
  __pyx_t_1 = 0;
  __pyx_t_2 = -1;
  if (__pyx_t_1 < 0) {
    __pyx_t_1 += __pyx_v_self->index_xyz.shape[0];
    if (unlikely(__pyx_t_1 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_1 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2180, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2180, __pyx_L1_error)}
  __pyx_t_3 = 1;
  __pyx_t_2 = -1;
  if (__pyx_t_3 < 0) {
    __pyx_t_3 += __pyx_v_self->index_xyz.shape[0];
    if (unlikely(__pyx_t_3 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_3 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2180, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2180, __pyx_L1_error)}
  __pyx_t_4 = 2;
  __pyx_t_2 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_v_self->index_xyz.shape[0];
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2180, __pyx_L1_error)
  }

  /* "chromo/fields.pyx":2179
 * 
 *         # lower_x, upper_y, lower_z
 *         self.nbr_inds[2] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *             (self.index_xyz[0]), (1+self.index_xyz[1]), (self.index_xyz[2])
 *         ]
 */
  __pyx_t_5 = (*((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_1 * __pyx_v_self->index_xyz.strides[0]) )));
  __pyx_t_6 = (1 + (*((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_3 * __pyx_v_self->index_xyz.strides[0]) ))));
  __pyx_t_7 = (*((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_4 * __pyx_v_self->index_xyz.strides[0]) )));
  __pyx_t_2 = -1;
  if (__pyx_t_5 < 0) {
    __pyx_t_5 += __pyx_v_self->inds_xyz_to_super.shape[0];
    if (unlikely(__pyx_t_5 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_5 >= __pyx_v_self->inds_xyz_to_super.shape[0])) __pyx_t_2 = 0;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_self->inds_xyz_to_super.shape[1];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_2 = 1;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_self->inds_xyz_to_super.shape[1])) __pyx_t_2 = 1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_v_self->inds_xyz_to_super.shape[2];
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_2 = 2;
  } else if (unlikely(__pyx_t_7 >= __pyx_v_self->inds_xyz_to_super.shape[2])) __pyx_t_2 = 2;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2179, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->nbr_inds.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2179, __pyx_L1_error)}
  __pyx_t_8 = 2;
  __pyx_t_2 = -1;
  if (__pyx_t_8 < 0) {
    __pyx_t_8 += __pyx_v_self->nbr_inds.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_8 >= __pyx_v_self->nbr_inds.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2179, __pyx_L1_error)
  }
  *((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds.data + __pyx_t_8 * __pyx_v_self->nbr_inds.strides[0]) )) = (*((long *) ( /* dim=2 */ ((char *) (((long *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->inds_xyz_to_super.data + __pyx_t_5 * __pyx_v_self->inds_xyz_to_super.strides[0]) ) + __pyx_t_6 * __pyx_v_self->inds_xyz_to_super.strides[1]) )) + __pyx_t_7)) )));

  /* "chromo/fields.pyx":2184
 * 
 *         # upper_x, upper_y, lower_z
 *         self.nbr_inds[3] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *             (1+self.index_xyz[0]), (1+self.index_xyz[1]), (self.index_xyz[2])
 *         ]
 */
  if (unlikely(!__pyx_v_self->inds_xyz_to_super.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2184, __pyx_L1_error)}

  /* "chromo/fields.pyx":2185
 *         # upper_x, upper_y, lower_z
 *         self.nbr_inds[3] = self.inds_xyz_to_super[
 *             (1+self.index_xyz[0]), (1+self.index_xyz[1]), (self.index_xyz[2])             # <<<<<<<<<<<<<<
 *         ]
 * 
 */
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2185, __pyx_L1_error)}
  __pyx_t_4 = 0;
  __pyx_t_2 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_v_self->index_xyz.shape[0];
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2185, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2185, __pyx_L1_error)}
  __pyx_t_3 = 1;
  __pyx_t_2 = -1;
  if (__pyx_t_3 < 0) {
    __pyx_t_3 += __pyx_v_self->index_xyz.shape[0];
    if (unlikely(__pyx_t_3 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_3 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2185, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2185, __pyx_L1_error)}
  __pyx_t_1 = 2;
  __pyx_t_2 = -1;
  if (__pyx_t_1 < 0) {
    __pyx_t_1 += __pyx_v_self->index_xyz.shape[0];
    if (unlikely(__pyx_t_1 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_1 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2185, __pyx_L1_error)
  }

  /* "chromo/fields.pyx":2184
 * 
 *         # upper_x, upper_y, lower_z
 *         self.nbr_inds[3] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *             (1+self.index_xyz[0]), (1+self.index_xyz[1]), (self.index_xyz[2])
 *         ]
 */
  __pyx_t_7 = (1 + (*((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_4 * __pyx_v_self->index_xyz.strides[0]) ))));
  __pyx_t_6 = (1 + (*((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_3 * __pyx_v_self->index_xyz.strides[0]) ))));
  __pyx_t_5 = (*((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_1 * __pyx_v_self->index_xyz.strides[0]) )));
  __pyx_t_2 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_v_self->inds_xyz_to_super.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_v_self->inds_xyz_to_super.shape[0])) __pyx_t_2 = 0;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_self->inds_xyz_to_super.shape[1];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_2 = 1;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_self->inds_xyz_to_super.shape[1])) __pyx_t_2 = 1;
  if (__pyx_t_5 < 0) {
    __pyx_t_5 += __pyx_v_self->inds_xyz_to_super.shape[2];
    if (unlikely(__pyx_t_5 < 0)) __pyx_t_2 = 2;
  } else if (unlikely(__pyx_t_5 >= __pyx_v_self->inds_xyz_to_super.shape[2])) __pyx_t_2 = 2;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2184, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->nbr_inds.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2184, __pyx_L1_error)}
  __pyx_t_8 = 3;
  __pyx_t_2 = -1;
  if (__pyx_t_8 < 0) {
    __pyx_t_8 += __pyx_v_self->nbr_inds.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_8 >= __pyx_v_self->nbr_inds.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2184, __pyx_L1_error)
  }
  *((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds.data + __pyx_t_8 * __pyx_v_self->nbr_inds.strides[0]) )) = (*((long *) ( /* dim=2 */ ((char *) (((long *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->inds_xyz_to_super.data + __pyx_t_7 * __pyx_v_self->inds_xyz_to_super.strides[0]) ) + __pyx_t_6 * __pyx_v_self->inds_xyz_to_super.strides[1]) )) + __pyx_t_5)) )));

  /* "chromo/fields.pyx":2189
 * 
 *         # lower_x, lower_y, upper_z
 *         self.nbr_inds[4] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *             (self.index_xyz[0]), (self.index_xyz[1]), (1+self.index_xyz[2])
 *         ]
 */
  if (unlikely(!__pyx_v_self->inds_xyz_to_super.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2189, __pyx_L1_error)}

  /* "chromo/fields.pyx":2190
 *         # lower_x, lower_y, upper_z
 *         self.nbr_inds[4] = self.inds_xyz_to_super[
 *             (self.index_xyz[0]), (self.index_xyz[1]), (1+self.index_xyz[2])             # <<<<<<<<<<<<<<
 *         ]
 * 
 */
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2190, __pyx_L1_error)}
  __pyx_t_1 = 0;
  __pyx_t_2 = -1;
  if (__pyx_t_1 < 0) {
    __pyx_t_1 += __pyx_v_self->index_xyz.shape[0];
    if (unlikely(__pyx_t_1 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_1 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2190, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2190, __pyx_L1_error)}
  __pyx_t_3 = 1;
  __pyx_t_2 = -1;
  if (__pyx_t_3 < 0) {
    __pyx_t_3 += __pyx_v_self->index_xyz.shape[0];
    if (unlikely(__pyx_t_3 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_3 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2190, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2190, __pyx_L1_error)}
  __pyx_t_4 = 2;
  __pyx_t_2 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_v_self->index_xyz.shape[0];
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2190, __pyx_L1_error)
  }

  /* "chromo/fields.pyx":2189
 * 
 *         # lower_x, lower_y, upper_z
 *         self.nbr_inds[4] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *             (self.index_xyz[0]), (self.index_xyz[1]), (1+self.index_xyz[2])
 *         ]
 */
  __pyx_t_5 = (*((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_1 * __pyx_v_self->index_xyz.strides[0]) )));
  __pyx_t_6 = (*((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_3 * __pyx_v_self->index_xyz.strides[0]) )));
  __pyx_t_7 = (1 + (*((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_4 * __pyx_v_self->index_xyz.strides[0]) ))));
  __pyx_t_2 = -1;
  if (__pyx_t_5 < 0) {
    __pyx_t_5 += __pyx_v_self->inds_xyz_to_super.shape[0];
    if (unlikely(__pyx_t_5 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_5 >= __pyx_v_self->inds_xyz_to_super.shape[0])) __pyx_t_2 = 0;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_self->inds_xyz_to_super.shape[1];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_2 = 1;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_self->inds_xyz_to_super.shape[1])) __pyx_t_2 = 1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_v_self->inds_xyz_to_super.shape[2];
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_2 = 2;
  } else if (unlikely(__pyx_t_7 >= __pyx_v_self->inds_xyz_to_super.shape[2])) __pyx_t_2 = 2;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2189, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->nbr_inds.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2189, __pyx_L1_error)}
  __pyx_t_8 = 4;
  __pyx_t_2 = -1;
  if (__pyx_t_8 < 0) {
    __pyx_t_8 += __pyx_v_self->nbr_inds.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_8 >= __pyx_v_self->nbr_inds.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2189, __pyx_L1_error)
  }
  *((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds.data + __pyx_t_8 * __pyx_v_self->nbr_inds.strides[0]) )) = (*((long *) ( /* dim=2 */ ((char *) (((long *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->inds_xyz_to_super.data + __pyx_t_5 * __pyx_v_self->inds_xyz_to_super.strides[0]) ) + __pyx_t_6 * __pyx_v_self->inds_xyz_to_super.strides[1]) )) + __pyx_t_7)) )));

  /* "chromo/fields.pyx":2194
 * 
 *         # upper_x, lower_y, upper_z
 *         self.nbr_inds[5] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *             (1+self.index_xyz[0]), (self.index_xyz[1]), (1+self.index_xyz[2])
 *         ]
 */
  if (unlikely(!__pyx_v_self->inds_xyz_to_super.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2194, __pyx_L1_error)}

  /* "chromo/fields.pyx":2195
 *         # upper_x, lower_y, upper_z
 *         self.nbr_inds[5] = self.inds_xyz_to_super[
 *             (1+self.index_xyz[0]), (self.index_xyz[1]), (1+self.index_xyz[2])             # <<<<<<<<<<<<<<
 *         ]
 * 
 */
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2195, __pyx_L1_error)}
  __pyx_t_4 = 0;
  __pyx_t_2 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_v_self->index_xyz.shape[0];
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2195, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2195, __pyx_L1_error)}
  __pyx_t_3 = 1;
  __pyx_t_2 = -1;
  if (__pyx_t_3 < 0) {
    __pyx_t_3 += __pyx_v_self->index_xyz.shape[0];
    if (unlikely(__pyx_t_3 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_3 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2195, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2195, __pyx_L1_error)}
  __pyx_t_1 = 2;
  __pyx_t_2 = -1;
  if (__pyx_t_1 < 0) {
    __pyx_t_1 += __pyx_v_self->index_xyz.shape[0];
    if (unlikely(__pyx_t_1 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_1 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2195, __pyx_L1_error)
  }

  /* "chromo/fields.pyx":2194
 * 
 *         # upper_x, lower_y, upper_z
 *         self.nbr_inds[5] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *             (1+self.index_xyz[0]), (self.index_xyz[1]), (1+self.index_xyz[2])
 *         ]
 */
  __pyx_t_7 = (1 + (*((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_4 * __pyx_v_self->index_xyz.strides[0]) ))));
  __pyx_t_6 = (*((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_3 * __pyx_v_self->index_xyz.strides[0]) )));
  __pyx_t_5 = (1 + (*((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_1 * __pyx_v_self->index_xyz.strides[0]) ))));
  __pyx_t_2 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_v_self->inds_xyz_to_super.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_v_self->inds_xyz_to_super.shape[0])) __pyx_t_2 = 0;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_self->inds_xyz_to_super.shape[1];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_2 = 1;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_self->inds_xyz_to_super.shape[1])) __pyx_t_2 = 1;
  if (__pyx_t_5 < 0) {
    __pyx_t_5 += __pyx_v_self->inds_xyz_to_super.shape[2];
    if (unlikely(__pyx_t_5 < 0)) __pyx_t_2 = 2;
  } else if (unlikely(__pyx_t_5 >= __pyx_v_self->inds_xyz_to_super.shape[2])) __pyx_t_2 = 2;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2194, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->nbr_inds.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2194, __pyx_L1_error)}
  __pyx_t_8 = 5;
  __pyx_t_2 = -1;
  if (__pyx_t_8 < 0) {
    __pyx_t_8 += __pyx_v_self->nbr_inds.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_8 >= __pyx_v_self->nbr_inds.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2194, __pyx_L1_error)
  }
  *((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds.data + __pyx_t_8 * __pyx_v_self->nbr_inds.strides[0]) )) = (*((long *) ( /* dim=2 */ ((char *) (((long *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->inds_xyz_to_super.data + __pyx_t_7 * __pyx_v_self->inds_xyz_to_super.strides[0]) ) + __pyx_t_6 * __pyx_v_self->inds_xyz_to_super.strides[1]) )) + __pyx_t_5)) )));

  /* "chromo/fields.pyx":2199
 * 
 *         # lower_x, upper_y, upper_z
 *         self.nbr_inds[6] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *             (self.index_xyz[0]), (1+self.index_xyz[1]), (1+self.index_xyz[2])
 *         ]
 */
  if (unlikely(!__pyx_v_self->inds_xyz_to_super.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2199, __pyx_L1_error)}

  /* "chromo/fields.pyx":2200
 *         # lower_x, upper_y, upper_z
 *         self.nbr_inds[6] = self.inds_xyz_to_super[
 *             (self.index_xyz[0]), (1+self.index_xyz[1]), (1+self.index_xyz[2])             # <<<<<<<<<<<<<<
 *         ]
 * 
 */
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2200, __pyx_L1_error)}
  __pyx_t_1 = 0;
  __pyx_t_2 = -1;
  if (__pyx_t_1 < 0) {
    __pyx_t_1 += __pyx_v_self->index_xyz.shape[0];
    if (unlikely(__pyx_t_1 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_1 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2200, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2200, __pyx_L1_error)}
  __pyx_t_3 = 1;
  __pyx_t_2 = -1;
  if (__pyx_t_3 < 0) {
    __pyx_t_3 += __pyx_v_self->index_xyz.shape[0];
    if (unlikely(__pyx_t_3 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_3 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2200, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2200, __pyx_L1_error)}
  __pyx_t_4 = 2;
  __pyx_t_2 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_v_self->index_xyz.shape[0];
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2200, __pyx_L1_error)
  }

  /* "chromo/fields.pyx":2199
 * 
 *         # lower_x, upper_y, upper_z
 *         self.nbr_inds[6] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *             (self.index_xyz[0]), (1+self.index_xyz[1]), (1+self.index_xyz[2])
 *         ]
 */
  __pyx_t_5 = (*((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_1 * __pyx_v_self->index_xyz.strides[0]) )));
  __pyx_t_6 = (1 + (*((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_3 * __pyx_v_self->index_xyz.strides[0]) ))));
  __pyx_t_7 = (1 + (*((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_4 * __pyx_v_self->index_xyz.strides[0]) ))));
  __pyx_t_2 = -1;
  if (__pyx_t_5 < 0) {
    __pyx_t_5 += __pyx_v_self->inds_xyz_to_super.shape[0];
    if (unlikely(__pyx_t_5 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_5 >= __pyx_v_self->inds_xyz_to_super.shape[0])) __pyx_t_2 = 0;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_self->inds_xyz_to_super.shape[1];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_2 = 1;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_self->inds_xyz_to_super.shape[1])) __pyx_t_2 = 1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_v_self->inds_xyz_to_super.shape[2];
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_2 = 2;
  } else if (unlikely(__pyx_t_7 >= __pyx_v_self->inds_xyz_to_super.shape[2])) __pyx_t_2 = 2;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2199, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->nbr_inds.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2199, __pyx_L1_error)}
  __pyx_t_8 = 6;
  __pyx_t_2 = -1;
  if (__pyx_t_8 < 0) {
    __pyx_t_8 += __pyx_v_self->nbr_inds.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_8 >= __pyx_v_self->nbr_inds.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2199, __pyx_L1_error)
  }
  *((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds.data + __pyx_t_8 * __pyx_v_self->nbr_inds.strides[0]) )) = (*((long *) ( /* dim=2 */ ((char *) (((long *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->inds_xyz_to_super.data + __pyx_t_5 * __pyx_v_self->inds_xyz_to_super.strides[0]) ) + __pyx_t_6 * __pyx_v_self->inds_xyz_to_super.strides[1]) )) + __pyx_t_7)) )));

  /* "chromo/fields.pyx":2204
 * 
 *         # upper_x, upper_y, upper_z
 *         self.nbr_inds[7] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *             (1+self.index_xyz[0]), (1+self.index_xyz[1]), (1+self.index_xyz[2])
 *         ]
 */
  if (unlikely(!__pyx_v_self->inds_xyz_to_super.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2204, __pyx_L1_error)}

  /* "chromo/fields.pyx":2205
 *         # upper_x, upper_y, upper_z
 *         self.nbr_inds[7] = self.inds_xyz_to_super[
 *             (1+self.index_xyz[0]), (1+self.index_xyz[1]), (1+self.index_xyz[2])             # <<<<<<<<<<<<<<
 *         ]
 * 
 */
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2205, __pyx_L1_error)}
  __pyx_t_4 = 0;
  __pyx_t_2 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_v_self->index_xyz.shape[0];
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2205, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2205, __pyx_L1_error)}
  __pyx_t_3 = 1;
  __pyx_t_2 = -1;
  if (__pyx_t_3 < 0) {
    __pyx_t_3 += __pyx_v_self->index_xyz.shape[0];
    if (unlikely(__pyx_t_3 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_3 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2205, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2205, __pyx_L1_error)}
  __pyx_t_1 = 2;
  __pyx_t_2 = -1;
  if (__pyx_t_1 < 0) {
    __pyx_t_1 += __pyx_v_self->index_xyz.shape[0];
    if (unlikely(__pyx_t_1 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_1 >= __pyx_v_self->index_xyz.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2205, __pyx_L1_error)
  }

  /* "chromo/fields.pyx":2204
 * 
 *         # upper_x, upper_y, upper_z
 *         self.nbr_inds[7] = self.inds_xyz_to_super[             # <<<<<<<<<<<<<<
 *             (1+self.index_xyz[0]), (1+self.index_xyz[1]), (1+self.index_xyz[2])
 *         ]
 */
  __pyx_t_7 = (1 + (*((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_4 * __pyx_v_self->index_xyz.strides[0]) ))));
  __pyx_t_6 = (1 + (*((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_3 * __pyx_v_self->index_xyz.strides[0]) ))));
  __pyx_t_5 = (1 + (*((long *) ( /* dim=0 */ (__pyx_v_self->index_xyz.data + __pyx_t_1 * __pyx_v_self->index_xyz.strides[0]) ))));
  __pyx_t_2 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_v_self->inds_xyz_to_super.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_v_self->inds_xyz_to_super.shape[0])) __pyx_t_2 = 0;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_self->inds_xyz_to_super.shape[1];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_2 = 1;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_self->inds_xyz_to_super.shape[1])) __pyx_t_2 = 1;
  if (__pyx_t_5 < 0) {
    __pyx_t_5 += __pyx_v_self->inds_xyz_to_super.shape[2];
    if (unlikely(__pyx_t_5 < 0)) __pyx_t_2 = 2;
  } else if (unlikely(__pyx_t_5 >= __pyx_v_self->inds_xyz_to_super.shape[2])) __pyx_t_2 = 2;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2204, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->nbr_inds.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2204, __pyx_L1_error)}
  __pyx_t_8 = 7;
  __pyx_t_2 = -1;
  if (__pyx_t_8 < 0) {
    __pyx_t_8 += __pyx_v_self->nbr_inds.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_8 >= __pyx_v_self->nbr_inds.shape[0])) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(0, 2204, __pyx_L1_error)
  }
  *((long *) ( /* dim=0 */ (__pyx_v_self->nbr_inds.data + __pyx_t_8 * __pyx_v_self->nbr_inds.strides[0]) )) = (*((long *) ( /* dim=2 */ ((char *) (((long *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->inds_xyz_to_super.data + __pyx_t_7 * __pyx_v_self->inds_xyz_to_super.strides[0]) ) + __pyx_t_6 * __pyx_v_self->inds_xyz_to_super.strides[1]) )) + __pyx_t_5)) )));

  /* "chromo/fields.pyx":2151
 *         ])
 * 
 *     cdef void _generate_index_vector(self):             # <<<<<<<<<<<<<<
 *         """Generate vector of eight superindices containing a bead.
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("chromo.fields.UniformDensityField._generate_index_vector", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "chromo/fields.pyx":2208
 *         ]
 * 
 *     cdef double get_E_binders_and_beads(             # <<<<<<<<<<<<<<
 *         self, poly.PolymerBase poly, long[:] inds, long n_inds
 *     ):
 */

static double __pyx_f_6chromo_6fields_19UniformDensityField_get_E_binders_and_beads(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, __Pyx_memviewslice __pyx_v_inds, long __pyx_v_n_inds) {
  double __pyx_v_E_binders_beads;
  double __pyx_v_tot_density;
  long __pyx_v_i;
  long __pyx_v_j;
  long __pyx_v_n_double_bound;
  PyObject *__pyx_v_binder_info = 0;
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  long __pyx_t_5;
  long __pyx_t_6;
  long __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  double __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_E_binders_and_beads", 0);
  __Pyx_TraceCall("get_E_binders_and_beads", __pyx_f[0], 2208, 0, __PYX_ERR(0, 2208, __pyx_L1_error));

  /* "chromo/fields.pyx":2233
 * 
 *         # Count num. nucleosomes bound by reader proteins at both histone tails
 *         self.count_doubly_bound(poly, inds, n_inds, trial=0, state_change=0)             # <<<<<<<<<<<<<<
 * 
 *         E_binders_beads = 0
 */
  ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->count_doubly_bound(__pyx_v_self, __pyx_v_poly, __pyx_v_inds, __pyx_v_n_inds, 0, 0);

  /* "chromo/fields.pyx":2235
 *         self.count_doubly_bound(poly, inds, n_inds, trial=0, state_change=0)
 * 
 *         E_binders_beads = 0             # <<<<<<<<<<<<<<
 *         for i, binder_info in enumerate(self.binder_dict):
 *             # Calculate the total density
 */
  __pyx_v_E_binders_beads = 0.0;

  /* "chromo/fields.pyx":2236
 * 
 *         E_binders_beads = 0
 *         for i, binder_info in enumerate(self.binder_dict):             # <<<<<<<<<<<<<<
 *             # Calculate the total density
 *             tot_density = 0
 */
  __pyx_t_1 = 0;
  __pyx_t_2 = __pyx_v_self->binder_dict; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 2236, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    if (!(likely(PyDict_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 2236, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_binder_info, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;
    __pyx_v_i = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "chromo/fields.pyx":2238
 *         for i, binder_info in enumerate(self.binder_dict):
 *             # Calculate the total density
 *             tot_density = 0             # <<<<<<<<<<<<<<
 *             for j in range(self.n_bins):
 *                 tot_density += self.density[j, i+1]**2
 */
    __pyx_v_tot_density = 0.0;

    /* "chromo/fields.pyx":2239
 *             # Calculate the total density
 *             tot_density = 0
 *             for j in range(self.n_bins):             # <<<<<<<<<<<<<<
 *                 tot_density += self.density[j, i+1]**2
 *             # Oligomerization
 */
    __pyx_t_5 = __pyx_v_self->n_bins;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_j = __pyx_t_7;

      /* "chromo/fields.pyx":2240
 *             tot_density = 0
 *             for j in range(self.n_bins):
 *                 tot_density += self.density[j, i+1]**2             # <<<<<<<<<<<<<<
 *             # Oligomerization
 *             E_binders_beads +=\
 */
      if (unlikely(!__pyx_v_self->density.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2240, __pyx_L1_error)}
      __pyx_t_8 = __pyx_v_j;
      __pyx_t_9 = (__pyx_v_i + 1);
      __pyx_t_10 = -1;
      if (__pyx_t_8 < 0) {
        __pyx_t_8 += __pyx_v_self->density.shape[0];
        if (unlikely(__pyx_t_8 < 0)) __pyx_t_10 = 0;
      } else if (unlikely(__pyx_t_8 >= __pyx_v_self->density.shape[0])) __pyx_t_10 = 0;
      if (__pyx_t_9 < 0) {
        __pyx_t_9 += __pyx_v_self->density.shape[1];
        if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 1;
      } else if (unlikely(__pyx_t_9 >= __pyx_v_self->density.shape[1])) __pyx_t_10 = 1;
      if (unlikely(__pyx_t_10 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_10);
        __PYX_ERR(0, 2240, __pyx_L1_error)
      }
      __pyx_v_tot_density = (__pyx_v_tot_density + pow((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density.data + __pyx_t_8 * __pyx_v_self->density.strides[0]) )) + __pyx_t_9)) ))), 2.0));
    }

    /* "chromo/fields.pyx":2242
 *                 tot_density += self.density[j, i+1]**2
 *             # Oligomerization
 *             E_binders_beads +=\             # <<<<<<<<<<<<<<
 *                 binder_info['field_energy_prefactor'] * tot_density
 *             # Intranucleosome interaction
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_E_binders_beads); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "chromo/fields.pyx":2243
 *             # Oligomerization
 *             E_binders_beads +=\
 *                 binder_info['field_energy_prefactor'] * tot_density             # <<<<<<<<<<<<<<
 *             # Intranucleosome interaction
 *             n_double_bound = self.doubly_bound[i]
 */
    if (unlikely(__pyx_v_binder_info == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2243, __pyx_L1_error)
    }
    __pyx_t_11 = __Pyx_PyDict_GetItem(__pyx_v_binder_info, __pyx_n_s_field_energy_prefactor); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_12 = PyFloat_FromDouble(__pyx_v_tot_density); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_13 = PyNumber_Multiply(__pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "chromo/fields.pyx":2242
 *                 tot_density += self.density[j, i+1]**2
 *             # Oligomerization
 *             E_binders_beads +=\             # <<<<<<<<<<<<<<
 *                 binder_info['field_energy_prefactor'] * tot_density
 *             # Intranucleosome interaction
 */
    __pyx_t_12 = PyNumber_InPlaceAdd(__pyx_t_4, __pyx_t_13); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_12); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2242, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_v_E_binders_beads = __pyx_t_14;

    /* "chromo/fields.pyx":2245
 *                 binder_info['field_energy_prefactor'] * tot_density
 *             # Intranucleosome interaction
 *             n_double_bound = self.doubly_bound[i]             # <<<<<<<<<<<<<<
 *             E_binders_beads +=\
 *                 binder_info['interaction_energy_intranucleosome'] *\
 */
    if (unlikely(!__pyx_v_self->doubly_bound.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2245, __pyx_L1_error)}
    __pyx_t_9 = __pyx_v_i;
    __pyx_t_10 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->doubly_bound.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->doubly_bound.shape[0])) __pyx_t_10 = 0;
    if (unlikely(__pyx_t_10 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_10);
      __PYX_ERR(0, 2245, __pyx_L1_error)
    }
    __pyx_v_n_double_bound = (*((long *) ( /* dim=0 */ (__pyx_v_self->doubly_bound.data + __pyx_t_9 * __pyx_v_self->doubly_bound.strides[0]) )));

    /* "chromo/fields.pyx":2246
 *             # Intranucleosome interaction
 *             n_double_bound = self.doubly_bound[i]
 *             E_binders_beads +=\             # <<<<<<<<<<<<<<
 *                 binder_info['interaction_energy_intranucleosome'] *\
 *                 n_double_bound
 */
    __pyx_t_12 = PyFloat_FromDouble(__pyx_v_E_binders_beads); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);

    /* "chromo/fields.pyx":2247
 *             n_double_bound = self.doubly_bound[i]
 *             E_binders_beads +=\
 *                 binder_info['interaction_energy_intranucleosome'] *\             # <<<<<<<<<<<<<<
 *                 n_double_bound
 * 
 */
    if (unlikely(__pyx_v_binder_info == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2247, __pyx_L1_error)
    }
    __pyx_t_13 = __Pyx_PyDict_GetItem(__pyx_v_binder_info, __pyx_n_s_interaction_energy_intranucleoso); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);

    /* "chromo/fields.pyx":2248
 *             E_binders_beads +=\
 *                 binder_info['interaction_energy_intranucleosome'] *\
 *                 n_double_bound             # <<<<<<<<<<<<<<
 * 
 *         # Nonspecific bead interaction energy
 */
    __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_n_double_bound); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "chromo/fields.pyx":2247
 *             n_double_bound = self.doubly_bound[i]
 *             E_binders_beads +=\
 *                 binder_info['interaction_energy_intranucleosome'] *\             # <<<<<<<<<<<<<<
 *                 n_double_bound
 * 
 */
    __pyx_t_11 = PyNumber_Multiply(__pyx_t_13, __pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "chromo/fields.pyx":2246
 *             # Intranucleosome interaction
 *             n_double_bound = self.doubly_bound[i]
 *             E_binders_beads +=\             # <<<<<<<<<<<<<<
 *                 binder_info['interaction_energy_intranucleosome'] *\
 *                 n_double_bound
 */
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_t_12, __pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2246, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_E_binders_beads = __pyx_t_14;

    /* "chromo/fields.pyx":2236
 * 
 *         E_binders_beads = 0
 *         for i, binder_info in enumerate(self.binder_dict):             # <<<<<<<<<<<<<<
 *             # Calculate the total density
 *             tot_density = 0
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":2251
 * 
 *         # Nonspecific bead interaction energy
 *         E_binders_beads += self.nonspecific_interact_E(poly)             # <<<<<<<<<<<<<<
 * 
 *         return E_binders_beads
 */
  __pyx_v_E_binders_beads = (__pyx_v_E_binders_beads + ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->nonspecific_interact_E(__pyx_v_self, __pyx_v_poly, 0));

  /* "chromo/fields.pyx":2253
 *         E_binders_beads += self.nonspecific_interact_E(poly)
 * 
 *         return E_binders_beads             # <<<<<<<<<<<<<<
 * 
 *     cpdef double nonspecific_interact_E(self, poly.PolymerBase poly):
 */
  __pyx_r = __pyx_v_E_binders_beads;
  goto __pyx_L0;

  /* "chromo/fields.pyx":2208
 *         ]
 * 
 *     cdef double get_E_binders_and_beads(             # <<<<<<<<<<<<<<
 *         self, poly.PolymerBase poly, long[:] inds, long n_inds
 *     ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_WriteUnraisable("chromo.fields.UniformDensityField.get_E_binders_and_beads", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_binder_info);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":2255
 *         return E_binders_beads
 * 
 *     cpdef double nonspecific_interact_E(self, poly.PolymerBase poly):             # <<<<<<<<<<<<<<
 *         """Get nonspecific interaction energy for the full polymer.
 * 
 */

static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_27nonspecific_interact_E(PyObject *__pyx_v_self, PyObject *__pyx_v_poly); /*proto*/
static double __pyx_f_6chromo_6fields_19UniformDensityField_nonspecific_interact_E(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, int __pyx_skip_dispatch) {
  double __pyx_v_bead_V;
  double __pyx_v_nonspecific_E;
  double __pyx_v_access_vol;
  __Pyx_memviewslice __pyx_v_vol_fracs = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_v_i;
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_t_7;
  long __pyx_t_8;
  long __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("nonspecific_interact_E", 0);
  __Pyx_TraceCall("nonspecific_interact_E", __pyx_f[0], 2255, 0, __PYX_ERR(0, 2255, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nonspecific_interact_E); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2255, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6chromo_6fields_19UniformDensityField_27nonspecific_interact_E)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_poly)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_poly));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2255, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2255, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_5;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "chromo/fields.pyx":2276
 *         cdef double[:] vol_fracs
 * 
 *         bead_V = poly.beads[0].vol             # <<<<<<<<<<<<<<
 *         vol_fracs = self.get_volume_fractions(bead_V)
 *         nonspecific_E = 0
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_poly->beads, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_vol); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2276, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_bead_V = __pyx_t_5;

  /* "chromo/fields.pyx":2277
 * 
 *         bead_V = poly.beads[0].vol
 *         vol_fracs = self.get_volume_fractions(bead_V)             # <<<<<<<<<<<<<<
 *         nonspecific_E = 0
 *         for i in range(self.n_bins):
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_volume_fractions(__pyx_v_self, __pyx_v_bead_V); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 2277, __pyx_L1_error)
  __pyx_v_vol_fracs = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "chromo/fields.pyx":2278
 *         bead_V = poly.beads[0].vol
 *         vol_fracs = self.get_volume_fractions(bead_V)
 *         nonspecific_E = 0             # <<<<<<<<<<<<<<
 *         for i in range(self.n_bins):
 *             access_vol = self.access_vols[i]
 */
  __pyx_v_nonspecific_E = 0.0;

  /* "chromo/fields.pyx":2279
 *         vol_fracs = self.get_volume_fractions(bead_V)
 *         nonspecific_E = 0
 *         for i in range(self.n_bins):             # <<<<<<<<<<<<<<
 *             access_vol = self.access_vols[i]
 *             if round(vol_fracs[i], 2) > self.vf_limit:
 */
  __pyx_t_7 = __pyx_v_self->n_bins;
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "chromo/fields.pyx":2280
 *         nonspecific_E = 0
 *         for i in range(self.n_bins):
 *             access_vol = self.access_vols[i]             # <<<<<<<<<<<<<<
 *             if round(vol_fracs[i], 2) > self.vf_limit:
 *                 nonspecific_E += E_HUGE * vol_fracs[i]
 */
    if (unlikely(__pyx_v_self->access_vols == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2280, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->access_vols, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2280, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_access_vol = __pyx_t_5;

    /* "chromo/fields.pyx":2281
 *         for i in range(self.n_bins):
 *             access_vol = self.access_vols[i]
 *             if round(vol_fracs[i], 2) > self.vf_limit:             # <<<<<<<<<<<<<<
 *                 nonspecific_E += E_HUGE * vol_fracs[i]
 *             else:
 */
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_11 = -1;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_vol_fracs.shape[0];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_vol_fracs.shape[0])) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 2281, __pyx_L1_error)
    }
    __pyx_t_1 = PyFloat_FromDouble((*((double *) ( /* dim=0 */ (__pyx_v_vol_fracs.data + __pyx_t_10 * __pyx_v_vol_fracs.strides[0]) )))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_2);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->vf_limit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2281, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 2281, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_12) {

      /* "chromo/fields.pyx":2282
 *             access_vol = self.access_vols[i]
 *             if round(vol_fracs[i], 2) > self.vf_limit:
 *                 nonspecific_E += E_HUGE * vol_fracs[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 nonspecific_E += self.chi * (access_vol / bead_V) *\
 */
      __pyx_t_10 = __pyx_v_i;
      __pyx_t_11 = -1;
      if (__pyx_t_10 < 0) {
        __pyx_t_10 += __pyx_v_vol_fracs.shape[0];
        if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 0;
      } else if (unlikely(__pyx_t_10 >= __pyx_v_vol_fracs.shape[0])) __pyx_t_11 = 0;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        __PYX_ERR(0, 2282, __pyx_L1_error)
      }
      __pyx_v_nonspecific_E = (__pyx_v_nonspecific_E + (__pyx_v_6chromo_6fields_E_HUGE * (*((double *) ( /* dim=0 */ (__pyx_v_vol_fracs.data + __pyx_t_10 * __pyx_v_vol_fracs.strides[0]) )))));

      /* "chromo/fields.pyx":2281
 *         for i in range(self.n_bins):
 *             access_vol = self.access_vols[i]
 *             if round(vol_fracs[i], 2) > self.vf_limit:             # <<<<<<<<<<<<<<
 *                 nonspecific_E += E_HUGE * vol_fracs[i]
 *             else:
 */
      goto __pyx_L5;
    }

    /* "chromo/fields.pyx":2284
 *                 nonspecific_E += E_HUGE * vol_fracs[i]
 *             else:
 *                 nonspecific_E += self.chi * (access_vol / bead_V) *\             # <<<<<<<<<<<<<<
 *                                  vol_fracs[i] * (1 - vol_fracs[i])
 *         return nonspecific_E
 */
    /*else*/ {
      if (unlikely(__pyx_v_bead_V == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 2284, __pyx_L1_error)
      }

      /* "chromo/fields.pyx":2285
 *             else:
 *                 nonspecific_E += self.chi * (access_vol / bead_V) *\
 *                                  vol_fracs[i] * (1 - vol_fracs[i])             # <<<<<<<<<<<<<<
 *         return nonspecific_E
 * 
 */
      __pyx_t_10 = __pyx_v_i;
      __pyx_t_11 = -1;
      if (__pyx_t_10 < 0) {
        __pyx_t_10 += __pyx_v_vol_fracs.shape[0];
        if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 0;
      } else if (unlikely(__pyx_t_10 >= __pyx_v_vol_fracs.shape[0])) __pyx_t_11 = 0;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        __PYX_ERR(0, 2285, __pyx_L1_error)
      }

      /* "chromo/fields.pyx":2284
 *                 nonspecific_E += E_HUGE * vol_fracs[i]
 *             else:
 *                 nonspecific_E += self.chi * (access_vol / bead_V) *\             # <<<<<<<<<<<<<<
 *                                  vol_fracs[i] * (1 - vol_fracs[i])
 *         return nonspecific_E
 */
      __pyx_t_13 = __pyx_v_i;
      __pyx_t_11 = -1;
      if (__pyx_t_13 < 0) {
        __pyx_t_13 += __pyx_v_vol_fracs.shape[0];
        if (unlikely(__pyx_t_13 < 0)) __pyx_t_11 = 0;
      } else if (unlikely(__pyx_t_13 >= __pyx_v_vol_fracs.shape[0])) __pyx_t_11 = 0;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        __PYX_ERR(0, 2285, __pyx_L1_error)
      }

      /* "chromo/fields.pyx":2285
 *             else:
 *                 nonspecific_E += self.chi * (access_vol / bead_V) *\
 *                                  vol_fracs[i] * (1 - vol_fracs[i])             # <<<<<<<<<<<<<<
 *         return nonspecific_E
 * 
 */
      __pyx_v_nonspecific_E = (__pyx_v_nonspecific_E + (((__pyx_v_self->chi * (__pyx_v_access_vol / __pyx_v_bead_V)) * (*((double *) ( /* dim=0 */ (__pyx_v_vol_fracs.data + __pyx_t_10 * __pyx_v_vol_fracs.strides[0]) )))) * (1.0 - (*((double *) ( /* dim=0 */ (__pyx_v_vol_fracs.data + __pyx_t_13 * __pyx_v_vol_fracs.strides[0]) ))))));
    }
    __pyx_L5:;
  }

  /* "chromo/fields.pyx":2286
 *                 nonspecific_E += self.chi * (access_vol / bead_V) *\
 *                                  vol_fracs[i] * (1 - vol_fracs[i])
 *         return nonspecific_E             # <<<<<<<<<<<<<<
 * 
 *     cdef double[:] get_volume_fractions(self, double bead_V):
 */
  __pyx_r = __pyx_v_nonspecific_E;
  goto __pyx_L0;

  /* "chromo/fields.pyx":2255
 *         return E_binders_beads
 * 
 *     cpdef double nonspecific_interact_E(self, poly.PolymerBase poly):             # <<<<<<<<<<<<<<
 *         """Get nonspecific interaction energy for the full polymer.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_WriteUnraisable("chromo.fields.UniformDensityField.nonspecific_interact_E", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_vol_fracs, 1);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_27nonspecific_interact_E(PyObject *__pyx_v_self, PyObject *__pyx_v_poly); /*proto*/
static char __pyx_doc_6chromo_6fields_19UniformDensityField_26nonspecific_interact_E[] = "Get nonspecific interaction energy for the full polymer.\n\n        Notes\n        -----\n        This method assumes that all beads are of the same volume.\n\n        Parameters\n        ----------\n        poly : poly.PolymerBase\n            Polymer affected by the current MC move\n\n        Returns\n        -------\n        double\n            Absolute energy associated with the nonspecific interactions\n            between segments of the polymer chain\n        ";
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_27nonspecific_interact_E(PyObject *__pyx_v_self, PyObject *__pyx_v_poly) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("nonspecific_interact_E (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_poly), __pyx_ptype_6chromo_8polymers_PolymerBase, 1, "poly", 0))) __PYX_ERR(0, 2255, __pyx_L1_error)
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_26nonspecific_interact_E(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((struct __pyx_obj_6chromo_8polymers_PolymerBase *)__pyx_v_poly));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_26nonspecific_interact_E(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("nonspecific_interact_E", 0);
  __Pyx_TraceCall("nonspecific_interact_E (wrapper)", __pyx_f[0], 2255, 0, __PYX_ERR(0, 2255, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_6chromo_6fields_19UniformDensityField_nonspecific_interact_E(__pyx_v_self, __pyx_v_poly, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.nonspecific_interact_E", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":2288
 *         return nonspecific_E
 * 
 *     cdef double[:] get_volume_fractions(self, double bead_V):             # <<<<<<<<<<<<<<
 *         """Calculate all volume fractions of beads in bins.
 * 
 */

static __Pyx_memviewslice __pyx_f_6chromo_6fields_19UniformDensityField_get_volume_fractions(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, double __pyx_v_bead_V) {
  long __pyx_v_j;
  __Pyx_memviewslice __pyx_v_vol_fracs = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_r = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_memviewslice __pyx_t_5 = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_t_6;
  long __pyx_t_7;
  long __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_volume_fractions", 0);
  __Pyx_TraceCall("get_volume_fractions", __pyx_f[0], 2288, 0, __PYX_ERR(0, 2288, __pyx_L1_error));

  /* "chromo/fields.pyx":2312
 *         """
 *         cdef long j
 *         cdef double[:] vol_fracs = np.empty((self.n_bins,), dtype=float)             # <<<<<<<<<<<<<<
 *         for j in range(self.n_bins):
 *             vol_fracs[j] = self.density[j, 0] * bead_V
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->n_bins); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(0, 2312, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_4, PyBUF_WRITABLE); if (unlikely(!__pyx_t_5.memview)) __PYX_ERR(0, 2312, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_vol_fracs = __pyx_t_5;
  __pyx_t_5.memview = NULL;
  __pyx_t_5.data = NULL;

  /* "chromo/fields.pyx":2313
 *         cdef long j
 *         cdef double[:] vol_fracs = np.empty((self.n_bins,), dtype=float)
 *         for j in range(self.n_bins):             # <<<<<<<<<<<<<<
 *             vol_fracs[j] = self.density[j, 0] * bead_V
 *         return vol_fracs
 */
  __pyx_t_6 = __pyx_v_self->n_bins;
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_j = __pyx_t_8;

    /* "chromo/fields.pyx":2314
 *         cdef double[:] vol_fracs = np.empty((self.n_bins,), dtype=float)
 *         for j in range(self.n_bins):
 *             vol_fracs[j] = self.density[j, 0] * bead_V             # <<<<<<<<<<<<<<
 *         return vol_fracs
 * 
 */
    if (unlikely(!__pyx_v_self->density.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2314, __pyx_L1_error)}
    __pyx_t_9 = __pyx_v_j;
    __pyx_t_10 = 0;
    __pyx_t_11 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_self->density.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_self->density.shape[0])) __pyx_t_11 = 0;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_self->density.shape[1];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 1;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_self->density.shape[1])) __pyx_t_11 = 1;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 2314, __pyx_L1_error)
    }
    __pyx_t_12 = __pyx_v_j;
    __pyx_t_11 = -1;
    if (__pyx_t_12 < 0) {
      __pyx_t_12 += __pyx_v_vol_fracs.shape[0];
      if (unlikely(__pyx_t_12 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_12 >= __pyx_v_vol_fracs.shape[0])) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 2314, __pyx_L1_error)
    }
    *((double *) ( /* dim=0 */ (__pyx_v_vol_fracs.data + __pyx_t_12 * __pyx_v_vol_fracs.strides[0]) )) = ((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_self->density.data + __pyx_t_9 * __pyx_v_self->density.strides[0]) )) + __pyx_t_10)) ))) * __pyx_v_bead_V);
  }

  /* "chromo/fields.pyx":2315
 *         for j in range(self.n_bins):
 *             vol_fracs[j] = self.density[j, 0] * bead_V
 *         return vol_fracs             # <<<<<<<<<<<<<<
 * 
 *     cdef double[:, ::1] get_coordinates_at_inds(
 */
  __PYX_INC_MEMVIEW(&__pyx_v_vol_fracs, 0);
  __pyx_r = __pyx_v_vol_fracs;
  goto __pyx_L0;

  /* "chromo/fields.pyx":2288
 *         return nonspecific_E
 * 
 *     cdef double[:] get_volume_fractions(self, double bead_V):             # <<<<<<<<<<<<<<
 *         """Calculate all volume fractions of beads in bins.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __PYX_XDEC_MEMVIEW(&__pyx_t_5, 1);
  __pyx_r.data = NULL;
  __pyx_r.memview = NULL;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.get_volume_fractions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  if (unlikely(!__pyx_r.memview)) {
    PyErr_SetString(PyExc_TypeError, "Memoryview return value is not initialized");
  }
  __pyx_L2:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_vol_fracs, 1);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":2317
 *         return vol_fracs
 * 
 *     cdef double[:, ::1] get_coordinates_at_inds(             # <<<<<<<<<<<<<<
 *         self, double[:, ::1]& r, long[:]& inds, long n_inds
 *     ):
 */

static __Pyx_memviewslice __pyx_f_6chromo_6fields_19UniformDensityField_get_coordinates_at_inds(CYTHON_UNUSED struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, __Pyx_memviewslice &__pyx_v_r, __Pyx_memviewslice &__pyx_v_inds, long __pyx_v_n_inds) {
  long __pyx_v_i;
  long __pyx_v_j;
  __Pyx_memviewslice __pyx_v_r_new = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_r = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_memviewslice __pyx_t_5 = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_t_6;
  long __pyx_t_7;
  long __pyx_t_8;
  long __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_coordinates_at_inds", 0);
  __Pyx_TraceCall("get_coordinates_at_inds", __pyx_f[0], 2317, 0, __PYX_ERR(0, 2317, __pyx_L1_error));

  /* "chromo/fields.pyx":2343
 *         cdef long i, j
 *         cdef double[:, ::1] r_new
 *         r_new = np.empty((n_inds, 3), dtype=float)             # <<<<<<<<<<<<<<
 *         for i in range(n_inds):
 *             for j in range(3):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_n_inds); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_3);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(0, 2343, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_double(__pyx_t_4, PyBUF_WRITABLE); if (unlikely(!__pyx_t_5.memview)) __PYX_ERR(0, 2343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_r_new = __pyx_t_5;
  __pyx_t_5.memview = NULL;
  __pyx_t_5.data = NULL;

  /* "chromo/fields.pyx":2344
 *         cdef double[:, ::1] r_new
 *         r_new = np.empty((n_inds, 3), dtype=float)
 *         for i in range(n_inds):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 r_new[i, j] = r[inds[i], j]
 */
  __pyx_t_6 = __pyx_v_n_inds;
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "chromo/fields.pyx":2345
 *         r_new = np.empty((n_inds, 3), dtype=float)
 *         for i in range(n_inds):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 r_new[i, j] = r[inds[i], j]
 *         return r_new
 */
    for (__pyx_t_9 = 0; __pyx_t_9 < 3; __pyx_t_9+=1) {
      __pyx_v_j = __pyx_t_9;

      /* "chromo/fields.pyx":2346
 *         for i in range(n_inds):
 *             for j in range(3):
 *                 r_new[i, j] = r[inds[i], j]             # <<<<<<<<<<<<<<
 *         return r_new
 * 
 */
      __pyx_t_10 = __pyx_v_i;
      __pyx_t_11 = -1;
      if (__pyx_t_10 < 0) {
        __pyx_t_10 += __pyx_v_inds.shape[0];
        if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 0;
      } else if (unlikely(__pyx_t_10 >= __pyx_v_inds.shape[0])) __pyx_t_11 = 0;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        __PYX_ERR(0, 2346, __pyx_L1_error)
      }
      __pyx_t_12 = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_10 * __pyx_v_inds.strides[0]) )));
      __pyx_t_13 = __pyx_v_j;
      __pyx_t_11 = -1;
      if (__pyx_t_12 < 0) {
        __pyx_t_12 += __pyx_v_r.shape[0];
        if (unlikely(__pyx_t_12 < 0)) __pyx_t_11 = 0;
      } else if (unlikely(__pyx_t_12 >= __pyx_v_r.shape[0])) __pyx_t_11 = 0;
      if (__pyx_t_13 < 0) {
        __pyx_t_13 += __pyx_v_r.shape[1];
        if (unlikely(__pyx_t_13 < 0)) __pyx_t_11 = 1;
      } else if (unlikely(__pyx_t_13 >= __pyx_v_r.shape[1])) __pyx_t_11 = 1;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        __PYX_ERR(0, 2346, __pyx_L1_error)
      }
      __pyx_t_14 = __pyx_v_i;
      __pyx_t_15 = __pyx_v_j;
      __pyx_t_11 = -1;
      if (__pyx_t_14 < 0) {
        __pyx_t_14 += __pyx_v_r_new.shape[0];
        if (unlikely(__pyx_t_14 < 0)) __pyx_t_11 = 0;
      } else if (unlikely(__pyx_t_14 >= __pyx_v_r_new.shape[0])) __pyx_t_11 = 0;
      if (__pyx_t_15 < 0) {
        __pyx_t_15 += __pyx_v_r_new.shape[1];
        if (unlikely(__pyx_t_15 < 0)) __pyx_t_11 = 1;
      } else if (unlikely(__pyx_t_15 >= __pyx_v_r_new.shape[1])) __pyx_t_11 = 1;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        __PYX_ERR(0, 2346, __pyx_L1_error)
      }
      *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_r_new.data + __pyx_t_14 * __pyx_v_r_new.strides[0]) )) + __pyx_t_15)) )) = (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_r.data + __pyx_t_12 * __pyx_v_r.strides[0]) )) + __pyx_t_13)) )));
    }
  }

  /* "chromo/fields.pyx":2347
 *             for j in range(3):
 *                 r_new[i, j] = r[inds[i], j]
 *         return r_new             # <<<<<<<<<<<<<<
 * 
 *     cdef long[:, ::1] get_states_at_inds(
 */
  __PYX_INC_MEMVIEW(&__pyx_v_r_new, 0);
  __pyx_r = __pyx_v_r_new;
  goto __pyx_L0;

  /* "chromo/fields.pyx":2317
 *         return vol_fracs
 * 
 *     cdef double[:, ::1] get_coordinates_at_inds(             # <<<<<<<<<<<<<<
 *         self, double[:, ::1]& r, long[:]& inds, long n_inds
 *     ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __PYX_XDEC_MEMVIEW(&__pyx_t_5, 1);
  __pyx_r.data = NULL;
  __pyx_r.memview = NULL;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.get_coordinates_at_inds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  if (unlikely(!__pyx_r.memview)) {
    PyErr_SetString(PyExc_TypeError, "Memoryview return value is not initialized");
  }
  __pyx_L2:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_r_new, 1);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":2349
 *         return r_new
 * 
 *     cdef long[:, ::1] get_states_at_inds(             # <<<<<<<<<<<<<<
 *         self, poly.PolymerBase poly, long[:] inds, long n_inds
 *     ):
 */

static __Pyx_memviewslice __pyx_f_6chromo_6fields_19UniformDensityField_get_states_at_inds(CYTHON_UNUSED struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, struct __pyx_obj_6chromo_8polymers_PolymerBase *__pyx_v_poly, __Pyx_memviewslice __pyx_v_inds, long __pyx_v_n_inds) {
  long __pyx_v_i;
  long __pyx_v_j;
  __Pyx_memviewslice __pyx_v_states = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_r = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_memviewslice __pyx_t_5 = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_t_6;
  long __pyx_t_7;
  long __pyx_t_8;
  long __pyx_t_9;
  long __pyx_t_10;
  long __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_states_at_inds", 0);
  __Pyx_TraceCall("get_states_at_inds", __pyx_f[0], 2349, 0, __PYX_ERR(0, 2349, __pyx_L1_error));

  /* "chromo/fields.pyx":2372
 *         cdef long i, j
 *         cdef long[:, ::1] states
 *         states = np.empty((n_inds, poly.num_binders), dtype=int)             # <<<<<<<<<<<<<<
 *         for i in range(n_inds):
 *             for j in range(poly.num_binders):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_n_inds); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_poly->num_binders); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 2372, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_long(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_5.memview)) __PYX_ERR(0, 2372, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_states = __pyx_t_5;
  __pyx_t_5.memview = NULL;
  __pyx_t_5.data = NULL;

  /* "chromo/fields.pyx":2373
 *         cdef long[:, ::1] states
 *         states = np.empty((n_inds, poly.num_binders), dtype=int)
 *         for i in range(n_inds):             # <<<<<<<<<<<<<<
 *             for j in range(poly.num_binders):
 *                 states[i, j] = poly.states[inds[i], j]
 */
  __pyx_t_6 = __pyx_v_n_inds;
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "chromo/fields.pyx":2374
 *         states = np.empty((n_inds, poly.num_binders), dtype=int)
 *         for i in range(n_inds):
 *             for j in range(poly.num_binders):             # <<<<<<<<<<<<<<
 *                 states[i, j] = poly.states[inds[i], j]
 *         return states
 */
    __pyx_t_9 = __pyx_v_poly->num_binders;
    __pyx_t_10 = __pyx_t_9;
    for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
      __pyx_v_j = __pyx_t_11;

      /* "chromo/fields.pyx":2375
 *         for i in range(n_inds):
 *             for j in range(poly.num_binders):
 *                 states[i, j] = poly.states[inds[i], j]             # <<<<<<<<<<<<<<
 *         return states
 * 
 */
      if (unlikely(!__pyx_v_poly->states.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2375, __pyx_L1_error)}
      __pyx_t_12 = __pyx_v_i;
      __pyx_t_13 = -1;
      if (__pyx_t_12 < 0) {
        __pyx_t_12 += __pyx_v_inds.shape[0];
        if (unlikely(__pyx_t_12 < 0)) __pyx_t_13 = 0;
      } else if (unlikely(__pyx_t_12 >= __pyx_v_inds.shape[0])) __pyx_t_13 = 0;
      if (unlikely(__pyx_t_13 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_13);
        __PYX_ERR(0, 2375, __pyx_L1_error)
      }
      __pyx_t_14 = (*((long *) ( /* dim=0 */ (__pyx_v_inds.data + __pyx_t_12 * __pyx_v_inds.strides[0]) )));
      __pyx_t_15 = __pyx_v_j;
      __pyx_t_13 = -1;
      if (__pyx_t_14 < 0) {
        __pyx_t_14 += __pyx_v_poly->states.shape[0];
        if (unlikely(__pyx_t_14 < 0)) __pyx_t_13 = 0;
      } else if (unlikely(__pyx_t_14 >= __pyx_v_poly->states.shape[0])) __pyx_t_13 = 0;
      if (__pyx_t_15 < 0) {
        __pyx_t_15 += __pyx_v_poly->states.shape[1];
        if (unlikely(__pyx_t_15 < 0)) __pyx_t_13 = 1;
      } else if (unlikely(__pyx_t_15 >= __pyx_v_poly->states.shape[1])) __pyx_t_13 = 1;
      if (unlikely(__pyx_t_13 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_13);
        __PYX_ERR(0, 2375, __pyx_L1_error)
      }
      __pyx_t_16 = __pyx_v_i;
      __pyx_t_17 = __pyx_v_j;
      __pyx_t_13 = -1;
      if (__pyx_t_16 < 0) {
        __pyx_t_16 += __pyx_v_states.shape[0];
        if (unlikely(__pyx_t_16 < 0)) __pyx_t_13 = 0;
      } else if (unlikely(__pyx_t_16 >= __pyx_v_states.shape[0])) __pyx_t_13 = 0;
      if (__pyx_t_17 < 0) {
        __pyx_t_17 += __pyx_v_states.shape[1];
        if (unlikely(__pyx_t_17 < 0)) __pyx_t_13 = 1;
      } else if (unlikely(__pyx_t_17 >= __pyx_v_states.shape[1])) __pyx_t_13 = 1;
      if (unlikely(__pyx_t_13 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_13);
        __PYX_ERR(0, 2375, __pyx_L1_error)
      }
      *((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_states.data + __pyx_t_16 * __pyx_v_states.strides[0]) )) + __pyx_t_17)) )) = (*((long *) ( /* dim=1 */ ((char *) (((long *) ( /* dim=0 */ (__pyx_v_poly->states.data + __pyx_t_14 * __pyx_v_poly->states.strides[0]) )) + __pyx_t_15)) )));
    }
  }

  /* "chromo/fields.pyx":2376
 *             for j in range(poly.num_binders):
 *                 states[i, j] = poly.states[inds[i], j]
 *         return states             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __PYX_INC_MEMVIEW(&__pyx_v_states, 0);
  __pyx_r = __pyx_v_states;
  goto __pyx_L0;

  /* "chromo/fields.pyx":2349
 *         return r_new
 * 
 *     cdef long[:, ::1] get_states_at_inds(             # <<<<<<<<<<<<<<
 *         self, poly.PolymerBase poly, long[:] inds, long n_inds
 *     ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __PYX_XDEC_MEMVIEW(&__pyx_t_5, 1);
  __pyx_r.data = NULL;
  __pyx_r.memview = NULL;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.get_states_at_inds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  if (unlikely(!__pyx_r.memview)) {
    PyErr_SetString(PyExc_TypeError, "Memoryview return value is not initialized");
  }
  __pyx_L2:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_states, 1);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":37
 * 
 * cdef class UniformDensityField(FieldBase):
 *     cdef public _field_descriptors             # <<<<<<<<<<<<<<
 *     cdef public double x_width, y_width, z_width
 *     cdef public double[:] width_xyz
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_18_field_descriptors_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_18_field_descriptors_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_18_field_descriptors___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_18_field_descriptors___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 37, 0, __PYX_ERR(1, 37, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_field_descriptors);
  __pyx_r = __pyx_v_self->_field_descriptors;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField._field_descriptors.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_18_field_descriptors_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_18_field_descriptors_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_18_field_descriptors_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_18_field_descriptors_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 37, 0, __PYX_ERR(1, 37, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_field_descriptors);
  __Pyx_DECREF(__pyx_v_self->_field_descriptors);
  __pyx_v_self->_field_descriptors = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField._field_descriptors.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_18_field_descriptors_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_18_field_descriptors_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_18_field_descriptors_4__del__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_18_field_descriptors_4__del__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 37, 0, __PYX_ERR(1, 37, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_field_descriptors);
  __Pyx_DECREF(__pyx_v_self->_field_descriptors);
  __pyx_v_self->_field_descriptors = Py_None;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField._field_descriptors.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":38
 * cdef class UniformDensityField(FieldBase):
 *     cdef public _field_descriptors
 *     cdef public double x_width, y_width, z_width             # <<<<<<<<<<<<<<
 *     cdef public double[:] width_xyz
 *     cdef public long nx, ny, nz, n_sub_bins_x, n_sub_bins_y, n_sub_bins_z
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_7x_width_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_7x_width_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_7x_width___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_7x_width___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 38, 0, __PYX_ERR(1, 38, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.x_width.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_7x_width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_7x_width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_7x_width_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_7x_width_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 38, 0, __PYX_ERR(1, 38, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 38, __pyx_L1_error)
  __pyx_v_self->x_width = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.x_width.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_7y_width_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_7y_width_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_7y_width___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_7y_width___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 38, 0, __PYX_ERR(1, 38, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->y_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.y_width.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_7y_width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_7y_width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_7y_width_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_7y_width_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 38, 0, __PYX_ERR(1, 38, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 38, __pyx_L1_error)
  __pyx_v_self->y_width = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.y_width.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_7z_width_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_7z_width_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_7z_width___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_7z_width___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 38, 0, __PYX_ERR(1, 38, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->z_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.z_width.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_7z_width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_7z_width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_7z_width_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_7z_width_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 38, 0, __PYX_ERR(1, 38, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 38, __pyx_L1_error)
  __pyx_v_self->z_width = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.z_width.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":39
 *     cdef public _field_descriptors
 *     cdef public double x_width, y_width, z_width
 *     cdef public double[:] width_xyz             # <<<<<<<<<<<<<<
 *     cdef public long nx, ny, nz, n_sub_bins_x, n_sub_bins_y, n_sub_bins_z
 *     cdef public double dx, dy, dz
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_9width_xyz_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_9width_xyz_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_9width_xyz___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_9width_xyz___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 39, 0, __PYX_ERR(1, 39, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->width_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 39, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->width_xyz, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.width_xyz.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_9width_xyz_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_9width_xyz_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_9width_xyz_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_9width_xyz_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 39, 0, __PYX_ERR(1, 39, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_v_value, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(1, 39, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->width_xyz, 0);
  __pyx_v_self->width_xyz = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.width_xyz.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":40
 *     cdef public double x_width, y_width, z_width
 *     cdef public double[:] width_xyz
 *     cdef public long nx, ny, nz, n_sub_bins_x, n_sub_bins_y, n_sub_bins_z             # <<<<<<<<<<<<<<
 *     cdef public double dx, dy, dz
 *     cdef public double[:] dxyz
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_2nx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_2nx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_2nx___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_2nx___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 40, 0, __PYX_ERR(1, 40, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->nx); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.nx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_2nx_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_2nx_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_2nx_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_2nx_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 40, 0, __PYX_ERR(1, 40, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 40, __pyx_L1_error)
  __pyx_v_self->nx = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.nx.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_2ny_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_2ny_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_2ny___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_2ny___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 40, 0, __PYX_ERR(1, 40, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->ny); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.ny.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_2ny_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_2ny_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_2ny_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_2ny_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 40, 0, __PYX_ERR(1, 40, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 40, __pyx_L1_error)
  __pyx_v_self->ny = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.ny.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_2nz_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_2nz_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_2nz___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_2nz___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 40, 0, __PYX_ERR(1, 40, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->nz); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.nz.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_2nz_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_2nz_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_2nz_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_2nz_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 40, 0, __PYX_ERR(1, 40, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 40, __pyx_L1_error)
  __pyx_v_self->nz = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.nz.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_12n_sub_bins_x_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_12n_sub_bins_x_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_12n_sub_bins_x___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_12n_sub_bins_x___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 40, 0, __PYX_ERR(1, 40, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->n_sub_bins_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.n_sub_bins_x.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_12n_sub_bins_x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_12n_sub_bins_x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_12n_sub_bins_x_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_12n_sub_bins_x_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 40, 0, __PYX_ERR(1, 40, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 40, __pyx_L1_error)
  __pyx_v_self->n_sub_bins_x = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.n_sub_bins_x.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_12n_sub_bins_y_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_12n_sub_bins_y_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_12n_sub_bins_y___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_12n_sub_bins_y___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 40, 0, __PYX_ERR(1, 40, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->n_sub_bins_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.n_sub_bins_y.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_12n_sub_bins_y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_12n_sub_bins_y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_12n_sub_bins_y_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_12n_sub_bins_y_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 40, 0, __PYX_ERR(1, 40, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 40, __pyx_L1_error)
  __pyx_v_self->n_sub_bins_y = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.n_sub_bins_y.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_12n_sub_bins_z_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_12n_sub_bins_z_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_12n_sub_bins_z___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_12n_sub_bins_z___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 40, 0, __PYX_ERR(1, 40, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->n_sub_bins_z); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.n_sub_bins_z.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_12n_sub_bins_z_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_12n_sub_bins_z_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_12n_sub_bins_z_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_12n_sub_bins_z_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 40, 0, __PYX_ERR(1, 40, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 40, __pyx_L1_error)
  __pyx_v_self->n_sub_bins_z = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.n_sub_bins_z.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":41
 *     cdef public double[:] width_xyz
 *     cdef public long nx, ny, nz, n_sub_bins_x, n_sub_bins_y, n_sub_bins_z
 *     cdef public double dx, dy, dz             # <<<<<<<<<<<<<<
 *     cdef public double[:] dxyz
 *     cdef public long n_bins, n_points
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_2dx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_2dx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_2dx___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_2dx___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 41, 0, __PYX_ERR(1, 41, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->dx); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.dx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_2dx_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_2dx_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_2dx_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_2dx_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 41, 0, __PYX_ERR(1, 41, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 41, __pyx_L1_error)
  __pyx_v_self->dx = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.dx.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_2dy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_2dy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_2dy___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_2dy___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 41, 0, __PYX_ERR(1, 41, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->dy); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.dy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_2dy_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_2dy_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_2dy_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_2dy_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 41, 0, __PYX_ERR(1, 41, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 41, __pyx_L1_error)
  __pyx_v_self->dy = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.dy.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_2dz_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_2dz_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_2dz___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_2dz___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 41, 0, __PYX_ERR(1, 41, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->dz); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.dz.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_2dz_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_2dz_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_2dz_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_2dz_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 41, 0, __PYX_ERR(1, 41, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 41, __pyx_L1_error)
  __pyx_v_self->dz = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.dz.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":42
 *     cdef public long nx, ny, nz, n_sub_bins_x, n_sub_bins_y, n_sub_bins_z
 *     cdef public double dx, dy, dz
 *     cdef public double[:] dxyz             # <<<<<<<<<<<<<<
 *     cdef public long n_bins, n_points
 *     cdef public double vol_bin
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_4dxyz_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_4dxyz_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_4dxyz___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_4dxyz___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 42, 0, __PYX_ERR(1, 42, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->dxyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 42, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->dxyz, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.dxyz.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_4dxyz_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_4dxyz_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_4dxyz_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_4dxyz_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 42, 0, __PYX_ERR(1, 42, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_v_value, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(1, 42, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->dxyz, 0);
  __pyx_v_self->dxyz = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.dxyz.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":43
 *     cdef public double dx, dy, dz
 *     cdef public double[:] dxyz
 *     cdef public long n_bins, n_points             # <<<<<<<<<<<<<<
 *     cdef public double vol_bin
 *     cdef public long[:, ::1] bin_index
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_6n_bins_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_6n_bins_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_6n_bins___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_6n_bins___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 43, 0, __PYX_ERR(1, 43, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->n_bins); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.n_bins.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_6n_bins_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_6n_bins_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_6n_bins_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_6n_bins_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 43, 0, __PYX_ERR(1, 43, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 43, __pyx_L1_error)
  __pyx_v_self->n_bins = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.n_bins.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_8n_points_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_8n_points_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_8n_points___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_8n_points___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 43, 0, __PYX_ERR(1, 43, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->n_points); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.n_points.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_8n_points_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_8n_points_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_8n_points_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_8n_points_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 43, 0, __PYX_ERR(1, 43, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 43, __pyx_L1_error)
  __pyx_v_self->n_points = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.n_points.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":44
 *     cdef public double[:] dxyz
 *     cdef public long n_bins, n_points
 *     cdef public double vol_bin             # <<<<<<<<<<<<<<
 *     cdef public long[:, ::1] bin_index
 *     cdef public long[:, ::1] nbr_inds_with_trial
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_7vol_bin_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_7vol_bin_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_7vol_bin___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_7vol_bin___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 44, 0, __PYX_ERR(1, 44, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->vol_bin); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.vol_bin.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_7vol_bin_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_7vol_bin_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_7vol_bin_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_7vol_bin_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 44, 0, __PYX_ERR(1, 44, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 44, __pyx_L1_error)
  __pyx_v_self->vol_bin = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.vol_bin.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":45
 *     cdef public long n_bins, n_points
 *     cdef public double vol_bin
 *     cdef public long[:, ::1] bin_index             # <<<<<<<<<<<<<<
 *     cdef public long[:, ::1] nbr_inds_with_trial
 *     cdef public long[:] nbr_inds, index_xyz
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_9bin_index_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_9bin_index_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_9bin_index___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_9bin_index___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 45, 0, __PYX_ERR(1, 45, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->bin_index.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 45, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->bin_index, 2, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.bin_index.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_9bin_index_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_9bin_index_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_9bin_index_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_9bin_index_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 45, 0, __PYX_ERR(1, 45, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_long(__pyx_v_value, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(1, 45, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->bin_index, 0);
  __pyx_v_self->bin_index = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.bin_index.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":46
 *     cdef public double vol_bin
 *     cdef public long[:, ::1] bin_index
 *     cdef public long[:, ::1] nbr_inds_with_trial             # <<<<<<<<<<<<<<
 *     cdef public long[:] nbr_inds, index_xyz
 *     cdef public double[:] wt_vec, xyz, weight_xyz
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_19nbr_inds_with_trial_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_19nbr_inds_with_trial_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_19nbr_inds_with_trial___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_19nbr_inds_with_trial___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 46, 0, __PYX_ERR(1, 46, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->nbr_inds_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 46, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->nbr_inds_with_trial, 2, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.nbr_inds_with_trial.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_19nbr_inds_with_trial_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_19nbr_inds_with_trial_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_19nbr_inds_with_trial_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_19nbr_inds_with_trial_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 46, 0, __PYX_ERR(1, 46, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_long(__pyx_v_value, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(1, 46, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->nbr_inds_with_trial, 0);
  __pyx_v_self->nbr_inds_with_trial = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.nbr_inds_with_trial.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":47
 *     cdef public long[:, ::1] bin_index
 *     cdef public long[:, ::1] nbr_inds_with_trial
 *     cdef public long[:] nbr_inds, index_xyz             # <<<<<<<<<<<<<<
 *     cdef public double[:] wt_vec, xyz, weight_xyz
 *     cdef public double[:, ::1] wt_vec_with_trial, xyz_with_trial
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_8nbr_inds_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_8nbr_inds_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_8nbr_inds___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_8nbr_inds___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 47, 0, __PYX_ERR(1, 47, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->nbr_inds.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 47, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->nbr_inds, 1, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.nbr_inds.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_8nbr_inds_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_8nbr_inds_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_8nbr_inds_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_8nbr_inds_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 47, 0, __PYX_ERR(1, 47, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_v_value, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(1, 47, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->nbr_inds, 0);
  __pyx_v_self->nbr_inds = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.nbr_inds.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_9index_xyz_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_9index_xyz_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_9index_xyz___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_9index_xyz___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 47, 0, __PYX_ERR(1, 47, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 47, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->index_xyz, 1, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.index_xyz.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_9index_xyz_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_9index_xyz_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_9index_xyz_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_9index_xyz_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 47, 0, __PYX_ERR(1, 47, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_v_value, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(1, 47, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->index_xyz, 0);
  __pyx_v_self->index_xyz = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.index_xyz.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":48
 *     cdef public long[:, ::1] nbr_inds_with_trial
 *     cdef public long[:] nbr_inds, index_xyz
 *     cdef public double[:] wt_vec, xyz, weight_xyz             # <<<<<<<<<<<<<<
 *     cdef public double[:, ::1] wt_vec_with_trial, xyz_with_trial
 *     cdef public double[:, ::1] weight_xyz_with_trial
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_6wt_vec_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_6wt_vec_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_6wt_vec___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_6wt_vec___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 48, 0, __PYX_ERR(1, 48, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->wt_vec.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 48, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->wt_vec, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.wt_vec.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_6wt_vec_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_6wt_vec_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_6wt_vec_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_6wt_vec_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 48, 0, __PYX_ERR(1, 48, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_v_value, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(1, 48, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->wt_vec, 0);
  __pyx_v_self->wt_vec = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.wt_vec.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_3xyz_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_3xyz_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_3xyz___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_3xyz___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 48, 0, __PYX_ERR(1, 48, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 48, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->xyz, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.xyz.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_3xyz_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_3xyz_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_3xyz_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_3xyz_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 48, 0, __PYX_ERR(1, 48, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_v_value, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(1, 48, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->xyz, 0);
  __pyx_v_self->xyz = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.xyz.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_10weight_xyz_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_10weight_xyz_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_10weight_xyz___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_10weight_xyz___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 48, 0, __PYX_ERR(1, 48, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 48, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->weight_xyz, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.weight_xyz.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_10weight_xyz_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_10weight_xyz_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_10weight_xyz_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_10weight_xyz_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 48, 0, __PYX_ERR(1, 48, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_v_value, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(1, 48, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->weight_xyz, 0);
  __pyx_v_self->weight_xyz = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.weight_xyz.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":49
 *     cdef public long[:] nbr_inds, index_xyz
 *     cdef public double[:] wt_vec, xyz, weight_xyz
 *     cdef public double[:, ::1] wt_vec_with_trial, xyz_with_trial             # <<<<<<<<<<<<<<
 *     cdef public double[:, ::1] weight_xyz_with_trial
 *     cdef public long[:, ::1] index_xyz_with_trial
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_17wt_vec_with_trial_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_17wt_vec_with_trial_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_17wt_vec_with_trial___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_17wt_vec_with_trial___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 49, 0, __PYX_ERR(1, 49, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->wt_vec_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 49, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->wt_vec_with_trial, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.wt_vec_with_trial.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_17wt_vec_with_trial_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_17wt_vec_with_trial_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_17wt_vec_with_trial_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_17wt_vec_with_trial_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 49, 0, __PYX_ERR(1, 49, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_double(__pyx_v_value, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(1, 49, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->wt_vec_with_trial, 0);
  __pyx_v_self->wt_vec_with_trial = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.wt_vec_with_trial.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_14xyz_with_trial_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_14xyz_with_trial_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_14xyz_with_trial___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_14xyz_with_trial___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 49, 0, __PYX_ERR(1, 49, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 49, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->xyz_with_trial, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.xyz_with_trial.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_14xyz_with_trial_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_14xyz_with_trial_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_14xyz_with_trial_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_14xyz_with_trial_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 49, 0, __PYX_ERR(1, 49, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_double(__pyx_v_value, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(1, 49, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->xyz_with_trial, 0);
  __pyx_v_self->xyz_with_trial = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.xyz_with_trial.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":50
 *     cdef public double[:] wt_vec, xyz, weight_xyz
 *     cdef public double[:, ::1] wt_vec_with_trial, xyz_with_trial
 *     cdef public double[:, ::1] weight_xyz_with_trial             # <<<<<<<<<<<<<<
 *     cdef public long[:, ::1] index_xyz_with_trial
 *     cdef public long num_binders
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_21weight_xyz_with_trial_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_21weight_xyz_with_trial_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_21weight_xyz_with_trial___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_21weight_xyz_with_trial___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 50, 0, __PYX_ERR(1, 50, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 50, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->weight_xyz_with_trial, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.weight_xyz_with_trial.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_21weight_xyz_with_trial_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_21weight_xyz_with_trial_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_21weight_xyz_with_trial_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_21weight_xyz_with_trial_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 50, 0, __PYX_ERR(1, 50, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_double(__pyx_v_value, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(1, 50, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->weight_xyz_with_trial, 0);
  __pyx_v_self->weight_xyz_with_trial = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.weight_xyz_with_trial.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":51
 *     cdef public double[:, ::1] wt_vec_with_trial, xyz_with_trial
 *     cdef public double[:, ::1] weight_xyz_with_trial
 *     cdef public long[:, ::1] index_xyz_with_trial             # <<<<<<<<<<<<<<
 *     cdef public long num_binders
 *     cdef public long[:] doubly_bound, doubly_bound_trial
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_20index_xyz_with_trial_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_20index_xyz_with_trial_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_20index_xyz_with_trial___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_20index_xyz_with_trial___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 51, 0, __PYX_ERR(1, 51, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 51, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->index_xyz_with_trial, 2, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.index_xyz_with_trial.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_20index_xyz_with_trial_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_20index_xyz_with_trial_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_20index_xyz_with_trial_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_20index_xyz_with_trial_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 51, 0, __PYX_ERR(1, 51, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_long(__pyx_v_value, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(1, 51, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->index_xyz_with_trial, 0);
  __pyx_v_self->index_xyz_with_trial = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.index_xyz_with_trial.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":52
 *     cdef public double[:, ::1] weight_xyz_with_trial
 *     cdef public long[:, ::1] index_xyz_with_trial
 *     cdef public long num_binders             # <<<<<<<<<<<<<<
 *     cdef public long[:] doubly_bound, doubly_bound_trial
 *     cdef public double[:, ::1] density, density_trial
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_11num_binders_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_11num_binders_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_11num_binders___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_11num_binders___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 52, 0, __PYX_ERR(1, 52, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->num_binders); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.num_binders.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_11num_binders_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_11num_binders_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_11num_binders_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_11num_binders_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 52, 0, __PYX_ERR(1, 52, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_long(__pyx_v_value); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 52, __pyx_L1_error)
  __pyx_v_self->num_binders = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.num_binders.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":53
 *     cdef public long[:, ::1] index_xyz_with_trial
 *     cdef public long num_binders
 *     cdef public long[:] doubly_bound, doubly_bound_trial             # <<<<<<<<<<<<<<
 *     cdef public double[:, ::1] density, density_trial
 *     cdef public dict access_vols
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_12doubly_bound_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_12doubly_bound_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_12doubly_bound___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_12doubly_bound___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 53, 0, __PYX_ERR(1, 53, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->doubly_bound.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 53, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->doubly_bound, 1, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.doubly_bound.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_12doubly_bound_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_12doubly_bound_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_12doubly_bound_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_12doubly_bound_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 53, 0, __PYX_ERR(1, 53, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_v_value, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(1, 53, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->doubly_bound, 0);
  __pyx_v_self->doubly_bound = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.doubly_bound.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_18doubly_bound_trial_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_18doubly_bound_trial_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_18doubly_bound_trial___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_18doubly_bound_trial___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 53, 0, __PYX_ERR(1, 53, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->doubly_bound_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 53, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->doubly_bound_trial, 1, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.doubly_bound_trial.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_18doubly_bound_trial_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_18doubly_bound_trial_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_18doubly_bound_trial_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_18doubly_bound_trial_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 53, 0, __PYX_ERR(1, 53, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_v_value, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(1, 53, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->doubly_bound_trial, 0);
  __pyx_v_self->doubly_bound_trial = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.doubly_bound_trial.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":54
 *     cdef public long num_binders
 *     cdef public long[:] doubly_bound, doubly_bound_trial
 *     cdef public double[:, ::1] density, density_trial             # <<<<<<<<<<<<<<
 *     cdef public dict access_vols
 *     cdef public double chi, sub_bin_width_x, sub_bin_width_y, sub_bin_width_z
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_7density_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_7density_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_7density___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_7density___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 54, 0, __PYX_ERR(1, 54, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->density.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 54, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->density, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.density.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_7density_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_7density_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_7density_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_7density_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 54, 0, __PYX_ERR(1, 54, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_double(__pyx_v_value, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(1, 54, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->density, 0);
  __pyx_v_self->density = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.density.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_13density_trial_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_13density_trial_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_13density_trial___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_13density_trial___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 54, 0, __PYX_ERR(1, 54, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->density_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 54, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->density_trial, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.density_trial.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_13density_trial_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_13density_trial_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_13density_trial_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_13density_trial_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 54, 0, __PYX_ERR(1, 54, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_double(__pyx_v_value, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(1, 54, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->density_trial, 0);
  __pyx_v_self->density_trial = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.density_trial.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":55
 *     cdef public long[:] doubly_bound, doubly_bound_trial
 *     cdef public double[:, ::1] density, density_trial
 *     cdef public dict access_vols             # <<<<<<<<<<<<<<
 *     cdef public double chi, sub_bin_width_x, sub_bin_width_y, sub_bin_width_z
 *     cdef public dict sub_bins_to_weights_x, sub_bins_to_weights_y
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_11access_vols_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_11access_vols_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_11access_vols___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_11access_vols___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 55, 0, __PYX_ERR(1, 55, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->access_vols);
  __pyx_r = __pyx_v_self->access_vols;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.access_vols.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_11access_vols_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_11access_vols_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_11access_vols_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_11access_vols_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 55, 0, __PYX_ERR(1, 55, __pyx_L1_error));
  if (!(likely(PyDict_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 55, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->access_vols);
  __Pyx_DECREF(__pyx_v_self->access_vols);
  __pyx_v_self->access_vols = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.access_vols.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_11access_vols_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_11access_vols_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_11access_vols_4__del__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_11access_vols_4__del__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 55, 0, __PYX_ERR(1, 55, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->access_vols);
  __Pyx_DECREF(__pyx_v_self->access_vols);
  __pyx_v_self->access_vols = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.access_vols.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":56
 *     cdef public double[:, ::1] density, density_trial
 *     cdef public dict access_vols
 *     cdef public double chi, sub_bin_width_x, sub_bin_width_y, sub_bin_width_z             # <<<<<<<<<<<<<<
 *     cdef public dict sub_bins_to_weights_x, sub_bins_to_weights_y
 *     cdef public dict sub_bins_to_weights_z, sub_bins_to_bins_x
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_3chi_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_3chi_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_3chi___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_3chi___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 56, 0, __PYX_ERR(1, 56, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->chi); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.chi.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_3chi_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_3chi_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_3chi_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_3chi_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 56, 0, __PYX_ERR(1, 56, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 56, __pyx_L1_error)
  __pyx_v_self->chi = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.chi.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_15sub_bin_width_x_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_15sub_bin_width_x_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_15sub_bin_width_x___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_15sub_bin_width_x___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 56, 0, __PYX_ERR(1, 56, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->sub_bin_width_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.sub_bin_width_x.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_15sub_bin_width_x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_15sub_bin_width_x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_15sub_bin_width_x_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_15sub_bin_width_x_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 56, 0, __PYX_ERR(1, 56, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 56, __pyx_L1_error)
  __pyx_v_self->sub_bin_width_x = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.sub_bin_width_x.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_15sub_bin_width_y_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_15sub_bin_width_y_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_15sub_bin_width_y___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_15sub_bin_width_y___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 56, 0, __PYX_ERR(1, 56, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->sub_bin_width_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.sub_bin_width_y.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_15sub_bin_width_y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_15sub_bin_width_y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_15sub_bin_width_y_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_15sub_bin_width_y_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 56, 0, __PYX_ERR(1, 56, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 56, __pyx_L1_error)
  __pyx_v_self->sub_bin_width_y = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.sub_bin_width_y.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_15sub_bin_width_z_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_15sub_bin_width_z_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_15sub_bin_width_z___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_15sub_bin_width_z___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 56, 0, __PYX_ERR(1, 56, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->sub_bin_width_z); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.sub_bin_width_z.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_15sub_bin_width_z_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_15sub_bin_width_z_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_15sub_bin_width_z_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_15sub_bin_width_z_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 56, 0, __PYX_ERR(1, 56, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 56, __pyx_L1_error)
  __pyx_v_self->sub_bin_width_z = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.sub_bin_width_z.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":57
 *     cdef public dict access_vols
 *     cdef public double chi, sub_bin_width_x, sub_bin_width_y, sub_bin_width_z
 *     cdef public dict sub_bins_to_weights_x, sub_bins_to_weights_y             # <<<<<<<<<<<<<<
 *     cdef public dict sub_bins_to_weights_z, sub_bins_to_bins_x
 *     cdef public dict sub_bins_to_bins_y, sub_bins_to_bins_z
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_x_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_x_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_x___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_x___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 57, 0, __PYX_ERR(1, 57, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->sub_bins_to_weights_x);
  __pyx_r = __pyx_v_self->sub_bins_to_weights_x;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.sub_bins_to_weights_x.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_x_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_x_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 57, 0, __PYX_ERR(1, 57, __pyx_L1_error));
  if (!(likely(PyDict_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 57, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->sub_bins_to_weights_x);
  __Pyx_DECREF(__pyx_v_self->sub_bins_to_weights_x);
  __pyx_v_self->sub_bins_to_weights_x = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.sub_bins_to_weights_x.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_x_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_x_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_x_4__del__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_x_4__del__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 57, 0, __PYX_ERR(1, 57, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->sub_bins_to_weights_x);
  __Pyx_DECREF(__pyx_v_self->sub_bins_to_weights_x);
  __pyx_v_self->sub_bins_to_weights_x = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.sub_bins_to_weights_x.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_y_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_y_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_y___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_y___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 57, 0, __PYX_ERR(1, 57, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->sub_bins_to_weights_y);
  __pyx_r = __pyx_v_self->sub_bins_to_weights_y;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.sub_bins_to_weights_y.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_y_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_y_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 57, 0, __PYX_ERR(1, 57, __pyx_L1_error));
  if (!(likely(PyDict_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 57, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->sub_bins_to_weights_y);
  __Pyx_DECREF(__pyx_v_self->sub_bins_to_weights_y);
  __pyx_v_self->sub_bins_to_weights_y = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.sub_bins_to_weights_y.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_y_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_y_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_y_4__del__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_y_4__del__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 57, 0, __PYX_ERR(1, 57, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->sub_bins_to_weights_y);
  __Pyx_DECREF(__pyx_v_self->sub_bins_to_weights_y);
  __pyx_v_self->sub_bins_to_weights_y = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.sub_bins_to_weights_y.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":58
 *     cdef public double chi, sub_bin_width_x, sub_bin_width_y, sub_bin_width_z
 *     cdef public dict sub_bins_to_weights_x, sub_bins_to_weights_y
 *     cdef public dict sub_bins_to_weights_z, sub_bins_to_bins_x             # <<<<<<<<<<<<<<
 *     cdef public dict sub_bins_to_bins_y, sub_bins_to_bins_z
 *     cdef public dict dict_
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_z_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_z_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_z___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_z___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 58, 0, __PYX_ERR(1, 58, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->sub_bins_to_weights_z);
  __pyx_r = __pyx_v_self->sub_bins_to_weights_z;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.sub_bins_to_weights_z.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_z_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_z_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_z_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_z_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 58, 0, __PYX_ERR(1, 58, __pyx_L1_error));
  if (!(likely(PyDict_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 58, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->sub_bins_to_weights_z);
  __Pyx_DECREF(__pyx_v_self->sub_bins_to_weights_z);
  __pyx_v_self->sub_bins_to_weights_z = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.sub_bins_to_weights_z.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_z_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_z_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_z_4__del__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_z_4__del__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 58, 0, __PYX_ERR(1, 58, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->sub_bins_to_weights_z);
  __Pyx_DECREF(__pyx_v_self->sub_bins_to_weights_z);
  __pyx_v_self->sub_bins_to_weights_z = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.sub_bins_to_weights_z.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_x_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_x_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_x___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_x___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 58, 0, __PYX_ERR(1, 58, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->sub_bins_to_bins_x);
  __pyx_r = __pyx_v_self->sub_bins_to_bins_x;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.sub_bins_to_bins_x.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_x_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_x_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 58, 0, __PYX_ERR(1, 58, __pyx_L1_error));
  if (!(likely(PyDict_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 58, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->sub_bins_to_bins_x);
  __Pyx_DECREF(__pyx_v_self->sub_bins_to_bins_x);
  __pyx_v_self->sub_bins_to_bins_x = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.sub_bins_to_bins_x.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_x_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_x_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_x_4__del__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_x_4__del__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 58, 0, __PYX_ERR(1, 58, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->sub_bins_to_bins_x);
  __Pyx_DECREF(__pyx_v_self->sub_bins_to_bins_x);
  __pyx_v_self->sub_bins_to_bins_x = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.sub_bins_to_bins_x.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":59
 *     cdef public dict sub_bins_to_weights_x, sub_bins_to_weights_y
 *     cdef public dict sub_bins_to_weights_z, sub_bins_to_bins_x
 *     cdef public dict sub_bins_to_bins_y, sub_bins_to_bins_z             # <<<<<<<<<<<<<<
 *     cdef public dict dict_
 *     cdef public float vf_limit
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_y_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_y_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_y___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_y___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 59, 0, __PYX_ERR(1, 59, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->sub_bins_to_bins_y);
  __pyx_r = __pyx_v_self->sub_bins_to_bins_y;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.sub_bins_to_bins_y.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_y_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_y_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 59, 0, __PYX_ERR(1, 59, __pyx_L1_error));
  if (!(likely(PyDict_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 59, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->sub_bins_to_bins_y);
  __Pyx_DECREF(__pyx_v_self->sub_bins_to_bins_y);
  __pyx_v_self->sub_bins_to_bins_y = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.sub_bins_to_bins_y.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_y_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_y_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_y_4__del__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_y_4__del__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 59, 0, __PYX_ERR(1, 59, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->sub_bins_to_bins_y);
  __Pyx_DECREF(__pyx_v_self->sub_bins_to_bins_y);
  __pyx_v_self->sub_bins_to_bins_y = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.sub_bins_to_bins_y.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_z_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_z_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_z___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_z___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 59, 0, __PYX_ERR(1, 59, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->sub_bins_to_bins_z);
  __pyx_r = __pyx_v_self->sub_bins_to_bins_z;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.sub_bins_to_bins_z.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_z_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_z_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_z_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_z_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 59, 0, __PYX_ERR(1, 59, __pyx_L1_error));
  if (!(likely(PyDict_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 59, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->sub_bins_to_bins_z);
  __Pyx_DECREF(__pyx_v_self->sub_bins_to_bins_z);
  __pyx_v_self->sub_bins_to_bins_z = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.sub_bins_to_bins_z.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_z_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_z_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_z_4__del__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_z_4__del__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 59, 0, __PYX_ERR(1, 59, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->sub_bins_to_bins_z);
  __Pyx_DECREF(__pyx_v_self->sub_bins_to_bins_z);
  __pyx_v_self->sub_bins_to_bins_z = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.sub_bins_to_bins_z.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":60
 *     cdef public dict sub_bins_to_weights_z, sub_bins_to_bins_x
 *     cdef public dict sub_bins_to_bins_y, sub_bins_to_bins_z
 *     cdef public dict dict_             # <<<<<<<<<<<<<<
 *     cdef public float vf_limit
 *     cdef public bint assume_fully_accessible, fast_field
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_5dict__1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_5dict__1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_5dict____get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_5dict____get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 60, 0, __PYX_ERR(1, 60, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->dict_);
  __pyx_r = __pyx_v_self->dict_;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.dict_.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_5dict__3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_5dict__3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_5dict__2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_5dict__2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 60, 0, __PYX_ERR(1, 60, __pyx_L1_error));
  if (!(likely(PyDict_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 60, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->dict_);
  __Pyx_DECREF(__pyx_v_self->dict_);
  __pyx_v_self->dict_ = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.dict_.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_5dict__5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_5dict__5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_5dict__4__del__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_5dict__4__del__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 60, 0, __PYX_ERR(1, 60, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->dict_);
  __Pyx_DECREF(__pyx_v_self->dict_);
  __pyx_v_self->dict_ = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.dict_.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":61
 *     cdef public dict sub_bins_to_bins_y, sub_bins_to_bins_z
 *     cdef public dict dict_
 *     cdef public float vf_limit             # <<<<<<<<<<<<<<
 *     cdef public bint assume_fully_accessible, fast_field
 *     cdef public list binder_dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_8vf_limit_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_8vf_limit_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_8vf_limit___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_8vf_limit___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 61, 0, __PYX_ERR(1, 61, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->vf_limit); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.vf_limit.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_8vf_limit_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_8vf_limit_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_8vf_limit_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_8vf_limit_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 61, 0, __PYX_ERR(1, 61, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 61, __pyx_L1_error)
  __pyx_v_self->vf_limit = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.vf_limit.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":62
 *     cdef public dict dict_
 *     cdef public float vf_limit
 *     cdef public bint assume_fully_accessible, fast_field             # <<<<<<<<<<<<<<
 *     cdef public list binder_dict
 *     cdef public double[:] half_width_xyz
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_23assume_fully_accessible_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_23assume_fully_accessible_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_23assume_fully_accessible___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_23assume_fully_accessible___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 62, 0, __PYX_ERR(1, 62, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->assume_fully_accessible); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.assume_fully_accessible.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_23assume_fully_accessible_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_23assume_fully_accessible_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_23assume_fully_accessible_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_23assume_fully_accessible_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 62, 0, __PYX_ERR(1, 62, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 62, __pyx_L1_error)
  __pyx_v_self->assume_fully_accessible = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.assume_fully_accessible.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_10fast_field_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_10fast_field_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_10fast_field___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_10fast_field___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 62, 0, __PYX_ERR(1, 62, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->fast_field); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.fast_field.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_10fast_field_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_10fast_field_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_10fast_field_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_10fast_field_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 62, 0, __PYX_ERR(1, 62, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 62, __pyx_L1_error)
  __pyx_v_self->fast_field = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.fast_field.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":63
 *     cdef public float vf_limit
 *     cdef public bint assume_fully_accessible, fast_field
 *     cdef public list binder_dict             # <<<<<<<<<<<<<<
 *     cdef public double[:] half_width_xyz
 *     cdef public double[:] half_step_xyz
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_11binder_dict_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_11binder_dict_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_11binder_dict___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_11binder_dict___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 63, 0, __PYX_ERR(1, 63, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->binder_dict);
  __pyx_r = __pyx_v_self->binder_dict;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.binder_dict.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_11binder_dict_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_11binder_dict_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_11binder_dict_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_11binder_dict_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 63, 0, __PYX_ERR(1, 63, __pyx_L1_error));
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 63, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->binder_dict);
  __Pyx_DECREF(__pyx_v_self->binder_dict);
  __pyx_v_self->binder_dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.binder_dict.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_11binder_dict_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_11binder_dict_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_11binder_dict_4__del__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_11binder_dict_4__del__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 63, 0, __PYX_ERR(1, 63, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->binder_dict);
  __Pyx_DECREF(__pyx_v_self->binder_dict);
  __pyx_v_self->binder_dict = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.binder_dict.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":64
 *     cdef public bint assume_fully_accessible, fast_field
 *     cdef public list binder_dict
 *     cdef public double[:] half_width_xyz             # <<<<<<<<<<<<<<
 *     cdef public double[:] half_step_xyz
 *     cdef public long[:] n_xyz_m1, affected_bins_last_move
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_14half_width_xyz_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_14half_width_xyz_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_14half_width_xyz___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_14half_width_xyz___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 64, 0, __PYX_ERR(1, 64, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->half_width_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 64, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->half_width_xyz, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.half_width_xyz.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_14half_width_xyz_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_14half_width_xyz_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_14half_width_xyz_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_14half_width_xyz_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 64, 0, __PYX_ERR(1, 64, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_v_value, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(1, 64, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->half_width_xyz, 0);
  __pyx_v_self->half_width_xyz = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.half_width_xyz.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":65
 *     cdef public list binder_dict
 *     cdef public double[:] half_width_xyz
 *     cdef public double[:] half_step_xyz             # <<<<<<<<<<<<<<
 *     cdef public long[:] n_xyz_m1, affected_bins_last_move
 *     cdef public long[:, :, ::1] inds_xyz_to_super
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_13half_step_xyz_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_13half_step_xyz_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_13half_step_xyz___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_13half_step_xyz___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 65, 0, __PYX_ERR(1, 65, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->half_step_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 65, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->half_step_xyz, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.half_step_xyz.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_13half_step_xyz_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_13half_step_xyz_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_13half_step_xyz_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_13half_step_xyz_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 65, 0, __PYX_ERR(1, 65, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_v_value, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(1, 65, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->half_step_xyz, 0);
  __pyx_v_self->half_step_xyz = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.half_step_xyz.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":66
 *     cdef public double[:] half_width_xyz
 *     cdef public double[:] half_step_xyz
 *     cdef public long[:] n_xyz_m1, affected_bins_last_move             # <<<<<<<<<<<<<<
 *     cdef public long[:, :, ::1] inds_xyz_to_super
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_8n_xyz_m1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_8n_xyz_m1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_8n_xyz_m1___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_8n_xyz_m1___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 66, 0, __PYX_ERR(1, 66, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->n_xyz_m1.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 66, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->n_xyz_m1, 1, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.n_xyz_m1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_8n_xyz_m1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_8n_xyz_m1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_8n_xyz_m1_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_8n_xyz_m1_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 66, 0, __PYX_ERR(1, 66, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_v_value, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(1, 66, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->n_xyz_m1, 0);
  __pyx_v_self->n_xyz_m1 = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.n_xyz_m1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_23affected_bins_last_move_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_23affected_bins_last_move_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_23affected_bins_last_move___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_23affected_bins_last_move___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 66, 0, __PYX_ERR(1, 66, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->affected_bins_last_move.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 66, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->affected_bins_last_move, 1, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.affected_bins_last_move.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_23affected_bins_last_move_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_23affected_bins_last_move_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_23affected_bins_last_move_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_23affected_bins_last_move_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 66, 0, __PYX_ERR(1, 66, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_v_value, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(1, 66, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->affected_bins_last_move, 0);
  __pyx_v_self->affected_bins_last_move = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.affected_bins_last_move.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pxd":67
 *     cdef public double[:] half_step_xyz
 *     cdef public long[:] n_xyz_m1, affected_bins_last_move
 *     cdef public long[:, :, ::1] inds_xyz_to_super             # <<<<<<<<<<<<<<
 * 
 *     cdef void precompute_ind_xyz_to_super(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_17inds_xyz_to_super_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_17inds_xyz_to_super_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_17inds_xyz_to_super___get__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_17inds_xyz_to_super___get__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 67, 0, __PYX_ERR(1, 67, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->inds_xyz_to_super.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 67, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->inds_xyz_to_super, 3, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.inds_xyz_to_super.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6chromo_6fields_19UniformDensityField_17inds_xyz_to_super_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6chromo_6fields_19UniformDensityField_17inds_xyz_to_super_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_17inds_xyz_to_super_2__set__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6chromo_6fields_19UniformDensityField_17inds_xyz_to_super_2__set__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 67, 0, __PYX_ERR(1, 67, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_d_d_dc_long(__pyx_v_value, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(1, 67, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->inds_xyz_to_super, 0);
  __pyx_v_self->inds_xyz_to_super = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.inds_xyz_to_super.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_29__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_29__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_28__reduce_cython__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_28__reduce_cython__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  PyObject *__pyx_t_27 = NULL;
  PyObject *__pyx_t_28 = NULL;
  PyObject *__pyx_t_29 = NULL;
  PyObject *__pyx_t_30 = NULL;
  PyObject *__pyx_t_31 = NULL;
  PyObject *__pyx_t_32 = NULL;
  PyObject *__pyx_t_33 = NULL;
  PyObject *__pyx_t_34 = NULL;
  PyObject *__pyx_t_35 = NULL;
  PyObject *__pyx_t_36 = NULL;
  PyObject *__pyx_t_37 = NULL;
  PyObject *__pyx_t_38 = NULL;
  PyObject *__pyx_t_39 = NULL;
  PyObject *__pyx_t_40 = NULL;
  PyObject *__pyx_t_41 = NULL;
  PyObject *__pyx_t_42 = NULL;
  PyObject *__pyx_t_43 = NULL;
  PyObject *__pyx_t_44 = NULL;
  PyObject *__pyx_t_45 = NULL;
  PyObject *__pyx_t_46 = NULL;
  PyObject *__pyx_t_47 = NULL;
  PyObject *__pyx_t_48 = NULL;
  int __pyx_t_49;
  int __pyx_t_50;
  int __pyx_t_51;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[2], 1, 0, __PYX_ERR(2, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._field_descriptors, self.access_vols, self.affected_bins_last_move, self.assume_fully_accessible, self.bin_index, self.binder_dict, self.binders, self.chi, self.confine_length, self.confine_type, self.density, self.density_trial, self.dict_, self.doubly_bound, self.doubly_bound_trial, self.dx, self.dxyz, self.dy, self.dz, self.fast_field, self.half_step_xyz, self.half_width_xyz, self.index_xyz, self.index_xyz_with_trial, self.inds_xyz_to_super, self.n_bins, self.n_points, self.n_polymers, self.n_sub_bins_x, self.n_sub_bins_y, self.n_sub_bins_z, self.n_xyz_m1, self.nbr_inds, self.nbr_inds_with_trial, self.num_binders, self.nx, self.ny, self.nz, self.polymers, self.sub_bin_width_x, self.sub_bin_width_y, self.sub_bin_width_z, self.sub_bins_to_bins_x, self.sub_bins_to_bins_y, self.sub_bins_to_bins_z, self.sub_bins_to_weights_x, self.sub_bins_to_weights_y, self.sub_bins_to_weights_z, self.vf_limit, self.vol_bin, self.weight_xyz, self.weight_xyz_with_trial, self.width_xyz, self.wt_vec, self.wt_vec_with_trial, self.x_width, self.xyz, self.xyz_with_trial, self.y_width, self.z_width)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  if (unlikely(!__pyx_v_self->affected_bins_last_move.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(2, 5, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->affected_bins_last_move, 1, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->assume_fully_accessible); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(!__pyx_v_self->bin_index.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(2, 5, __pyx_L1_error)}
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_self->bin_index, 2, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->chi); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.confine_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(!__pyx_v_self->density.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(2, 5, __pyx_L1_error)}
  __pyx_t_6 = __pyx_memoryview_fromslice(__pyx_v_self->density, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (unlikely(!__pyx_v_self->density_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(2, 5, __pyx_L1_error)}
  __pyx_t_7 = __pyx_memoryview_fromslice(__pyx_v_self->density_trial, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (unlikely(!__pyx_v_self->doubly_bound.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(2, 5, __pyx_L1_error)}
  __pyx_t_8 = __pyx_memoryview_fromslice(__pyx_v_self->doubly_bound, 1, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (unlikely(!__pyx_v_self->doubly_bound_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(2, 5, __pyx_L1_error)}
  __pyx_t_9 = __pyx_memoryview_fromslice(__pyx_v_self->doubly_bound_trial, 1, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyFloat_FromDouble(__pyx_v_self->dx); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  if (unlikely(!__pyx_v_self->dxyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(2, 5, __pyx_L1_error)}
  __pyx_t_11 = __pyx_memoryview_fromslice(__pyx_v_self->dxyz, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = PyFloat_FromDouble(__pyx_v_self->dy); if (unlikely(!__pyx_t_12)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = PyFloat_FromDouble(__pyx_v_self->dz); if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = __Pyx_PyBool_FromLong(__pyx_v_self->fast_field); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (unlikely(!__pyx_v_self->half_step_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(2, 5, __pyx_L1_error)}
  __pyx_t_15 = __pyx_memoryview_fromslice(__pyx_v_self->half_step_xyz, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (unlikely(!__pyx_v_self->half_width_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(2, 5, __pyx_L1_error)}
  __pyx_t_16 = __pyx_memoryview_fromslice(__pyx_v_self->half_width_xyz, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_16)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (unlikely(!__pyx_v_self->index_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(2, 5, __pyx_L1_error)}
  __pyx_t_17 = __pyx_memoryview_fromslice(__pyx_v_self->index_xyz, 1, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_17)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  if (unlikely(!__pyx_v_self->index_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(2, 5, __pyx_L1_error)}
  __pyx_t_18 = __pyx_memoryview_fromslice(__pyx_v_self->index_xyz_with_trial, 2, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_18)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  if (unlikely(!__pyx_v_self->inds_xyz_to_super.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(2, 5, __pyx_L1_error)}
  __pyx_t_19 = __pyx_memoryview_fromslice(__pyx_v_self->inds_xyz_to_super, 3, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_19)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_20 = __Pyx_PyInt_From_long(__pyx_v_self->n_bins); if (unlikely(!__pyx_t_20)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_21 = __Pyx_PyInt_From_long(__pyx_v_self->n_points); if (unlikely(!__pyx_t_21)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __pyx_t_22 = __Pyx_PyInt_From_long(__pyx_v_self->__pyx_base.n_polymers); if (unlikely(!__pyx_t_22)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __pyx_t_23 = __Pyx_PyInt_From_long(__pyx_v_self->n_sub_bins_x); if (unlikely(!__pyx_t_23)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_24 = __Pyx_PyInt_From_long(__pyx_v_self->n_sub_bins_y); if (unlikely(!__pyx_t_24)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_25 = __Pyx_PyInt_From_long(__pyx_v_self->n_sub_bins_z); if (unlikely(!__pyx_t_25)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);
  if (unlikely(!__pyx_v_self->n_xyz_m1.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(2, 5, __pyx_L1_error)}
  __pyx_t_26 = __pyx_memoryview_fromslice(__pyx_v_self->n_xyz_m1, 1, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_26)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  if (unlikely(!__pyx_v_self->nbr_inds.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(2, 5, __pyx_L1_error)}
  __pyx_t_27 = __pyx_memoryview_fromslice(__pyx_v_self->nbr_inds, 1, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_27)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_27);
  if (unlikely(!__pyx_v_self->nbr_inds_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(2, 5, __pyx_L1_error)}
  __pyx_t_28 = __pyx_memoryview_fromslice(__pyx_v_self->nbr_inds_with_trial, 2, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_28)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_28);
  __pyx_t_29 = __Pyx_PyInt_From_long(__pyx_v_self->num_binders); if (unlikely(!__pyx_t_29)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_30 = __Pyx_PyInt_From_long(__pyx_v_self->nx); if (unlikely(!__pyx_t_30)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_30);
  __pyx_t_31 = __Pyx_PyInt_From_long(__pyx_v_self->ny); if (unlikely(!__pyx_t_31)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __pyx_t_32 = __Pyx_PyInt_From_long(__pyx_v_self->nz); if (unlikely(!__pyx_t_32)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __pyx_t_33 = PyFloat_FromDouble(__pyx_v_self->sub_bin_width_x); if (unlikely(!__pyx_t_33)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_33);
  __pyx_t_34 = PyFloat_FromDouble(__pyx_v_self->sub_bin_width_y); if (unlikely(!__pyx_t_34)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_34);
  __pyx_t_35 = PyFloat_FromDouble(__pyx_v_self->sub_bin_width_z); if (unlikely(!__pyx_t_35)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_35);
  __pyx_t_36 = PyFloat_FromDouble(__pyx_v_self->vf_limit); if (unlikely(!__pyx_t_36)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_37 = PyFloat_FromDouble(__pyx_v_self->vol_bin); if (unlikely(!__pyx_t_37)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  if (unlikely(!__pyx_v_self->weight_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(2, 5, __pyx_L1_error)}
  __pyx_t_38 = __pyx_memoryview_fromslice(__pyx_v_self->weight_xyz, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_38)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_38);
  if (unlikely(!__pyx_v_self->weight_xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(2, 5, __pyx_L1_error)}
  __pyx_t_39 = __pyx_memoryview_fromslice(__pyx_v_self->weight_xyz_with_trial, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_39)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_39);
  if (unlikely(!__pyx_v_self->width_xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(2, 5, __pyx_L1_error)}
  __pyx_t_40 = __pyx_memoryview_fromslice(__pyx_v_self->width_xyz, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_40)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_40);
  if (unlikely(!__pyx_v_self->wt_vec.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(2, 5, __pyx_L1_error)}
  __pyx_t_41 = __pyx_memoryview_fromslice(__pyx_v_self->wt_vec, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_41)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_41);
  if (unlikely(!__pyx_v_self->wt_vec_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(2, 5, __pyx_L1_error)}
  __pyx_t_42 = __pyx_memoryview_fromslice(__pyx_v_self->wt_vec_with_trial, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_42)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_42);
  __pyx_t_43 = PyFloat_FromDouble(__pyx_v_self->x_width); if (unlikely(!__pyx_t_43)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_43);
  if (unlikely(!__pyx_v_self->xyz.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(2, 5, __pyx_L1_error)}
  __pyx_t_44 = __pyx_memoryview_fromslice(__pyx_v_self->xyz, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_44)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_44);
  if (unlikely(!__pyx_v_self->xyz_with_trial.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(2, 5, __pyx_L1_error)}
  __pyx_t_45 = __pyx_memoryview_fromslice(__pyx_v_self->xyz_with_trial, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_45)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_45);
  __pyx_t_46 = PyFloat_FromDouble(__pyx_v_self->y_width); if (unlikely(!__pyx_t_46)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_46);
  __pyx_t_47 = PyFloat_FromDouble(__pyx_v_self->z_width); if (unlikely(!__pyx_t_47)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_47);
  __pyx_t_48 = PyTuple_New(60); if (unlikely(!__pyx_t_48)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_48);
  __Pyx_INCREF(__pyx_v_self->_field_descriptors);
  __Pyx_GIVEREF(__pyx_v_self->_field_descriptors);
  PyTuple_SET_ITEM(__pyx_t_48, 0, __pyx_v_self->_field_descriptors);
  __Pyx_INCREF(__pyx_v_self->access_vols);
  __Pyx_GIVEREF(__pyx_v_self->access_vols);
  PyTuple_SET_ITEM(__pyx_t_48, 1, __pyx_v_self->access_vols);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_48, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_48, 3, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_48, 4, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_self->binder_dict);
  __Pyx_GIVEREF(__pyx_v_self->binder_dict);
  PyTuple_SET_ITEM(__pyx_t_48, 5, __pyx_v_self->binder_dict);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.binders);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.binders);
  PyTuple_SET_ITEM(__pyx_t_48, 6, __pyx_v_self->__pyx_base.binders);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_48, 7, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_48, 8, __pyx_t_5);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.confine_type);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.confine_type);
  PyTuple_SET_ITEM(__pyx_t_48, 9, __pyx_v_self->__pyx_base.confine_type);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_48, 10, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_48, 11, __pyx_t_7);
  __Pyx_INCREF(__pyx_v_self->dict_);
  __Pyx_GIVEREF(__pyx_v_self->dict_);
  PyTuple_SET_ITEM(__pyx_t_48, 12, __pyx_v_self->dict_);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_48, 13, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_48, 14, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_48, 15, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_48, 16, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_48, 17, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_13);
  PyTuple_SET_ITEM(__pyx_t_48, 18, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_48, 19, __pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_48, 20, __pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_16);
  PyTuple_SET_ITEM(__pyx_t_48, 21, __pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_17);
  PyTuple_SET_ITEM(__pyx_t_48, 22, __pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_18);
  PyTuple_SET_ITEM(__pyx_t_48, 23, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_19);
  PyTuple_SET_ITEM(__pyx_t_48, 24, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_20);
  PyTuple_SET_ITEM(__pyx_t_48, 25, __pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_21);
  PyTuple_SET_ITEM(__pyx_t_48, 26, __pyx_t_21);
  __Pyx_GIVEREF(__pyx_t_22);
  PyTuple_SET_ITEM(__pyx_t_48, 27, __pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_23);
  PyTuple_SET_ITEM(__pyx_t_48, 28, __pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_24);
  PyTuple_SET_ITEM(__pyx_t_48, 29, __pyx_t_24);
  __Pyx_GIVEREF(__pyx_t_25);
  PyTuple_SET_ITEM(__pyx_t_48, 30, __pyx_t_25);
  __Pyx_GIVEREF(__pyx_t_26);
  PyTuple_SET_ITEM(__pyx_t_48, 31, __pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_27);
  PyTuple_SET_ITEM(__pyx_t_48, 32, __pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_28);
  PyTuple_SET_ITEM(__pyx_t_48, 33, __pyx_t_28);
  __Pyx_GIVEREF(__pyx_t_29);
  PyTuple_SET_ITEM(__pyx_t_48, 34, __pyx_t_29);
  __Pyx_GIVEREF(__pyx_t_30);
  PyTuple_SET_ITEM(__pyx_t_48, 35, __pyx_t_30);
  __Pyx_GIVEREF(__pyx_t_31);
  PyTuple_SET_ITEM(__pyx_t_48, 36, __pyx_t_31);
  __Pyx_GIVEREF(__pyx_t_32);
  PyTuple_SET_ITEM(__pyx_t_48, 37, __pyx_t_32);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.polymers);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.polymers);
  PyTuple_SET_ITEM(__pyx_t_48, 38, __pyx_v_self->__pyx_base.polymers);
  __Pyx_GIVEREF(__pyx_t_33);
  PyTuple_SET_ITEM(__pyx_t_48, 39, __pyx_t_33);
  __Pyx_GIVEREF(__pyx_t_34);
  PyTuple_SET_ITEM(__pyx_t_48, 40, __pyx_t_34);
  __Pyx_GIVEREF(__pyx_t_35);
  PyTuple_SET_ITEM(__pyx_t_48, 41, __pyx_t_35);
  __Pyx_INCREF(__pyx_v_self->sub_bins_to_bins_x);
  __Pyx_GIVEREF(__pyx_v_self->sub_bins_to_bins_x);
  PyTuple_SET_ITEM(__pyx_t_48, 42, __pyx_v_self->sub_bins_to_bins_x);
  __Pyx_INCREF(__pyx_v_self->sub_bins_to_bins_y);
  __Pyx_GIVEREF(__pyx_v_self->sub_bins_to_bins_y);
  PyTuple_SET_ITEM(__pyx_t_48, 43, __pyx_v_self->sub_bins_to_bins_y);
  __Pyx_INCREF(__pyx_v_self->sub_bins_to_bins_z);
  __Pyx_GIVEREF(__pyx_v_self->sub_bins_to_bins_z);
  PyTuple_SET_ITEM(__pyx_t_48, 44, __pyx_v_self->sub_bins_to_bins_z);
  __Pyx_INCREF(__pyx_v_self->sub_bins_to_weights_x);
  __Pyx_GIVEREF(__pyx_v_self->sub_bins_to_weights_x);
  PyTuple_SET_ITEM(__pyx_t_48, 45, __pyx_v_self->sub_bins_to_weights_x);
  __Pyx_INCREF(__pyx_v_self->sub_bins_to_weights_y);
  __Pyx_GIVEREF(__pyx_v_self->sub_bins_to_weights_y);
  PyTuple_SET_ITEM(__pyx_t_48, 46, __pyx_v_self->sub_bins_to_weights_y);
  __Pyx_INCREF(__pyx_v_self->sub_bins_to_weights_z);
  __Pyx_GIVEREF(__pyx_v_self->sub_bins_to_weights_z);
  PyTuple_SET_ITEM(__pyx_t_48, 47, __pyx_v_self->sub_bins_to_weights_z);
  __Pyx_GIVEREF(__pyx_t_36);
  PyTuple_SET_ITEM(__pyx_t_48, 48, __pyx_t_36);
  __Pyx_GIVEREF(__pyx_t_37);
  PyTuple_SET_ITEM(__pyx_t_48, 49, __pyx_t_37);
  __Pyx_GIVEREF(__pyx_t_38);
  PyTuple_SET_ITEM(__pyx_t_48, 50, __pyx_t_38);
  __Pyx_GIVEREF(__pyx_t_39);
  PyTuple_SET_ITEM(__pyx_t_48, 51, __pyx_t_39);
  __Pyx_GIVEREF(__pyx_t_40);
  PyTuple_SET_ITEM(__pyx_t_48, 52, __pyx_t_40);
  __Pyx_GIVEREF(__pyx_t_41);
  PyTuple_SET_ITEM(__pyx_t_48, 53, __pyx_t_41);
  __Pyx_GIVEREF(__pyx_t_42);
  PyTuple_SET_ITEM(__pyx_t_48, 54, __pyx_t_42);
  __Pyx_GIVEREF(__pyx_t_43);
  PyTuple_SET_ITEM(__pyx_t_48, 55, __pyx_t_43);
  __Pyx_GIVEREF(__pyx_t_44);
  PyTuple_SET_ITEM(__pyx_t_48, 56, __pyx_t_44);
  __Pyx_GIVEREF(__pyx_t_45);
  PyTuple_SET_ITEM(__pyx_t_48, 57, __pyx_t_45);
  __Pyx_GIVEREF(__pyx_t_46);
  PyTuple_SET_ITEM(__pyx_t_48, 58, __pyx_t_46);
  __Pyx_GIVEREF(__pyx_t_47);
  PyTuple_SET_ITEM(__pyx_t_48, 59, __pyx_t_47);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_16 = 0;
  __pyx_t_17 = 0;
  __pyx_t_18 = 0;
  __pyx_t_19 = 0;
  __pyx_t_20 = 0;
  __pyx_t_21 = 0;
  __pyx_t_22 = 0;
  __pyx_t_23 = 0;
  __pyx_t_24 = 0;
  __pyx_t_25 = 0;
  __pyx_t_26 = 0;
  __pyx_t_27 = 0;
  __pyx_t_28 = 0;
  __pyx_t_29 = 0;
  __pyx_t_30 = 0;
  __pyx_t_31 = 0;
  __pyx_t_32 = 0;
  __pyx_t_33 = 0;
  __pyx_t_34 = 0;
  __pyx_t_35 = 0;
  __pyx_t_36 = 0;
  __pyx_t_37 = 0;
  __pyx_t_38 = 0;
  __pyx_t_39 = 0;
  __pyx_t_40 = 0;
  __pyx_t_41 = 0;
  __pyx_t_42 = 0;
  __pyx_t_43 = 0;
  __pyx_t_44 = 0;
  __pyx_t_45 = 0;
  __pyx_t_46 = 0;
  __pyx_t_47 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_48);
  __pyx_t_48 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._field_descriptors, self.access_vols, self.affected_bins_last_move, self.assume_fully_accessible, self.bin_index, self.binder_dict, self.binders, self.chi, self.confine_length, self.confine_type, self.density, self.density_trial, self.dict_, self.doubly_bound, self.doubly_bound_trial, self.dx, self.dxyz, self.dy, self.dz, self.fast_field, self.half_step_xyz, self.half_width_xyz, self.index_xyz, self.index_xyz_with_trial, self.inds_xyz_to_super, self.n_bins, self.n_points, self.n_polymers, self.n_sub_bins_x, self.n_sub_bins_y, self.n_sub_bins_z, self.n_xyz_m1, self.nbr_inds, self.nbr_inds_with_trial, self.num_binders, self.nx, self.ny, self.nz, self.polymers, self.sub_bin_width_x, self.sub_bin_width_y, self.sub_bin_width_z, self.sub_bins_to_bins_x, self.sub_bins_to_bins_y, self.sub_bins_to_bins_z, self.sub_bins_to_weights_x, self.sub_bins_to_weights_y, self.sub_bins_to_weights_z, self.vf_limit, self.vol_bin, self.weight_xyz, self.weight_xyz_with_trial, self.width_xyz, self.wt_vec, self.wt_vec_with_trial, self.x_width, self.xyz, self.xyz_with_trial, self.y_width, self.z_width)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_48 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_48)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_48);
  __pyx_v__dict = __pyx_t_48;
  __pyx_t_48 = 0;

  /* "(tree fragment)":7
 *     state = (self._field_descriptors, self.access_vols, self.affected_bins_last_move, self.assume_fully_accessible, self.bin_index, self.binder_dict, self.binders, self.chi, self.confine_length, self.confine_type, self.density, self.density_trial, self.dict_, self.doubly_bound, self.doubly_bound_trial, self.dx, self.dxyz, self.dy, self.dz, self.fast_field, self.half_step_xyz, self.half_width_xyz, self.index_xyz, self.index_xyz_with_trial, self.inds_xyz_to_super, self.n_bins, self.n_points, self.n_polymers, self.n_sub_bins_x, self.n_sub_bins_y, self.n_sub_bins_z, self.n_xyz_m1, self.nbr_inds, self.nbr_inds_with_trial, self.num_binders, self.nx, self.ny, self.nz, self.polymers, self.sub_bin_width_x, self.sub_bin_width_y, self.sub_bin_width_z, self.sub_bins_to_bins_x, self.sub_bins_to_bins_y, self.sub_bins_to_bins_z, self.sub_bins_to_weights_x, self.sub_bins_to_weights_y, self.sub_bins_to_weights_z, self.vf_limit, self.vol_bin, self.weight_xyz, self.weight_xyz_with_trial, self.width_xyz, self.wt_vec, self.wt_vec_with_trial, self.x_width, self.xyz, self.xyz_with_trial, self.y_width, self.z_width)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_49 = (__pyx_v__dict != Py_None);
  __pyx_t_50 = (__pyx_t_49 != 0);
  if (__pyx_t_50) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_48 = PyTuple_New(1); if (unlikely(!__pyx_t_48)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_48);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_48, 0, __pyx_v__dict);
    __pyx_t_47 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_48); if (unlikely(!__pyx_t_47)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_47);
    __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_47));
    __pyx_t_47 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._field_descriptors is not None or self.access_vols is not None or self.binder_dict is not None or self.binders is not None or self.confine_type is not None or self.dict_ is not None or self.polymers is not None or self.sub_bins_to_bins_x is not None or self.sub_bins_to_bins_y is not None or self.sub_bins_to_bins_z is not None or self.sub_bins_to_weights_x is not None or self.sub_bins_to_weights_y is not None or self.sub_bins_to_weights_z is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._field_descriptors, self.access_vols, self.affected_bins_last_move, self.assume_fully_accessible, self.bin_index, self.binder_dict, self.binders, self.chi, self.confine_length, self.confine_type, self.density, self.density_trial, self.dict_, self.doubly_bound, self.doubly_bound_trial, self.dx, self.dxyz, self.dy, self.dz, self.fast_field, self.half_step_xyz, self.half_width_xyz, self.index_xyz, self.index_xyz_with_trial, self.inds_xyz_to_super, self.n_bins, self.n_points, self.n_polymers, self.n_sub_bins_x, self.n_sub_bins_y, self.n_sub_bins_z, self.n_xyz_m1, self.nbr_inds, self.nbr_inds_with_trial, self.num_binders, self.nx, self.ny, self.nz, self.polymers, self.sub_bin_width_x, self.sub_bin_width_y, self.sub_bin_width_z, self.sub_bins_to_bins_x, self.sub_bins_to_bins_y, self.sub_bins_to_bins_z, self.sub_bins_to_weights_x, self.sub_bins_to_weights_y, self.sub_bins_to_weights_z, self.vf_limit, self.vol_bin, self.weight_xyz, self.weight_xyz_with_trial, self.width_xyz, self.wt_vec, self.wt_vec_with_trial, self.x_width, self.xyz, self.xyz_with_trial, self.y_width, self.z_width)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._field_descriptors is not None or self.access_vols is not None or self.binder_dict is not None or self.binders is not None or self.confine_type is not None or self.dict_ is not None or self.polymers is not None or self.sub_bins_to_bins_x is not None or self.sub_bins_to_bins_y is not None or self.sub_bins_to_bins_z is not None or self.sub_bins_to_weights_x is not None or self.sub_bins_to_weights_y is not None or self.sub_bins_to_weights_z is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_UniformDensityField, (type(self), 0x0167c6c, None), state
 */
  /*else*/ {
    __pyx_t_49 = (__pyx_v_self->_field_descriptors != Py_None);
    __pyx_t_51 = (__pyx_t_49 != 0);
    if (!__pyx_t_51) {
    } else {
      __pyx_t_50 = __pyx_t_51;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_51 = (__pyx_v_self->access_vols != ((PyObject*)Py_None));
    __pyx_t_49 = (__pyx_t_51 != 0);
    if (!__pyx_t_49) {
    } else {
      __pyx_t_50 = __pyx_t_49;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_49 = (__pyx_v_self->binder_dict != ((PyObject*)Py_None));
    __pyx_t_51 = (__pyx_t_49 != 0);
    if (!__pyx_t_51) {
    } else {
      __pyx_t_50 = __pyx_t_51;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_51 = (__pyx_v_self->__pyx_base.binders != Py_None);
    __pyx_t_49 = (__pyx_t_51 != 0);
    if (!__pyx_t_49) {
    } else {
      __pyx_t_50 = __pyx_t_49;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_49 = (__pyx_v_self->__pyx_base.confine_type != ((PyObject*)Py_None));
    __pyx_t_51 = (__pyx_t_49 != 0);
    if (!__pyx_t_51) {
    } else {
      __pyx_t_50 = __pyx_t_51;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_51 = (__pyx_v_self->dict_ != ((PyObject*)Py_None));
    __pyx_t_49 = (__pyx_t_51 != 0);
    if (!__pyx_t_49) {
    } else {
      __pyx_t_50 = __pyx_t_49;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_49 = (__pyx_v_self->__pyx_base.polymers != ((PyObject*)Py_None));
    __pyx_t_51 = (__pyx_t_49 != 0);
    if (!__pyx_t_51) {
    } else {
      __pyx_t_50 = __pyx_t_51;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_51 = (__pyx_v_self->sub_bins_to_bins_x != ((PyObject*)Py_None));
    __pyx_t_49 = (__pyx_t_51 != 0);
    if (!__pyx_t_49) {
    } else {
      __pyx_t_50 = __pyx_t_49;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_49 = (__pyx_v_self->sub_bins_to_bins_y != ((PyObject*)Py_None));
    __pyx_t_51 = (__pyx_t_49 != 0);
    if (!__pyx_t_51) {
    } else {
      __pyx_t_50 = __pyx_t_51;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_51 = (__pyx_v_self->sub_bins_to_bins_z != ((PyObject*)Py_None));
    __pyx_t_49 = (__pyx_t_51 != 0);
    if (!__pyx_t_49) {
    } else {
      __pyx_t_50 = __pyx_t_49;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_49 = (__pyx_v_self->sub_bins_to_weights_x != ((PyObject*)Py_None));
    __pyx_t_51 = (__pyx_t_49 != 0);
    if (!__pyx_t_51) {
    } else {
      __pyx_t_50 = __pyx_t_51;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_51 = (__pyx_v_self->sub_bins_to_weights_y != ((PyObject*)Py_None));
    __pyx_t_49 = (__pyx_t_51 != 0);
    if (!__pyx_t_49) {
    } else {
      __pyx_t_50 = __pyx_t_49;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_49 = (__pyx_v_self->sub_bins_to_weights_z != ((PyObject*)Py_None));
    __pyx_t_51 = (__pyx_t_49 != 0);
    __pyx_t_50 = __pyx_t_51;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_50;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._field_descriptors is not None or self.access_vols is not None or self.binder_dict is not None or self.binders is not None or self.confine_type is not None or self.dict_ is not None or self.polymers is not None or self.sub_bins_to_bins_x is not None or self.sub_bins_to_bins_y is not None or self.sub_bins_to_bins_z is not None or self.sub_bins_to_weights_x is not None or self.sub_bins_to_weights_y is not None or self.sub_bins_to_weights_z is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_UniformDensityField, (type(self), 0x0167c6c, None), state
 *     else:
 */
  __pyx_t_50 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_50) {

    /* "(tree fragment)":13
 *         use_setstate = self._field_descriptors is not None or self.access_vols is not None or self.binder_dict is not None or self.binders is not None or self.confine_type is not None or self.dict_ is not None or self.polymers is not None or self.sub_bins_to_bins_x is not None or self.sub_bins_to_bins_y is not None or self.sub_bins_to_bins_z is not None or self.sub_bins_to_weights_x is not None or self.sub_bins_to_weights_y is not None or self.sub_bins_to_weights_z is not None
 *     if use_setstate:
 *         return __pyx_unpickle_UniformDensityField, (type(self), 0x0167c6c, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_UniformDensityField, (type(self), 0x0167c6c, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_47, __pyx_n_s_pyx_unpickle_UniformDensityFie); if (unlikely(!__pyx_t_47)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_47);
    __pyx_t_48 = PyTuple_New(3); if (unlikely(!__pyx_t_48)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_48);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_48, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_1473644);
    __Pyx_GIVEREF(__pyx_int_1473644);
    PyTuple_SET_ITEM(__pyx_t_48, 1, __pyx_int_1473644);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_48, 2, Py_None);
    __pyx_t_46 = PyTuple_New(3); if (unlikely(!__pyx_t_46)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_46);
    __Pyx_GIVEREF(__pyx_t_47);
    PyTuple_SET_ITEM(__pyx_t_46, 0, __pyx_t_47);
    __Pyx_GIVEREF(__pyx_t_48);
    PyTuple_SET_ITEM(__pyx_t_46, 1, __pyx_t_48);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_46, 2, __pyx_v_state);
    __pyx_t_47 = 0;
    __pyx_t_48 = 0;
    __pyx_r = __pyx_t_46;
    __pyx_t_46 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._field_descriptors is not None or self.access_vols is not None or self.binder_dict is not None or self.binders is not None or self.confine_type is not None or self.dict_ is not None or self.polymers is not None or self.sub_bins_to_bins_x is not None or self.sub_bins_to_bins_y is not None or self.sub_bins_to_bins_z is not None or self.sub_bins_to_weights_x is not None or self.sub_bins_to_weights_y is not None or self.sub_bins_to_weights_z is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_UniformDensityField, (type(self), 0x0167c6c, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_UniformDensityField, (type(self), 0x0167c6c, None), state
 *     else:
 *         return __pyx_unpickle_UniformDensityField, (type(self), 0x0167c6c, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_UniformDensityField__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_46, __pyx_n_s_pyx_unpickle_UniformDensityFie); if (unlikely(!__pyx_t_46)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_46);
    __pyx_t_48 = PyTuple_New(3); if (unlikely(!__pyx_t_48)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_48);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_48, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_1473644);
    __Pyx_GIVEREF(__pyx_int_1473644);
    PyTuple_SET_ITEM(__pyx_t_48, 1, __pyx_int_1473644);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_48, 2, __pyx_v_state);
    __pyx_t_47 = PyTuple_New(2); if (unlikely(!__pyx_t_47)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_47);
    __Pyx_GIVEREF(__pyx_t_46);
    PyTuple_SET_ITEM(__pyx_t_47, 0, __pyx_t_46);
    __Pyx_GIVEREF(__pyx_t_48);
    PyTuple_SET_ITEM(__pyx_t_47, 1, __pyx_t_48);
    __pyx_t_46 = 0;
    __pyx_t_48 = 0;
    __pyx_r = __pyx_t_47;
    __pyx_t_47 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_XDECREF(__pyx_t_25);
  __Pyx_XDECREF(__pyx_t_26);
  __Pyx_XDECREF(__pyx_t_27);
  __Pyx_XDECREF(__pyx_t_28);
  __Pyx_XDECREF(__pyx_t_29);
  __Pyx_XDECREF(__pyx_t_30);
  __Pyx_XDECREF(__pyx_t_31);
  __Pyx_XDECREF(__pyx_t_32);
  __Pyx_XDECREF(__pyx_t_33);
  __Pyx_XDECREF(__pyx_t_34);
  __Pyx_XDECREF(__pyx_t_35);
  __Pyx_XDECREF(__pyx_t_36);
  __Pyx_XDECREF(__pyx_t_37);
  __Pyx_XDECREF(__pyx_t_38);
  __Pyx_XDECREF(__pyx_t_39);
  __Pyx_XDECREF(__pyx_t_40);
  __Pyx_XDECREF(__pyx_t_41);
  __Pyx_XDECREF(__pyx_t_42);
  __Pyx_XDECREF(__pyx_t_43);
  __Pyx_XDECREF(__pyx_t_44);
  __Pyx_XDECREF(__pyx_t_45);
  __Pyx_XDECREF(__pyx_t_46);
  __Pyx_XDECREF(__pyx_t_47);
  __Pyx_XDECREF(__pyx_t_48);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_UniformDensityField, (type(self), 0x0167c6c, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_UniformDensityField__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_31__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6chromo_6fields_19UniformDensityField_31__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6chromo_6fields_19UniformDensityField_30__setstate_cython__(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_19UniformDensityField_30__setstate_cython__(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[2], 16, 0, __PYX_ERR(2, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_UniformDensityField, (type(self), 0x0167c6c, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_UniformDensityField__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6chromo_6fields___pyx_unpickle_UniformDensityField__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_UniformDensityField, (type(self), 0x0167c6c, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_UniformDensityField__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.UniformDensityField.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":2379
 * 
 * 
 * cdef long inds_to_super_ind(             # <<<<<<<<<<<<<<
 *     long ind_x, long ind_y, long ind_z, long nx, long ny
 * ):
 */

static long __pyx_f_6chromo_6fields_inds_to_super_ind(long __pyx_v_ind_x, long __pyx_v_ind_y, long __pyx_v_ind_z, long __pyx_v_nx, long __pyx_v_ny) {
  long __pyx_v_super_ind;
  long __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inds_to_super_ind", 0);
  __Pyx_TraceCall("inds_to_super_ind", __pyx_f[0], 2379, 0, __PYX_ERR(0, 2379, __pyx_L1_error));

  /* "chromo/fields.pyx":2401
 *         Super-index position of the voxel
 *     """
 *     cdef long super_ind = ind_x + ind_y * nx + ind_z * nx * ny             # <<<<<<<<<<<<<<
 *     return super_ind
 * 
 */
  __pyx_v_super_ind = ((__pyx_v_ind_x + (__pyx_v_ind_y * __pyx_v_nx)) + ((__pyx_v_ind_z * __pyx_v_nx) * __pyx_v_ny));

  /* "chromo/fields.pyx":2402
 *     """
 *     cdef long super_ind = ind_x + ind_y * nx + ind_z * nx * ny
 *     return super_ind             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_super_ind;
  goto __pyx_L0;

  /* "chromo/fields.pyx":2379
 * 
 * 
 * cdef long inds_to_super_ind(             # <<<<<<<<<<<<<<
 *     long ind_x, long ind_y, long ind_z, long nx, long ny
 * ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("chromo.fields.inds_to_super_ind", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":2405
 * 
 * 
 * cpdef long[:] super_ind_to_inds(long super_ind, long nx, long ny):             # <<<<<<<<<<<<<<
 *     """Calculate the three-dimensional indices from a super-index.
 * 
 */

static PyObject *__pyx_pw_6chromo_6fields_1super_ind_to_inds(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static __Pyx_memviewslice __pyx_f_6chromo_6fields_super_ind_to_inds(long __pyx_v_super_ind, long __pyx_v_nx, long __pyx_v_ny, CYTHON_UNUSED int __pyx_skip_dispatch) {
  __Pyx_memviewslice __pyx_v_xyz_inds = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_r = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_memviewslice __pyx_t_4 = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("super_ind_to_inds", 0);
  __Pyx_TraceCall("super_ind_to_inds", __pyx_f[0], 2405, 0, __PYX_ERR(0, 2405, __pyx_L1_error));

  /* "chromo/fields.pyx":2427
 *         Indices of bin in x, y, and z directions
 *     """
 *     cdef long[:] xyz_inds = np.zeros(3, dtype=int)             # <<<<<<<<<<<<<<
 *     xyz_inds[2] = np.floor(super_ind / (nx * ny))
 *     xyz_inds[1] = np.floor((super_ind - xyz_inds[2] * nx * ny) / nx)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 2427, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__12, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_t_3, PyBUF_WRITABLE); if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(0, 2427, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_xyz_inds = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "chromo/fields.pyx":2428
 *     """
 *     cdef long[:] xyz_inds = np.zeros(3, dtype=int)
 *     xyz_inds[2] = np.floor(super_ind / (nx * ny))             # <<<<<<<<<<<<<<
 *     xyz_inds[1] = np.floor((super_ind - xyz_inds[2] * nx * ny) / nx)
 *     xyz_inds[0] = super_ind - (xyz_inds[2] * (nx * ny) + xyz_inds[1] * nx)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_floor); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = (__pyx_v_nx * __pyx_v_ny);
  if (unlikely(__pyx_t_5 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 2428, __pyx_L1_error)
  }
  else if (sizeof(long) == sizeof(long) && (!(((long)-1) > 0)) && unlikely(__pyx_t_5 == (long)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_super_ind))) {
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    __PYX_ERR(0, 2428, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_From_long(__Pyx_div_long(__pyx_v_super_ind, __pyx_t_5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_6, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_t_3); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2428, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = 2;
  __pyx_t_8 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_v_xyz_inds.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_v_xyz_inds.shape[0])) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 2428, __pyx_L1_error)
  }
  *((long *) ( /* dim=0 */ (__pyx_v_xyz_inds.data + __pyx_t_7 * __pyx_v_xyz_inds.strides[0]) )) = __pyx_t_5;

  /* "chromo/fields.pyx":2429
 *     cdef long[:] xyz_inds = np.zeros(3, dtype=int)
 *     xyz_inds[2] = np.floor(super_ind / (nx * ny))
 *     xyz_inds[1] = np.floor((super_ind - xyz_inds[2] * nx * ny) / nx)             # <<<<<<<<<<<<<<
 *     xyz_inds[0] = super_ind - (xyz_inds[2] * (nx * ny) + xyz_inds[1] * nx)
 *     return xyz_inds
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_floor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = 2;
  __pyx_t_8 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_v_xyz_inds.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_v_xyz_inds.shape[0])) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 2429, __pyx_L1_error)
  }
  __pyx_t_5 = (__pyx_v_super_ind - (((*((long *) ( /* dim=0 */ (__pyx_v_xyz_inds.data + __pyx_t_7 * __pyx_v_xyz_inds.strides[0]) ))) * __pyx_v_nx) * __pyx_v_ny));
  if (unlikely(__pyx_v_nx == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 2429, __pyx_L1_error)
  }
  else if (sizeof(long) == sizeof(long) && (!(((long)-1) > 0)) && unlikely(__pyx_v_nx == (long)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_t_5))) {
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    __PYX_ERR(0, 2429, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_long(__Pyx_div_long(__pyx_t_5, __pyx_v_nx)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_t_3); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2429, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = 1;
  __pyx_t_8 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_v_xyz_inds.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_v_xyz_inds.shape[0])) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 2429, __pyx_L1_error)
  }
  *((long *) ( /* dim=0 */ (__pyx_v_xyz_inds.data + __pyx_t_7 * __pyx_v_xyz_inds.strides[0]) )) = __pyx_t_5;

  /* "chromo/fields.pyx":2430
 *     xyz_inds[2] = np.floor(super_ind / (nx * ny))
 *     xyz_inds[1] = np.floor((super_ind - xyz_inds[2] * nx * ny) / nx)
 *     xyz_inds[0] = super_ind - (xyz_inds[2] * (nx * ny) + xyz_inds[1] * nx)             # <<<<<<<<<<<<<<
 *     return xyz_inds
 * 
 */
  __pyx_t_7 = 2;
  __pyx_t_8 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_v_xyz_inds.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_v_xyz_inds.shape[0])) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 2430, __pyx_L1_error)
  }
  __pyx_t_9 = 1;
  __pyx_t_8 = -1;
  if (__pyx_t_9 < 0) {
    __pyx_t_9 += __pyx_v_xyz_inds.shape[0];
    if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_9 >= __pyx_v_xyz_inds.shape[0])) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 2430, __pyx_L1_error)
  }
  __pyx_t_10 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_10 < 0) {
    __pyx_t_10 += __pyx_v_xyz_inds.shape[0];
    if (unlikely(__pyx_t_10 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_10 >= __pyx_v_xyz_inds.shape[0])) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 2430, __pyx_L1_error)
  }
  *((long *) ( /* dim=0 */ (__pyx_v_xyz_inds.data + __pyx_t_10 * __pyx_v_xyz_inds.strides[0]) )) = (__pyx_v_super_ind - (((*((long *) ( /* dim=0 */ (__pyx_v_xyz_inds.data + __pyx_t_7 * __pyx_v_xyz_inds.strides[0]) ))) * (__pyx_v_nx * __pyx_v_ny)) + ((*((long *) ( /* dim=0 */ (__pyx_v_xyz_inds.data + __pyx_t_9 * __pyx_v_xyz_inds.strides[0]) ))) * __pyx_v_nx)));

  /* "chromo/fields.pyx":2431
 *     xyz_inds[1] = np.floor((super_ind - xyz_inds[2] * nx * ny) / nx)
 *     xyz_inds[0] = super_ind - (xyz_inds[2] * (nx * ny) + xyz_inds[1] * nx)
 *     return xyz_inds             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __PYX_INC_MEMVIEW(&__pyx_v_xyz_inds, 0);
  __pyx_r = __pyx_v_xyz_inds;
  goto __pyx_L0;

  /* "chromo/fields.pyx":2405
 * 
 * 
 * cpdef long[:] super_ind_to_inds(long super_ind, long nx, long ny):             # <<<<<<<<<<<<<<
 *     """Calculate the three-dimensional indices from a super-index.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __PYX_XDEC_MEMVIEW(&__pyx_t_4, 1);
  __Pyx_XDECREF(__pyx_t_6);
  __pyx_r.data = NULL;
  __pyx_r.memview = NULL;
  __Pyx_AddTraceback("chromo.fields.super_ind_to_inds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  if (unlikely(!__pyx_r.memview)) {
    PyErr_SetString(PyExc_TypeError, "Memoryview return value is not initialized");
  }
  __pyx_L2:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_xyz_inds, 1);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_1super_ind_to_inds(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6chromo_6fields_super_ind_to_inds[] = "Calculate the three-dimensional indices from a super-index.\n    \n    Notes\n    -----\n    Given the super-index of a voxel and the number of voxels in the x and y\n    directions, calculate the three-dimensional indices of the voxel.\n\n    Parameters\n    ----------\n    super_ind : long\n        Super-index of a voxel\n    nx : long\n        Number of bins in the x direction\n    ny : long\n        Number of bins in the y direction\n\n    Returns\n    -------\n    long[:]\n        Indices of bin in x, y, and z directions\n    ";
static PyObject *__pyx_pw_6chromo_6fields_1super_ind_to_inds(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_super_ind;
  long __pyx_v_nx;
  long __pyx_v_ny;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("super_ind_to_inds (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_super_ind,&__pyx_n_s_nx,&__pyx_n_s_ny,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_super_ind)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("super_ind_to_inds", 1, 3, 3, 1); __PYX_ERR(0, 2405, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ny)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("super_ind_to_inds", 1, 3, 3, 2); __PYX_ERR(0, 2405, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "super_ind_to_inds") < 0)) __PYX_ERR(0, 2405, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_super_ind = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_super_ind == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2405, __pyx_L3_error)
    __pyx_v_nx = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v_nx == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2405, __pyx_L3_error)
    __pyx_v_ny = __Pyx_PyInt_As_long(values[2]); if (unlikely((__pyx_v_ny == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2405, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("super_ind_to_inds", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2405, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chromo.fields.super_ind_to_inds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6chromo_6fields_super_ind_to_inds(__pyx_self, __pyx_v_super_ind, __pyx_v_nx, __pyx_v_ny);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_super_ind_to_inds(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_super_ind, long __pyx_v_nx, long __pyx_v_ny) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("super_ind_to_inds", 0);
  __Pyx_TraceCall("super_ind_to_inds (wrapper)", __pyx_f[0], 2405, 0, __PYX_ERR(0, 2405, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6chromo_6fields_super_ind_to_inds(__pyx_v_super_ind, __pyx_v_nx, __pyx_v_ny, 0); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(0, 2405, __pyx_L1_error)
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_t_1, 1, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chromo.fields.super_ind_to_inds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":2434
 * 
 * 
 * cpdef dict assign_beads_to_bins(             # <<<<<<<<<<<<<<
 *     double[:, ::1] r_poly, long n_inds, long nx, long ny, long nz,
 *     double x_width, double y_width, double z_width
 */

static PyObject *__pyx_pw_6chromo_6fields_3assign_beads_to_bins(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6chromo_6fields_assign_beads_to_bins(__Pyx_memviewslice __pyx_v_r_poly, long __pyx_v_n_inds, long __pyx_v_nx, long __pyx_v_ny, long __pyx_v_nz, double __pyx_v_x_width, double __pyx_v_y_width, double __pyx_v_z_width, CYTHON_UNUSED int __pyx_skip_dispatch) {
  long __pyx_v_i;
  long __pyx_v_index_x;
  long __pyx_v_index_y;
  long __pyx_v_index_z;
  long __pyx_v_n_bins;
  PyObject *__pyx_v_bin_map = 0;
  __Pyx_memviewslice __pyx_v_x_poly_box = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_y_poly_box = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_z_poly_box = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_v_x_poly_box_minus;
  double __pyx_v_y_poly_box_minus;
  double __pyx_v_z_poly_box_minus;
  double __pyx_v_dx;
  double __pyx_v_dy;
  double __pyx_v_dz;
  long __pyx_v_index_x0y0z0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_memviewslice __pyx_t_2 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_3 = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_t_4;
  long __pyx_t_5;
  long __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  double __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_beads_to_bins", 0);
  __Pyx_TraceCall("assign_beads_to_bins", __pyx_f[0], 2434, 0, __PYX_ERR(0, 2434, __pyx_L1_error));

  /* "chromo/fields.pyx":2466
 *     """
 *     cdef long i, index_x, index_y, index_z, n_bins
 *     cdef dict bin_map = {}             # <<<<<<<<<<<<<<
 *     cdef double[:] r_i, x_poly_box, y_poly_box, z_poly_box
 *     cdef double x_poly_box_minus, y_poly_box_minus, z_poly_box_minus
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bin_map = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "chromo/fields.pyx":2471
 *     cdef double dx, dy, dz
 * 
 *     x_poly_box = r_poly[:, 0].copy()             # <<<<<<<<<<<<<<
 *     y_poly_box = r_poly[:, 1].copy()
 *     z_poly_box = r_poly[:, 2].copy()
 */
  __pyx_t_2.data = __pyx_v_r_poly.data;
  __pyx_t_2.memview = __pyx_v_r_poly.memview;
  __PYX_INC_MEMVIEW(&__pyx_t_2, 0);
  __pyx_t_2.shape[0] = __pyx_v_r_poly.shape[0];
__pyx_t_2.strides[0] = __pyx_v_r_poly.strides[0];
    __pyx_t_2.suboffsets[0] = -1;

{
    Py_ssize_t __pyx_tmp_idx = 0;
        Py_ssize_t __pyx_tmp_shape = __pyx_v_r_poly.shape[1];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_r_poly.strides[1];
        if (__pyx_tmp_idx < 0)
            __pyx_tmp_idx += __pyx_tmp_shape;
        if (unlikely(!__Pyx_is_valid_index(__pyx_tmp_idx, __pyx_tmp_shape))) {
            PyErr_SetString(PyExc_IndexError,
                            "Index out of bounds (axis 1)");
            __PYX_ERR(0, 2471, __pyx_L1_error)
        }
        __pyx_t_2.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_3 = __pyx_memoryview_copy_slice_dc_double_c(__pyx_t_2); if (unlikely(!__pyx_t_3.memview)) __PYX_ERR(0, 2471, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_t_2, 1);
  __pyx_t_2.memview = NULL;
  __pyx_t_2.data = NULL;
  __pyx_v_x_poly_box = __pyx_t_3;
  __pyx_t_3.memview = NULL;
  __pyx_t_3.data = NULL;

  /* "chromo/fields.pyx":2472
 * 
 *     x_poly_box = r_poly[:, 0].copy()
 *     y_poly_box = r_poly[:, 1].copy()             # <<<<<<<<<<<<<<
 *     z_poly_box = r_poly[:, 2].copy()
 * 
 */
  __pyx_t_2.data = __pyx_v_r_poly.data;
  __pyx_t_2.memview = __pyx_v_r_poly.memview;
  __PYX_INC_MEMVIEW(&__pyx_t_2, 0);
  __pyx_t_2.shape[0] = __pyx_v_r_poly.shape[0];
__pyx_t_2.strides[0] = __pyx_v_r_poly.strides[0];
    __pyx_t_2.suboffsets[0] = -1;

{
    Py_ssize_t __pyx_tmp_idx = 1;
        Py_ssize_t __pyx_tmp_shape = __pyx_v_r_poly.shape[1];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_r_poly.strides[1];
        if (__pyx_tmp_idx < 0)
            __pyx_tmp_idx += __pyx_tmp_shape;
        if (unlikely(!__Pyx_is_valid_index(__pyx_tmp_idx, __pyx_tmp_shape))) {
            PyErr_SetString(PyExc_IndexError,
                            "Index out of bounds (axis 1)");
            __PYX_ERR(0, 2472, __pyx_L1_error)
        }
        __pyx_t_2.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_3 = __pyx_memoryview_copy_slice_dc_double_c(__pyx_t_2); if (unlikely(!__pyx_t_3.memview)) __PYX_ERR(0, 2472, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_t_2, 1);
  __pyx_t_2.memview = NULL;
  __pyx_t_2.data = NULL;
  __pyx_v_y_poly_box = __pyx_t_3;
  __pyx_t_3.memview = NULL;
  __pyx_t_3.data = NULL;

  /* "chromo/fields.pyx":2473
 *     x_poly_box = r_poly[:, 0].copy()
 *     y_poly_box = r_poly[:, 1].copy()
 *     z_poly_box = r_poly[:, 2].copy()             # <<<<<<<<<<<<<<
 * 
 *     dx = x_width / nx
 */
  __pyx_t_2.data = __pyx_v_r_poly.data;
  __pyx_t_2.memview = __pyx_v_r_poly.memview;
  __PYX_INC_MEMVIEW(&__pyx_t_2, 0);
  __pyx_t_2.shape[0] = __pyx_v_r_poly.shape[0];
__pyx_t_2.strides[0] = __pyx_v_r_poly.strides[0];
    __pyx_t_2.suboffsets[0] = -1;

{
    Py_ssize_t __pyx_tmp_idx = 2;
        Py_ssize_t __pyx_tmp_shape = __pyx_v_r_poly.shape[1];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_r_poly.strides[1];
        if (__pyx_tmp_idx < 0)
            __pyx_tmp_idx += __pyx_tmp_shape;
        if (unlikely(!__Pyx_is_valid_index(__pyx_tmp_idx, __pyx_tmp_shape))) {
            PyErr_SetString(PyExc_IndexError,
                            "Index out of bounds (axis 1)");
            __PYX_ERR(0, 2473, __pyx_L1_error)
        }
        __pyx_t_2.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_3 = __pyx_memoryview_copy_slice_dc_double_c(__pyx_t_2); if (unlikely(!__pyx_t_3.memview)) __PYX_ERR(0, 2473, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_t_2, 1);
  __pyx_t_2.memview = NULL;
  __pyx_t_2.data = NULL;
  __pyx_v_z_poly_box = __pyx_t_3;
  __pyx_t_3.memview = NULL;
  __pyx_t_3.data = NULL;

  /* "chromo/fields.pyx":2475
 *     z_poly_box = r_poly[:, 2].copy()
 * 
 *     dx = x_width / nx             # <<<<<<<<<<<<<<
 *     dy = y_width / ny
 *     dz = z_width / nz
 */
  if (unlikely(__pyx_v_nx == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 2475, __pyx_L1_error)
  }
  __pyx_v_dx = (__pyx_v_x_width / __pyx_v_nx);

  /* "chromo/fields.pyx":2476
 * 
 *     dx = x_width / nx
 *     dy = y_width / ny             # <<<<<<<<<<<<<<
 *     dz = z_width / nz
 * 
 */
  if (unlikely(__pyx_v_ny == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 2476, __pyx_L1_error)
  }
  __pyx_v_dy = (__pyx_v_y_width / __pyx_v_ny);

  /* "chromo/fields.pyx":2477
 *     dx = x_width / nx
 *     dy = y_width / ny
 *     dz = z_width / nz             # <<<<<<<<<<<<<<
 * 
 *     n_bins = nx * ny * nz
 */
  if (unlikely(__pyx_v_nz == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 2477, __pyx_L1_error)
  }
  __pyx_v_dz = (__pyx_v_z_width / __pyx_v_nz);

  /* "chromo/fields.pyx":2479
 *     dz = z_width / nz
 * 
 *     n_bins = nx * ny * nz             # <<<<<<<<<<<<<<
 * 
 *     for i in range(n_bins):
 */
  __pyx_v_n_bins = ((__pyx_v_nx * __pyx_v_ny) * __pyx_v_nz);

  /* "chromo/fields.pyx":2481
 *     n_bins = nx * ny * nz
 * 
 *     for i in range(n_bins):             # <<<<<<<<<<<<<<
 *         bin_map[i] = []
 * 
 */
  __pyx_t_4 = __pyx_v_n_bins;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "chromo/fields.pyx":2482
 * 
 *     for i in range(n_bins):
 *         bin_map[i] = []             # <<<<<<<<<<<<<<
 * 
 *     for i in range(n_inds):
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2482, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2482, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (unlikely(PyDict_SetItem(__pyx_v_bin_map, __pyx_t_7, __pyx_t_1) < 0)) __PYX_ERR(0, 2482, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "chromo/fields.pyx":2484
 *         bin_map[i] = []
 * 
 *     for i in range(n_inds):             # <<<<<<<<<<<<<<
 *         x_poly_box_minus = floor((r_poly[i, 0] - 0.5 * dx) / x_width)
 *         x_poly_box[i] -= 0.5 * dx + x_width * x_poly_box_minus
 */
  __pyx_t_4 = __pyx_v_n_inds;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "chromo/fields.pyx":2485
 * 
 *     for i in range(n_inds):
 *         x_poly_box_minus = floor((r_poly[i, 0] - 0.5 * dx) / x_width)             # <<<<<<<<<<<<<<
 *         x_poly_box[i] -= 0.5 * dx + x_width * x_poly_box_minus
 *         y_poly_box_minus = floor((r_poly[i, 1] - 0.5 * dy) / y_width)
 */
    __pyx_t_8 = __pyx_v_i;
    __pyx_t_9 = 0;
    __pyx_t_10 = -1;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_r_poly.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_10 = 0;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_r_poly.shape[0])) __pyx_t_10 = 0;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_r_poly.shape[1];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 1;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_r_poly.shape[1])) __pyx_t_10 = 1;
    if (unlikely(__pyx_t_10 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_10);
      __PYX_ERR(0, 2485, __pyx_L1_error)
    }
    __pyx_t_11 = ((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_r_poly.data + __pyx_t_8 * __pyx_v_r_poly.strides[0]) )) + __pyx_t_9)) ))) - (0.5 * __pyx_v_dx));
    if (unlikely(__pyx_v_x_width == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 2485, __pyx_L1_error)
    }
    __pyx_v_x_poly_box_minus = floor((__pyx_t_11 / __pyx_v_x_width));

    /* "chromo/fields.pyx":2486
 *     for i in range(n_inds):
 *         x_poly_box_minus = floor((r_poly[i, 0] - 0.5 * dx) / x_width)
 *         x_poly_box[i] -= 0.5 * dx + x_width * x_poly_box_minus             # <<<<<<<<<<<<<<
 *         y_poly_box_minus = floor((r_poly[i, 1] - 0.5 * dy) / y_width)
 *         y_poly_box[i] -= 0.5 * dy + y_width * y_poly_box_minus
 */
    __pyx_t_9 = __pyx_v_i;
    __pyx_t_10 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_x_poly_box.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_x_poly_box.shape[0])) __pyx_t_10 = 0;
    if (unlikely(__pyx_t_10 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_10);
      __PYX_ERR(0, 2486, __pyx_L1_error)
    }
    *((double *) ( /* dim=0 */ (__pyx_v_x_poly_box.data + __pyx_t_9 * __pyx_v_x_poly_box.strides[0]) )) -= ((0.5 * __pyx_v_dx) + (__pyx_v_x_width * __pyx_v_x_poly_box_minus));

    /* "chromo/fields.pyx":2487
 *         x_poly_box_minus = floor((r_poly[i, 0] - 0.5 * dx) / x_width)
 *         x_poly_box[i] -= 0.5 * dx + x_width * x_poly_box_minus
 *         y_poly_box_minus = floor((r_poly[i, 1] - 0.5 * dy) / y_width)             # <<<<<<<<<<<<<<
 *         y_poly_box[i] -= 0.5 * dy + y_width * y_poly_box_minus
 *         z_poly_box_minus = floor((r_poly[i, 2] - 0.5 * dz) / z_width)
 */
    __pyx_t_9 = __pyx_v_i;
    __pyx_t_8 = 1;
    __pyx_t_10 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_r_poly.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_r_poly.shape[0])) __pyx_t_10 = 0;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_r_poly.shape[1];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_10 = 1;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_r_poly.shape[1])) __pyx_t_10 = 1;
    if (unlikely(__pyx_t_10 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_10);
      __PYX_ERR(0, 2487, __pyx_L1_error)
    }
    __pyx_t_11 = ((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_r_poly.data + __pyx_t_9 * __pyx_v_r_poly.strides[0]) )) + __pyx_t_8)) ))) - (0.5 * __pyx_v_dy));
    if (unlikely(__pyx_v_y_width == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 2487, __pyx_L1_error)
    }
    __pyx_v_y_poly_box_minus = floor((__pyx_t_11 / __pyx_v_y_width));

    /* "chromo/fields.pyx":2488
 *         x_poly_box[i] -= 0.5 * dx + x_width * x_poly_box_minus
 *         y_poly_box_minus = floor((r_poly[i, 1] - 0.5 * dy) / y_width)
 *         y_poly_box[i] -= 0.5 * dy + y_width * y_poly_box_minus             # <<<<<<<<<<<<<<
 *         z_poly_box_minus = floor((r_poly[i, 2] - 0.5 * dz) / z_width)
 *         z_poly_box[i] -= 0.5 * dz + z_width * z_poly_box_minus
 */
    __pyx_t_8 = __pyx_v_i;
    __pyx_t_10 = -1;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_y_poly_box.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_10 = 0;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_y_poly_box.shape[0])) __pyx_t_10 = 0;
    if (unlikely(__pyx_t_10 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_10);
      __PYX_ERR(0, 2488, __pyx_L1_error)
    }
    *((double *) ( /* dim=0 */ (__pyx_v_y_poly_box.data + __pyx_t_8 * __pyx_v_y_poly_box.strides[0]) )) -= ((0.5 * __pyx_v_dy) + (__pyx_v_y_width * __pyx_v_y_poly_box_minus));

    /* "chromo/fields.pyx":2489
 *         y_poly_box_minus = floor((r_poly[i, 1] - 0.5 * dy) / y_width)
 *         y_poly_box[i] -= 0.5 * dy + y_width * y_poly_box_minus
 *         z_poly_box_minus = floor((r_poly[i, 2] - 0.5 * dz) / z_width)             # <<<<<<<<<<<<<<
 *         z_poly_box[i] -= 0.5 * dz + z_width * z_poly_box_minus
 * 
 */
    __pyx_t_8 = __pyx_v_i;
    __pyx_t_9 = 2;
    __pyx_t_10 = -1;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_v_r_poly.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_10 = 0;
    } else if (unlikely(__pyx_t_8 >= __pyx_v_r_poly.shape[0])) __pyx_t_10 = 0;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_r_poly.shape[1];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 1;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_r_poly.shape[1])) __pyx_t_10 = 1;
    if (unlikely(__pyx_t_10 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_10);
      __PYX_ERR(0, 2489, __pyx_L1_error)
    }
    __pyx_t_11 = ((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_r_poly.data + __pyx_t_8 * __pyx_v_r_poly.strides[0]) )) + __pyx_t_9)) ))) - (0.5 * __pyx_v_dz));
    if (unlikely(__pyx_v_z_width == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 2489, __pyx_L1_error)
    }
    __pyx_v_z_poly_box_minus = floor((__pyx_t_11 / __pyx_v_z_width));

    /* "chromo/fields.pyx":2490
 *         y_poly_box[i] -= 0.5 * dy + y_width * y_poly_box_minus
 *         z_poly_box_minus = floor((r_poly[i, 2] - 0.5 * dz) / z_width)
 *         z_poly_box[i] -= 0.5 * dz + z_width * z_poly_box_minus             # <<<<<<<<<<<<<<
 * 
 *     for i in range(n_inds):
 */
    __pyx_t_9 = __pyx_v_i;
    __pyx_t_10 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_z_poly_box.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_z_poly_box.shape[0])) __pyx_t_10 = 0;
    if (unlikely(__pyx_t_10 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_10);
      __PYX_ERR(0, 2490, __pyx_L1_error)
    }
    *((double *) ( /* dim=0 */ (__pyx_v_z_poly_box.data + __pyx_t_9 * __pyx_v_z_poly_box.strides[0]) )) -= ((0.5 * __pyx_v_dz) + (__pyx_v_z_width * __pyx_v_z_poly_box_minus));
  }

  /* "chromo/fields.pyx":2492
 *         z_poly_box[i] -= 0.5 * dz + z_width * z_poly_box_minus
 * 
 *     for i in range(n_inds):             # <<<<<<<<<<<<<<
 *         index_x = <long>floor(nx * x_poly_box[i] / x_width)
 *         index_y = <long>floor(ny * y_poly_box[i] / y_width)
 */
  __pyx_t_4 = __pyx_v_n_inds;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "chromo/fields.pyx":2493
 * 
 *     for i in range(n_inds):
 *         index_x = <long>floor(nx * x_poly_box[i] / x_width)             # <<<<<<<<<<<<<<
 *         index_y = <long>floor(ny * y_poly_box[i] / y_width)
 *         index_z = <long>floor(nz * z_poly_box[i] / z_width)
 */
    __pyx_t_9 = __pyx_v_i;
    __pyx_t_10 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_x_poly_box.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_x_poly_box.shape[0])) __pyx_t_10 = 0;
    if (unlikely(__pyx_t_10 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_10);
      __PYX_ERR(0, 2493, __pyx_L1_error)
    }
    __pyx_t_11 = (__pyx_v_nx * (*((double *) ( /* dim=0 */ (__pyx_v_x_poly_box.data + __pyx_t_9 * __pyx_v_x_poly_box.strides[0]) ))));
    if (unlikely(__pyx_v_x_width == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 2493, __pyx_L1_error)
    }
    __pyx_v_index_x = ((long)floor((__pyx_t_11 / __pyx_v_x_width)));

    /* "chromo/fields.pyx":2494
 *     for i in range(n_inds):
 *         index_x = <long>floor(nx * x_poly_box[i] / x_width)
 *         index_y = <long>floor(ny * y_poly_box[i] / y_width)             # <<<<<<<<<<<<<<
 *         index_z = <long>floor(nz * z_poly_box[i] / z_width)
 *         index_x0y0z0 = index_x + nx * index_y + nx * ny * index_z
 */
    __pyx_t_9 = __pyx_v_i;
    __pyx_t_10 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_y_poly_box.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_y_poly_box.shape[0])) __pyx_t_10 = 0;
    if (unlikely(__pyx_t_10 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_10);
      __PYX_ERR(0, 2494, __pyx_L1_error)
    }
    __pyx_t_11 = (__pyx_v_ny * (*((double *) ( /* dim=0 */ (__pyx_v_y_poly_box.data + __pyx_t_9 * __pyx_v_y_poly_box.strides[0]) ))));
    if (unlikely(__pyx_v_y_width == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 2494, __pyx_L1_error)
    }
    __pyx_v_index_y = ((long)floor((__pyx_t_11 / __pyx_v_y_width)));

    /* "chromo/fields.pyx":2495
 *         index_x = <long>floor(nx * x_poly_box[i] / x_width)
 *         index_y = <long>floor(ny * y_poly_box[i] / y_width)
 *         index_z = <long>floor(nz * z_poly_box[i] / z_width)             # <<<<<<<<<<<<<<
 *         index_x0y0z0 = index_x + nx * index_y + nx * ny * index_z
 * 
 */
    __pyx_t_9 = __pyx_v_i;
    __pyx_t_10 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_z_poly_box.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_z_poly_box.shape[0])) __pyx_t_10 = 0;
    if (unlikely(__pyx_t_10 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_10);
      __PYX_ERR(0, 2495, __pyx_L1_error)
    }
    __pyx_t_11 = (__pyx_v_nz * (*((double *) ( /* dim=0 */ (__pyx_v_z_poly_box.data + __pyx_t_9 * __pyx_v_z_poly_box.strides[0]) ))));
    if (unlikely(__pyx_v_z_width == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 2495, __pyx_L1_error)
    }
    __pyx_v_index_z = ((long)floor((__pyx_t_11 / __pyx_v_z_width)));

    /* "chromo/fields.pyx":2496
 *         index_y = <long>floor(ny * y_poly_box[i] / y_width)
 *         index_z = <long>floor(nz * z_poly_box[i] / z_width)
 *         index_x0y0z0 = index_x + nx * index_y + nx * ny * index_z             # <<<<<<<<<<<<<<
 * 
 *         bin_map[index_x0y0z0].append(i)
 */
    __pyx_v_index_x0y0z0 = ((__pyx_v_index_x + (__pyx_v_nx * __pyx_v_index_y)) + ((__pyx_v_nx * __pyx_v_ny) * __pyx_v_index_z));

    /* "chromo/fields.pyx":2498
 *         index_x0y0z0 = index_x + nx * index_y + nx * ny * index_z
 * 
 *         bin_map[index_x0y0z0].append(i)             # <<<<<<<<<<<<<<
 * 
 *     return bin_map
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_index_x0y0z0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyDict_GetItem(__pyx_v_bin_map, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_12 = __Pyx_PyObject_Append(__pyx_t_7, __pyx_t_1); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 2498, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "chromo/fields.pyx":2500
 *         bin_map[index_x0y0z0].append(i)
 * 
 *     return bin_map             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_bin_map);
  __pyx_r = __pyx_v_bin_map;
  goto __pyx_L0;

  /* "chromo/fields.pyx":2434
 * 
 * 
 * cpdef dict assign_beads_to_bins(             # <<<<<<<<<<<<<<
 *     double[:, ::1] r_poly, long n_inds, long nx, long ny, long nz,
 *     double x_width, double y_width, double z_width
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_2, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_3, 1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("chromo.fields.assign_beads_to_bins", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_bin_map);
  __PYX_XDEC_MEMVIEW(&__pyx_v_x_poly_box, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_y_poly_box, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_z_poly_box, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_3assign_beads_to_bins(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6chromo_6fields_2assign_beads_to_bins[] = "Create a mapping from bin indices to list of associated beads.\n    \n    Parameters\n    ----------\n    r_poly : double[:, ::1]\n        Array of bead positions\n    n_inds : long\n        Number of beads - must be equivalent in length to r_poly\n    nx : long\n        Number of bins in the x direction\n    ny : long\n        Number of bins in the y direction\n    nz : long\n        Number of bins in the z direction\n    x_width : double\n        Widths of space in the x direction\n    y_width : double\n        Widths of space in the y direction\n    z_width : double\n        Widths of space in the z direction\n\n    Returns\n    -------\n    dict\n        Mapping of bin indices to associated beads, where keys indicate\n        the bin indices and values are lists of beads contained in the bin\n    ";
static PyObject *__pyx_pw_6chromo_6fields_3assign_beads_to_bins(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_r_poly = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_v_n_inds;
  long __pyx_v_nx;
  long __pyx_v_ny;
  long __pyx_v_nz;
  double __pyx_v_x_width;
  double __pyx_v_y_width;
  double __pyx_v_z_width;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("assign_beads_to_bins (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_r_poly,&__pyx_n_s_n_inds,&__pyx_n_s_nx,&__pyx_n_s_ny,&__pyx_n_s_nz,&__pyx_n_s_x_width,&__pyx_n_s_y_width,&__pyx_n_s_z_width,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r_poly)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_inds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("assign_beads_to_bins", 1, 8, 8, 1); __PYX_ERR(0, 2434, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("assign_beads_to_bins", 1, 8, 8, 2); __PYX_ERR(0, 2434, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ny)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("assign_beads_to_bins", 1, 8, 8, 3); __PYX_ERR(0, 2434, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("assign_beads_to_bins", 1, 8, 8, 4); __PYX_ERR(0, 2434, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("assign_beads_to_bins", 1, 8, 8, 5); __PYX_ERR(0, 2434, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("assign_beads_to_bins", 1, 8, 8, 6); __PYX_ERR(0, 2434, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("assign_beads_to_bins", 1, 8, 8, 7); __PYX_ERR(0, 2434, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "assign_beads_to_bins") < 0)) __PYX_ERR(0, 2434, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_r_poly = __Pyx_PyObject_to_MemoryviewSlice_d_dc_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_r_poly.memview)) __PYX_ERR(0, 2435, __pyx_L3_error)
    __pyx_v_n_inds = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v_n_inds == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2435, __pyx_L3_error)
    __pyx_v_nx = __Pyx_PyInt_As_long(values[2]); if (unlikely((__pyx_v_nx == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2435, __pyx_L3_error)
    __pyx_v_ny = __Pyx_PyInt_As_long(values[3]); if (unlikely((__pyx_v_ny == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2435, __pyx_L3_error)
    __pyx_v_nz = __Pyx_PyInt_As_long(values[4]); if (unlikely((__pyx_v_nz == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2435, __pyx_L3_error)
    __pyx_v_x_width = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_x_width == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2436, __pyx_L3_error)
    __pyx_v_y_width = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_y_width == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2436, __pyx_L3_error)
    __pyx_v_z_width = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_z_width == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2436, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("assign_beads_to_bins", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2434, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chromo.fields.assign_beads_to_bins", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6chromo_6fields_2assign_beads_to_bins(__pyx_self, __pyx_v_r_poly, __pyx_v_n_inds, __pyx_v_nx, __pyx_v_ny, __pyx_v_nz, __pyx_v_x_width, __pyx_v_y_width, __pyx_v_z_width);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_2assign_beads_to_bins(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_r_poly, long __pyx_v_n_inds, long __pyx_v_nx, long __pyx_v_ny, long __pyx_v_nz, double __pyx_v_x_width, double __pyx_v_y_width, double __pyx_v_z_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_beads_to_bins", 0);
  __Pyx_TraceCall("assign_beads_to_bins (wrapper)", __pyx_f[0], 2434, 0, __PYX_ERR(0, 2434, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_r_poly.memview)) { __Pyx_RaiseUnboundLocalError("r_poly"); __PYX_ERR(0, 2434, __pyx_L1_error) }
  __pyx_t_1 = __pyx_f_6chromo_6fields_assign_beads_to_bins(__pyx_v_r_poly, __pyx_v_n_inds, __pyx_v_nx, __pyx_v_ny, __pyx_v_nz, __pyx_v_x_width, __pyx_v_y_width, __pyx_v_z_width, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.assign_beads_to_bins", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_r_poly, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":2503
 * 
 * 
 * cpdef dict get_neighboring_bins(long nx, long ny, long nz):             # <<<<<<<<<<<<<<
 *     """Generate map of bin indices to all immediately neighboring bin indices.
 * 
 */

static PyObject *__pyx_pw_6chromo_6fields_5get_neighboring_bins(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6chromo_6fields_get_neighboring_bins(long __pyx_v_nx, long __pyx_v_ny, long __pyx_v_nz, CYTHON_UNUSED int __pyx_skip_dispatch) {
  long __pyx_v_num_bins;
  long __pyx_v_i;
  PyObject *__pyx_v_neighbors = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  long __pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  __Pyx_memviewslice __pyx_t_5 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_neighboring_bins", 0);
  __Pyx_TraceCall("get_neighboring_bins", __pyx_f[0], 2503, 0, __PYX_ERR(0, 2503, __pyx_L1_error));

  /* "chromo/fields.pyx":2524
 *     cdef dict neighbors
 * 
 *     num_bins = nx * ny * nz             # <<<<<<<<<<<<<<
 *     neighbors = {}
 *     for i in range(num_bins):
 */
  __pyx_v_num_bins = ((__pyx_v_nx * __pyx_v_ny) * __pyx_v_nz);

  /* "chromo/fields.pyx":2525
 * 
 *     num_bins = nx * ny * nz
 *     neighbors = {}             # <<<<<<<<<<<<<<
 *     for i in range(num_bins):
 *         neighbors[i] = get_neighbors_at_ind(nx, ny, nz, i, num_bins)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_neighbors = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "chromo/fields.pyx":2526
 *     num_bins = nx * ny * nz
 *     neighbors = {}
 *     for i in range(num_bins):             # <<<<<<<<<<<<<<
 *         neighbors[i] = get_neighbors_at_ind(nx, ny, nz, i, num_bins)
 *     return neighbors
 */
  __pyx_t_2 = __pyx_v_num_bins;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "chromo/fields.pyx":2527
 *     neighbors = {}
 *     for i in range(num_bins):
 *         neighbors[i] = get_neighbors_at_ind(nx, ny, nz, i, num_bins)             # <<<<<<<<<<<<<<
 *     return neighbors
 * 
 */
    __pyx_t_5 = __pyx_f_6chromo_6fields_get_neighbors_at_ind(__pyx_v_nx, __pyx_v_ny, __pyx_v_nz, __pyx_v_i, __pyx_v_num_bins, 0); if (unlikely(!__pyx_t_5.memview)) __PYX_ERR(0, 2527, __pyx_L1_error)
    __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_t_5, 1, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __PYX_XDEC_MEMVIEW(&__pyx_t_5, 1);
    __pyx_t_5.memview = NULL;
    __pyx_t_5.data = NULL;
    __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(PyDict_SetItem(__pyx_v_neighbors, __pyx_t_6, __pyx_t_1) < 0)) __PYX_ERR(0, 2527, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "chromo/fields.pyx":2528
 *     for i in range(num_bins):
 *         neighbors[i] = get_neighbors_at_ind(nx, ny, nz, i, num_bins)
 *     return neighbors             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_neighbors);
  __pyx_r = __pyx_v_neighbors;
  goto __pyx_L0;

  /* "chromo/fields.pyx":2503
 * 
 * 
 * cpdef dict get_neighboring_bins(long nx, long ny, long nz):             # <<<<<<<<<<<<<<
 *     """Generate map of bin indices to all immediately neighboring bin indices.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_5, 1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("chromo.fields.get_neighboring_bins", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_neighbors);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_5get_neighboring_bins(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6chromo_6fields_4get_neighboring_bins[] = "Generate map of bin indices to all immediately neighboring bin indices.\n\n    Parameters\n    ----------\n    nx : long\n        Number of bins in the x direction\n    ny : long\n        Number of bins in the y direction\n    nz : long\n        Number of bins in the z direction\n\n    Returns\n    -------\n    Dict[long, np.ndarray(ndims=1, dtype=long)]\n        Dictionary where keys indicate bin indices and values provide a list of\n        all immediately neighboring bin indices, including the key.\n    ";
static PyObject *__pyx_pw_6chromo_6fields_5get_neighboring_bins(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_nx;
  long __pyx_v_ny;
  long __pyx_v_nz;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_neighboring_bins (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nx,&__pyx_n_s_ny,&__pyx_n_s_nz,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ny)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_neighboring_bins", 1, 3, 3, 1); __PYX_ERR(0, 2503, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_neighboring_bins", 1, 3, 3, 2); __PYX_ERR(0, 2503, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_neighboring_bins") < 0)) __PYX_ERR(0, 2503, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_nx = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_nx == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2503, __pyx_L3_error)
    __pyx_v_ny = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v_ny == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2503, __pyx_L3_error)
    __pyx_v_nz = __Pyx_PyInt_As_long(values[2]); if (unlikely((__pyx_v_nz == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2503, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_neighboring_bins", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2503, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chromo.fields.get_neighboring_bins", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6chromo_6fields_4get_neighboring_bins(__pyx_self, __pyx_v_nx, __pyx_v_ny, __pyx_v_nz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_4get_neighboring_bins(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_nx, long __pyx_v_ny, long __pyx_v_nz) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_neighboring_bins", 0);
  __Pyx_TraceCall("get_neighboring_bins (wrapper)", __pyx_f[0], 2503, 0, __PYX_ERR(0, 2503, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6chromo_6fields_get_neighboring_bins(__pyx_v_nx, __pyx_v_ny, __pyx_v_nz, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.get_neighboring_bins", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":2531
 * 
 * 
 * cpdef long[:] get_neighbors_at_ind(             # <<<<<<<<<<<<<<
 *     long nx, long ny, long nz, long ind, long num_bins
 * ):
 */

static PyObject *__pyx_pw_6chromo_6fields_7get_neighbors_at_ind(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static __Pyx_memviewslice __pyx_f_6chromo_6fields_get_neighbors_at_ind(long __pyx_v_nx, long __pyx_v_ny, long __pyx_v_nz, long __pyx_v_ind, CYTHON_UNUSED long __pyx_v_num_bins, CYTHON_UNUSED int __pyx_skip_dispatch) {
  __Pyx_memviewslice __pyx_v_nbr_bins_flat = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_xyz = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_v_z = NULL;
  PyObject *__pyx_v_nbr_bins = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_dx = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_dy = NULL;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_dz = NULL;
  __Pyx_memviewslice __pyx_r = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_memviewslice __pyx_t_4 = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_t_5;
  long __pyx_t_6;
  long __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  long __pyx_t_11;
  long __pyx_t_12;
  long __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_neighbors_at_ind", 0);
  __Pyx_TraceCall("get_neighbors_at_ind", __pyx_f[0], 2531, 0, __PYX_ERR(0, 2531, __pyx_L1_error));

  /* "chromo/fields.pyx":2555
 *         the bin specified by `ind`
 *     """
 *     cdef long[:] nbr_bins_flat = np.zeros(27, dtype=int)             # <<<<<<<<<<<<<<
 *     xyz = super_ind_to_inds(ind, nx, ny)
 *     x = xyz[0]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 2555, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__19, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_t_3, PyBUF_WRITABLE); if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(0, 2555, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_nbr_bins_flat = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "chromo/fields.pyx":2556
 *     """
 *     cdef long[:] nbr_bins_flat = np.zeros(27, dtype=int)
 *     xyz = super_ind_to_inds(ind, nx, ny)             # <<<<<<<<<<<<<<
 *     x = xyz[0]
 *     y = xyz[1]
 */
  __pyx_t_4 = __pyx_f_6chromo_6fields_super_ind_to_inds(__pyx_v_ind, __pyx_v_nx, __pyx_v_ny, 0); if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(0, 2556, __pyx_L1_error)
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_t_4, 1, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __PYX_XDEC_MEMVIEW(&__pyx_t_4, 1);
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;
  __pyx_v_xyz = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "chromo/fields.pyx":2557
 *     cdef long[:] nbr_bins_flat = np.zeros(27, dtype=int)
 *     xyz = super_ind_to_inds(ind, nx, ny)
 *     x = xyz[0]             # <<<<<<<<<<<<<<
 *     y = xyz[1]
 *     z = xyz[2]
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_xyz, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_x = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "chromo/fields.pyx":2558
 *     xyz = super_ind_to_inds(ind, nx, ny)
 *     x = xyz[0]
 *     y = xyz[1]             # <<<<<<<<<<<<<<
 *     z = xyz[2]
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_xyz, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_y = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "chromo/fields.pyx":2559
 *     x = xyz[0]
 *     y = xyz[1]
 *     z = xyz[2]             # <<<<<<<<<<<<<<
 * 
 *     nbr_bins = np.zeros((3, 3, 3), dtype=int)
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_xyz, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_z = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "chromo/fields.pyx":2561
 *     z = xyz[2]
 * 
 *     nbr_bins = np.zeros((3, 3, 3), dtype=int)             # <<<<<<<<<<<<<<
 *     for i, dx in enumerate(range(-1, 2)):
 *         for j, dy in enumerate(range(-1, 2)):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 2561, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__21, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_nbr_bins = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "chromo/fields.pyx":2562
 * 
 *     nbr_bins = np.zeros((3, 3, 3), dtype=int)
 *     for i, dx in enumerate(range(-1, 2)):             # <<<<<<<<<<<<<<
 *         for j, dy in enumerate(range(-1, 2)):
 *             for k, dz in enumerate(range(-1, 2)):
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  for (__pyx_t_5 = -1L; __pyx_t_5 < 2; __pyx_t_5+=1) {
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_dx, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "chromo/fields.pyx":2563
 *     nbr_bins = np.zeros((3, 3, 3), dtype=int)
 *     for i, dx in enumerate(range(-1, 2)):
 *         for j, dy in enumerate(range(-1, 2)):             # <<<<<<<<<<<<<<
 *             for k, dz in enumerate(range(-1, 2)):
 *                 nbr_bins[i, j, k] = inds_to_super_ind(
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_3 = __pyx_int_0;
    for (__pyx_t_6 = -1L; __pyx_t_6 < 2; __pyx_t_6+=1) {
      __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2563, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_dy, __pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_3);
      __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2563, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3);
      __pyx_t_3 = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "chromo/fields.pyx":2564
 *     for i, dx in enumerate(range(-1, 2)):
 *         for j, dy in enumerate(range(-1, 2)):
 *             for k, dz in enumerate(range(-1, 2)):             # <<<<<<<<<<<<<<
 *                 nbr_bins[i, j, k] = inds_to_super_ind(
 *                     (x + dx) % nx, (y + dy) % ny, (z + dz) % nz, nx, ny
 */
      __Pyx_INCREF(__pyx_int_0);
      __pyx_t_1 = __pyx_int_0;
      for (__pyx_t_7 = -1L; __pyx_t_7 < 2; __pyx_t_7+=1) {
        __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2564, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_XDECREF_SET(__pyx_v_dz, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_1);
        __pyx_t_8 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2564, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_1);
        __pyx_t_1 = __pyx_t_8;
        __pyx_t_8 = 0;

        /* "chromo/fields.pyx":2566
 *             for k, dz in enumerate(range(-1, 2)):
 *                 nbr_bins[i, j, k] = inds_to_super_ind(
 *                     (x + dx) % nx, (y + dy) % ny, (z + dz) % nz, nx, ny             # <<<<<<<<<<<<<<
 *                 )
 *     nbr_bins_flat = nbr_bins.flatten()
 */
        __pyx_t_8 = PyNumber_Add(__pyx_v_x, __pyx_v_dx); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2566, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = __Pyx_PyInt_From_long(__pyx_v_nx); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2566, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = PyNumber_Remainder(__pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2566, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_11 = __Pyx_PyInt_As_long(__pyx_t_10); if (unlikely((__pyx_t_11 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2566, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = PyNumber_Add(__pyx_v_y, __pyx_v_dy); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2566, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_9 = __Pyx_PyInt_From_long(__pyx_v_ny); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2566, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = PyNumber_Remainder(__pyx_t_10, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2566, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_12 = __Pyx_PyInt_As_long(__pyx_t_8); if (unlikely((__pyx_t_12 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2566, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyNumber_Add(__pyx_v_z, __pyx_v_dz); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2566, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = __Pyx_PyInt_From_long(__pyx_v_nz); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2566, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = PyNumber_Remainder(__pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2566, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_13 = __Pyx_PyInt_As_long(__pyx_t_10); if (unlikely((__pyx_t_13 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2566, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "chromo/fields.pyx":2565
 *         for j, dy in enumerate(range(-1, 2)):
 *             for k, dz in enumerate(range(-1, 2)):
 *                 nbr_bins[i, j, k] = inds_to_super_ind(             # <<<<<<<<<<<<<<
 *                     (x + dx) % nx, (y + dy) % ny, (z + dz) % nz, nx, ny
 *                 )
 */
        __pyx_t_10 = __Pyx_PyInt_From_long(__pyx_f_6chromo_6fields_inds_to_super_ind(__pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_v_nx, __pyx_v_ny)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2565, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2565, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_i);
        __Pyx_INCREF(__pyx_v_j);
        __Pyx_GIVEREF(__pyx_v_j);
        PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_j);
        __Pyx_INCREF(__pyx_v_k);
        __Pyx_GIVEREF(__pyx_v_k);
        PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_v_k);
        if (unlikely(PyObject_SetItem(__pyx_v_nbr_bins, __pyx_t_9, __pyx_t_10) < 0)) __PYX_ERR(0, 2565, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":2568
 *                     (x + dx) % nx, (y + dy) % ny, (z + dz) % nz, nx, ny
 *                 )
 *     nbr_bins_flat = nbr_bins.flatten()             # <<<<<<<<<<<<<<
 *     return nbr_bins_flat
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_nbr_bins, __pyx_n_s_flatten); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_t_2, PyBUF_WRITABLE); if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(0, 2568, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_nbr_bins_flat, 1);
  __pyx_v_nbr_bins_flat = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "chromo/fields.pyx":2569
 *                 )
 *     nbr_bins_flat = nbr_bins.flatten()
 *     return nbr_bins_flat             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __PYX_INC_MEMVIEW(&__pyx_v_nbr_bins_flat, 0);
  __pyx_r = __pyx_v_nbr_bins_flat;
  goto __pyx_L0;

  /* "chromo/fields.pyx":2531
 * 
 * 
 * cpdef long[:] get_neighbors_at_ind(             # <<<<<<<<<<<<<<
 *     long nx, long ny, long nz, long ind, long num_bins
 * ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __PYX_XDEC_MEMVIEW(&__pyx_t_4, 1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __pyx_r.data = NULL;
  __pyx_r.memview = NULL;
  __Pyx_AddTraceback("chromo.fields.get_neighbors_at_ind", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  if (unlikely(!__pyx_r.memview)) {
    PyErr_SetString(PyExc_TypeError, "Memoryview return value is not initialized");
  }
  __pyx_L2:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_nbr_bins_flat, 1);
  __Pyx_XDECREF(__pyx_v_xyz);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_z);
  __Pyx_XDECREF(__pyx_v_nbr_bins);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_dx);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_dy);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_dz);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_7get_neighbors_at_ind(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6chromo_6fields_6get_neighbors_at_ind[] = "Identify the bin indices immediately neighboring a specific bin index.\n\n    Parameters\n    ----------\n    nx : long\n        Number of bins in the x direction\n    ny : long\n        Number of bins in the y direction\n    nz : long\n        Number of bins in the z direction\n    ind : long\n        Super-index of bin for which neighbors are desired\n    num_bins : long\n        Number of bins contained  in the field\n    \n    Returns\n    -------\n    np.ndarray(ndims=1, dtype=long)\n        Array of nine bin super-indices immediately neighboring and containing\n        the bin specified by `ind`\n    ";
static PyObject *__pyx_pw_6chromo_6fields_7get_neighbors_at_ind(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_nx;
  long __pyx_v_ny;
  long __pyx_v_nz;
  long __pyx_v_ind;
  long __pyx_v_num_bins;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_neighbors_at_ind (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nx,&__pyx_n_s_ny,&__pyx_n_s_nz,&__pyx_n_s_ind,&__pyx_n_s_num_bins,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ny)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_neighbors_at_ind", 1, 5, 5, 1); __PYX_ERR(0, 2531, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_neighbors_at_ind", 1, 5, 5, 2); __PYX_ERR(0, 2531, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ind)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_neighbors_at_ind", 1, 5, 5, 3); __PYX_ERR(0, 2531, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_bins)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_neighbors_at_ind", 1, 5, 5, 4); __PYX_ERR(0, 2531, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_neighbors_at_ind") < 0)) __PYX_ERR(0, 2531, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_nx = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_nx == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2532, __pyx_L3_error)
    __pyx_v_ny = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v_ny == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2532, __pyx_L3_error)
    __pyx_v_nz = __Pyx_PyInt_As_long(values[2]); if (unlikely((__pyx_v_nz == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2532, __pyx_L3_error)
    __pyx_v_ind = __Pyx_PyInt_As_long(values[3]); if (unlikely((__pyx_v_ind == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2532, __pyx_L3_error)
    __pyx_v_num_bins = __Pyx_PyInt_As_long(values[4]); if (unlikely((__pyx_v_num_bins == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2532, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_neighbors_at_ind", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2531, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chromo.fields.get_neighbors_at_ind", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6chromo_6fields_6get_neighbors_at_ind(__pyx_self, __pyx_v_nx, __pyx_v_ny, __pyx_v_nz, __pyx_v_ind, __pyx_v_num_bins);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_6get_neighbors_at_ind(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_nx, long __pyx_v_ny, long __pyx_v_nz, long __pyx_v_ind, long __pyx_v_num_bins) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_neighbors_at_ind", 0);
  __Pyx_TraceCall("get_neighbors_at_ind (wrapper)", __pyx_f[0], 2531, 0, __PYX_ERR(0, 2531, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6chromo_6fields_get_neighbors_at_ind(__pyx_v_nx, __pyx_v_ny, __pyx_v_nz, __pyx_v_ind, __pyx_v_num_bins, 0); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(0, 2531, __pyx_L1_error)
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_t_1, 1, (PyObject *(*)(char *)) __pyx_memview_get_long, (int (*)(char *, PyObject *)) __pyx_memview_set_long, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chromo.fields.get_neighbors_at_ind", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chromo/fields.pyx":2572
 * 
 * 
 * cpdef dict get_blocks(long num_beads, long block_size):             # <<<<<<<<<<<<<<
 *     """Coarse grain individual beads into blocks of linearly adjacent beads.
 * 
 */

static PyObject *__pyx_pw_6chromo_6fields_9get_blocks(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6chromo_6fields_get_blocks(long __pyx_v_num_beads, long __pyx_v_block_size, CYTHON_UNUSED int __pyx_skip_dispatch) {
  long __pyx_v_i;
  PyObject *__pyx_v_blocks = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  long __pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_blocks", 0);
  __Pyx_TraceCall("get_blocks", __pyx_f[0], 2572, 0, __PYX_ERR(0, 2572, __pyx_L1_error));

  /* "chromo/fields.pyx":2594
 *     cdef dict blocks
 * 
 *     blocks = {}             # <<<<<<<<<<<<<<
 *     for i in range(num_beads):
 *         blocks[i] = int(floor(i / block_size))
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_blocks = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "chromo/fields.pyx":2595
 * 
 *     blocks = {}
 *     for i in range(num_beads):             # <<<<<<<<<<<<<<
 *         blocks[i] = int(floor(i / block_size))
 * 
 */
  __pyx_t_2 = __pyx_v_num_beads;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "chromo/fields.pyx":2596
 *     blocks = {}
 *     for i in range(num_beads):
 *         blocks[i] = int(floor(i / block_size))             # <<<<<<<<<<<<<<
 * 
 *     return blocks
 */
    if (unlikely(__pyx_v_block_size == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 2596, __pyx_L1_error)
    }
    else if (sizeof(long) == sizeof(long) && (!(((long)-1) > 0)) && unlikely(__pyx_v_block_size == (long)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_i))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(0, 2596, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyInt_FromDouble(floor(__Pyx_div_long(__pyx_v_i, __pyx_v_block_size))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(PyDict_SetItem(__pyx_v_blocks, __pyx_t_5, __pyx_t_1) < 0)) __PYX_ERR(0, 2596, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "chromo/fields.pyx":2598
 *         blocks[i] = int(floor(i / block_size))
 * 
 *     return blocks             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_blocks);
  __pyx_r = __pyx_v_blocks;
  goto __pyx_L0;

  /* "chromo/fields.pyx":2572
 * 
 * 
 * cpdef dict get_blocks(long num_beads, long block_size):             # <<<<<<<<<<<<<<
 *     """Coarse grain individual beads into blocks of linearly adjacent beads.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("chromo.fields.get_blocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_blocks);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_9get_blocks(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6chromo_6fields_8get_blocks[] = "Coarse grain individual beads into blocks of linearly adjacent beads.\n    \n    Notes\n    -----\n    Used to improve computational tractibility of contact map generation.\n\n    Parameters\n    ----------\n    num_beads : long\n        Number of beads in full-resolution polymer\n    block_size : long\n        Number of beads to place into a single block in course-grained model\n\n    Return\n    ------\n    dict[long, long]\n        Mapping of each bead ID to its block.\n    ";
static PyObject *__pyx_pw_6chromo_6fields_9get_blocks(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_num_beads;
  long __pyx_v_block_size;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_blocks (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_num_beads,&__pyx_n_s_block_size,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_beads)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_block_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_blocks", 1, 2, 2, 1); __PYX_ERR(0, 2572, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_blocks") < 0)) __PYX_ERR(0, 2572, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_num_beads = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_num_beads == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2572, __pyx_L3_error)
    __pyx_v_block_size = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v_block_size == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2572, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_blocks", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2572, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chromo.fields.get_blocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6chromo_6fields_8get_blocks(__pyx_self, __pyx_v_num_beads, __pyx_v_block_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_8get_blocks(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_num_beads, long __pyx_v_block_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_blocks", 0);
  __Pyx_TraceCall("get_blocks (wrapper)", __pyx_f[0], 2572, 0, __PYX_ERR(0, 2572, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6chromo_6fields_get_blocks(__pyx_v_num_beads, __pyx_v_block_size, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chromo.fields.get_blocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_FieldBase(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_11__pyx_unpickle_FieldBase(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6chromo_6fields_11__pyx_unpickle_FieldBase = {"__pyx_unpickle_FieldBase", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6chromo_6fields_11__pyx_unpickle_FieldBase, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6chromo_6fields_11__pyx_unpickle_FieldBase(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_FieldBase (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_FieldBase", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_FieldBase", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_FieldBase") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_FieldBase", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chromo.fields.__pyx_unpickle_FieldBase", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6chromo_6fields_10__pyx_unpickle_FieldBase(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_10__pyx_unpickle_FieldBase(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__22)
  __Pyx_RefNannySetupContext("__pyx_unpickle_FieldBase", 0);
  __Pyx_TraceCall("__pyx_unpickle_FieldBase", __pyx_f[2], 1, 0, __PYX_ERR(2, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x20a4277, 0xc3c0ef8, 0xb4ec7da):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x20a4277, 0xc3c0ef8, 0xb4ec7da) = (binders, confine_length, confine_type, n_polymers, polymers))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__23, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x20a4277, 0xc3c0ef8, 0xb4ec7da):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x20a4277, 0xc3c0ef8, 0xb4ec7da) = (binders, confine_length, confine_type, n_polymers, polymers))" % __pyx_checksum)
 *     __pyx_result = FieldBase.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x20a4277, 0xc3c0ef8, 0xb4ec7da):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x20a4277, 0xc3c0ef8, 0xb4ec7da) = (binders, confine_length, confine_type, n_polymers, polymers))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = FieldBase.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x20a4277, 0xc3c0ef8, 0xb4ec7da):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x20a4277, 0xc3c0ef8, 0xb4ec7da) = (binders, confine_length, confine_type, n_polymers, polymers))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x20a4277, 0xc3c0ef8, 0xb4ec7da) = (binders, confine_length, confine_type, n_polymers, polymers))" % __pyx_checksum)
 *     __pyx_result = FieldBase.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_FieldBase__set_state(<FieldBase> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6chromo_6fields_FieldBase), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x20a4277, 0xc3c0ef8, 0xb4ec7da) = (binders, confine_length, confine_type, n_polymers, polymers))" % __pyx_checksum)
 *     __pyx_result = FieldBase.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_FieldBase__set_state(<FieldBase> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = FieldBase.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_FieldBase__set_state(<FieldBase> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_FieldBase__set_state(FieldBase __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_6chromo_6fields___pyx_unpickle_FieldBase__set_state(((struct __pyx_obj_6chromo_6fields_FieldBase *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x20a4277, 0xc3c0ef8, 0xb4ec7da) = (binders, confine_length, confine_type, n_polymers, polymers))" % __pyx_checksum)
 *     __pyx_result = FieldBase.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_FieldBase__set_state(<FieldBase> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_FieldBase__set_state(<FieldBase> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_FieldBase__set_state(FieldBase __pyx_result, tuple __pyx_state):
 *     __pyx_result.binders = __pyx_state[0]; __pyx_result.confine_length = __pyx_state[1]; __pyx_result.confine_type = __pyx_state[2]; __pyx_result.n_polymers = __pyx_state[3]; __pyx_result.polymers = __pyx_state[4]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_FieldBase(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("chromo.fields.__pyx_unpickle_FieldBase", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_FieldBase__set_state(<FieldBase> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_FieldBase__set_state(FieldBase __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.binders = __pyx_state[0]; __pyx_result.confine_length = __pyx_state[1]; __pyx_result.confine_type = __pyx_state[2]; __pyx_result.n_polymers = __pyx_state[3]; __pyx_result.polymers = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_6chromo_6fields___pyx_unpickle_FieldBase__set_state(struct __pyx_obj_6chromo_6fields_FieldBase *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  long __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_FieldBase__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_FieldBase__set_state", __pyx_f[2], 11, 0, __PYX_ERR(2, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_FieldBase__set_state(FieldBase __pyx_result, tuple __pyx_state):
 *     __pyx_result.binders = __pyx_state[0]; __pyx_result.confine_length = __pyx_state[1]; __pyx_result.confine_type = __pyx_state[2]; __pyx_result.n_polymers = __pyx_state[3]; __pyx_result.polymers = __pyx_state[4]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->binders);
  __Pyx_DECREF(__pyx_v___pyx_result->binders);
  __pyx_v___pyx_result->binders = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->confine_length = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->confine_type);
  __Pyx_DECREF(__pyx_v___pyx_result->confine_type);
  __pyx_v___pyx_result->confine_type = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_3 == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->n_polymers = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->polymers);
  __Pyx_DECREF(__pyx_v___pyx_result->polymers);
  __pyx_v___pyx_result->polymers = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_FieldBase__set_state(FieldBase __pyx_result, tuple __pyx_state):
 *     __pyx_result.binders = __pyx_state[0]; __pyx_result.confine_length = __pyx_state[1]; __pyx_result.confine_type = __pyx_state[2]; __pyx_result.n_polymers = __pyx_state[3]; __pyx_result.polymers = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_6 = ((__pyx_t_5 > 5) != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_4 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_6 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_7 = (__pyx_t_6 != 0);
  __pyx_t_4 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_4) {

    /* "(tree fragment)":14
 *     __pyx_result.binders = __pyx_state[0]; __pyx_result.confine_length = __pyx_state[1]; __pyx_result.confine_type = __pyx_state[2]; __pyx_result.n_polymers = __pyx_state[3]; __pyx_result.polymers = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[5])             # <<<<<<<<<<<<<<
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_update); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_1 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_8);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_FieldBase__set_state(FieldBase __pyx_result, tuple __pyx_state):
 *     __pyx_result.binders = __pyx_state[0]; __pyx_result.confine_length = __pyx_state[1]; __pyx_result.confine_type = __pyx_state[2]; __pyx_result.n_polymers = __pyx_state[3]; __pyx_result.polymers = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_FieldBase__set_state(<FieldBase> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_FieldBase__set_state(FieldBase __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.binders = __pyx_state[0]; __pyx_result.confine_length = __pyx_state[1]; __pyx_result.confine_type = __pyx_state[2]; __pyx_result.n_polymers = __pyx_state[3]; __pyx_result.polymers = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("chromo.fields.__pyx_unpickle_FieldBase__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_NullField(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_13__pyx_unpickle_NullField(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6chromo_6fields_13__pyx_unpickle_NullField = {"__pyx_unpickle_NullField", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6chromo_6fields_13__pyx_unpickle_NullField, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6chromo_6fields_13__pyx_unpickle_NullField(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_NullField (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_NullField", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_NullField", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_NullField") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_NullField", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chromo.fields.__pyx_unpickle_NullField", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6chromo_6fields_12__pyx_unpickle_NullField(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_12__pyx_unpickle_NullField(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__24)
  __Pyx_RefNannySetupContext("__pyx_unpickle_NullField", 0);
  __Pyx_TraceCall("__pyx_unpickle_NullField", __pyx_f[2], 1, 0, __PYX_ERR(2, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x20a4277, 0xc3c0ef8, 0xb4ec7da):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x20a4277, 0xc3c0ef8, 0xb4ec7da) = (binders, confine_length, confine_type, n_polymers, polymers))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__23, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x20a4277, 0xc3c0ef8, 0xb4ec7da):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x20a4277, 0xc3c0ef8, 0xb4ec7da) = (binders, confine_length, confine_type, n_polymers, polymers))" % __pyx_checksum)
 *     __pyx_result = NullField.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x20a4277, 0xc3c0ef8, 0xb4ec7da):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x20a4277, 0xc3c0ef8, 0xb4ec7da) = (binders, confine_length, confine_type, n_polymers, polymers))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = NullField.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x20a4277, 0xc3c0ef8, 0xb4ec7da):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x20a4277, 0xc3c0ef8, 0xb4ec7da) = (binders, confine_length, confine_type, n_polymers, polymers))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x20a4277, 0xc3c0ef8, 0xb4ec7da) = (binders, confine_length, confine_type, n_polymers, polymers))" % __pyx_checksum)
 *     __pyx_result = NullField.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_NullField__set_state(<NullField> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6chromo_6fields_NullField), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x20a4277, 0xc3c0ef8, 0xb4ec7da) = (binders, confine_length, confine_type, n_polymers, polymers))" % __pyx_checksum)
 *     __pyx_result = NullField.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_NullField__set_state(<NullField> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = NullField.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_NullField__set_state(<NullField> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_NullField__set_state(NullField __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_6chromo_6fields___pyx_unpickle_NullField__set_state(((struct __pyx_obj_6chromo_6fields_NullField *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x20a4277, 0xc3c0ef8, 0xb4ec7da) = (binders, confine_length, confine_type, n_polymers, polymers))" % __pyx_checksum)
 *     __pyx_result = NullField.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_NullField__set_state(<NullField> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_NullField__set_state(<NullField> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_NullField__set_state(NullField __pyx_result, tuple __pyx_state):
 *     __pyx_result.binders = __pyx_state[0]; __pyx_result.confine_length = __pyx_state[1]; __pyx_result.confine_type = __pyx_state[2]; __pyx_result.n_polymers = __pyx_state[3]; __pyx_result.polymers = __pyx_state[4]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_NullField(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("chromo.fields.__pyx_unpickle_NullField", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_NullField__set_state(<NullField> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_NullField__set_state(NullField __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.binders = __pyx_state[0]; __pyx_result.confine_length = __pyx_state[1]; __pyx_result.confine_type = __pyx_state[2]; __pyx_result.n_polymers = __pyx_state[3]; __pyx_result.polymers = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_6chromo_6fields___pyx_unpickle_NullField__set_state(struct __pyx_obj_6chromo_6fields_NullField *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  long __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_NullField__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_NullField__set_state", __pyx_f[2], 11, 0, __PYX_ERR(2, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_NullField__set_state(NullField __pyx_result, tuple __pyx_state):
 *     __pyx_result.binders = __pyx_state[0]; __pyx_result.confine_length = __pyx_state[1]; __pyx_result.confine_type = __pyx_state[2]; __pyx_result.n_polymers = __pyx_state[3]; __pyx_result.polymers = __pyx_state[4]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.binders);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.binders);
  __pyx_v___pyx_result->__pyx_base.binders = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.confine_length = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.confine_type);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.confine_type);
  __pyx_v___pyx_result->__pyx_base.confine_type = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_3 == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.n_polymers = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.polymers);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.polymers);
  __pyx_v___pyx_result->__pyx_base.polymers = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_NullField__set_state(NullField __pyx_result, tuple __pyx_state):
 *     __pyx_result.binders = __pyx_state[0]; __pyx_result.confine_length = __pyx_state[1]; __pyx_result.confine_type = __pyx_state[2]; __pyx_result.n_polymers = __pyx_state[3]; __pyx_result.polymers = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_6 = ((__pyx_t_5 > 5) != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_4 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_6 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_7 = (__pyx_t_6 != 0);
  __pyx_t_4 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_4) {

    /* "(tree fragment)":14
 *     __pyx_result.binders = __pyx_state[0]; __pyx_result.confine_length = __pyx_state[1]; __pyx_result.confine_type = __pyx_state[2]; __pyx_result.n_polymers = __pyx_state[3]; __pyx_result.polymers = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[5])             # <<<<<<<<<<<<<<
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_update); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_1 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_8);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_NullField__set_state(NullField __pyx_result, tuple __pyx_state):
 *     __pyx_result.binders = __pyx_state[0]; __pyx_result.confine_length = __pyx_state[1]; __pyx_result.confine_type = __pyx_state[2]; __pyx_result.n_polymers = __pyx_state[3]; __pyx_result.polymers = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_NullField__set_state(<NullField> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_NullField__set_state(NullField __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.binders = __pyx_state[0]; __pyx_result.confine_length = __pyx_state[1]; __pyx_result.confine_type = __pyx_state[2]; __pyx_result.n_polymers = __pyx_state[3]; __pyx_result.polymers = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("chromo.fields.__pyx_unpickle_NullField__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_UniformDensityField(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6chromo_6fields_15__pyx_unpickle_UniformDensityField(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6chromo_6fields_15__pyx_unpickle_UniformDensityField = {"__pyx_unpickle_UniformDensityField", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6chromo_6fields_15__pyx_unpickle_UniformDensityField, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6chromo_6fields_15__pyx_unpickle_UniformDensityField(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_UniformDensityField (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_UniformDensityField", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_UniformDensityField", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_UniformDensityField") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_UniformDensityField", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chromo.fields.__pyx_unpickle_UniformDensityField", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6chromo_6fields_14__pyx_unpickle_UniformDensityField(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6chromo_6fields_14__pyx_unpickle_UniformDensityField(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__25)
  __Pyx_RefNannySetupContext("__pyx_unpickle_UniformDensityField", 0);
  __Pyx_TraceCall("__pyx_unpickle_UniformDensityField", __pyx_f[2], 1, 0, __PYX_ERR(2, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x0167c6c, 0x562918d, 0x6990e88):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x0167c6c, 0x562918d, 0x6990e88) = (_field_descriptors, access_vols, affected_bins_last_move, assume_fully_accessible, bin_index, binder_dict, binders, chi, confine_length, confine_type, density, density_trial, dict_, doubly_bound, doubly_bound_trial, dx, dxyz, dy, dz, fast_field, half_step_xyz, half_width_xyz, index_xyz, index_xyz_with_trial, inds_xyz_to_super, n_bins, n_points, n_polymers, n_sub_bins_x, n_sub_bins_y, n_sub_bins_z, n_xyz_m1, nbr_inds, nbr_inds_with_trial, num_binders, nx, ny, nz, polymers, sub_bin_width_x, sub_bin_width_y, sub_bin_width_z, sub_bins_to_bins_x, sub_bins_to_bins_y, sub_bins_to_bins_z, sub_bins_to_weights_x, sub_bins_to_weights_y, sub_bins_to_weights_z, vf_limit, vol_bin, weight_xyz, weight_xyz_with_trial, width_xyz, wt_vec, wt_vec_with_trial, x_width, xyz, xyz_with_trial, y_width, z_width))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__26, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x0167c6c, 0x562918d, 0x6990e88):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x0167c6c, 0x562918d, 0x6990e88) = (_field_descriptors, access_vols, affected_bins_last_move, assume_fully_accessible, bin_index, binder_dict, binders, chi, confine_length, confine_type, density, density_trial, dict_, doubly_bound, doubly_bound_trial, dx, dxyz, dy, dz, fast_field, half_step_xyz, half_width_xyz, index_xyz, index_xyz_with_trial, inds_xyz_to_super, n_bins, n_points, n_polymers, n_sub_bins_x, n_sub_bins_y, n_sub_bins_z, n_xyz_m1, nbr_inds, nbr_inds_with_trial, num_binders, nx, ny, nz, polymers, sub_bin_width_x, sub_bin_width_y, sub_bin_width_z, sub_bins_to_bins_x, sub_bins_to_bins_y, sub_bins_to_bins_z, sub_bins_to_weights_x, sub_bins_to_weights_y, sub_bins_to_weights_z, vf_limit, vol_bin, weight_xyz, weight_xyz_with_trial, width_xyz, wt_vec, wt_vec_with_trial, x_width, xyz, xyz_with_trial, y_width, z_width))" % __pyx_checksum)
 *     __pyx_result = UniformDensityField.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x0167c6c, 0x562918d, 0x6990e88):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x0167c6c, 0x562918d, 0x6990e88) = (_field_descriptors, access_vols, affected_bins_last_move, assume_fully_accessible, bin_index, binder_dict, binders, chi, confine_length, confine_type, density, density_trial, dict_, doubly_bound, doubly_bound_trial, dx, dxyz, dy, dz, fast_field, half_step_xyz, half_width_xyz, index_xyz, index_xyz_with_trial, inds_xyz_to_super, n_bins, n_points, n_polymers, n_sub_bins_x, n_sub_bins_y, n_sub_bins_z, n_xyz_m1, nbr_inds, nbr_inds_with_trial, num_binders, nx, ny, nz, polymers, sub_bin_width_x, sub_bin_width_y, sub_bin_width_z, sub_bins_to_bins_x, sub_bins_to_bins_y, sub_bins_to_bins_z, sub_bins_to_weights_x, sub_bins_to_weights_y, sub_bins_to_weights_z, vf_limit, vol_bin, weight_xyz, weight_xyz_with_trial, width_xyz, wt_vec, wt_vec_with_trial, x_width, xyz, xyz_with_trial, y_width, z_width))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = UniformDensityField.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x0167c6c, 0x562918d, 0x6990e88):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x0167c6c, 0x562918d, 0x6990e88) = (_field_descriptors, access_vols, affected_bins_last_move, assume_fully_accessible, bin_index, binder_dict, binders, chi, confine_length, confine_type, density, density_trial, dict_, doubly_bound, doubly_bound_trial, dx, dxyz, dy, dz, fast_field, half_step_xyz, half_width_xyz, index_xyz, index_xyz_with_trial, inds_xyz_to_super, n_bins, n_points, n_polymers, n_sub_bins_x, n_sub_bins_y, n_sub_bins_z, n_xyz_m1, nbr_inds, nbr_inds_with_trial, num_binders, nx, ny, nz, polymers, sub_bin_width_x, sub_bin_width_y, sub_bin_width_z, sub_bins_to_bins_x, sub_bins_to_bins_y, sub_bins_to_bins_z, sub_bins_to_weights_x, sub_bins_to_weights_y, sub_bins_to_weights_z, vf_limit, vol_bin, weight_xyz, weight_xyz_with_trial, width_xyz, wt_vec, wt_vec_with_trial, x_width, xyz, xyz_with_trial, y_width, z_width))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x0167c6c, 0x562918d, 0x6990e88) = (_field_descriptors, access_vols, affected_bins_last_move, assume_fully_accessible, bin_index, binder_dict, binders, chi, confine_length, confine_type, density, density_trial, dict_, doubly_bound, doubly_bound_trial, dx, dxyz, dy, dz, fast_field, half_step_xyz, half_width_xyz, index_xyz, index_xyz_with_trial, inds_xyz_to_super, n_bins, n_points, n_polymers, n_sub_bins_x, n_sub_bins_y, n_sub_bins_z, n_xyz_m1, nbr_inds, nbr_inds_with_trial, num_binders, nx, ny, nz, polymers, sub_bin_width_x, sub_bin_width_y, sub_bin_width_z, sub_bins_to_bins_x, sub_bins_to_bins_y, sub_bins_to_bins_z, sub_bins_to_weights_x, sub_bins_to_weights_y, sub_bins_to_weights_z, vf_limit, vol_bin, weight_xyz, weight_xyz_with_trial, width_xyz, wt_vec, wt_vec_with_trial, x_width, xyz, xyz_with_trial, y_width, z_width))" % __pyx_checksum)
 *     __pyx_result = UniformDensityField.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_UniformDensityField__set_state(<UniformDensityField> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6chromo_6fields_UniformDensityField), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x0167c6c, 0x562918d, 0x6990e88) = (_field_descriptors, access_vols, affected_bins_last_move, assume_fully_accessible, bin_index, binder_dict, binders, chi, confine_length, confine_type, density, density_trial, dict_, doubly_bound, doubly_bound_trial, dx, dxyz, dy, dz, fast_field, half_step_xyz, half_width_xyz, index_xyz, index_xyz_with_trial, inds_xyz_to_super, n_bins, n_points, n_polymers, n_sub_bins_x, n_sub_bins_y, n_sub_bins_z, n_xyz_m1, nbr_inds, nbr_inds_with_trial, num_binders, nx, ny, nz, polymers, sub_bin_width_x, sub_bin_width_y, sub_bin_width_z, sub_bins_to_bins_x, sub_bins_to_bins_y, sub_bins_to_bins_z, sub_bins_to_weights_x, sub_bins_to_weights_y, sub_bins_to_weights_z, vf_limit, vol_bin, weight_xyz, weight_xyz_with_trial, width_xyz, wt_vec, wt_vec_with_trial, x_width, xyz, xyz_with_trial, y_width, z_width))" % __pyx_checksum)
 *     __pyx_result = UniformDensityField.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_UniformDensityField__set_state(<UniformDensityField> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = UniformDensityField.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_UniformDensityField__set_state(<UniformDensityField> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_UniformDensityField__set_state(UniformDensityField __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_6chromo_6fields___pyx_unpickle_UniformDensityField__set_state(((struct __pyx_obj_6chromo_6fields_UniformDensityField *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x0167c6c, 0x562918d, 0x6990e88) = (_field_descriptors, access_vols, affected_bins_last_move, assume_fully_accessible, bin_index, binder_dict, binders, chi, confine_length, confine_type, density, density_trial, dict_, doubly_bound, doubly_bound_trial, dx, dxyz, dy, dz, fast_field, half_step_xyz, half_width_xyz, index_xyz, index_xyz_with_trial, inds_xyz_to_super, n_bins, n_points, n_polymers, n_sub_bins_x, n_sub_bins_y, n_sub_bins_z, n_xyz_m1, nbr_inds, nbr_inds_with_trial, num_binders, nx, ny, nz, polymers, sub_bin_width_x, sub_bin_width_y, sub_bin_width_z, sub_bins_to_bins_x, sub_bins_to_bins_y, sub_bins_to_bins_z, sub_bins_to_weights_x, sub_bins_to_weights_y, sub_bins_to_weights_z, vf_limit, vol_bin, weight_xyz, weight_xyz_with_trial, width_xyz, wt_vec, wt_vec_with_trial, x_width, xyz, xyz_with_trial, y_width, z_width))" % __pyx_checksum)
 *     __pyx_result = UniformDensityField.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_UniformDensityField__set_state(<UniformDensityField> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_UniformDensityField__set_state(<UniformDensityField> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_UniformDensityField__set_state(UniformDensityField __pyx_result, tuple __pyx_state):
 *     __pyx_result._field_descriptors = __pyx_state[0]; __pyx_result.access_vols = __pyx_state[1]; __pyx_result.affected_bins_last_move = __pyx_state[2]; __pyx_result.assume_fully_accessible = __pyx_state[3]; __pyx_result.bin_index = __pyx_state[4]; __pyx_result.binder_dict = __pyx_state[5]; __pyx_result.binders = __pyx_state[6]; __pyx_result.chi = __pyx_state[7]; __pyx_result.confine_length = __pyx_state[8]; __pyx_result.confine_type = __pyx_state[9]; __pyx_result.density = __pyx_state[10]; __pyx_result.density_trial = __pyx_state[11]; __pyx_result.dict_ = __pyx_state[12]; __pyx_result.doubly_bound = __pyx_state[13]; __pyx_result.doubly_bound_trial = __pyx_state[14]; __pyx_result.dx = __pyx_state[15]; __pyx_result.dxyz = __pyx_state[16]; __pyx_result.dy = __pyx_state[17]; __pyx_result.dz = __pyx_state[18]; __pyx_result.fast_field = __pyx_state[19]; __pyx_result.half_step_xyz = __pyx_state[20]; __pyx_result.half_width_xyz = __pyx_state[21]; __pyx_result.index_xyz = __pyx_state[22]; __pyx_result.index_xyz_with_trial = __pyx_state[23]; __pyx_result.inds_xyz_to_super = __pyx_state[24]; __pyx_result.n_bins = __pyx_state[25]; __pyx_result.n_points = __pyx_state[26]; __pyx_result.n_polymers = __pyx_state[27]; __pyx_result.n_sub_bins_x = __pyx_state[28]; __pyx_result.n_sub_bins_y = __pyx_state[29]; __pyx_result.n_sub_bins_z = __pyx_state[30]; __pyx_result.n_xyz_m1 = __pyx_state[31]; __pyx_result.nbr_inds = __pyx_state[32]; __pyx_result.nbr_inds_with_trial = __pyx_state[33]; __pyx_result.num_binders = __pyx_state[34]; __pyx_result.nx = __pyx_state[35]; __pyx_result.ny = __pyx_state[36]; __pyx_result.nz = __pyx_state[37]; __pyx_result.polymers = __pyx_state[38]; __pyx_result.sub_bin_width_x = __pyx_state[39]; __pyx_result.sub_bin_width_y = __pyx_state[40]; __pyx_result.sub_bin_width_z = __pyx_state[41]; __pyx_result.sub_bins_to_bins_x = __pyx_state[42]; __pyx_result.sub_bins_to_bins_y = __pyx_state[43]; __pyx_result.sub_bins_to_bins_z = __pyx_state[44]; __pyx_result.sub_bins_to_weights_x = __pyx_state[45]; __pyx_result.sub_bins_to_weights_y = __pyx_state[46]; __pyx_result.sub_bins_to_weights_z = __pyx_state[47]; __pyx_result.vf_limit = __pyx_state[48]; __pyx_result.vol_bin = __pyx_state[49]; __pyx_result.weight_xyz = __pyx_state[50]; __pyx_result.weight_xyz_with_trial = __pyx_state[51]; __pyx_result.width_xyz = __pyx_state[52]; __pyx_result.wt_vec = __pyx_state[53]; __pyx_result.wt_vec_with_trial = __pyx_state[54]; __pyx_result.x_width = __pyx_state[55]; __pyx_result.xyz = __pyx_state[56]; __pyx_result.xyz_with_trial = __pyx_state[57]; __pyx_result.y_width = __pyx_state[58]; __pyx_result.z_width = __pyx_state[59]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_UniformDensityField(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("chromo.fields.__pyx_unpickle_UniformDensityField", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_UniformDensityField__set_state(<UniformDensityField> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_UniformDensityField__set_state(UniformDensityField __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._field_descriptors = __pyx_state[0]; __pyx_result.access_vols = __pyx_state[1]; __pyx_result.affected_bins_last_move = __pyx_state[2]; __pyx_result.assume_fully_accessible = __pyx_state[3]; __pyx_result.bin_index = __pyx_state[4]; __pyx_result.binder_dict = __pyx_state[5]; __pyx_result.binders = __pyx_state[6]; __pyx_result.chi = __pyx_state[7]; __pyx_result.confine_length = __pyx_state[8]; __pyx_result.confine_type = __pyx_state[9]; __pyx_result.density = __pyx_state[10]; __pyx_result.density_trial = __pyx_state[11]; __pyx_result.dict_ = __pyx_state[12]; __pyx_result.doubly_bound = __pyx_state[13]; __pyx_result.doubly_bound_trial = __pyx_state[14]; __pyx_result.dx = __pyx_state[15]; __pyx_result.dxyz = __pyx_state[16]; __pyx_result.dy = __pyx_state[17]; __pyx_result.dz = __pyx_state[18]; __pyx_result.fast_field = __pyx_state[19]; __pyx_result.half_step_xyz = __pyx_state[20]; __pyx_result.half_width_xyz = __pyx_state[21]; __pyx_result.index_xyz = __pyx_state[22]; __pyx_result.index_xyz_with_trial = __pyx_state[23]; __pyx_result.inds_xyz_to_super = __pyx_state[24]; __pyx_result.n_bins = __pyx_state[25]; __pyx_result.n_points = __pyx_state[26]; __pyx_result.n_polymers = __pyx_state[27]; __pyx_result.n_sub_bins_x = __pyx_state[28]; __pyx_result.n_sub_bins_y = __pyx_state[29]; __pyx_result.n_sub_bins_z = __pyx_state[30]; __pyx_result.n_xyz_m1 = __pyx_state[31]; __pyx_result.nbr_inds = __pyx_state[32]; __pyx_result.nbr_inds_with_trial = __pyx_state[33]; __pyx_result.num_binders = __pyx_state[34]; __pyx_result.nx = __pyx_state[35]; __pyx_result.ny = __pyx_state[36]; __pyx_result.nz = __pyx_state[37]; __pyx_result.polymers = __pyx_state[38]; __pyx_result.sub_bin_width_x = __pyx_state[39]; __pyx_result.sub_bin_width_y = __pyx_state[40]; __pyx_result.sub_bin_width_z = __pyx_state[41]; __pyx_result.sub_bins_to_bins_x = __pyx_state[42]; __pyx_result.sub_bins_to_bins_y = __pyx_state[43]; __pyx_result.sub_bins_to_bins_z = __pyx_state[44]; __pyx_result.sub_bins_to_weights_x = __pyx_state[45]; __pyx_result.sub_bins_to_weights_y = __pyx_state[46]; __pyx_result.sub_bins_to_weights_z = __pyx_state[47]; __pyx_result.vf_limit = __pyx_state[48]; __pyx_result.vol_bin = __pyx_state[49]; __pyx_result.weight_xyz = __pyx_state[50]; __pyx_result.weight_xyz_with_trial = __pyx_state[51]; __pyx_result.width_xyz = __pyx_state[52]; __pyx_result.wt_vec = __pyx_state[53]; __pyx_result.wt_vec_with_trial = __pyx_state[54]; __pyx_result.x_width = __pyx_state[55]; __pyx_result.xyz = __pyx_state[56]; __pyx_result.xyz_with_trial = __pyx_state[57]; __pyx_result.y_width = __pyx_state[58]; __pyx_result.z_width = __pyx_state[59]
 *     if len(__pyx_state) > 60 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_6chromo_6fields___pyx_unpickle_UniformDensityField__set_state(struct __pyx_obj_6chromo_6fields_UniformDensityField *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_memviewslice __pyx_t_2 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_3;
  __Pyx_memviewslice __pyx_t_4 = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_t_5;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_t_9;
  float __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_UniformDensityField__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_UniformDensityField__set_state", __pyx_f[2], 11, 0, __PYX_ERR(2, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_UniformDensityField__set_state(UniformDensityField __pyx_result, tuple __pyx_state):
 *     __pyx_result._field_descriptors = __pyx_state[0]; __pyx_result.access_vols = __pyx_state[1]; __pyx_result.affected_bins_last_move = __pyx_state[2]; __pyx_result.assume_fully_accessible = __pyx_state[3]; __pyx_result.bin_index = __pyx_state[4]; __pyx_result.binder_dict = __pyx_state[5]; __pyx_result.binders = __pyx_state[6]; __pyx_result.chi = __pyx_state[7]; __pyx_result.confine_length = __pyx_state[8]; __pyx_result.confine_type = __pyx_state[9]; __pyx_result.density = __pyx_state[10]; __pyx_result.density_trial = __pyx_state[11]; __pyx_result.dict_ = __pyx_state[12]; __pyx_result.doubly_bound = __pyx_state[13]; __pyx_result.doubly_bound_trial = __pyx_state[14]; __pyx_result.dx = __pyx_state[15]; __pyx_result.dxyz = __pyx_state[16]; __pyx_result.dy = __pyx_state[17]; __pyx_result.dz = __pyx_state[18]; __pyx_result.fast_field = __pyx_state[19]; __pyx_result.half_step_xyz = __pyx_state[20]; __pyx_result.half_width_xyz = __pyx_state[21]; __pyx_result.index_xyz = __pyx_state[22]; __pyx_result.index_xyz_with_trial = __pyx_state[23]; __pyx_result.inds_xyz_to_super = __pyx_state[24]; __pyx_result.n_bins = __pyx_state[25]; __pyx_result.n_points = __pyx_state[26]; __pyx_result.n_polymers = __pyx_state[27]; __pyx_result.n_sub_bins_x = __pyx_state[28]; __pyx_result.n_sub_bins_y = __pyx_state[29]; __pyx_result.n_sub_bins_z = __pyx_state[30]; __pyx_result.n_xyz_m1 = __pyx_state[31]; __pyx_result.nbr_inds = __pyx_state[32]; __pyx_result.nbr_inds_with_trial = __pyx_state[33]; __pyx_result.num_binders = __pyx_state[34]; __pyx_result.nx = __pyx_state[35]; __pyx_result.ny = __pyx_state[36]; __pyx_result.nz = __pyx_state[37]; __pyx_result.polymers = __pyx_state[38]; __pyx_result.sub_bin_width_x = __pyx_state[39]; __pyx_result.sub_bin_width_y = __pyx_state[40]; __pyx_result.sub_bin_width_z = __pyx_state[41]; __pyx_result.sub_bins_to_bins_x = __pyx_state[42]; __pyx_result.sub_bins_to_bins_y = __pyx_state[43]; __pyx_result.sub_bins_to_bins_z = __pyx_state[44]; __pyx_result.sub_bins_to_weights_x = __pyx_state[45]; __pyx_result.sub_bins_to_weights_y = __pyx_state[46]; __pyx_result.sub_bins_to_weights_z = __pyx_state[47]; __pyx_result.vf_limit = __pyx_state[48]; __pyx_result.vol_bin = __pyx_state[49]; __pyx_result.weight_xyz = __pyx_state[50]; __pyx_result.weight_xyz_with_trial = __pyx_state[51]; __pyx_result.width_xyz = __pyx_state[52]; __pyx_result.wt_vec = __pyx_state[53]; __pyx_result.wt_vec_with_trial = __pyx_state[54]; __pyx_result.x_width = __pyx_state[55]; __pyx_result.xyz = __pyx_state[56]; __pyx_result.xyz_with_trial = __pyx_state[57]; __pyx_result.y_width = __pyx_state[58]; __pyx_result.z_width = __pyx_state[59]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 60 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[60])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_field_descriptors);
  __Pyx_DECREF(__pyx_v___pyx_result->_field_descriptors);
  __pyx_v___pyx_result->_field_descriptors = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->access_vols);
  __Pyx_DECREF(__pyx_v___pyx_result->access_vols);
  __pyx_v___pyx_result->access_vols = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_2.memview)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v___pyx_result->affected_bins_last_move, 0);
  __pyx_v___pyx_result->affected_bins_last_move = __pyx_t_2;
  __pyx_t_2.memview = NULL;
  __pyx_t_2.data = NULL;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->assume_fully_accessible = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_long(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v___pyx_result->bin_index, 0);
  __pyx_v___pyx_result->bin_index = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->binder_dict);
  __Pyx_DECREF(__pyx_v___pyx_result->binder_dict);
  __pyx_v___pyx_result->binder_dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.binders);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.binders);
  __pyx_v___pyx_result->__pyx_base.binders = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->chi = __pyx_t_5;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.confine_length = __pyx_t_5;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.confine_type);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.confine_type);
  __pyx_v___pyx_result->__pyx_base.confine_type = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v___pyx_result->density, 0);
  __pyx_v___pyx_result->density = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v___pyx_result->density_trial, 0);
  __pyx_v___pyx_result->density_trial = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->dict_);
  __Pyx_DECREF(__pyx_v___pyx_result->dict_);
  __pyx_v___pyx_result->dict_ = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 13, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_2.memview)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v___pyx_result->doubly_bound, 0);
  __pyx_v___pyx_result->doubly_bound = __pyx_t_2;
  __pyx_t_2.memview = NULL;
  __pyx_t_2.data = NULL;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 14, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_2.memview)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v___pyx_result->doubly_bound_trial, 0);
  __pyx_v___pyx_result->doubly_bound_trial = __pyx_t_2;
  __pyx_t_2.memview = NULL;
  __pyx_t_2.data = NULL;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 15, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->dx = __pyx_t_5;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 16, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v___pyx_result->dxyz, 0);
  __pyx_v___pyx_result->dxyz = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 17, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->dy = __pyx_t_5;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 18, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->dz = __pyx_t_5;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 19, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->fast_field = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 20, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v___pyx_result->half_step_xyz, 0);
  __pyx_v___pyx_result->half_step_xyz = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 21, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v___pyx_result->half_width_xyz, 0);
  __pyx_v___pyx_result->half_width_xyz = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 22, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_2.memview)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v___pyx_result->index_xyz, 0);
  __pyx_v___pyx_result->index_xyz = __pyx_t_2;
  __pyx_t_2.memview = NULL;
  __pyx_t_2.data = NULL;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 23, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_long(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v___pyx_result->index_xyz_with_trial, 0);
  __pyx_v___pyx_result->index_xyz_with_trial = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 24, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_d_d_dc_long(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v___pyx_result->inds_xyz_to_super, 0);
  __pyx_v___pyx_result->inds_xyz_to_super = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 25, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_9 == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->n_bins = __pyx_t_9;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 26, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_9 == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->n_points = __pyx_t_9;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 27, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_9 == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.n_polymers = __pyx_t_9;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 28, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_9 == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->n_sub_bins_x = __pyx_t_9;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 29, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_9 == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->n_sub_bins_y = __pyx_t_9;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 30, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_9 == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->n_sub_bins_z = __pyx_t_9;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 31, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_2.memview)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v___pyx_result->n_xyz_m1, 0);
  __pyx_v___pyx_result->n_xyz_m1 = __pyx_t_2;
  __pyx_t_2.memview = NULL;
  __pyx_t_2.data = NULL;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 32, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_to_MemoryviewSlice_ds_long(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_2.memview)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v___pyx_result->nbr_inds, 0);
  __pyx_v___pyx_result->nbr_inds = __pyx_t_2;
  __pyx_t_2.memview = NULL;
  __pyx_t_2.data = NULL;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 33, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_long(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v___pyx_result->nbr_inds_with_trial, 0);
  __pyx_v___pyx_result->nbr_inds_with_trial = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 34, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_9 == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->num_binders = __pyx_t_9;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 35, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_9 == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->nx = __pyx_t_9;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 36, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_9 == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->ny = __pyx_t_9;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 37, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_9 == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->nz = __pyx_t_9;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 38, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.polymers);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.polymers);
  __pyx_v___pyx_result->__pyx_base.polymers = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 39, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->sub_bin_width_x = __pyx_t_5;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 40, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->sub_bin_width_y = __pyx_t_5;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 41, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->sub_bin_width_z = __pyx_t_5;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 42, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->sub_bins_to_bins_x);
  __Pyx_DECREF(__pyx_v___pyx_result->sub_bins_to_bins_x);
  __pyx_v___pyx_result->sub_bins_to_bins_x = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 43, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->sub_bins_to_bins_y);
  __Pyx_DECREF(__pyx_v___pyx_result->sub_bins_to_bins_y);
  __pyx_v___pyx_result->sub_bins_to_bins_y = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 44, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->sub_bins_to_bins_z);
  __Pyx_DECREF(__pyx_v___pyx_result->sub_bins_to_bins_z);
  __pyx_v___pyx_result->sub_bins_to_bins_z = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 45, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->sub_bins_to_weights_x);
  __Pyx_DECREF(__pyx_v___pyx_result->sub_bins_to_weights_x);
  __pyx_v___pyx_result->sub_bins_to_weights_x = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 46, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->sub_bins_to_weights_y);
  __Pyx_DECREF(__pyx_v___pyx_result->sub_bins_to_weights_y);
  __pyx_v___pyx_result->sub_bins_to_weights_y = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 47, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->sub_bins_to_weights_z);
  __Pyx_DECREF(__pyx_v___pyx_result->sub_bins_to_weights_z);
  __pyx_v___pyx_result->sub_bins_to_weights_z = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 48, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->vf_limit = __pyx_t_10;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 49, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->vol_bin = __pyx_t_5;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 50, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v___pyx_result->weight_xyz, 0);
  __pyx_v___pyx_result->weight_xyz = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 51, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v___pyx_result->weight_xyz_with_trial, 0);
  __pyx_v___pyx_result->weight_xyz_with_trial = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 52, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v___pyx_result->width_xyz, 0);
  __pyx_v___pyx_result->width_xyz = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 53, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v___pyx_result->wt_vec, 0);
  __pyx_v___pyx_result->wt_vec = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 54, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v___pyx_result->wt_vec_with_trial, 0);
  __pyx_v___pyx_result->wt_vec_with_trial = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 55, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->x_width = __pyx_t_5;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 56, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v___pyx_result->xyz, 0);
  __pyx_v___pyx_result->xyz = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 57, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v___pyx_result->xyz_with_trial, 0);
  __pyx_v___pyx_result->xyz_with_trial = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 58, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->y_width = __pyx_t_5;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 59, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->z_width = __pyx_t_5;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_UniformDensityField__set_state(UniformDensityField __pyx_result, tuple __pyx_state):
 *     __pyx_result._field_descriptors = __pyx_state[0]; __pyx_result.access_vols = __pyx_state[1]; __pyx_result.affected_bins_last_move = __pyx_state[2]; __pyx_result.assume_fully_accessible = __pyx_state[3]; __pyx_result.bin_index = __pyx_state[4]; __pyx_result.binder_dict = __pyx_state[5]; __pyx_result.binders = __pyx_state[6]; __pyx_result.chi = __pyx_state[7]; __pyx_result.confine_length = __pyx_state[8]; __pyx_result.confine_type = __pyx_state[9]; __pyx_result.density = __pyx_state[10]; __pyx_result.density_trial = __pyx_state[11]; __pyx_result.dict_ = __pyx_state[12]; __pyx_result.doubly_bound = __pyx_state[13]; __pyx_result.doubly_bound_trial = __pyx_state[14]; __pyx_result.dx = __pyx_state[15]; __pyx_result.dxyz = __pyx_state[16]; __pyx_result.dy = __pyx_state[17]; __pyx_result.dz = __pyx_state[18]; __pyx_result.fast_field = __pyx_state[19]; __pyx_result.half_step_xyz = __pyx_state[20]; __pyx_result.half_width_xyz = __pyx_state[21]; __pyx_result.index_xyz = __pyx_state[22]; __pyx_result.index_xyz_with_trial = __pyx_state[23]; __pyx_result.inds_xyz_to_super = __pyx_state[24]; __pyx_result.n_bins = __pyx_state[25]; __pyx_result.n_points = __pyx_state[26]; __pyx_result.n_polymers = __pyx_state[27]; __pyx_result.n_sub_bins_x = __pyx_state[28]; __pyx_result.n_sub_bins_y = __pyx_state[29]; __pyx_result.n_sub_bins_z = __pyx_state[30]; __pyx_result.n_xyz_m1 = __pyx_state[31]; __pyx_result.nbr_inds = __pyx_state[32]; __pyx_result.nbr_inds_with_trial = __pyx_state[33]; __pyx_result.num_binders = __pyx_state[34]; __pyx_result.nx = __pyx_state[35]; __pyx_result.ny = __pyx_state[36]; __pyx_result.nz = __pyx_state[37]; __pyx_result.polymers = __pyx_state[38]; __pyx_result.sub_bin_width_x = __pyx_state[39]; __pyx_result.sub_bin_width_y = __pyx_state[40]; __pyx_result.sub_bin_width_z = __pyx_state[41]; __pyx_result.sub_bins_to_bins_x = __pyx_state[42]; __pyx_result.sub_bins_to_bins_y = __pyx_state[43]; __pyx_result.sub_bins_to_bins_z = __pyx_state[44]; __pyx_result.sub_bins_to_weights_x = __pyx_state[45]; __pyx_result.sub_bins_to_weights_y = __pyx_state[46]; __pyx_result.sub_bins_to_weights_z = __pyx_state[47]; __pyx_result.vf_limit = __pyx_state[48]; __pyx_result.vol_bin = __pyx_state[49]; __pyx_result.weight_xyz = __pyx_state[50]; __pyx_result.weight_xyz_with_trial = __pyx_state[51]; __pyx_result.width_xyz = __pyx_state[52]; __pyx_result.wt_vec = __pyx_state[53]; __pyx_result.wt_vec_with_trial = __pyx_state[54]; __pyx_result.x_width = __pyx_state[55]; __pyx_result.xyz = __pyx_state[56]; __pyx_result.xyz_with_trial = __pyx_state[57]; __pyx_result.y_width = __pyx_state[58]; __pyx_result.z_width = __pyx_state[59]
 *     if len(__pyx_state) > 60 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[60])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_11 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_12 = ((__pyx_t_11 > 60) != 0);
  if (__pyx_t_12) {
  } else {
    __pyx_t_3 = __pyx_t_12;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_12 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_13 = (__pyx_t_12 != 0);
  __pyx_t_3 = __pyx_t_13;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result._field_descriptors = __pyx_state[0]; __pyx_result.access_vols = __pyx_state[1]; __pyx_result.affected_bins_last_move = __pyx_state[2]; __pyx_result.assume_fully_accessible = __pyx_state[3]; __pyx_result.bin_index = __pyx_state[4]; __pyx_result.binder_dict = __pyx_state[5]; __pyx_result.binders = __pyx_state[6]; __pyx_result.chi = __pyx_state[7]; __pyx_result.confine_length = __pyx_state[8]; __pyx_result.confine_type = __pyx_state[9]; __pyx_result.density = __pyx_state[10]; __pyx_result.density_trial = __pyx_state[11]; __pyx_result.dict_ = __pyx_state[12]; __pyx_result.doubly_bound = __pyx_state[13]; __pyx_result.doubly_bound_trial = __pyx_state[14]; __pyx_result.dx = __pyx_state[15]; __pyx_result.dxyz = __pyx_state[16]; __pyx_result.dy = __pyx_state[17]; __pyx_result.dz = __pyx_state[18]; __pyx_result.fast_field = __pyx_state[19]; __pyx_result.half_step_xyz = __pyx_state[20]; __pyx_result.half_width_xyz = __pyx_state[21]; __pyx_result.index_xyz = __pyx_state[22]; __pyx_result.index_xyz_with_trial = __pyx_state[23]; __pyx_result.inds_xyz_to_super = __pyx_state[24]; __pyx_result.n_bins = __pyx_state[25]; __pyx_result.n_points = __pyx_state[26]; __pyx_result.n_polymers = __pyx_state[27]; __pyx_result.n_sub_bins_x = __pyx_state[28]; __pyx_result.n_sub_bins_y = __pyx_state[29]; __pyx_result.n_sub_bins_z = __pyx_state[30]; __pyx_result.n_xyz_m1 = __pyx_state[31]; __pyx_result.nbr_inds = __pyx_state[32]; __pyx_result.nbr_inds_with_trial = __pyx_state[33]; __pyx_result.num_binders = __pyx_state[34]; __pyx_result.nx = __pyx_state[35]; __pyx_result.ny = __pyx_state[36]; __pyx_result.nz = __pyx_state[37]; __pyx_result.polymers = __pyx_state[38]; __pyx_result.sub_bin_width_x = __pyx_state[39]; __pyx_result.sub_bin_width_y = __pyx_state[40]; __pyx_result.sub_bin_width_z = __pyx_state[41]; __pyx_result.sub_bins_to_bins_x = __pyx_state[42]; __pyx_result.sub_bins_to_bins_y = __pyx_state[43]; __pyx_result.sub_bins_to_bins_z = __pyx_state[44]; __pyx_result.sub_bins_to_weights_x = __pyx_state[45]; __pyx_result.sub_bins_to_weights_y = __pyx_state[46]; __pyx_result.sub_bins_to_weights_z = __pyx_state[47]; __pyx_result.vf_limit = __pyx_state[48]; __pyx_result.vol_bin = __pyx_state[49]; __pyx_result.weight_xyz = __pyx_state[50]; __pyx_result.weight_xyz_with_trial = __pyx_state[51]; __pyx_result.width_xyz = __pyx_state[52]; __pyx_result.wt_vec = __pyx_state[53]; __pyx_result.wt_vec_with_trial = __pyx_state[54]; __pyx_result.x_width = __pyx_state[55]; __pyx_result.xyz = __pyx_state[56]; __pyx_result.xyz_with_trial = __pyx_state[57]; __pyx_result.y_width = __pyx_state[58]; __pyx_result.z_width = __pyx_state[59]
 *     if len(__pyx_state) > 60 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[60])             # <<<<<<<<<<<<<<
 */
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_update); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_14 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 60, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_16 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_15);
      if (likely(__pyx_t_16)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_15, function);
      }
    }
    __pyx_t_1 = (__pyx_t_16) ? __Pyx_PyObject_Call2Args(__pyx_t_15, __pyx_t_16, __pyx_t_14) : __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_14);
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_UniformDensityField__set_state(UniformDensityField __pyx_result, tuple __pyx_state):
 *     __pyx_result._field_descriptors = __pyx_state[0]; __pyx_result.access_vols = __pyx_state[1]; __pyx_result.affected_bins_last_move = __pyx_state[2]; __pyx_result.assume_fully_accessible = __pyx_state[3]; __pyx_result.bin_index = __pyx_state[4]; __pyx_result.binder_dict = __pyx_state[5]; __pyx_result.binders = __pyx_state[6]; __pyx_result.chi = __pyx_state[7]; __pyx_result.confine_length = __pyx_state[8]; __pyx_result.confine_type = __pyx_state[9]; __pyx_result.density = __pyx_state[10]; __pyx_result.density_trial = __pyx_state[11]; __pyx_result.dict_ = __pyx_state[12]; __pyx_result.doubly_bound = __pyx_state[13]; __pyx_result.doubly_bound_trial = __pyx_state[14]; __pyx_result.dx = __pyx_state[15]; __pyx_result.dxyz = __pyx_state[16]; __pyx_result.dy = __pyx_state[17]; __pyx_result.dz = __pyx_state[18]; __pyx_result.fast_field = __pyx_state[19]; __pyx_result.half_step_xyz = __pyx_state[20]; __pyx_result.half_width_xyz = __pyx_state[21]; __pyx_result.index_xyz = __pyx_state[22]; __pyx_result.index_xyz_with_trial = __pyx_state[23]; __pyx_result.inds_xyz_to_super = __pyx_state[24]; __pyx_result.n_bins = __pyx_state[25]; __pyx_result.n_points = __pyx_state[26]; __pyx_result.n_polymers = __pyx_state[27]; __pyx_result.n_sub_bins_x = __pyx_state[28]; __pyx_result.n_sub_bins_y = __pyx_state[29]; __pyx_result.n_sub_bins_z = __pyx_state[30]; __pyx_result.n_xyz_m1 = __pyx_state[31]; __pyx_result.nbr_inds = __pyx_state[32]; __pyx_result.nbr_inds_with_trial = __pyx_state[33]; __pyx_result.num_binders = __pyx_state[34]; __pyx_result.nx = __pyx_state[35]; __pyx_result.ny = __pyx_state[36]; __pyx_result.nz = __pyx_state[37]; __pyx_result.polymers = __pyx_state[38]; __pyx_result.sub_bin_width_x = __pyx_state[39]; __pyx_result.sub_bin_width_y = __pyx_state[40]; __pyx_result.sub_bin_width_z = __pyx_state[41]; __pyx_result.sub_bins_to_bins_x = __pyx_state[42]; __pyx_result.sub_bins_to_bins_y = __pyx_state[43]; __pyx_result.sub_bins_to_bins_z = __pyx_state[44]; __pyx_result.sub_bins_to_weights_x = __pyx_state[45]; __pyx_result.sub_bins_to_weights_y = __pyx_state[46]; __pyx_result.sub_bins_to_weights_z = __pyx_state[47]; __pyx_result.vf_limit = __pyx_state[48]; __pyx_result.vol_bin = __pyx_state[49]; __pyx_result.weight_xyz = __pyx_state[50]; __pyx_result.weight_xyz_with_trial = __pyx_state[51]; __pyx_result.width_xyz = __pyx_state[52]; __pyx_result.wt_vec = __pyx_state[53]; __pyx_result.wt_vec_with_trial = __pyx_state[54]; __pyx_result.x_width = __pyx_state[55]; __pyx_result.xyz = __pyx_state[56]; __pyx_result.xyz_with_trial = __pyx_state[57]; __pyx_result.y_width = __pyx_state[58]; __pyx_result.z_width = __pyx_state[59]
 *     if len(__pyx_state) > 60 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[60])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_UniformDensityField__set_state(<UniformDensityField> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_UniformDensityField__set_state(UniformDensityField __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._field_descriptors = __pyx_state[0]; __pyx_result.access_vols = __pyx_state[1]; __pyx_result.affected_bins_last_move = __pyx_state[2]; __pyx_result.assume_fully_accessible = __pyx_state[3]; __pyx_result.bin_index = __pyx_state[4]; __pyx_result.binder_dict = __pyx_state[5]; __pyx_result.binders = __pyx_state[6]; __pyx_result.chi = __pyx_state[7]; __pyx_result.confine_length = __pyx_state[8]; __pyx_result.confine_type = __pyx_state[9]; __pyx_result.density = __pyx_state[10]; __pyx_result.density_trial = __pyx_state[11]; __pyx_result.dict_ = __pyx_state[12]; __pyx_result.doubly_bound = __pyx_state[13]; __pyx_result.doubly_bound_trial = __pyx_state[14]; __pyx_result.dx = __pyx_state[15]; __pyx_result.dxyz = __pyx_state[16]; __pyx_result.dy = __pyx_state[17]; __pyx_result.dz = __pyx_state[18]; __pyx_result.fast_field = __pyx_state[19]; __pyx_result.half_step_xyz = __pyx_state[20]; __pyx_result.half_width_xyz = __pyx_state[21]; __pyx_result.index_xyz = __pyx_state[22]; __pyx_result.index_xyz_with_trial = __pyx_state[23]; __pyx_result.inds_xyz_to_super = __pyx_state[24]; __pyx_result.n_bins = __pyx_state[25]; __pyx_result.n_points = __pyx_state[26]; __pyx_result.n_polymers = __pyx_state[27]; __pyx_result.n_sub_bins_x = __pyx_state[28]; __pyx_result.n_sub_bins_y = __pyx_state[29]; __pyx_result.n_sub_bins_z = __pyx_state[30]; __pyx_result.n_xyz_m1 = __pyx_state[31]; __pyx_result.nbr_inds = __pyx_state[32]; __pyx_result.nbr_inds_with_trial = __pyx_state[33]; __pyx_result.num_binders = __pyx_state[34]; __pyx_result.nx = __pyx_state[35]; __pyx_result.ny = __pyx_state[36]; __pyx_result.nz = __pyx_state[37]; __pyx_result.polymers = __pyx_state[38]; __pyx_result.sub_bin_width_x = __pyx_state[39]; __pyx_result.sub_bin_width_y = __pyx_state[40]; __pyx_result.sub_bin_width_z = __pyx_state[41]; __pyx_result.sub_bins_to_bins_x = __pyx_state[42]; __pyx_result.sub_bins_to_bins_y = __pyx_state[43]; __pyx_result.sub_bins_to_bins_z = __pyx_state[44]; __pyx_result.sub_bins_to_weights_x = __pyx_state[45]; __pyx_result.sub_bins_to_weights_y = __pyx_state[46]; __pyx_result.sub_bins_to_weights_z = __pyx_state[47]; __pyx_result.vf_limit = __pyx_state[48]; __pyx_result.vol_bin = __pyx_state[49]; __pyx_result.weight_xyz = __pyx_state[50]; __pyx_result.weight_xyz_with_trial = __pyx_state[51]; __pyx_result.width_xyz = __pyx_state[52]; __pyx_result.wt_vec = __pyx_state[53]; __pyx_result.wt_vec_with_trial = __pyx_state[54]; __pyx_result.x_width = __pyx_state[55]; __pyx_result.xyz = __pyx_state[56]; __pyx_result.xyz_with_trial = __pyx_state[57]; __pyx_result.y_width = __pyx_state[58]; __pyx_result.z_width = __pyx_state[59]
 *     if len(__pyx_state) > 60 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_2, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_4, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("chromo.fields.__pyx_unpickle_UniformDensityField__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":735
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew1", __pyx_f[3], 735, 0, __PYX_ERR(3, 735, __pyx_L1_error));

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":736
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":735
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":738
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew2", __pyx_f[3], 738, 0, __PYX_ERR(3, 738, __pyx_L1_error));

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":739
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":738
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":741
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew3", __pyx_f[3], 741, 0, __PYX_ERR(3, 741, __pyx_L1_error));

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":742
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":741
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":744
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew4", __pyx_f[3], 744, 0, __PYX_ERR(3, 744, __pyx_L1_error));

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":745
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":744
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":747
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);
  __Pyx_TraceCall("PyArray_MultiIterNew5", __pyx_f[3], 747, 0, __PYX_ERR(3, 747, __pyx_L1_error));

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":748
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":747
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":750
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);
  __Pyx_TraceCall("PyDataType_SHAPE", __pyx_f[3], 750, 0, __PYX_ERR(3, 750, __pyx_L1_error));

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":751
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":752
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":751
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":754
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":750
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("numpy.PyDataType_SHAPE", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":929
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_array_base", 0);
  __Pyx_TraceCall("set_array_base", __pyx_f[3], 929, 0, __PYX_ERR(3, 929, __pyx_L1_error));

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":930
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":931
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":929
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("numpy.set_array_base", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":933
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_array_base", 0);
  __Pyx_TraceCall("get_array_base", __pyx_f[3], 933, 0, __PYX_ERR(3, 933, __pyx_L1_error));

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":934
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":935
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":936
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":935
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":937
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":933
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("numpy.get_array_base", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":941
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);
  __Pyx_TraceCall("import_array", __pyx_f[3], 941, 0, __PYX_ERR(3, 941, __pyx_L1_error));

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":942
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":943
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 943, __pyx_L3_error)

      /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":942
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":944
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 944, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":945
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 945, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 945, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":942
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":941
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":947
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);
  __Pyx_TraceCall("import_umath", __pyx_f[3], 947, 0, __PYX_ERR(3, 947, __pyx_L1_error));

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":948
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":949
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 949, __pyx_L3_error)

      /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":948
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":950
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 950, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":951
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 951, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 951, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":948
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":947
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":953
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);
  __Pyx_TraceCall("import_ufunc", __pyx_f[3], 953, 0, __PYX_ERR(3, 953, __pyx_L1_error));

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":954
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":955
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 955, __pyx_L3_error)

      /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":954
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":956
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 956, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":957
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 957, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 957, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":954
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":953
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":967
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);
  __Pyx_TraceCall("is_timedelta64_object", __pyx_f[3], 967, 0, __PYX_ERR(3, 967, __pyx_L1_error));

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":979
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":967
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("numpy.is_timedelta64_object", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":982
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_datetime64_object", 0);
  __Pyx_TraceCall("is_datetime64_object", __pyx_f[3], 982, 0, __PYX_ERR(3, 982, __pyx_L1_error));

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":994
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":982
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("numpy.is_datetime64_object", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":997
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("get_datetime64_value", __pyx_f[3], 997, 1, __PYX_ERR(3, 997, __pyx_L1_error));

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":1004
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":997
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("numpy.get_datetime64_value", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":1007
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("get_timedelta64_value", __pyx_f[3], 1007, 1, __PYX_ERR(3, 1007, __pyx_L1_error));

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":1011
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":1007
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("numpy.get_timedelta64_value", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":1014
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("get_datetime64_unit", __pyx_f[3], 1014, 1, __PYX_ERR(3, 1014, __pyx_L1_error));

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":1018
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":1014
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("numpy.get_datetime64_unit", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = (NPY_DATETIMEUNIT) 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "View.MemoryView":123
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

/* Python wrapper */
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_v_allocate_buffer;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_c);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_itemsize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); __PYX_ERR(2, 123, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); __PYX_ERR(2, 123, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_allocate_buffer);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(2, 123, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = ((PyObject*)values[0]);
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 123, __pyx_L3_error)
    __pyx_v_format = values[2];
    __pyx_v_mode = values[3];
    if (values[4]) {
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 124, __pyx_L3_error)
    } else {

      /* "View.MemoryView":124
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */
      __pyx_v_allocate_buffer = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 123, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) __PYX_ERR(2, 123, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); __PYX_ERR(2, 123, __pyx_L1_error)
  }
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":123
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_dim;
  PyObject **__pyx_v_p;
  char __pyx_v_order;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[2], 123, 0, __PYX_ERR(2, 123, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":130
 *         cdef PyObject **p
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 130, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(2, 130, __pyx_L1_error)
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":131
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
 */
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":133
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_self->ndim != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":134
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 134, __pyx_L1_error)

    /* "View.MemoryView":133
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  }

  /* "View.MemoryView":136
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  __pyx_t_2 = ((__pyx_v_itemsize <= 0) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":137
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 137, __pyx_L1_error)

    /* "View.MemoryView":136
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  }

  /* "View.MemoryView":139
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  __pyx_t_2 = PyBytes_Check(__pyx_v_format); 
  __pyx_t_4 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":140
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_n_s_ASCII) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_n_s_ASCII);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":139
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  }

  /* "View.MemoryView":141
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_format)->tp_name), 0))) __PYX_ERR(2, 141, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_format;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_format);
  __Pyx_DECREF(__pyx_v_self->_format);
  __pyx_v_self->_format = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":142
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->_format == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(2, 142, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyBytes_AsWritableString(__pyx_v_self->_format); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(2, 142, __pyx_L1_error)
  __pyx_v_self->format = __pyx_t_7;

  /* "View.MemoryView":145
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
 */
  __pyx_v_self->_shape = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":146
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
 */
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":148
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  __pyx_t_4 = ((!(__pyx_v_self->_shape != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "View.MemoryView":149
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 149, __pyx_L1_error)

    /* "View.MemoryView":148
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  }

  /* "View.MemoryView":152
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  __pyx_t_8 = 0;
  __pyx_t_3 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(2, 152, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 152, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_9;
    __pyx_v_idx = __pyx_t_8;
    __pyx_t_8 = (__pyx_t_8 + 1);

    /* "View.MemoryView":153
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    __pyx_t_4 = ((__pyx_v_dim <= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":154
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
 */
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_6);
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(2, 154, __pyx_L1_error)

      /* "View.MemoryView":153
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    }

    /* "View.MemoryView":155
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
 */
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

    /* "View.MemoryView":152
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":158
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 158, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":159
 *         cdef char order
 *         if mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 */
    __pyx_v_order = 'F';

    /* "View.MemoryView":160
 *         if mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         elif mode == 'c':
 *             order = b'C'
 */
    __Pyx_INCREF(__pyx_n_u_fortran);
    __Pyx_GIVEREF(__pyx_n_u_fortran);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_fortran;

    /* "View.MemoryView":158
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":161
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 161, __pyx_L1_error)
  if (likely(__pyx_t_4)) {

    /* "View.MemoryView":162
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         else:
 */
    __pyx_v_order = 'C';

    /* "View.MemoryView":163
 *         elif mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 */
    __Pyx_INCREF(__pyx_n_u_c);
    __Pyx_GIVEREF(__pyx_n_u_c);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_c;

    /* "View.MemoryView":161
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":165
 *             self.mode = u'c'
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_v_mode); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_10, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __PYX_ERR(2, 165, __pyx_L1_error)
  }
  __pyx_L10:;

  /* "View.MemoryView":167
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,             # <<<<<<<<<<<<<<
 *                                              itemsize, self.ndim, order)
 * 
 */
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":170
 *                                              itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:
 */
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":171
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 *         if allocate_buffer:
 * 
 */
  __pyx_t_10 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 171, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 171, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_self->dtype_is_object = __pyx_t_4;

  /* "View.MemoryView":172
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = (__pyx_v_allocate_buffer != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":175
 * 
 * 
 *             self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")
 */
    __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

    /* "View.MemoryView":176
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    __pyx_t_4 = ((!(__pyx_v_self->data != 0)) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":177
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 177, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(2, 177, __pyx_L1_error)

      /* "View.MemoryView":176
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    }

    /* "View.MemoryView":179
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    __pyx_t_4 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":180
 * 
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 */
      __pyx_v_p = ((PyObject **)__pyx_v_self->data);

      /* "View.MemoryView":181
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):             # <<<<<<<<<<<<<<
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)
 */
      if (unlikely(__pyx_v_itemsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(2, 181, __pyx_L1_error)
      }
      else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
        __PYX_ERR(2, 181, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_div_Py_ssize_t(__pyx_v_self->len, __pyx_v_itemsize);
      __pyx_t_9 = __pyx_t_1;
      for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_9; __pyx_t_11+=1) {
        __pyx_v_i = __pyx_t_11;

        /* "View.MemoryView":182
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None             # <<<<<<<<<<<<<<
 *                     Py_INCREF(Py_None)
 * 
 */
        (__pyx_v_p[__pyx_v_i]) = Py_None;

        /* "View.MemoryView":183
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
        Py_INCREF(Py_None);
      }

      /* "View.MemoryView":179
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    }

    /* "View.MemoryView":172
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":123
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":186
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);
  __Pyx_TraceCall("__getbuffer__", __pyx_f[2], 186, 0, __PYX_ERR(2, 186, __pyx_L1_error));

  /* "View.MemoryView":187
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":188
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 188, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":189
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
    __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":188
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":190
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 190, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":191
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 */
    __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":190
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":192
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  __pyx_t_1 = ((!((__pyx_v_flags & __pyx_v_bufmode) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":193
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 193, __pyx_L1_error)

    /* "View.MemoryView":192
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  }

  /* "View.MemoryView":194
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 *         info.ndim = self.ndim
 */
  __pyx_t_4 = __pyx_v_self->data;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":195
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 */
  __pyx_t_5 = __pyx_v_self->len;
  __pyx_v_info->len = __pyx_t_5;

  /* "View.MemoryView":196
 *         info.buf = self.data
 *         info.len = self.len
 *         info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *         info.shape = self._shape
 *         info.strides = self._strides
 */
  __pyx_t_6 = __pyx_v_self->ndim;
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":197
 *         info.len = self.len
 *         info.ndim = self.ndim
 *         info.shape = self._shape             # <<<<<<<<<<<<<<
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 */
  __pyx_t_7 = __pyx_v_self->_shape;
  __pyx_v_info->shape = __pyx_t_7;

  /* "View.MemoryView":198
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 *         info.strides = self._strides             # <<<<<<<<<<<<<<
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 */
  __pyx_t_7 = __pyx_v_self->_strides;
  __pyx_v_info->strides = __pyx_t_7;

  /* "View.MemoryView":199
 *         info.shape = self._shape
 *         info.strides = self._strides
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":200
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 * 
 */
  __pyx_t_5 = __pyx_v_self->itemsize;
  __pyx_v_info->itemsize = __pyx_t_5;

  /* "View.MemoryView":201
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":203
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":204
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_4 = __pyx_v_self->format;
    __pyx_v_info->format = __pyx_t_4;

    /* "View.MemoryView":203
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
    goto __pyx_L5;
  }

  /* "View.MemoryView":206
 *             info.format = self.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.obj = self
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":208
 *             info.format = NULL
 * 
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":186
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":212
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

/* Python wrapper */
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);
  __Pyx_TraceCall("__dealloc__", __pyx_f[2], 212, 0, __PYX_ERR(2, 212, __pyx_L1_error));

  /* "View.MemoryView":213
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
  __pyx_t_1 = ((__pyx_v_self->callback_free_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":214
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data:
 *             if self.dtype_is_object:
 */
    __pyx_v_self->callback_free_data(__pyx_v_self->data);

    /* "View.MemoryView":213
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":215
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  __pyx_t_1 = (__pyx_v_self->free_data != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":216
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":217
 *         elif self.free_data:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,             # <<<<<<<<<<<<<<
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);

      /* "View.MemoryView":216
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    }

    /* "View.MemoryView":219
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyObject_Free(self._shape)
 * 
 */
    free(__pyx_v_self->data);

    /* "View.MemoryView":215
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":220
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 *         PyObject_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  PyObject_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":212
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.array.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":223
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 223, 0, __PYX_ERR(2, 223, __pyx_L1_error));

  /* "View.MemoryView":224
 *     @property
 *     def memview(self):
 *         return self.get_memview()             # <<<<<<<<<<<<<<
 * 
 *     @cname('get_memview')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_array *)__pyx_v_self->__pyx_vtab)->get_memview(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":223
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":227
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_memview", 0);
  __Pyx_TraceCall("get_memview", __pyx_f[2], 227, 0, __PYX_ERR(2, 227, __pyx_L1_error));

  /* "View.MemoryView":228
 *     @cname('get_memview')
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 */
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":229
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":227
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.get_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":231
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);
  __Pyx_TraceCall("__len__", __pyx_f[2], 231, 0, __PYX_ERR(2, 231, __pyx_L1_error));

  /* "View.MemoryView":232
 * 
 *     def __len__(self):
 *         return self._shape[0]             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
 */
  __pyx_r = (__pyx_v_self->_shape[0]);
  goto __pyx_L0;

  /* "View.MemoryView":231
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":234
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 0);
  __Pyx_TraceCall("__getattr__", __pyx_f[2], 234, 0, __PYX_ERR(2, 234, __pyx_L1_error));

  /* "View.MemoryView":235
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":234
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":237
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);
  __Pyx_TraceCall("__getitem__", __pyx_f[2], 237, 0, __PYX_ERR(2, 237, __pyx_L1_error));

  /* "View.MemoryView":238
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":237
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":240
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

/* Python wrapper */
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_TraceCall("__setitem__", __pyx_f[2], 240, 0, __PYX_ERR(2, 240, __pyx_L1_error));

  /* "View.MemoryView":241
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0)) __PYX_ERR(2, 241, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":240
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array___reduce_cython__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[2], 1, 0, __PYX_ERR(2, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array_2__setstate_cython__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[2], 3, 0, __PYX_ERR(2, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":245
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0;
  struct __pyx_array_obj *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_cwrapper", 0);
  __Pyx_TraceCall("array_cwrapper", __pyx_f[2], 245, 0, __PYX_ERR(2, 245, __pyx_L1_error));

  /* "View.MemoryView":249
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_buf == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":250
 * 
 *     if buf == NULL:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))             # <<<<<<<<<<<<<<
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":249
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":252
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
  /*else*/ {
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;

    /* "View.MemoryView":253
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(2, 253, __pyx_L1_error)

    /* "View.MemoryView":252
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":254
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_v_result->data = __pyx_v_buf;
  }
  __pyx_L3:;

  /* "View.MemoryView":256
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":245
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":282
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name_2,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name_2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(2, 282, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 282, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[2], 282, 0, __PYX_ERR(2, 282, __pyx_L1_error));

  /* "View.MemoryView":283
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":282
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":284
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);
  __Pyx_TraceCall("__repr__", __pyx_f[2], 284, 0, __PYX_ERR(2, 284, __pyx_L1_error));

  /* "View.MemoryView":285
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* "View.MemoryView":284
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.Enum.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum___reduce_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[2], 1, 0, __PYX_ERR(2, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.name,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->name);
  __Pyx_GIVEREF(__pyx_v_self->name);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->name);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.name is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.name is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_self->name != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.name is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.Enum.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum_2__setstate_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[2], 16, 0, __PYX_ERR(2, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_unpickle_Enum__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":299
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

static void *__pyx_align_pointer(void *__pyx_v_memory, size_t __pyx_v_alignment) {
  Py_intptr_t __pyx_v_aligned_p;
  size_t __pyx_v_offset;
  void *__pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("align_pointer", __pyx_f[2], 299, 1, __PYX_ERR(2, 299, __pyx_L1_error));

  /* "View.MemoryView":301
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory             # <<<<<<<<<<<<<<
 *     cdef size_t offset
 * 
 */
  __pyx_v_aligned_p = ((Py_intptr_t)__pyx_v_memory);

  /* "View.MemoryView":305
 * 
 *     with cython.cdivision(True):
 *         offset = aligned_p % alignment             # <<<<<<<<<<<<<<
 * 
 *     if offset > 0:
 */
  __pyx_v_offset = (__pyx_v_aligned_p % __pyx_v_alignment);

  /* "View.MemoryView":307
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  __pyx_t_1 = ((__pyx_v_offset > 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":308
 * 
 *     if offset > 0:
 *         aligned_p += alignment - offset             # <<<<<<<<<<<<<<
 * 
 *     return <void *> aligned_p
 */
    __pyx_v_aligned_p = (__pyx_v_aligned_p + (__pyx_v_alignment - __pyx_v_offset));

    /* "View.MemoryView":307
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  }

  /* "View.MemoryView":310
 *         aligned_p += alignment - offset
 * 
 *     return <void *> aligned_p             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((void *)__pyx_v_aligned_p);
  goto __pyx_L0;

  /* "View.MemoryView":299
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.align_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "View.MemoryView":346
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

/* Python wrapper */
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_v_flags;
  int __pyx_v_dtype_is_object;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(2, 346, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dtype_is_object);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(2, 346, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 346, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 346, __pyx_L3_error)
    } else {
      __pyx_v_dtype_is_object = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 346, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[2], 346, 0, __PYX_ERR(2, 346, __pyx_L1_error));

  /* "View.MemoryView":347
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 */
  __Pyx_INCREF(__pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __Pyx_GOTREF(__pyx_v_self->obj);
  __Pyx_DECREF(__pyx_v_self->obj);
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":348
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 */
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":349
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_memoryview_type));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_obj != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":350
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 */
    __pyx_t_4 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 350, __pyx_L1_error)

    /* "View.MemoryView":351
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    __pyx_t_1 = ((((PyObject *)__pyx_v_self->view.obj) == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":352
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
 */
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":353
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 */
      Py_INCREF(Py_None);

      /* "View.MemoryView":351
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    }

    /* "View.MemoryView":349
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  }

  /* "View.MemoryView":355
 *                 Py_INCREF(Py_None)
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():             # <<<<<<<<<<<<<<
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 */
  __pyx_t_1 = ((!(__PYX_CYTHON_ATOMICS_ENABLED() != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":357
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 */
    __pyx_t_1 = ((__pyx_memoryview_thread_locks_used < 8) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":358
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]             # <<<<<<<<<<<<<<
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:
 */
      __pyx_v_self->lock = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

      /* "View.MemoryView":359
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1             # <<<<<<<<<<<<<<
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 */
      __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used + 1);

      /* "View.MemoryView":357
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 */
    }

    /* "View.MemoryView":360
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
 */
    __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":361
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *                 if self.lock is NULL:
 *                     raise MemoryError
 */
      __pyx_v_self->lock = PyThread_allocate_lock();

      /* "View.MemoryView":362
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                     raise MemoryError
 * 
 */
      __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
      if (unlikely(__pyx_t_1)) {

        /* "View.MemoryView":363
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
 *                     raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
        PyErr_NoMemory(); __PYX_ERR(2, 363, __pyx_L1_error)

        /* "View.MemoryView":362
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                     raise MemoryError
 * 
 */
      }

      /* "View.MemoryView":360
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
 */
    }

    /* "View.MemoryView":355
 *                 Py_INCREF(Py_None)
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():             # <<<<<<<<<<<<<<
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 */
  }

  /* "View.MemoryView":365
 *                     raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":366
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
 */
    __pyx_t_2 = (((__pyx_v_self->view.format[0]) == 'O') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_self->view.format[1]) == '\x00') != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L12_bool_binop_done:;
    __pyx_v_self->dtype_is_object = __pyx_t_1;

    /* "View.MemoryView":365
 *                     raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
    goto __pyx_L11;
  }

  /* "View.MemoryView":368
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 */
  /*else*/ {
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;
  }
  __pyx_L11:;

  /* "View.MemoryView":370
 *             self.dtype_is_object = dtype_is_object
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(             # <<<<<<<<<<<<<<
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL
 */
  __pyx_v_self->acquisition_count_aligned_p = ((__pyx_atomic_int *)__pyx_align_pointer(((void *)(&(__pyx_v_self->acquisition_count[0]))), (sizeof(__pyx_atomic_int))));

  /* "View.MemoryView":372
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
 */
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":346
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":374
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

/* Python wrapper */
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyThread_type_lock __pyx_t_6;
  PyThread_type_lock __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);
  __Pyx_TraceCall("__dealloc__", __pyx_f[2], 374, 0, __PYX_ERR(2, 374, __pyx_L1_error));

  /* "View.MemoryView":375
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":376
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 */
    __Pyx_ReleaseBuffer((&__pyx_v_self->view));

    /* "View.MemoryView":375
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":377
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  __pyx_t_2 = ((((Py_buffer *)(&__pyx_v_self->view))->obj == Py_None) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":379
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL             # <<<<<<<<<<<<<<
 *             Py_DECREF(Py_None)
 * 
 */
    ((Py_buffer *)(&__pyx_v_self->view))->obj = NULL;

    /* "View.MemoryView":380
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 *             Py_DECREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         cdef int i
 */
    Py_DECREF(Py_None);

    /* "View.MemoryView":377
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":384
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  __pyx_t_2 = ((__pyx_v_self->lock != NULL) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":385
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):             # <<<<<<<<<<<<<<
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 */
    __pyx_t_3 = __pyx_memoryview_thread_locks_used;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "View.MemoryView":386
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      __pyx_t_2 = (((__pyx_memoryview_thread_locks[__pyx_v_i]) == __pyx_v_self->lock) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":387
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1             # <<<<<<<<<<<<<<
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 */
        __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used - 1);

        /* "View.MemoryView":388
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        __pyx_t_2 = ((__pyx_v_i != __pyx_memoryview_thread_locks_used) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":390
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])             # <<<<<<<<<<<<<<
 *                     break
 *             else:
 */
          __pyx_t_6 = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);
          __pyx_t_7 = (__pyx_memoryview_thread_locks[__pyx_v_i]);

          /* "View.MemoryView":389
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (             # <<<<<<<<<<<<<<
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break
 */
          (__pyx_memoryview_thread_locks[__pyx_v_i]) = __pyx_t_6;
          (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]) = __pyx_t_7;

          /* "View.MemoryView":388
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        }

        /* "View.MemoryView":391
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break             # <<<<<<<<<<<<<<
 *             else:
 *                 PyThread_free_lock(self.lock)
 */
        goto __pyx_L6_break;

        /* "View.MemoryView":386
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      }
    }
    /*else*/ {

      /* "View.MemoryView":393
 *                     break
 *             else:
 *                 PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 */
      PyThread_free_lock(__pyx_v_self->lock);
    }
    __pyx_L6_break:;

    /* "View.MemoryView":384
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  }

  /* "View.MemoryView":374
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.memoryview.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":395
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim;
  char *__pyx_v_itemp;
  PyObject *__pyx_v_idx = NULL;
  char *__pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_item_pointer", 0);
  __Pyx_TraceCall("get_item_pointer", __pyx_f[2], 395, 0, __PYX_ERR(2, 395, __pyx_L1_error));

  /* "View.MemoryView":397
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
 */
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":399
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 399, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(2, 399, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 399, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(2, 399, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 399, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 399, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":400
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
 */
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 400, __pyx_L1_error)
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(2, 400, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_7;

    /* "View.MemoryView":399
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":402
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_itemp;
  goto __pyx_L0;

  /* "View.MemoryView":395
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":405
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_indices = NULL;
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);
  __Pyx_TraceCall("__getitem__", __pyx_f[2], 405, 0, __PYX_ERR(2, 405, __pyx_L1_error));

  /* "View.MemoryView":406
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":407
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "View.MemoryView":406
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  }

  /* "View.MemoryView":409
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
 */
  __pyx_t_3 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(2, 409, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 409, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_indices = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "View.MemoryView":412
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 412, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "View.MemoryView":413
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":412
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  }

  /* "View.MemoryView":415
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
 */
  /*else*/ {
    __pyx_t_6 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_6 == ((char *)NULL))) __PYX_ERR(2, 415, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_6;

    /* "View.MemoryView":416
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":405
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":418
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

/* Python wrapper */
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_obj = NULL;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_TraceCall("__setitem__", __pyx_f[2], 418, 0, __PYX_ERR(2, 418, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":419
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->view.readonly != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":420
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 420, __pyx_L1_error)

    /* "View.MemoryView":419
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":422
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
 */
  __pyx_t_2 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(__pyx_t_2 != Py_None)) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(2, 422, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 422, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_3;
  __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "View.MemoryView":424
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 424, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "View.MemoryView":425
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_obj = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "View.MemoryView":426
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 426, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "View.MemoryView":427
 *             obj = self.is_slice(value)
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
 */
      __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_2, __pyx_v_obj); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "View.MemoryView":426
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":429
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_memoryview_type))))) __PYX_ERR(2, 429, __pyx_L1_error)
      __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_4), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L5:;

    /* "View.MemoryView":424
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":431
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
 */
  /*else*/ {
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L4:;

  /* "View.MemoryView":418
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":433
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_slice", 0);
  __Pyx_TraceCall("is_slice", __pyx_f[2], 433, 0, __PYX_ERR(2, 433, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":434
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_memoryview_type); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":435
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "View.MemoryView":436
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_6 = __Pyx_PyInt_From_int(((__pyx_v_self->flags & (~PyBUF_WRITABLE)) | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 436, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":437
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
 */
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 437, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "View.MemoryView":436
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 436, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_obj);
        __Pyx_GIVEREF(__pyx_v_obj);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 436, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "View.MemoryView":435
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "View.MemoryView":438
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) __PYX_ERR(2, 438, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":439
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_except_return;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "View.MemoryView":435
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L9_try_end:;
    }

    /* "View.MemoryView":434
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  }

  /* "View.MemoryView":441
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "View.MemoryView":433
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":443
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_src_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  __Pyx_memviewslice *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 0);
  __Pyx_TraceCall("setitem_slice_assignment", __pyx_f[2], 443, 0, __PYX_ERR(2, 443, __pyx_L1_error));

  /* "View.MemoryView":447
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) __PYX_ERR(2, 447, __pyx_L1_error)
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(2, 447, __pyx_L1_error)

  /* "View.MemoryView":448
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],             # <<<<<<<<<<<<<<
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 */
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) __PYX_ERR(2, 448, __pyx_L1_error)
  __pyx_t_2 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice)); if (unlikely(__pyx_t_2 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(2, 448, __pyx_L1_error)

  /* "View.MemoryView":449
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 449, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 449, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":447
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  __pyx_t_6 = __pyx_memoryview_copy_contents((__pyx_t_1[0]), (__pyx_t_2[0]), __pyx_t_4, __pyx_t_5, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(2, 447, __pyx_L1_error)

  /* "View.MemoryView":443
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":451
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[0x80];
  void *__pyx_v_tmp;
  void *__pyx_v_item;
  __Pyx_memviewslice *__pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_tmp_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 0);
  __Pyx_TraceCall("setitem_slice_assign_scalar", __pyx_f[2], 451, 0, __PYX_ERR(2, 451, __pyx_L1_error));

  /* "View.MemoryView":453
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
 */
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":458
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(2, 458, __pyx_L1_error)
  __pyx_v_dst_slice = __pyx_t_1;

  /* "View.MemoryView":460
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
  __pyx_t_2 = ((((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array))) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":461
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
 */
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":462
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    __pyx_t_2 = ((__pyx_v_tmp == NULL) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":463
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
 */
      PyErr_NoMemory(); __PYX_ERR(2, 463, __pyx_L1_error)

      /* "View.MemoryView":462
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    }

    /* "View.MemoryView":464
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
 */
    __pyx_v_item = __pyx_v_tmp;

    /* "View.MemoryView":460
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":466
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  /*else*/ {
    __pyx_v_item = ((void *)__pyx_v_array);
  }
  __pyx_L3:;

  /* "View.MemoryView":468
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
 */
  /*try:*/ {

    /* "View.MemoryView":469
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
    __pyx_t_2 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":470
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
 */
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);

      /* "View.MemoryView":469
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
      goto __pyx_L8;
    }

    /* "View.MemoryView":472
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 472, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L8:;

    /* "View.MemoryView":476
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    __pyx_t_2 = ((__pyx_v_self->view.suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":477
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
 */
      __pyx_t_3 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 477, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "View.MemoryView":476
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    }

    /* "View.MemoryView":478
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
 */
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);
  }

  /* "View.MemoryView":481
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyMem_Free(__pyx_v_tmp);
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __pyx_t_4 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_6 = __pyx_filename;
      {
        PyMem_Free(__pyx_v_tmp);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_6;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "View.MemoryView":451
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":483
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_indexed", 0);
  __Pyx_TraceCall("setitem_indexed", __pyx_f[2], 483, 0, __PYX_ERR(2, 483, __pyx_L1_error));

  /* "View.MemoryView":484
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == ((char *)NULL))) __PYX_ERR(2, 484, __pyx_L1_error)
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":485
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":483
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":487
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL;
  PyObject *__pyx_v_bytesitem = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);
  __Pyx_TraceCall("convert_item_to_object", __pyx_f[2], 487, 0, __PYX_ERR(2, 487, __pyx_L1_error));

  /* "View.MemoryView":490
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":493
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":494
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "View.MemoryView":495
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 495, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 495, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 495, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 495, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 495, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_6);
        __Pyx_INCREF(__pyx_v_bytesitem);
        __Pyx_GIVEREF(__pyx_v_bytesitem);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_bytesitem);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 495, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_result = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "View.MemoryView":494
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    }

    /* "View.MemoryView":499
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
    /*else:*/ {
      __pyx_t_10 = strlen(__pyx_v_self->view.format); 
      __pyx_t_11 = ((__pyx_t_10 == 1) != 0);
      if (__pyx_t_11) {

        /* "View.MemoryView":500
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 500, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L6_except_return;

        /* "View.MemoryView":499
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
      }

      /* "View.MemoryView":501
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "View.MemoryView":496
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unable to convert item to object")
 *         else:
 */
    __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_5, &__pyx_t_9);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 496, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_1, __pyx_t_6);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_ErrRestore(__pyx_t_1, __pyx_t_5, __pyx_t_9);
    __pyx_t_1 = 0; __pyx_t_5 = 0; __pyx_t_9 = 0;
    if (__pyx_t_8) {
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_5, &__pyx_t_1) < 0) __PYX_ERR(2, 496, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_1);

      /* "View.MemoryView":497
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 497, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(2, 497, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "View.MemoryView":494
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "View.MemoryView":487
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesitem);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":503
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL;
  char __pyx_v_c;
  PyObject *__pyx_v_bytesvalue = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  char *__pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);
  __Pyx_TraceCall("assign_item_from_object", __pyx_f[2], 503, 0, __PYX_ERR(2, 503, __pyx_L1_error));

  /* "View.MemoryView":506
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":511
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "View.MemoryView":512
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(2, 512, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":511
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":514
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 514, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 514, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 514, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_1);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
      __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 514, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(2, 514, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":516
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
  __pyx_t_9 = 0;
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(2, 516, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_bytesvalue);
  __pyx_t_10 = __pyx_v_bytesvalue;
  __pyx_t_12 = PyBytes_AS_STRING(__pyx_t_10);
  __pyx_t_13 = (__pyx_t_12 + PyBytes_GET_SIZE(__pyx_t_10));
  for (__pyx_t_14 = __pyx_t_12; __pyx_t_14 < __pyx_t_13; __pyx_t_14++) {
    __pyx_t_11 = __pyx_t_14;
    __pyx_v_c = (__pyx_t_11[0]);

    /* "View.MemoryView":517
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __pyx_v_i = __pyx_t_9;

    /* "View.MemoryView":516
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
    __pyx_t_9 = (__pyx_t_9 + 1);

    /* "View.MemoryView":517
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "View.MemoryView":503
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":520
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  char *__pyx_t_5;
  void *__pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);
  __Pyx_TraceCall("__getbuffer__", __pyx_f[2], 520, 0, __PYX_ERR(2, 520, __pyx_L1_error));

  /* "View.MemoryView":521
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  __pyx_t_2 = ((__pyx_v_flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->view.readonly != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":522
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 522, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 522, __pyx_L1_error)

    /* "View.MemoryView":521
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":524
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_ND) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":525
 * 
 *         if flags & PyBUF_ND:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.shape;
    __pyx_v_info->shape = __pyx_t_4;

    /* "View.MemoryView":524
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
    goto __pyx_L6;
  }

  /* "View.MemoryView":527
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
  /*else*/ {
    __pyx_v_info->shape = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":529
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":530
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.strides;
    __pyx_v_info->strides = __pyx_t_4;

    /* "View.MemoryView":529
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
    goto __pyx_L7;
  }

  /* "View.MemoryView":532
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
 */
  /*else*/ {
    __pyx_v_info->strides = NULL;
  }
  __pyx_L7:;

  /* "View.MemoryView":534
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":535
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.suboffsets;
    __pyx_v_info->suboffsets = __pyx_t_4;

    /* "View.MemoryView":534
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
    goto __pyx_L8;
  }

  /* "View.MemoryView":537
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  /*else*/ {
    __pyx_v_info->suboffsets = NULL;
  }
  __pyx_L8:;

  /* "View.MemoryView":539
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":540
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_5 = __pyx_v_self->view.format;
    __pyx_v_info->format = __pyx_t_5;

    /* "View.MemoryView":539
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":542
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L9:;

  /* "View.MemoryView":544
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 */
  __pyx_t_6 = __pyx_v_self->view.buf;
  __pyx_v_info->buf = __pyx_t_6;

  /* "View.MemoryView":545
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 */
  __pyx_t_7 = __pyx_v_self->view.ndim;
  __pyx_v_info->ndim = __pyx_t_7;

  /* "View.MemoryView":546
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 */
  __pyx_t_8 = __pyx_v_self->view.itemsize;
  __pyx_v_info->itemsize = __pyx_t_8;

  /* "View.MemoryView":547
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = self.view.readonly
 *         info.obj = self
 */
  __pyx_t_8 = __pyx_v_self->view.len;
  __pyx_v_info->len = __pyx_t_8;

  /* "View.MemoryView":548
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __pyx_t_1 = __pyx_v_self->view.readonly;
  __pyx_v_info->readonly = __pyx_t_1;

  /* "View.MemoryView":549
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":520
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":555
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 555, 0, __PYX_ERR(2, 555, __pyx_L1_error));

  /* "View.MemoryView":556
 *     @property
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&result.from_slice)
 *         return result
 */
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) __PYX_ERR(2, 556, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":557
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(2, 557, __pyx_L1_error)

  /* "View.MemoryView":558
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":555
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":561
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 561, 0, __PYX_ERR(2, 561, __pyx_L1_error));

  /* "View.MemoryView":562
 *     @property
 *     def base(self):
 *         return self.obj             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->obj);
  __pyx_r = __pyx_v_self->obj;
  goto __pyx_L0;

  /* "View.MemoryView":561
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.base.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":565
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 565, 0, __PYX_ERR(2, 565, __pyx_L1_error));

  /* "View.MemoryView":566
 *     @property
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
  for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_length = (__pyx_t_2[0]);
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 566, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":565
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":569
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_stride;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 569, 0, __PYX_ERR(2, 569, __pyx_L1_error));

  /* "View.MemoryView":570
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  __pyx_t_1 = ((__pyx_v_self->view.strides == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":572
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 572, __pyx_L1_error)

    /* "View.MemoryView":570
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  }

  /* "View.MemoryView":574
 *             raise ValueError("Buffer view does not expose strides")
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);
  for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
    __pyx_t_3 = __pyx_t_5;
    __pyx_v_stride = (__pyx_t_3[0]);
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_stride); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(2, 574, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":569
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":577
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 577, 0, __PYX_ERR(2, 577, __pyx_L1_error));

  /* "View.MemoryView":578
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.suboffsets == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":579
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_tuple__40, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":578
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  }

  /* "View.MemoryView":581
 *             return (-1,) * self.view.ndim
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);
  for (__pyx_t_6 = __pyx_v_self->view.suboffsets; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {
    __pyx_t_4 = __pyx_t_6;
    __pyx_v_suboffset = (__pyx_t_4[0]);
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_suboffset); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(2, 581, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyList_AsTuple(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":577
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":584
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 584, 0, __PYX_ERR(2, 584, __pyx_L1_error));

  /* "View.MemoryView":585
 *     @property
 *     def ndim(self):
 *         return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":584
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":588
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 588, 0, __PYX_ERR(2, 588, __pyx_L1_error));

  /* "View.MemoryView":589
 *     @property
 *     def itemsize(self):
 *         return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":588
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":592
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 592, 0, __PYX_ERR(2, 592, __pyx_L1_error));

  /* "View.MemoryView":593
 *     @property
 *     def nbytes(self):
 *         return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":592
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":596
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 596, 0, __PYX_ERR(2, 596, __pyx_L1_error));

  /* "View.MemoryView":597
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":598
 *     def size(self):
 *         if self._size is None:
 *             result = 1             # <<<<<<<<<<<<<<
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 */
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_result = __pyx_int_1;

    /* "View.MemoryView":600
 *             result = 1
 * 
 *             for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
 *                 result *= length
 * 
 */
    __pyx_t_4 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.shape; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_3[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 600, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "View.MemoryView":601
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 *                 result *= length             # <<<<<<<<<<<<<<
 * 
 *             self._size = result
 */
      __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 601, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_6);
      __pyx_t_6 = 0;
    }

    /* "View.MemoryView":603
 *                 result *= length
 * 
 *             self._size = result             # <<<<<<<<<<<<<<
 * 
 *         return self._size
 */
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    __Pyx_GOTREF(__pyx_v_self->_size);
    __Pyx_DECREF(__pyx_v_self->_size);
    __pyx_v_self->_size = __pyx_v_result;

    /* "View.MemoryView":597
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  }

  /* "View.MemoryView":605
 *             self._size = result
 * 
 *         return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_size);
  __pyx_r = __pyx_v_self->_size;
  goto __pyx_L0;

  /* "View.MemoryView":596
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":607
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

/* Python wrapper */
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);
  __Pyx_TraceCall("__len__", __pyx_f[2], 607, 0, __PYX_ERR(2, 607, __pyx_L1_error));

  /* "View.MemoryView":608
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.ndim >= 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":609
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_r = (__pyx_v_self->view.shape[0]);
    goto __pyx_L0;

    /* "View.MemoryView":608
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  }

  /* "View.MemoryView":611
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":607
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":613
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);
  __Pyx_TraceCall("__repr__", __pyx_f[2], 613, 0, __PYX_ERR(2, 613, __pyx_L1_error));

  /* "View.MemoryView":614
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":615
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "View.MemoryView":614
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":613
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":617
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);
  __Pyx_TraceCall("__str__", __pyx_f[2], 617, 0, __PYX_ERR(2, 617, __pyx_L1_error));

  /* "View.MemoryView":618
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":617
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":621
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_c_contig", 0);
  __Pyx_TraceCall("is_c_contig", __pyx_f[2], 621, 0, __PYX_ERR(2, 621, __pyx_L1_error));

  /* "View.MemoryView":624
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(2, 624, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":625
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":621
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":627
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_f_contig", 0);
  __Pyx_TraceCall("is_f_contig", __pyx_f[2], 627, 0, __PYX_ERR(2, 627, __pyx_L1_error));

  /* "View.MemoryView":630
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(2, 630, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":631
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":627
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":633
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);
  __Pyx_TraceCall("copy", __pyx_f[2], 633, 0, __PYX_ERR(2, 633, __pyx_L1_error));

  /* "View.MemoryView":635
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":637
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":638
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), ((char *)"c"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 638, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":643
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":633
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":645
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_fortran", 0);
  __Pyx_TraceCall("copy_fortran", __pyx_f[2], 645, 0, __PYX_ERR(2, 645, __pyx_L1_error));

  /* "View.MemoryView":647
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":649
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":650
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), ((char *)"fortran"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 650, __pyx_L1_error)
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":655
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":645
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview___reduce_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[2], 1, 0, __PYX_ERR(2, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview_2__setstate_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[2], 3, 0, __PYX_ERR(2, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":659
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 0);
  __Pyx_TraceCall("memoryview_cwrapper", __pyx_f[2], 659, 0, __PYX_ERR(2, 659, __pyx_L1_error));

  /* "View.MemoryView":660
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_o);
  __Pyx_GIVEREF(__pyx_v_o);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":661
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":662
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":659
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":665
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_check", 0);
  __Pyx_TraceCall("memoryview_check", __pyx_f[2], 665, 0, __PYX_ERR(2, 665, __pyx_L1_error));

  /* "View.MemoryView":666
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":665
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.memoryview_check", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":668
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  PyObject *__pyx_v_tup = NULL;
  PyObject *__pyx_v_result = NULL;
  int __pyx_v_have_slices;
  int __pyx_v_seen_ellipsis;
  CYTHON_UNUSED PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_item = NULL;
  Py_ssize_t __pyx_v_nslices;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_unellipsify", 0);
  __Pyx_TraceCall("_unellipsify", __pyx_f[2], 668, 0, __PYX_ERR(2, 668, __pyx_L1_error));

  /* "View.MemoryView":673
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_index); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":674
 *     """
 *     if not isinstance(index, tuple):
 *         tup = (index,)             # <<<<<<<<<<<<<<
 *     else:
 *         tup = index
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
    __pyx_v_tup = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "View.MemoryView":673
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":676
 *         tup = (index,)
 *     else:
 *         tup = index             # <<<<<<<<<<<<<<
 * 
 *     result = []
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_index);
    __pyx_v_tup = __pyx_v_index;
  }
  __pyx_L3:;

  /* "View.MemoryView":678
 *         tup = index
 * 
 *     result = []             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_result = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":679
 * 
 *     result = []
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 */
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":680
 *     result = []
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 */
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":681
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_tup)) || PyTuple_CheckExact(__pyx_v_tup)) {
    __pyx_t_4 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_tup); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 681, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(2, 681, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 681, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(2, 681, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 681, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 681, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "View.MemoryView":682
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":683
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
      __pyx_t_1 = ((!(__pyx_v_seen_ellipsis != 0)) != 0);
      if (__pyx_t_1) {

        /* "View.MemoryView":684
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
        __pyx_t_8 = PyObject_Length(__pyx_v_tup); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(2, 684, __pyx_L1_error)
        __pyx_t_7 = PyList_New(1 * ((((__pyx_v_ndim - __pyx_t_8) + 1)<0) ? 0:((__pyx_v_ndim - __pyx_t_8) + 1))); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 684, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        { Py_ssize_t __pyx_temp;
          for (__pyx_temp=0; __pyx_temp < ((__pyx_v_ndim - __pyx_t_8) + 1); __pyx_temp++) {
            __Pyx_INCREF(__pyx_slice__43);
            __Pyx_GIVEREF(__pyx_slice__43);
            PyList_SET_ITEM(__pyx_t_7, __pyx_temp, __pyx_slice__43);
          }
        }
        __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 684, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "View.MemoryView":685
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             else:
 *                 result.append(slice(None))
 */
        __pyx_v_seen_ellipsis = 1;

        /* "View.MemoryView":683
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":687
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
      /*else*/ {
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_slice__43); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 687, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":688
 *             else:
 *                 result.append(slice(None))
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 */
      __pyx_v_have_slices = 1;

      /* "View.MemoryView":682
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":690
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
    /*else*/ {
      __pyx_t_2 = PySlice_Check(__pyx_v_item); 
      __pyx_t_10 = ((!(__pyx_t_2 != 0)) != 0);
      if (__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = ((!(PyIndex_Check(__pyx_v_item) != 0)) != 0);
      __pyx_t_1 = __pyx_t_10;
      __pyx_L9_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "View.MemoryView":691
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 *                 raise TypeError("Cannot index with type '%s'" % type(item))             # <<<<<<<<<<<<<<
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 */
        __pyx_t_7 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Cannot_index_with_type_s, ((PyObject *)Py_TYPE(__pyx_v_item))); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 691, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 691, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_11, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __PYX_ERR(2, 691, __pyx_L1_error)

        /* "View.MemoryView":690
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
      }

      /* "View.MemoryView":693
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 *             have_slices = have_slices or isinstance(item, slice)             # <<<<<<<<<<<<<<
 *             result.append(item)
 * 
 */
      __pyx_t_10 = (__pyx_v_have_slices != 0);
      if (!__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = PySlice_Check(__pyx_v_item); 
      __pyx_t_2 = (__pyx_t_10 != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L11_bool_binop_done:;
      __pyx_v_have_slices = __pyx_t_1;

      /* "View.MemoryView":694
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 *             result.append(item)             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - len(result)
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_item); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 694, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "View.MemoryView":681
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":696
 *             result.append(item)
 * 
 *     nslices = ndim - len(result)             # <<<<<<<<<<<<<<
 *     if nslices:
 *         result.extend([slice(None)] * nslices)
 */
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_result); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(2, 696, __pyx_L1_error)
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_t_5);

  /* "View.MemoryView":697
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  __pyx_t_1 = (__pyx_v_nslices != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":698
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
    __pyx_t_3 = PyList_New(1 * ((__pyx_v_nslices<0) ? 0:__pyx_v_nslices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_nslices; __pyx_temp++) {
        __Pyx_INCREF(__pyx_slice__43);
        __Pyx_GIVEREF(__pyx_slice__43);
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_slice__43);
      }
    }
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 698, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "View.MemoryView":697
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  }

  /* "View.MemoryView":700
 *         result.extend([slice(None)] * nslices)
 * 
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!__pyx_v_have_slices) {
  } else {
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L14_bool_binop_done:;
  __pyx_t_4 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject*)__pyx_t_11);
  __pyx_t_11 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":668
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":702
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

static PyObject *assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assert_direct_dimensions", 0);
  __Pyx_TraceCall("assert_direct_dimensions", __pyx_f[2], 702, 0, __PYX_ERR(2, 702, __pyx_L1_error));

  /* "View.MemoryView":703
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")
 */
  __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);
  for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {
    __pyx_t_1 = __pyx_t_3;
    __pyx_v_suboffset = (__pyx_t_1[0]);

    /* "View.MemoryView":704
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    __pyx_t_4 = ((__pyx_v_suboffset >= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":705
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(2, 705, __pyx_L1_error)

      /* "View.MemoryView":704
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    }
  }

  /* "View.MemoryView":702
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":712
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim;
  int __pyx_v_suboffset_dim;
  int __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  __Pyx_memviewslice *__pyx_v_p_src;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0;
  __Pyx_memviewslice *__pyx_v_p_dst;
  int *__pyx_v_p_suboffset_dim;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  int __pyx_v_have_start;
  int __pyx_v_have_stop;
  int __pyx_v_have_step;
  PyObject *__pyx_v_index = NULL;
  struct __pyx_memoryview_obj *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_memoryview_obj *__pyx_t_4;
  char *__pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memview_slice", 0);
  __Pyx_TraceCall("memview_slice", __pyx_f[2], 712, 0, __PYX_ERR(2, 712, __pyx_L1_error));

  /* "View.MemoryView":713
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
 */
  __pyx_v_new_ndim = 0;
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":720
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
 */
  (void)(memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst))));

  /* "View.MemoryView":724
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_memview->view.ndim > 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(2, 724, __pyx_L1_error)
    }
  }
  #endif

  /* "View.MemoryView":726
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":727
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(2, 727, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":728
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
 */
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);

    /* "View.MemoryView":726
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":730
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":731
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_p_src = (&__pyx_v_src);
  }
  __pyx_L3:;

  /* "View.MemoryView":737
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
 */
  __pyx_t_4 = __pyx_v_p_src->memview;
  __pyx_v_dst.memview = __pyx_t_4;

  /* "View.MemoryView":738
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_v_p_src->data;
  __pyx_v_dst.data = __pyx_t_5;

  /* "View.MemoryView":743
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step
 */
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":744
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step
 *     cdef bint have_start, have_stop, have_step
 */
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":748
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {
    __pyx_t_3 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 748, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 748, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(2, 748, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(2, 748, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 748, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_v_dim = __pyx_t_6;
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "View.MemoryView":749
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
    __pyx_t_2 = (PyIndex_Check(__pyx_v_index) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":753
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 *                 index, 0, 0, # start, stop, step             # <<<<<<<<<<<<<<
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 */
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 753, __pyx_L1_error)

      /* "View.MemoryView":750
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_t_10, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 750, __pyx_L1_error)

      /* "View.MemoryView":749
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":756
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
    __pyx_t_2 = (__pyx_v_index == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":757
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 */
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":758
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
 */
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":759
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
 */
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1L;

      /* "View.MemoryView":760
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

      /* "View.MemoryView":756
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":762
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 762, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 762, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L7_bool_binop_done:;
      __pyx_v_start = __pyx_t_10;

      /* "View.MemoryView":763
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 763, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 763, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 763, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L9_bool_binop_done:;
      __pyx_v_stop = __pyx_t_10;

      /* "View.MemoryView":764
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 764, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 764, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L11_bool_binop_done:;
      __pyx_v_step = __pyx_t_10;

      /* "View.MemoryView":766
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 766, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":767
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 767, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":768
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 768, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":770
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 770, __pyx_L1_error)

      /* "View.MemoryView":776
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
    }
    __pyx_L6:;

    /* "View.MemoryView":748
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":778
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":779
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":780
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(2, 780, __pyx_L1_error) }

    /* "View.MemoryView":781
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(2, 781, __pyx_L1_error) }

    /* "View.MemoryView":779
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(2, 779, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":778
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  }

  /* "View.MemoryView":784
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":785
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "View.MemoryView":784
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(2, 784, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":712
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":809
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape;
  int __pyx_v_negative_step;
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("slice_memviewslice", __pyx_f[2], 809, 1, __PYX_ERR(2, 809, __pyx_L1_error));

  /* "View.MemoryView":829
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
  __pyx_t_1 = ((!(__pyx_v_is_slice != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":831
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    __pyx_t_1 = ((__pyx_v_start < 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":832
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 */
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

      /* "View.MemoryView":831
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    }

    /* "View.MemoryView":833
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    __pyx_t_1 = (0 <= __pyx_v_start);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);
    }
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":834
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"Index out of bounds (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(2, 834, __pyx_L1_error)

      /* "View.MemoryView":833
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    }

    /* "View.MemoryView":829
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":837
 *     else:
 * 
 *         negative_step = have_step != 0 and step < 0             # <<<<<<<<<<<<<<
 * 
 *         if have_step and step == 0:
 */
  /*else*/ {
    __pyx_t_1 = ((__pyx_v_have_step != 0) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step < 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;
    __pyx_v_negative_step = __pyx_t_2;

    /* "View.MemoryView":839
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    __pyx_t_1 = (__pyx_v_have_step != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step == 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_2) {

      /* "View.MemoryView":840
 * 
 *         if have_step and step == 0:
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Step may not be zero (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(2, 840, __pyx_L1_error)

      /* "View.MemoryView":839
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    }

    /* "View.MemoryView":843
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
    __pyx_t_2 = (__pyx_v_have_start != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":844
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
      __pyx_t_2 = ((__pyx_v_start < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":845
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
 */
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":846
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        __pyx_t_2 = ((__pyx_v_start < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":847
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
 */
          __pyx_v_start = 0;

          /* "View.MemoryView":846
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        }

        /* "View.MemoryView":844
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
        goto __pyx_L12;
      }

      /* "View.MemoryView":848
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      __pyx_t_2 = ((__pyx_v_start >= __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":849
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
        __pyx_t_2 = (__pyx_v_negative_step != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":850
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
 */
          __pyx_v_start = (__pyx_v_shape - 1);

          /* "View.MemoryView":849
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
          goto __pyx_L14;
        }

        /* "View.MemoryView":852
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        /*else*/ {
          __pyx_v_start = __pyx_v_shape;
        }
        __pyx_L14:;

        /* "View.MemoryView":848
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      }
      __pyx_L12:;

      /* "View.MemoryView":843
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
      goto __pyx_L11;
    }

    /* "View.MemoryView":854
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":855
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
 */
        __pyx_v_start = (__pyx_v_shape - 1);

        /* "View.MemoryView":854
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
        goto __pyx_L15;
      }

      /* "View.MemoryView":857
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
 */
      /*else*/ {
        __pyx_v_start = 0;
      }
      __pyx_L15:;
    }
    __pyx_L11:;

    /* "View.MemoryView":859
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
    __pyx_t_2 = (__pyx_v_have_stop != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":860
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
      __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":861
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
 */
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":862
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":863
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
 */
          __pyx_v_stop = 0;

          /* "View.MemoryView":862
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        }

        /* "View.MemoryView":860
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
        goto __pyx_L17;
      }

      /* "View.MemoryView":864
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      __pyx_t_2 = ((__pyx_v_stop > __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":865
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        __pyx_v_stop = __pyx_v_shape;

        /* "View.MemoryView":864
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      }
      __pyx_L17:;

      /* "View.MemoryView":859
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
      goto __pyx_L16;
    }

    /* "View.MemoryView":867
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":868
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
 */
        __pyx_v_stop = -1L;

        /* "View.MemoryView":867
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
        goto __pyx_L19;
      }

      /* "View.MemoryView":870
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 *         if not have_step:
 */
      /*else*/ {
        __pyx_v_stop = __pyx_v_shape;
      }
      __pyx_L19:;
    }
    __pyx_L16:;

    /* "View.MemoryView":872
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    __pyx_t_2 = ((!(__pyx_v_have_step != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":873
 * 
 *         if not have_step:
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_step = 1;

      /* "View.MemoryView":872
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    }

    /* "View.MemoryView":877
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
 */
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":879
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":880
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
 */
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);

      /* "View.MemoryView":879
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    }

    /* "View.MemoryView":882
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    __pyx_t_2 = ((__pyx_v_new_shape < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":883
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_new_shape = 0;

      /* "View.MemoryView":882
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    }

    /* "View.MemoryView":886
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
 */
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":887
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
 */
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":888
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;
  }
  __pyx_L3:;

  /* "View.MemoryView":891
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
  __pyx_t_2 = (((__pyx_v_suboffset_dim[0]) < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":892
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 */
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));

    /* "View.MemoryView":891
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
    goto __pyx_L23;
  }

  /* "View.MemoryView":894
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));
  }
  __pyx_L23:;

  /* "View.MemoryView":896
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":897
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
    __pyx_t_2 = ((!(__pyx_v_is_slice != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":898
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
      __pyx_t_2 = ((__pyx_v_new_ndim == 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":899
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 */
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);

        /* "View.MemoryView":898
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
        goto __pyx_L26;
      }

      /* "View.MemoryView":901
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
 */
      /*else*/ {

        /* "View.MemoryView":902
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 *                                      "must be indexed and not sliced", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             suboffset_dim[0] = new_ndim
 */
        __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"All dimensions preceding dimension %d must be indexed and not sliced"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(2, 901, __pyx_L1_error)
      }
      __pyx_L26:;

      /* "View.MemoryView":897
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
      goto __pyx_L25;
    }

    /* "View.MemoryView":904
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
    /*else*/ {
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;
    }
    __pyx_L25:;

    /* "View.MemoryView":896
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  }

  /* "View.MemoryView":906
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":809
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "View.MemoryView":912
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_suboffset;
  Py_ssize_t __pyx_v_itemsize;
  char *__pyx_v_resultp;
  char *__pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pybuffer_index", 0);
  __Pyx_TraceCall("pybuffer_index", __pyx_f[2], 912, 0, __PYX_ERR(2, 912, __pyx_L1_error));

  /* "View.MemoryView":914
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
 */
  __pyx_v_suboffset = -1L;

  /* "View.MemoryView":915
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
 */
  __pyx_t_1 = __pyx_v_view->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":918
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
  __pyx_t_2 = ((__pyx_v_view->ndim == 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":919
 * 
 *     if view.ndim == 0:
 *         shape = view.len / itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
 */
    if (unlikely(__pyx_v_itemsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(2, 919, __pyx_L1_error)
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(2, 919, __pyx_L1_error)
    }
    __pyx_v_shape = __Pyx_div_Py_ssize_t(__pyx_v_view->len, __pyx_v_itemsize);

    /* "View.MemoryView":920
 *     if view.ndim == 0:
 *         shape = view.len / itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
 */
    __pyx_v_stride = __pyx_v_itemsize;

    /* "View.MemoryView":918
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":922
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 */
  /*else*/ {
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":923
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
 */
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":924
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    __pyx_t_2 = ((__pyx_v_view->suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":925
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
 */
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);

      /* "View.MemoryView":924
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":927
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  __pyx_t_2 = ((__pyx_v_index < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":928
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 */
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":929
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    __pyx_t_2 = ((__pyx_v_index < 0) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":930
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
 */
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 930, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 930, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 930, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 930, __pyx_L1_error)

      /* "View.MemoryView":929
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    }

    /* "View.MemoryView":927
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  }

  /* "View.MemoryView":932
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_index >= __pyx_v_shape) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":933
 * 
 *     if index >= shape:
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
 */
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 933, __pyx_L1_error)

    /* "View.MemoryView":932
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  }

  /* "View.MemoryView":935
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
 */
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":936
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":937
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
 */
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);

    /* "View.MemoryView":936
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  }

  /* "View.MemoryView":939
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_resultp;
  goto __pyx_L0;

  /* "View.MemoryView":912
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":945
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("transpose_memslice", __pyx_f[2], 945, 1, __PYX_ERR(2, 945, __pyx_L1_error));

  /* "View.MemoryView":946
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 */
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":948
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->shape;
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":949
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->strides;
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":953
 * 
 *     cdef int i, j
 *     for i in range(ndim / 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 */
  __pyx_t_3 = __Pyx_div_long(__pyx_v_ndim, 2);
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_4; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":954
 *     cdef int i, j
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
 */
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":955
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 */
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_j]);
    __pyx_t_6 = (__pyx_v_strides[__pyx_v_i]);
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_5;
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_6;

    /* "View.MemoryView":956
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 */
    __pyx_t_6 = (__pyx_v_shape[__pyx_v_j]);
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_i]);
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_6;
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":958
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0) != 0);
    __pyx_t_7 = __pyx_t_8;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_7) {

      /* "View.MemoryView":959
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 1
 */
      __pyx_t_9 = __pyx_memoryview_err(__pyx_builtin_ValueError, ((char *)"Cannot transpose memoryview with indirect dimensions")); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 959, __pyx_L1_error)

      /* "View.MemoryView":958
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    }
  }

  /* "View.MemoryView":961
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "View.MemoryView":945
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "View.MemoryView":978
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

/* Python wrapper */
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);
  __Pyx_TraceCall("__dealloc__", __pyx_f[2], 978, 0, __PYX_ERR(2, 978, __pyx_L1_error));

  /* "View.MemoryView":979
 * 
 *     def __dealloc__(self):
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __PYX_XDEC_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":978
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView._memoryviewslice.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":981
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);
  __Pyx_TraceCall("convert_item_to_object", __pyx_f[2], 981, 0, __PYX_ERR(2, 981, __pyx_L1_error));

  /* "View.MemoryView":982
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_object_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":983
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 983, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":982
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  }

  /* "View.MemoryView":985
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 985, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":981
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":987
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);
  __Pyx_TraceCall("assign_item_from_object", __pyx_f[2], 987, 0, __PYX_ERR(2, 987, __pyx_L1_error));

  /* "View.MemoryView":988
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_dtype_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":989
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
 */
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(2, 989, __pyx_L1_error)

    /* "View.MemoryView":988
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":991
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 991, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":987
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":994
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 994, 0, __PYX_ERR(2, 994, __pyx_L1_error));

  /* "View.MemoryView":995
 *     @property
 *     def base(self):
 *         return self.from_object             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->from_object);
  __pyx_r = __pyx_v_self->from_object;
  goto __pyx_L0;

  /* "View.MemoryView":994
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.base.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice___reduce_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[2], 1, 0, __PYX_ERR(2, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice_2__setstate_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[2], 3, 0, __PYX_ERR(2, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1001
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_TypeInfo *__pyx_t_4;
  Py_buffer __pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  Py_ssize_t *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_fromslice", 0);
  __Pyx_TraceCall("memoryview_fromslice", __pyx_f[2], 1001, 0, __PYX_ERR(2, 1001, __pyx_L1_error));

  /* "View.MemoryView":1009
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = ((((PyObject *)__pyx_v_memviewslice.memview) == Py_None) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1010
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "View.MemoryView":1009
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "View.MemoryView":1015
 * 
 * 
 *     result = _memoryviewslice(None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryviewslice_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":1017
 *     result = _memoryviewslice(None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 */
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":1018
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 */
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":1020
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_memviewslice.memview), __pyx_n_s_base); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_result->from_object);
  __Pyx_DECREF(__pyx_v_result->from_object);
  __pyx_v_result->from_object = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "View.MemoryView":1021
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
 */
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":1023
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 */
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":1024
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 */
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":1025
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
 */
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":1026
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
 */
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":1027
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 */
  Py_INCREF(Py_None);

  /* "View.MemoryView":1029
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
  __pyx_t_1 = ((((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)->flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1030
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 *         result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 *     else:
 *         result.flags = PyBUF_RECORDS_RO
 */
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

    /* "View.MemoryView":1029
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":1032
 *         result.flags = PyBUF_RECORDS
 *     else:
 *         result.flags = PyBUF_RECORDS_RO             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 */
  /*else*/ {
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS_RO;
  }
  __pyx_L4:;

  /* "View.MemoryView":1034
 *         result.flags = PyBUF_RECORDS_RO
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 * 
 */
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":1035
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":1038
 * 
 * 
 *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 */
  __pyx_v_result->__pyx_base.view.suboffsets = NULL;

  /* "View.MemoryView":1039
 * 
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 */
  __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_v_suboffset = (__pyx_t_6[0]);

    /* "View.MemoryView":1040
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    __pyx_t_1 = ((__pyx_v_suboffset >= 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":1041
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

      /* "View.MemoryView":1042
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
 */
      goto __pyx_L6_break;

      /* "View.MemoryView":1040
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    }
  }
  __pyx_L6_break:;

  /* "View.MemoryView":1044
 *             break
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length
 */
  __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;
  __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

  /* "View.MemoryView":1045
 * 
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         result.view.len *= length
 * 
 */
  __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1045, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":1046
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 1046, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result->__pyx_base.view.len = __pyx_t_9;
  }

  /* "View.MemoryView":1048
 *         result.view.len *= length
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
 */
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":1049
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":1051
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":1001
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1054
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
  __Pyx_memviewslice *__pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_slice_from_memview", 0);
  __Pyx_TraceCall("get_slice_from_memview", __pyx_f[2], 1054, 0, __PYX_ERR(2, 1054, __pyx_L1_error));

  /* "View.MemoryView":1057
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1058
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(2, 1058, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":1059
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
 */
    __pyx_r = (&__pyx_v_obj->from_slice);
    goto __pyx_L0;

    /* "View.MemoryView":1057
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  }

  /* "View.MemoryView":1061
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1062
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
 */
    __pyx_r = __pyx_v_mslice;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1054
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1065
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  Py_ssize_t *__pyx_v_suboffsets;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("slice_copy", 0);
  __Pyx_TraceCall("slice_copy", __pyx_f[2], 1065, 0, __PYX_ERR(2, 1065, __pyx_L1_error));

  /* "View.MemoryView":1069
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
 */
  __pyx_t_1 = __pyx_v_memview->view.shape;
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1070
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
 */
  __pyx_t_1 = __pyx_v_memview->view.strides;
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1071
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 */
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1073
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
 */
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1074
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
 */
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1076
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 */
  __pyx_t_2 = __pyx_v_memview->view.ndim;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_dim = __pyx_t_4;

    /* "View.MemoryView":1077
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 */
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1078
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 */
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1079
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
 */
    if ((__pyx_v_suboffsets != 0)) {
      __pyx_t_5 = (__pyx_v_suboffsets[__pyx_v_dim]);
    } else {
      __pyx_t_5 = -1L;
    }
    (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_5;
  }

  /* "View.MemoryView":1065
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.slice_copy", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1082
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy", 0);
  __Pyx_TraceCall("memoryview_copy", __pyx_f[2], 1082, 0, __PYX_ERR(2, 1082, __pyx_L1_error));

  /* "View.MemoryView":1085
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 */
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1086
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1082
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1089
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *);
  int (*__pyx_v_to_dtype_func)(char *, PyObject *);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *(*__pyx_t_3)(char *);
  int (*__pyx_t_4)(char *, PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);
  __Pyx_TraceCall("memoryview_copy_from_slice", __pyx_f[2], 1089, 0, __PYX_ERR(2, 1089, __pyx_L1_error));

  /* "View.MemoryView":1096
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1097
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 */
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;
    __pyx_v_to_object_func = __pyx_t_3;

    /* "View.MemoryView":1098
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
 */
    __pyx_t_4 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;
    __pyx_v_to_dtype_func = __pyx_t_4;

    /* "View.MemoryView":1096
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1100
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
 */
  /*else*/ {
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1101
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 */
    __pyx_v_to_dtype_func = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":1103
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1105
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 1103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1089
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1111
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {
  Py_ssize_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("abs_py_ssize_t", __pyx_f[2], 1111, 1, __PYX_ERR(2, 1111, __pyx_L1_error));

  /* "View.MemoryView":1112
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arg < 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1113
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:
 *         return -arg             # <<<<<<<<<<<<<<
 *     else:
 *         return arg
 */
    __pyx_r = (-__pyx_v_arg);
    goto __pyx_L0;

    /* "View.MemoryView":1112
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  }

  /* "View.MemoryView":1115
 *         return -arg
 *     else:
 *         return arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
 */
  /*else*/ {
    __pyx_r = __pyx_v_arg;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1111
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.abs_py_ssize_t", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "View.MemoryView":1118
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_c_stride;
  Py_ssize_t __pyx_v_f_stride;
  char __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("get_best_order", __pyx_f[2], 1118, 1, __PYX_ERR(2, 1118, __pyx_L1_error));

  /* "View.MemoryView":1123
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
 */
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1124
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1126
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1127
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1128
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1129
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
      goto __pyx_L4_break;

      /* "View.MemoryView":1127
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L4_break:;

  /* "View.MemoryView":1131
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 */
  __pyx_t_1 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_1;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1132
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1133
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1134
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 */
      goto __pyx_L7_break;

      /* "View.MemoryView":1132
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L7_break:;

  /* "View.MemoryView":1136
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  __pyx_t_2 = ((abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1137
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
 */
    __pyx_r = 'C';
    goto __pyx_L0;

    /* "View.MemoryView":1136
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  }

  /* "View.MemoryView":1139
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  /*else*/ {
    __pyx_r = 'F';
    goto __pyx_L0;
  }

  /* "View.MemoryView":1118
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.get_best_order", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "View.MemoryView":1142
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent;
  Py_ssize_t __pyx_v_dst_extent;
  Py_ssize_t __pyx_v_src_stride;
  Py_ssize_t __pyx_v_dst_stride;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;

  /* "View.MemoryView":1149
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 */
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1150
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 */
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1151
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 */
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1152
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1154
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1155
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    __pyx_t_2 = ((__pyx_v_src_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_dst_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }

    /* "View.MemoryView":1156
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 */
    __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));
    }
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;

    /* "View.MemoryView":1155
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    if (__pyx_t_1) {

      /* "View.MemoryView":1157
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *        else:
 *            for i in range(dst_extent):
 */
      (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent)));

      /* "View.MemoryView":1155
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":1159
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 *            for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_dst_extent;
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "View.MemoryView":1160
 *        else:
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                src_data += src_stride
 *                dst_data += dst_stride
 */
        (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize));

        /* "View.MemoryView":1161
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride             # <<<<<<<<<<<<<<
 *                dst_data += dst_stride
 *     else:
 */
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1162
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 *                dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
 */
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
      }
    }
    __pyx_L4:;

    /* "View.MemoryView":1154
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1164
 *                dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
 */
  /*else*/ {
    __pyx_t_4 = __pyx_v_dst_extent;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "View.MemoryView":1165
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
 */
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1169
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
 */
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1170
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
 */
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1142
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

  /* function exit code */
}

/* "View.MemoryView":1172
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("copy_strided_to_strided", __pyx_f[2], 1172, 1, __PYX_ERR(2, 1172, __pyx_L1_error));

  /* "View.MemoryView":1175
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 */
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1172
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.copy_strided_to_strided", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "View.MemoryView":1179
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_size;
  Py_ssize_t __pyx_r;
  __Pyx_TraceDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("slice_get_size", __pyx_f[2], 1179, 1, __PYX_ERR(2, 1179, __pyx_L1_error));

  /* "View.MemoryView":1181
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for shape in src.shape[:ndim]:
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1183
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 * 
 *     for shape in src.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         size *= shape
 * 
 */
  __pyx_t_3 = (__pyx_v_src->shape + __pyx_v_ndim);
  for (__pyx_t_4 = __pyx_v_src->shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_shape = (__pyx_t_2[0]);

    /* "View.MemoryView":1184
 * 
 *     for shape in src.shape[:ndim]:
 *         size *= shape             # <<<<<<<<<<<<<<
 * 
 *     return size
 */
    __pyx_v_size = (__pyx_v_size * __pyx_v_shape);
  }

  /* "View.MemoryView":1186
 *         size *= shape
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
 */
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "View.MemoryView":1179
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.slice_get_size", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "View.MemoryView":1189
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("fill_contig_strides_array", __pyx_f[2], 1189, 1, __PYX_ERR(2, 1189, __pyx_L1_error));

  /* "View.MemoryView":1198
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
  __pyx_t_1 = ((__pyx_v_order == 'F') != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1199
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
    __pyx_t_2 = __pyx_v_ndim;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_idx = __pyx_t_4;

      /* "View.MemoryView":1200
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 *     else:
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1201
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }

    /* "View.MemoryView":1198
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1203
 *             stride *= shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
  /*else*/ {
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1; __pyx_t_2-=1) {
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1204
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 * 
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1205
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1207
 *             stride *= shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 */
  __pyx_r = __pyx_v_stride;
  goto __pyx_L0;

  /* "View.MemoryView":1189
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.fill_contig_strides_array", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "View.MemoryView":1210
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i;
  void *__pyx_v_result;
  size_t __pyx_v_itemsize;
  size_t __pyx_v_size;
  void *__pyx_r;
  __Pyx_TraceDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_memoryview_obj *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("copy_data_to_temp", __pyx_f[2], 1210, 1, __PYX_ERR(2, 1210, __pyx_L1_error));

  /* "View.MemoryView":1221
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1222
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
 */
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1224
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err(MemoryError, NULL)
 */
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1225
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_result != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1226
 *     result = malloc(size)
 *     if not result:
 *         _err(MemoryError, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_err(__pyx_builtin_MemoryError, NULL); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(2, 1226, __pyx_L1_error)

    /* "View.MemoryView":1225
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  }

  /* "View.MemoryView":1229
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 */
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1230
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 */
  __pyx_t_4 = __pyx_v_src->memview;
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1231
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1232
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1233
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,
 */
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1235
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,             # <<<<<<<<<<<<<<
 *                               ndim, order)
 * 
 */
  (void)(__pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order));

  /* "View.MemoryView":1239
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1240
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    __pyx_t_2 = (((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1241
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src[0], order, ndim):
 */
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;

      /* "View.MemoryView":1240
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    }
  }

  /* "View.MemoryView":1243
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
  __pyx_t_2 = (__pyx_memviewslice_is_contig((__pyx_v_src[0]), __pyx_v_order, __pyx_v_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1244
 * 
 *     if slice_is_contig(src[0], order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 */
    (void)(memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size));

    /* "View.MemoryView":1243
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":1246
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  /*else*/ {
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);
  }
  __pyx_L9:;

  /* "View.MemoryView":1248
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":1210
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "View.MemoryView":1253
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_extents", 0);
  __Pyx_TraceCall("_err_extents", __pyx_f[2], 1253, 0, __PYX_ERR(2, 1253, __pyx_L1_error));

  /* "View.MemoryView":1256
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 *                                                         (i, extent1, extent2))             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_extent1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_extent2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "View.MemoryView":1255
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %             # <<<<<<<<<<<<<<
 *                                                         (i, extent1, extent2))
 * 
 */
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(2, 1255, __pyx_L1_error)

  /* "View.MemoryView":1253
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1259
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, char *__pyx_v_msg, int __pyx_v_dim) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_dim", 0);
  __Pyx_TraceCall("_err_dim", __pyx_f[2], 1259, 0, __PYX_ERR(2, 1259, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1260
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:
 *     raise error(msg.decode('ascii') % dim)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
 */
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyUnicode_Format(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_v_error);
  __pyx_t_3 = __pyx_v_error; __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 1260, __pyx_L1_error)

  /* "View.MemoryView":1259
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1263
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

static int __pyx_memoryview_err(PyObject *__pyx_v_error, char *__pyx_v_msg) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err", 0);
  __Pyx_TraceCall("_err", __pyx_f[2], 1263, 0, __PYX_ERR(2, 1263, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1264
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":1265
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))             # <<<<<<<<<<<<<<
 *     else:
 *         raise error
 */
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_error);
    __pyx_t_4 = __pyx_v_error; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 1265, __pyx_L1_error)

    /* "View.MemoryView":1264
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  }

  /* "View.MemoryView":1267
 *         raise error(msg.decode('ascii'))
 *     else:
 *         raise error             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_contents')
 */
  /*else*/ {
    __Pyx_Raise(__pyx_v_error, 0, 0, 0);
    __PYX_ERR(2, 1267, __pyx_L1_error)
  }

  /* "View.MemoryView":1263
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1270
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata;
  size_t __pyx_v_itemsize;
  int __pyx_v_i;
  char __pyx_v_order;
  int __pyx_v_broadcasting;
  int __pyx_v_direct_copy;
  __Pyx_memviewslice __pyx_v_tmp;
  int __pyx_v_ndim;
  int __pyx_r;
  __Pyx_TraceDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  void *__pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("memoryview_copy_contents", __pyx_f[2], 1270, 1, __PYX_ERR(2, 1270, __pyx_L1_error));

  /* "View.MemoryView":1278
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 */
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1279
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 */
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1281
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
 */
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1282
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
 */
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1283
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
 */
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1286
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
  __pyx_t_2 = ((__pyx_v_src_ndim < __pyx_v_dst_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1287
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);

    /* "View.MemoryView":1286
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1288
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_dst_ndim < __pyx_v_src_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1289
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);

    /* "View.MemoryView":1288
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":1291
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_3 = __pyx_v_dst_ndim;
  __pyx_t_4 = __pyx_v_src_ndim;
  if (((__pyx_t_3 > __pyx_t_4) != 0)) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1293
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 */
  __pyx_t_5 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_5;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1294
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i])) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1295
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
      __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) == 1) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":1296
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
 */
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1297
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 */
        (__pyx_v_src.strides[__pyx_v_i]) = 0;

        /* "View.MemoryView":1295
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":1299
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
 */
      /*else*/ {
        __pyx_t_6 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(2, 1299, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":1294
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    }

    /* "View.MemoryView":1301
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    __pyx_t_2 = (((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1302
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 */
      __pyx_t_6 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Dimension %d is not direct"), __pyx_v_i); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(2, 1302, __pyx_L1_error)

      /* "View.MemoryView":1301
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    }
  }

  /* "View.MemoryView":1304
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  __pyx_t_2 = (__pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1306
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    __pyx_t_2 = ((!(__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim) != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1307
 * 
 *         if not slice_is_contig(src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 */
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);

      /* "View.MemoryView":1306
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    }

    /* "View.MemoryView":1309
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
 */
    __pyx_t_7 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_7 == ((void *)NULL))) __PYX_ERR(2, 1309, __pyx_L1_error)
    __pyx_v_tmpdata = __pyx_t_7;

    /* "View.MemoryView":1310
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
 */
    __pyx_v_src = __pyx_v_tmp;

    /* "View.MemoryView":1304
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  }

  /* "View.MemoryView":1312
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_broadcasting != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1315
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'C', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1316
 * 
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'C', __pyx_v_ndim);

      /* "View.MemoryView":1315
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
      goto __pyx_L12;
    }

    /* "View.MemoryView":1317
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'F', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1318
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

      /* "View.MemoryView":1317
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    }
    __pyx_L12:;

    /* "View.MemoryView":1320
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_2 = (__pyx_v_direct_copy != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1322
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1323
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 */
      (void)(memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim)));

      /* "View.MemoryView":1324
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1325
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1326
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "View.MemoryView":1320
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    }

    /* "View.MemoryView":1312
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1328
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (__pyx_v_order == 'F');
  if (__pyx_t_2) {
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));
  }
  __pyx_t_8 = (__pyx_t_2 != 0);
  if (__pyx_t_8) {

    /* "View.MemoryView":1331
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(2, 1331, __pyx_L1_error)

    /* "View.MemoryView":1332
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(2, 1332, __pyx_L1_error)

    /* "View.MemoryView":1328
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1334
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1335
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 */
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1336
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1338
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1339
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1270
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "View.MemoryView":1342
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i;
  int __pyx_v_offset;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("broadcast_leading", __pyx_f[2], 1342, 1, __PYX_ERR(2, 1342, __pyx_L1_error));

  /* "View.MemoryView":1346
 *                             int ndim_other) nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1348
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1349
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 */
    (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

    /* "View.MemoryView":1350
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 */
    (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

    /* "View.MemoryView":1351
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
 */
    (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);
  }

  /* "View.MemoryView":1353
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 */
  __pyx_t_1 = __pyx_v_offset;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1354
 * 
 *     for i in range(offset):
 *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1
 */
    (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1355
 *     for i in range(offset):
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

    /* "View.MemoryView":1356
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1342
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.broadcast_leading", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "View.MemoryView":1364
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("refcount_copying", __pyx_f[2], 1364, 1, __PYX_ERR(2, 1364, __pyx_L1_error));

  /* "View.MemoryView":1368
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  __pyx_t_1 = (__pyx_v_dtype_is_object != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1369
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,             # <<<<<<<<<<<<<<
 *                                            dst.strides, ndim, inc)
 * 
 */
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);

    /* "View.MemoryView":1368
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  }

  /* "View.MemoryView":1364
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.refcount_copying", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "View.MemoryView":1373
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("refcount_objects_in_slice_with_gil", 0);
  __Pyx_TraceCall("refcount_objects_in_slice_with_gil", __pyx_f[2], 1373, 0, __PYX_ERR(2, 1373, __pyx_L1_error));

  /* "View.MemoryView":1376
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 */
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1373
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.refcount_objects_in_slice_with_gil", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "View.MemoryView":1379
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("refcount_objects_in_slice", 0);
  __Pyx_TraceCall("refcount_objects_in_slice", __pyx_f[2], 1379, 0, __PYX_ERR(2, 1379, __pyx_L1_error));

  /* "View.MemoryView":1383
 *     cdef Py_ssize_t i
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
 */
  __pyx_t_1 = (__pyx_v_shape[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1384
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
    __pyx_t_4 = ((__pyx_v_ndim == 1) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":1385
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
      __pyx_t_4 = (__pyx_v_inc != 0);
      if (__pyx_t_4) {

        /* "View.MemoryView":1386
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
 */
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));

        /* "View.MemoryView":1385
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
        goto __pyx_L6;
      }

      /* "View.MemoryView":1388
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 */
      /*else*/ {
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));
      }
      __pyx_L6:;

      /* "View.MemoryView":1384
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":1390
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                       ndim - 1, inc)
 * 
 */
    /*else*/ {

      /* "View.MemoryView":1391
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 *                                       ndim - 1, inc)             # <<<<<<<<<<<<<<
 * 
 *         data += strides[0]
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);
    }
    __pyx_L5:;

    /* "View.MemoryView":1393
 *                                       ndim - 1, inc)
 * 
 *         data += strides[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_data = (__pyx_v_data + (__pyx_v_strides[0]));
  }

  /* "View.MemoryView":1379
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.refcount_objects_in_slice", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1399
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("slice_assign_scalar", __pyx_f[2], 1399, 1, __PYX_ERR(2, 1399, __pyx_L1_error));

  /* "View.MemoryView":1402
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1403
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,             # <<<<<<<<<<<<<<
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1405
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1399
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "View.MemoryView":1409
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_extent;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("_slice_assign_scalar", __pyx_f[2], 1409, 1, __PYX_ERR(2, 1409, __pyx_L1_error));

  /* "View.MemoryView":1413
 *                               size_t itemsize, void *item) nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
 */
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1414
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1416
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1417
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
 */
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1418
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
 */
      (void)(memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize));

      /* "View.MemoryView":1419
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }

    /* "View.MemoryView":1416
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1421
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1422
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                 ndim - 1, itemsize, item)
 *             data += stride
 */
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1424
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1409
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView._slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum = {"__pyx_unpickle_Enum", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Enum") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__47)
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum", 0);
  __Pyx_TraceCall("__pyx_unpickle_Enum", __pyx_f[2], 1, 0, __PYX_ERR(2, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__48, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_MemviewEnum_type), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_unpickle_Enum__set_state(((struct __pyx_MemviewEnum_obj *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_Enum__set_state", __pyx_f[2], 11, 0, __PYX_ERR(2, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->name);
  __Pyx_DECREF(__pyx_v___pyx_result->name);
  __pyx_v___pyx_result->name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_6chromo_6fields_FieldBase __pyx_vtable_6chromo_6fields_FieldBase;

static PyObject *__pyx_tp_new_6chromo_6fields_FieldBase(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6chromo_6fields_FieldBase *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6chromo_6fields_FieldBase *)o);
  p->__pyx_vtab = __pyx_vtabptr_6chromo_6fields_FieldBase;
  p->polymers = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->binders = Py_None; Py_INCREF(Py_None);
  p->confine_type = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6chromo_6fields_FieldBase(PyObject *o) {
  struct __pyx_obj_6chromo_6fields_FieldBase *p = (struct __pyx_obj_6chromo_6fields_FieldBase *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->polymers);
  Py_CLEAR(p->binders);
  Py_CLEAR(p->confine_type);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6chromo_6fields_FieldBase(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6chromo_6fields_FieldBase *p = (struct __pyx_obj_6chromo_6fields_FieldBase *)o;
  if (p->polymers) {
    e = (*v)(p->polymers, a); if (e) return e;
  }
  if (p->binders) {
    e = (*v)(p->binders, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6chromo_6fields_FieldBase(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6chromo_6fields_FieldBase *p = (struct __pyx_obj_6chromo_6fields_FieldBase *)o;
  tmp = ((PyObject*)p->polymers);
  p->polymers = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->binders);
  p->binders = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6chromo_6fields_9FieldBase_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_9FieldBase_4name_1__get__(o);
}

static PyObject *__pyx_getprop_6chromo_6fields_9FieldBase_polymers(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_9FieldBase_8polymers_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_9FieldBase_polymers(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_9FieldBase_8polymers_3__set__(o, v);
  }
  else {
    return __pyx_pw_6chromo_6fields_9FieldBase_8polymers_5__del__(o);
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_9FieldBase_n_polymers(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_9FieldBase_10n_polymers_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_9FieldBase_n_polymers(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_9FieldBase_10n_polymers_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_9FieldBase_binders(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_9FieldBase_7binders_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_9FieldBase_binders(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_9FieldBase_7binders_3__set__(o, v);
  }
  else {
    return __pyx_pw_6chromo_6fields_9FieldBase_7binders_5__del__(o);
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_9FieldBase_confine_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_9FieldBase_12confine_type_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_9FieldBase_confine_type(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_9FieldBase_12confine_type_3__set__(o, v);
  }
  else {
    return __pyx_pw_6chromo_6fields_9FieldBase_12confine_type_5__del__(o);
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_9FieldBase_confine_length(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_9FieldBase_14confine_length_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_9FieldBase_confine_length(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_9FieldBase_14confine_length_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_6chromo_6fields_FieldBase[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6chromo_6fields_9FieldBase_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6chromo_6fields_9FieldBase_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6chromo_6fields_FieldBase[] = {
  {(char *)"name", __pyx_getprop_6chromo_6fields_9FieldBase_name, 0, (char *)"Print the name of the field.\n\n        Notes\n        -----\n        For now, there's only one field per sim, so classname works.\n        ", 0},
  {(char *)"polymers", __pyx_getprop_6chromo_6fields_9FieldBase_polymers, __pyx_setprop_6chromo_6fields_9FieldBase_polymers, (char *)0, 0},
  {(char *)"n_polymers", __pyx_getprop_6chromo_6fields_9FieldBase_n_polymers, __pyx_setprop_6chromo_6fields_9FieldBase_n_polymers, (char *)0, 0},
  {(char *)"binders", __pyx_getprop_6chromo_6fields_9FieldBase_binders, __pyx_setprop_6chromo_6fields_9FieldBase_binders, (char *)0, 0},
  {(char *)"confine_type", __pyx_getprop_6chromo_6fields_9FieldBase_confine_type, __pyx_setprop_6chromo_6fields_9FieldBase_confine_type, (char *)0, 0},
  {(char *)"confine_length", __pyx_getprop_6chromo_6fields_9FieldBase_confine_length, __pyx_setprop_6chromo_6fields_9FieldBase_confine_length, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_FieldBase = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  __pyx_pw_6chromo_6fields_9FieldBase_5__contains__, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyTypeObject __pyx_type_6chromo_6fields_FieldBase = {
  PyVarObject_HEAD_INIT(0, 0)
  "chromo.fields.FieldBase", /*tp_name*/
  sizeof(struct __pyx_obj_6chromo_6fields_FieldBase), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6chromo_6fields_FieldBase, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_FieldBase, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_6chromo_6fields_9FieldBase_3__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "A discretization of space for computing energies.\n\n    Notes\n    -----\n    Must be subclassed to be useful.\n\n    As implemented so far, this codebase accepts only one polymer in the field\n\n    Attributes\n    ----------\n    polymers : List[PolymerBase]\n        Polymers contained in the field; for now, this codebase accepts only\n        one polymer in the field\n    n_polymers : long\n        Number of polymers in the field\n    binders : pd.DataFrame\n        Table containing reader proteins bound to the polymer and their\n        relevant properties\n    ", /*tp_doc*/
  __pyx_tp_traverse_6chromo_6fields_FieldBase, /*tp_traverse*/
  __pyx_tp_clear_6chromo_6fields_FieldBase, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6chromo_6fields_FieldBase, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6chromo_6fields_FieldBase, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6chromo_6fields_9FieldBase_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6chromo_6fields_FieldBase, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6chromo_6fields_NullField __pyx_vtable_6chromo_6fields_NullField;

static PyObject *__pyx_tp_new_6chromo_6fields_NullField(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6chromo_6fields_NullField *p;
  PyObject *o = __pyx_tp_new_6chromo_6fields_FieldBase(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6chromo_6fields_NullField *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6chromo_6fields_FieldBase*)__pyx_vtabptr_6chromo_6fields_NullField;
  return o;
}

static PyMethodDef __pyx_methods_6chromo_6fields_NullField[] = {
  {"to_file", (PyCFunction)__pyx_pw_6chromo_6fields_9NullField_3to_file, METH_O, __pyx_doc_6chromo_6fields_9NullField_2to_file},
  {"from_file", (PyCFunction)__pyx_pw_6chromo_6fields_9NullField_5from_file, METH_O, __pyx_doc_6chromo_6fields_9NullField_4from_file},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6chromo_6fields_9NullField_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6chromo_6fields_9NullField_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6chromo_6fields_NullField = {
  PyVarObject_HEAD_INIT(0, 0)
  "chromo.fields.NullField", /*tp_name*/
  sizeof(struct __pyx_obj_6chromo_6fields_NullField), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6chromo_6fields_FieldBase, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6chromo_6fields_9FieldBase_3__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "A field with no energy contributions.\n    ", /*tp_doc*/
  __pyx_tp_traverse_6chromo_6fields_FieldBase, /*tp_traverse*/
  __pyx_tp_clear_6chromo_6fields_FieldBase, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6chromo_6fields_NullField, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6chromo_6fields_9NullField_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6chromo_6fields_NullField, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6chromo_6fields_UniformDensityField __pyx_vtable_6chromo_6fields_UniformDensityField;

static PyObject *__pyx_tp_new_6chromo_6fields_UniformDensityField(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6chromo_6fields_UniformDensityField *p;
  PyObject *o = __pyx_tp_new_6chromo_6fields_FieldBase(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6chromo_6fields_UniformDensityField *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6chromo_6fields_FieldBase*)__pyx_vtabptr_6chromo_6fields_UniformDensityField;
  p->_field_descriptors = Py_None; Py_INCREF(Py_None);
  p->access_vols = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->sub_bins_to_weights_x = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->sub_bins_to_weights_y = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->sub_bins_to_weights_z = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->sub_bins_to_bins_x = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->sub_bins_to_bins_y = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->sub_bins_to_bins_z = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->dict_ = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->binder_dict = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->width_xyz.data = NULL;
  p->width_xyz.memview = NULL;
  p->dxyz.data = NULL;
  p->dxyz.memview = NULL;
  p->bin_index.data = NULL;
  p->bin_index.memview = NULL;
  p->nbr_inds_with_trial.data = NULL;
  p->nbr_inds_with_trial.memview = NULL;
  p->nbr_inds.data = NULL;
  p->nbr_inds.memview = NULL;
  p->index_xyz.data = NULL;
  p->index_xyz.memview = NULL;
  p->wt_vec.data = NULL;
  p->wt_vec.memview = NULL;
  p->xyz.data = NULL;
  p->xyz.memview = NULL;
  p->weight_xyz.data = NULL;
  p->weight_xyz.memview = NULL;
  p->wt_vec_with_trial.data = NULL;
  p->wt_vec_with_trial.memview = NULL;
  p->xyz_with_trial.data = NULL;
  p->xyz_with_trial.memview = NULL;
  p->weight_xyz_with_trial.data = NULL;
  p->weight_xyz_with_trial.memview = NULL;
  p->index_xyz_with_trial.data = NULL;
  p->index_xyz_with_trial.memview = NULL;
  p->doubly_bound.data = NULL;
  p->doubly_bound.memview = NULL;
  p->doubly_bound_trial.data = NULL;
  p->doubly_bound_trial.memview = NULL;
  p->density.data = NULL;
  p->density.memview = NULL;
  p->density_trial.data = NULL;
  p->density_trial.memview = NULL;
  p->half_width_xyz.data = NULL;
  p->half_width_xyz.memview = NULL;
  p->half_step_xyz.data = NULL;
  p->half_step_xyz.memview = NULL;
  p->n_xyz_m1.data = NULL;
  p->n_xyz_m1.memview = NULL;
  p->affected_bins_last_move.data = NULL;
  p->affected_bins_last_move.memview = NULL;
  p->inds_xyz_to_super.data = NULL;
  p->inds_xyz_to_super.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc_6chromo_6fields_UniformDensityField(PyObject *o) {
  struct __pyx_obj_6chromo_6fields_UniformDensityField *p = (struct __pyx_obj_6chromo_6fields_UniformDensityField *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_field_descriptors);
  Py_CLEAR(p->access_vols);
  Py_CLEAR(p->sub_bins_to_weights_x);
  Py_CLEAR(p->sub_bins_to_weights_y);
  Py_CLEAR(p->sub_bins_to_weights_z);
  Py_CLEAR(p->sub_bins_to_bins_x);
  Py_CLEAR(p->sub_bins_to_bins_y);
  Py_CLEAR(p->sub_bins_to_bins_z);
  Py_CLEAR(p->dict_);
  Py_CLEAR(p->binder_dict);
  __PYX_XDEC_MEMVIEW(&p->width_xyz, 1);
  __PYX_XDEC_MEMVIEW(&p->dxyz, 1);
  __PYX_XDEC_MEMVIEW(&p->bin_index, 1);
  __PYX_XDEC_MEMVIEW(&p->nbr_inds_with_trial, 1);
  __PYX_XDEC_MEMVIEW(&p->nbr_inds, 1);
  __PYX_XDEC_MEMVIEW(&p->index_xyz, 1);
  __PYX_XDEC_MEMVIEW(&p->wt_vec, 1);
  __PYX_XDEC_MEMVIEW(&p->xyz, 1);
  __PYX_XDEC_MEMVIEW(&p->weight_xyz, 1);
  __PYX_XDEC_MEMVIEW(&p->wt_vec_with_trial, 1);
  __PYX_XDEC_MEMVIEW(&p->xyz_with_trial, 1);
  __PYX_XDEC_MEMVIEW(&p->weight_xyz_with_trial, 1);
  __PYX_XDEC_MEMVIEW(&p->index_xyz_with_trial, 1);
  __PYX_XDEC_MEMVIEW(&p->doubly_bound, 1);
  __PYX_XDEC_MEMVIEW(&p->doubly_bound_trial, 1);
  __PYX_XDEC_MEMVIEW(&p->density, 1);
  __PYX_XDEC_MEMVIEW(&p->density_trial, 1);
  __PYX_XDEC_MEMVIEW(&p->half_width_xyz, 1);
  __PYX_XDEC_MEMVIEW(&p->half_step_xyz, 1);
  __PYX_XDEC_MEMVIEW(&p->n_xyz_m1, 1);
  __PYX_XDEC_MEMVIEW(&p->affected_bins_last_move, 1);
  __PYX_XDEC_MEMVIEW(&p->inds_xyz_to_super, 1);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_6chromo_6fields_FieldBase(o);
}

static int __pyx_tp_traverse_6chromo_6fields_UniformDensityField(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6chromo_6fields_UniformDensityField *p = (struct __pyx_obj_6chromo_6fields_UniformDensityField *)o;
  e = __pyx_tp_traverse_6chromo_6fields_FieldBase(o, v, a); if (e) return e;
  if (p->_field_descriptors) {
    e = (*v)(p->_field_descriptors, a); if (e) return e;
  }
  if (p->access_vols) {
    e = (*v)(p->access_vols, a); if (e) return e;
  }
  if (p->sub_bins_to_weights_x) {
    e = (*v)(p->sub_bins_to_weights_x, a); if (e) return e;
  }
  if (p->sub_bins_to_weights_y) {
    e = (*v)(p->sub_bins_to_weights_y, a); if (e) return e;
  }
  if (p->sub_bins_to_weights_z) {
    e = (*v)(p->sub_bins_to_weights_z, a); if (e) return e;
  }
  if (p->sub_bins_to_bins_x) {
    e = (*v)(p->sub_bins_to_bins_x, a); if (e) return e;
  }
  if (p->sub_bins_to_bins_y) {
    e = (*v)(p->sub_bins_to_bins_y, a); if (e) return e;
  }
  if (p->sub_bins_to_bins_z) {
    e = (*v)(p->sub_bins_to_bins_z, a); if (e) return e;
  }
  if (p->dict_) {
    e = (*v)(p->dict_, a); if (e) return e;
  }
  if (p->binder_dict) {
    e = (*v)(p->binder_dict, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6chromo_6fields_UniformDensityField(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6chromo_6fields_UniformDensityField *p = (struct __pyx_obj_6chromo_6fields_UniformDensityField *)o;
  __pyx_tp_clear_6chromo_6fields_FieldBase(o);
  tmp = ((PyObject*)p->_field_descriptors);
  p->_field_descriptors = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->access_vols);
  p->access_vols = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->sub_bins_to_weights_x);
  p->sub_bins_to_weights_x = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->sub_bins_to_weights_y);
  p->sub_bins_to_weights_y = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->sub_bins_to_weights_z);
  p->sub_bins_to_weights_z = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->sub_bins_to_bins_x);
  p->sub_bins_to_bins_x = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->sub_bins_to_bins_y);
  p->sub_bins_to_bins_y = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->sub_bins_to_bins_z);
  p->sub_bins_to_bins_z = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->dict_);
  p->dict_ = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->binder_dict);
  p->binder_dict = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_tp_richcompare_6chromo_6fields_UniformDensityField(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_6chromo_6fields_19UniformDensityField_13__eq__(o1, o2);
    }
    case Py_NE: {
      PyObject *ret;
      ret = __pyx_pw_6chromo_6fields_19UniformDensityField_13__eq__(o1, o2);
      if (likely(ret && ret != Py_NotImplemented)) {
        int b = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);
        if (unlikely(b < 0)) return NULL;
        ret = (b) ? Py_False : Py_True;
        Py_INCREF(ret);
      }
      return ret;
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField__field_descriptors(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_18_field_descriptors_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField__field_descriptors(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_18_field_descriptors_3__set__(o, v);
  }
  else {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_18_field_descriptors_5__del__(o);
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_x_width(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_7x_width_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_x_width(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_7x_width_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_y_width(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_7y_width_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_y_width(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_7y_width_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_z_width(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_7z_width_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_z_width(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_7z_width_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_width_xyz(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_9width_xyz_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_width_xyz(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_9width_xyz_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_nx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_2nx_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_nx(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_2nx_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_ny(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_2ny_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_ny(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_2ny_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_nz(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_2nz_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_nz(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_2nz_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_n_sub_bins_x(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_12n_sub_bins_x_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_n_sub_bins_x(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_12n_sub_bins_x_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_n_sub_bins_y(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_12n_sub_bins_y_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_n_sub_bins_y(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_12n_sub_bins_y_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_n_sub_bins_z(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_12n_sub_bins_z_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_n_sub_bins_z(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_12n_sub_bins_z_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_dx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_2dx_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_dx(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_2dx_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_dy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_2dy_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_dy(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_2dy_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_dz(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_2dz_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_dz(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_2dz_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_dxyz(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_4dxyz_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_dxyz(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_4dxyz_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_n_bins(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_6n_bins_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_n_bins(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_6n_bins_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_n_points(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_8n_points_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_n_points(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_8n_points_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_vol_bin(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_7vol_bin_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_vol_bin(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_7vol_bin_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_bin_index(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_9bin_index_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_bin_index(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_9bin_index_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_nbr_inds_with_trial(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_19nbr_inds_with_trial_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_nbr_inds_with_trial(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_19nbr_inds_with_trial_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_nbr_inds(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_8nbr_inds_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_nbr_inds(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_8nbr_inds_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_index_xyz(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_9index_xyz_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_index_xyz(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_9index_xyz_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_wt_vec(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_6wt_vec_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_wt_vec(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_6wt_vec_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_xyz(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_3xyz_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_xyz(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_3xyz_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_weight_xyz(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_10weight_xyz_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_weight_xyz(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_10weight_xyz_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_wt_vec_with_trial(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_17wt_vec_with_trial_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_wt_vec_with_trial(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_17wt_vec_with_trial_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_xyz_with_trial(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_14xyz_with_trial_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_xyz_with_trial(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_14xyz_with_trial_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_weight_xyz_with_trial(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_21weight_xyz_with_trial_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_weight_xyz_with_trial(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_21weight_xyz_with_trial_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_index_xyz_with_trial(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_20index_xyz_with_trial_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_index_xyz_with_trial(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_20index_xyz_with_trial_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_num_binders(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_11num_binders_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_num_binders(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_11num_binders_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_doubly_bound(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_12doubly_bound_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_doubly_bound(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_12doubly_bound_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_doubly_bound_trial(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_18doubly_bound_trial_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_doubly_bound_trial(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_18doubly_bound_trial_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_density(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_7density_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_density(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_7density_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_density_trial(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_13density_trial_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_density_trial(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_13density_trial_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_access_vols(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_11access_vols_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_access_vols(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_11access_vols_3__set__(o, v);
  }
  else {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_11access_vols_5__del__(o);
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_chi(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_3chi_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_chi(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_3chi_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_sub_bin_width_x(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_15sub_bin_width_x_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_sub_bin_width_x(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_15sub_bin_width_x_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_sub_bin_width_y(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_15sub_bin_width_y_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_sub_bin_width_y(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_15sub_bin_width_y_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_sub_bin_width_z(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_15sub_bin_width_z_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_sub_bin_width_z(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_15sub_bin_width_z_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_sub_bins_to_weights_x(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_x_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_sub_bins_to_weights_x(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_x_3__set__(o, v);
  }
  else {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_x_5__del__(o);
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_sub_bins_to_weights_y(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_y_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_sub_bins_to_weights_y(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_y_3__set__(o, v);
  }
  else {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_y_5__del__(o);
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_sub_bins_to_weights_z(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_z_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_sub_bins_to_weights_z(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_z_3__set__(o, v);
  }
  else {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_21sub_bins_to_weights_z_5__del__(o);
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_sub_bins_to_bins_x(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_x_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_sub_bins_to_bins_x(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_x_3__set__(o, v);
  }
  else {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_x_5__del__(o);
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_sub_bins_to_bins_y(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_y_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_sub_bins_to_bins_y(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_y_3__set__(o, v);
  }
  else {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_y_5__del__(o);
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_sub_bins_to_bins_z(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_z_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_sub_bins_to_bins_z(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_z_3__set__(o, v);
  }
  else {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_18sub_bins_to_bins_z_5__del__(o);
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_dict_(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_5dict__1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_dict_(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_5dict__3__set__(o, v);
  }
  else {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_5dict__5__del__(o);
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_vf_limit(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_8vf_limit_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_vf_limit(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_8vf_limit_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_assume_fully_accessible(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_23assume_fully_accessible_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_assume_fully_accessible(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_23assume_fully_accessible_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_fast_field(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_10fast_field_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_fast_field(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_10fast_field_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_binder_dict(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_11binder_dict_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_binder_dict(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_11binder_dict_3__set__(o, v);
  }
  else {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_11binder_dict_5__del__(o);
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_half_width_xyz(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_14half_width_xyz_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_half_width_xyz(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_14half_width_xyz_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_half_step_xyz(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_13half_step_xyz_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_half_step_xyz(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_13half_step_xyz_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_n_xyz_m1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_8n_xyz_m1_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_n_xyz_m1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_8n_xyz_m1_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_affected_bins_last_move(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_23affected_bins_last_move_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_affected_bins_last_move(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_23affected_bins_last_move_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6chromo_6fields_19UniformDensityField_inds_xyz_to_super(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6chromo_6fields_19UniformDensityField_17inds_xyz_to_super_1__get__(o);
}

static int __pyx_setprop_6chromo_6fields_19UniformDensityField_inds_xyz_to_super(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6chromo_6fields_19UniformDensityField_17inds_xyz_to_super_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_6chromo_6fields_UniformDensityField[] = {
  {"init_grid", (PyCFunction)__pyx_pw_6chromo_6fields_19UniformDensityField_3init_grid, METH_NOARGS, __pyx_doc_6chromo_6fields_19UniformDensityField_2init_grid},
  {"init_field_energy_prefactors", (PyCFunction)__pyx_pw_6chromo_6fields_19UniformDensityField_5init_field_energy_prefactors, METH_NOARGS, __pyx_doc_6chromo_6fields_19UniformDensityField_4init_field_energy_prefactors},
  {"get_accessible_volumes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6chromo_6fields_19UniformDensityField_7get_accessible_volumes, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6chromo_6fields_19UniformDensityField_6get_accessible_volumes},
  {"to_file", (PyCFunction)__pyx_pw_6chromo_6fields_19UniformDensityField_9to_file, METH_O, __pyx_doc_6chromo_6fields_19UniformDensityField_8to_file},
  {"from_file", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6chromo_6fields_19UniformDensityField_11from_file, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6chromo_6fields_19UniformDensityField_10from_file},
  {"_get_corner_bin_index", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6chromo_6fields_19UniformDensityField_15_get_corner_bin_index, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6chromo_6fields_19UniformDensityField_14_get_corner_bin_index},
  {"get_dict", (PyCFunction)__pyx_pw_6chromo_6fields_19UniformDensityField_19get_dict, METH_NOARGS, __pyx_doc_6chromo_6fields_19UniformDensityField_18get_dict},
  {"compute_E", (PyCFunction)__pyx_pw_6chromo_6fields_19UniformDensityField_21compute_E, METH_O, __pyx_doc_6chromo_6fields_19UniformDensityField_20compute_E},
  {"update_all_densities", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6chromo_6fields_19UniformDensityField_23update_all_densities, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6chromo_6fields_19UniformDensityField_22update_all_densities},
  {"update_all_densities_for_all_polymers", (PyCFunction)__pyx_pw_6chromo_6fields_19UniformDensityField_25update_all_densities_for_all_polymers, METH_NOARGS, __pyx_doc_6chromo_6fields_19UniformDensityField_24update_all_densities_for_all_polymers},
  {"nonspecific_interact_E", (PyCFunction)__pyx_pw_6chromo_6fields_19UniformDensityField_27nonspecific_interact_E, METH_O, __pyx_doc_6chromo_6fields_19UniformDensityField_26nonspecific_interact_E},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6chromo_6fields_19UniformDensityField_29__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6chromo_6fields_19UniformDensityField_31__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6chromo_6fields_UniformDensityField[] = {
  {(char *)"_field_descriptors", __pyx_getprop_6chromo_6fields_19UniformDensityField__field_descriptors, __pyx_setprop_6chromo_6fields_19UniformDensityField__field_descriptors, (char *)0, 0},
  {(char *)"x_width", __pyx_getprop_6chromo_6fields_19UniformDensityField_x_width, __pyx_setprop_6chromo_6fields_19UniformDensityField_x_width, (char *)0, 0},
  {(char *)"y_width", __pyx_getprop_6chromo_6fields_19UniformDensityField_y_width, __pyx_setprop_6chromo_6fields_19UniformDensityField_y_width, (char *)0, 0},
  {(char *)"z_width", __pyx_getprop_6chromo_6fields_19UniformDensityField_z_width, __pyx_setprop_6chromo_6fields_19UniformDensityField_z_width, (char *)0, 0},
  {(char *)"width_xyz", __pyx_getprop_6chromo_6fields_19UniformDensityField_width_xyz, __pyx_setprop_6chromo_6fields_19UniformDensityField_width_xyz, (char *)0, 0},
  {(char *)"nx", __pyx_getprop_6chromo_6fields_19UniformDensityField_nx, __pyx_setprop_6chromo_6fields_19UniformDensityField_nx, (char *)0, 0},
  {(char *)"ny", __pyx_getprop_6chromo_6fields_19UniformDensityField_ny, __pyx_setprop_6chromo_6fields_19UniformDensityField_ny, (char *)0, 0},
  {(char *)"nz", __pyx_getprop_6chromo_6fields_19UniformDensityField_nz, __pyx_setprop_6chromo_6fields_19UniformDensityField_nz, (char *)0, 0},
  {(char *)"n_sub_bins_x", __pyx_getprop_6chromo_6fields_19UniformDensityField_n_sub_bins_x, __pyx_setprop_6chromo_6fields_19UniformDensityField_n_sub_bins_x, (char *)0, 0},
  {(char *)"n_sub_bins_y", __pyx_getprop_6chromo_6fields_19UniformDensityField_n_sub_bins_y, __pyx_setprop_6chromo_6fields_19UniformDensityField_n_sub_bins_y, (char *)0, 0},
  {(char *)"n_sub_bins_z", __pyx_getprop_6chromo_6fields_19UniformDensityField_n_sub_bins_z, __pyx_setprop_6chromo_6fields_19UniformDensityField_n_sub_bins_z, (char *)0, 0},
  {(char *)"dx", __pyx_getprop_6chromo_6fields_19UniformDensityField_dx, __pyx_setprop_6chromo_6fields_19UniformDensityField_dx, (char *)0, 0},
  {(char *)"dy", __pyx_getprop_6chromo_6fields_19UniformDensityField_dy, __pyx_setprop_6chromo_6fields_19UniformDensityField_dy, (char *)0, 0},
  {(char *)"dz", __pyx_getprop_6chromo_6fields_19UniformDensityField_dz, __pyx_setprop_6chromo_6fields_19UniformDensityField_dz, (char *)0, 0},
  {(char *)"dxyz", __pyx_getprop_6chromo_6fields_19UniformDensityField_dxyz, __pyx_setprop_6chromo_6fields_19UniformDensityField_dxyz, (char *)0, 0},
  {(char *)"n_bins", __pyx_getprop_6chromo_6fields_19UniformDensityField_n_bins, __pyx_setprop_6chromo_6fields_19UniformDensityField_n_bins, (char *)0, 0},
  {(char *)"n_points", __pyx_getprop_6chromo_6fields_19UniformDensityField_n_points, __pyx_setprop_6chromo_6fields_19UniformDensityField_n_points, (char *)0, 0},
  {(char *)"vol_bin", __pyx_getprop_6chromo_6fields_19UniformDensityField_vol_bin, __pyx_setprop_6chromo_6fields_19UniformDensityField_vol_bin, (char *)0, 0},
  {(char *)"bin_index", __pyx_getprop_6chromo_6fields_19UniformDensityField_bin_index, __pyx_setprop_6chromo_6fields_19UniformDensityField_bin_index, (char *)0, 0},
  {(char *)"nbr_inds_with_trial", __pyx_getprop_6chromo_6fields_19UniformDensityField_nbr_inds_with_trial, __pyx_setprop_6chromo_6fields_19UniformDensityField_nbr_inds_with_trial, (char *)0, 0},
  {(char *)"nbr_inds", __pyx_getprop_6chromo_6fields_19UniformDensityField_nbr_inds, __pyx_setprop_6chromo_6fields_19UniformDensityField_nbr_inds, (char *)0, 0},
  {(char *)"index_xyz", __pyx_getprop_6chromo_6fields_19UniformDensityField_index_xyz, __pyx_setprop_6chromo_6fields_19UniformDensityField_index_xyz, (char *)0, 0},
  {(char *)"wt_vec", __pyx_getprop_6chromo_6fields_19UniformDensityField_wt_vec, __pyx_setprop_6chromo_6fields_19UniformDensityField_wt_vec, (char *)0, 0},
  {(char *)"xyz", __pyx_getprop_6chromo_6fields_19UniformDensityField_xyz, __pyx_setprop_6chromo_6fields_19UniformDensityField_xyz, (char *)0, 0},
  {(char *)"weight_xyz", __pyx_getprop_6chromo_6fields_19UniformDensityField_weight_xyz, __pyx_setprop_6chromo_6fields_19UniformDensityField_weight_xyz, (char *)0, 0},
  {(char *)"wt_vec_with_trial", __pyx_getprop_6chromo_6fields_19UniformDensityField_wt_vec_with_trial, __pyx_setprop_6chromo_6fields_19UniformDensityField_wt_vec_with_trial, (char *)0, 0},
  {(char *)"xyz_with_trial", __pyx_getprop_6chromo_6fields_19UniformDensityField_xyz_with_trial, __pyx_setprop_6chromo_6fields_19UniformDensityField_xyz_with_trial, (char *)0, 0},
  {(char *)"weight_xyz_with_trial", __pyx_getprop_6chromo_6fields_19UniformDensityField_weight_xyz_with_trial, __pyx_setprop_6chromo_6fields_19UniformDensityField_weight_xyz_with_trial, (char *)0, 0},
  {(char *)"index_xyz_with_trial", __pyx_getprop_6chromo_6fields_19UniformDensityField_index_xyz_with_trial, __pyx_setprop_6chromo_6fields_19UniformDensityField_index_xyz_with_trial, (char *)0, 0},
  {(char *)"num_binders", __pyx_getprop_6chromo_6fields_19UniformDensityField_num_binders, __pyx_setprop_6chromo_6fields_19UniformDensityField_num_binders, (char *)0, 0},
  {(char *)"doubly_bound", __pyx_getprop_6chromo_6fields_19UniformDensityField_doubly_bound, __pyx_setprop_6chromo_6fields_19UniformDensityField_doubly_bound, (char *)0, 0},
  {(char *)"doubly_bound_trial", __pyx_getprop_6chromo_6fields_19UniformDensityField_doubly_bound_trial, __pyx_setprop_6chromo_6fields_19UniformDensityField_doubly_bound_trial, (char *)0, 0},
  {(char *)"density", __pyx_getprop_6chromo_6fields_19UniformDensityField_density, __pyx_setprop_6chromo_6fields_19UniformDensityField_density, (char *)0, 0},
  {(char *)"density_trial", __pyx_getprop_6chromo_6fields_19UniformDensityField_density_trial, __pyx_setprop_6chromo_6fields_19UniformDensityField_density_trial, (char *)0, 0},
  {(char *)"access_vols", __pyx_getprop_6chromo_6fields_19UniformDensityField_access_vols, __pyx_setprop_6chromo_6fields_19UniformDensityField_access_vols, (char *)0, 0},
  {(char *)"chi", __pyx_getprop_6chromo_6fields_19UniformDensityField_chi, __pyx_setprop_6chromo_6fields_19UniformDensityField_chi, (char *)0, 0},
  {(char *)"sub_bin_width_x", __pyx_getprop_6chromo_6fields_19UniformDensityField_sub_bin_width_x, __pyx_setprop_6chromo_6fields_19UniformDensityField_sub_bin_width_x, (char *)0, 0},
  {(char *)"sub_bin_width_y", __pyx_getprop_6chromo_6fields_19UniformDensityField_sub_bin_width_y, __pyx_setprop_6chromo_6fields_19UniformDensityField_sub_bin_width_y, (char *)0, 0},
  {(char *)"sub_bin_width_z", __pyx_getprop_6chromo_6fields_19UniformDensityField_sub_bin_width_z, __pyx_setprop_6chromo_6fields_19UniformDensityField_sub_bin_width_z, (char *)0, 0},
  {(char *)"sub_bins_to_weights_x", __pyx_getprop_6chromo_6fields_19UniformDensityField_sub_bins_to_weights_x, __pyx_setprop_6chromo_6fields_19UniformDensityField_sub_bins_to_weights_x, (char *)0, 0},
  {(char *)"sub_bins_to_weights_y", __pyx_getprop_6chromo_6fields_19UniformDensityField_sub_bins_to_weights_y, __pyx_setprop_6chromo_6fields_19UniformDensityField_sub_bins_to_weights_y, (char *)0, 0},
  {(char *)"sub_bins_to_weights_z", __pyx_getprop_6chromo_6fields_19UniformDensityField_sub_bins_to_weights_z, __pyx_setprop_6chromo_6fields_19UniformDensityField_sub_bins_to_weights_z, (char *)0, 0},
  {(char *)"sub_bins_to_bins_x", __pyx_getprop_6chromo_6fields_19UniformDensityField_sub_bins_to_bins_x, __pyx_setprop_6chromo_6fields_19UniformDensityField_sub_bins_to_bins_x, (char *)0, 0},
  {(char *)"sub_bins_to_bins_y", __pyx_getprop_6chromo_6fields_19UniformDensityField_sub_bins_to_bins_y, __pyx_setprop_6chromo_6fields_19UniformDensityField_sub_bins_to_bins_y, (char *)0, 0},
  {(char *)"sub_bins_to_bins_z", __pyx_getprop_6chromo_6fields_19UniformDensityField_sub_bins_to_bins_z, __pyx_setprop_6chromo_6fields_19UniformDensityField_sub_bins_to_bins_z, (char *)0, 0},
  {(char *)"dict_", __pyx_getprop_6chromo_6fields_19UniformDensityField_dict_, __pyx_setprop_6chromo_6fields_19UniformDensityField_dict_, (char *)0, 0},
  {(char *)"vf_limit", __pyx_getprop_6chromo_6fields_19UniformDensityField_vf_limit, __pyx_setprop_6chromo_6fields_19UniformDensityField_vf_limit, (char *)0, 0},
  {(char *)"assume_fully_accessible", __pyx_getprop_6chromo_6fields_19UniformDensityField_assume_fully_accessible, __pyx_setprop_6chromo_6fields_19UniformDensityField_assume_fully_accessible, (char *)0, 0},
  {(char *)"fast_field", __pyx_getprop_6chromo_6fields_19UniformDensityField_fast_field, __pyx_setprop_6chromo_6fields_19UniformDensityField_fast_field, (char *)0, 0},
  {(char *)"binder_dict", __pyx_getprop_6chromo_6fields_19UniformDensityField_binder_dict, __pyx_setprop_6chromo_6fields_19UniformDensityField_binder_dict, (char *)0, 0},
  {(char *)"half_width_xyz", __pyx_getprop_6chromo_6fields_19UniformDensityField_half_width_xyz, __pyx_setprop_6chromo_6fields_19UniformDensityField_half_width_xyz, (char *)0, 0},
  {(char *)"half_step_xyz", __pyx_getprop_6chromo_6fields_19UniformDensityField_half_step_xyz, __pyx_setprop_6chromo_6fields_19UniformDensityField_half_step_xyz, (char *)0, 0},
  {(char *)"n_xyz_m1", __pyx_getprop_6chromo_6fields_19UniformDensityField_n_xyz_m1, __pyx_setprop_6chromo_6fields_19UniformDensityField_n_xyz_m1, (char *)0, 0},
  {(char *)"affected_bins_last_move", __pyx_getprop_6chromo_6fields_19UniformDensityField_affected_bins_last_move, __pyx_setprop_6chromo_6fields_19UniformDensityField_affected_bins_last_move, (char *)0, 0},
  {(char *)"inds_xyz_to_super", __pyx_getprop_6chromo_6fields_19UniformDensityField_inds_xyz_to_super, __pyx_setprop_6chromo_6fields_19UniformDensityField_inds_xyz_to_super, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6chromo_6fields_UniformDensityField = {
  PyVarObject_HEAD_INIT(0, 0)
  "chromo.fields.UniformDensityField", /*tp_name*/
  sizeof(struct __pyx_obj_6chromo_6fields_UniformDensityField), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6chromo_6fields_UniformDensityField, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_6chromo_6fields_19UniformDensityField_17__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Rectilinear discretization of space as a rectangular box.\n\n    Notes\n    -----\n    Each bead contributes \"mass\" to the eight nearest voxels containing it.\n    The mass is linearly interpolated based on the distance of the bead from\n    the center of each voxel. This is much more stable numerically than just\n    using the voxels as \"bins,\" as would be done in e.g., finite-difference\n    discretization.\n\n    Many attributes are updated during each calculation of field energy\n    change. We choose to track and update these attributes to avoid costly\n    array initialization during each iteration of the MC simulation.\n    Affected attributes are identified with the \"TEMP\" flag in their\n    description.\n\n    Attributes\n    ----------\n    _field_descriptors : List[str]\n        Names of attributes which describe the geometric layout of the field\n        as a grid of voxels\n    x_width, y_width, z_width : double\n        Dimensions of the discretized field in the x, y, and z directions\n    width_xyz : double[:]\n        Vectorized representation of the x, y, and z widths of the\n        discretized field\n    nx, ny, nz : long\n        Number of voxels in each of the x, y, and z directions\n    dx, dy, dz : double\n        Width of each voxel in the x, y, and z directions\n    dxyz : double[:]\n        Vectorized representation of the voxel widths in the x, y, and z\n        directions\n    n_bins : long\n        Number of voxels in the field\n    vol_bin : double\n        Volume of each voxel; equal to `dx*dy*dz`\n    bin_index : long[:, ::1]\n        For each of the `nx*ny*nz` voxels in the field, stores indices\n        identifying eight vertices at the corners of the voxel\n    nbr_indices_with_trial : long[:, ::1]\n        Super-indices of eight neighboring voxels containing a bead's\n        position in space (dim1) from the polymer's current configuration\n        (dim1=0) and proposed configuration (dim1=1); TEMP\n    nbr_inds : long[:]""\n        Super-indices of eight neighboring voxels containing a bead's\n        position in space; TEMP\n    index_xyz_with_trial : long[:, ::1]\n        Vector containing a bead's bin index in the x, y, and z directions\n        (dim1) for the polymer's current configuration (dim0=0) and trial\n        configuration (dim0=1); TEMP\n    index_xyz : long[:]\n        Vector containing a bead's bin index in the x, y, z directions; TEMP\n    wt_vec_with_trial : double [:]\n        Bead's weight linearly interpolated between the eight nearest voxels\n        surrounding it (dim1) for a polymer's current configuration (dim0=0)\n        and trial configuration (dim0=1); TEMP\n    wt_vec : double[:]\n        Vector containing a bead's weight linearly interpolated between the\n        eight nearest voxels surrounding it; TEMP\n    xyz_with_trial : double[:, ::1]\n        Position of the bead in the x, y, z directions (dim1), shifted during\n        linear interpolation of voxel weights for the polymer's current\n        configuration (dim0=0) and trial configuration (dim0=1); TEMP\n    xyz : double[:]\n        Position of the bead in the x, y, z directions, shifted during linear\n        interpolation of voxel weights; TEMP\n    weight_xyz_with_trial : double[:, ::1]\n        Vector of a bead's linearly interpolated weights in a voxel in the x,\n        y, z directions as determined for the voxel surrounding the bead with\n        the lowest x, y, z indices (dim1) for the polymer's current\n        configuration (dim0=0) and tiral configuration (dim0=1); TEMP\n    weight_xyz : double[:]\n        Vector of a bead's linearly interpolated weights in a voxel in the x,\n        y, z directions as determined for the voxel surrounding the bead with\n        the lowest x, y, z indices; TEMP\n    num_binders : long\n        Number of reader proteins bound to the polymer in the simulation\n    doubly_bound, doubly_bound_trial : long[:]\n        Vectors indicating whether or not a bea""d is doubly bound by each\n        tracked reader protein in the current polymer configuration\n        (`doubly_bond`) and trial configuration (`doubly_bound_trial`); TEMP\n    confine_type : str\n        Name of the confining boundary around the polymer; if the polymer is\n        unconfined, `confine_type` is a blank string\n    confine_length : double\n        Length scale of the confining boundary\n    density, density_trial : double[:, ::1]\n        Current (`density`) and proposed change (`density_trial`) in density\n        of beads (column 0) and each reader protein (columns 1...) in each\n        voxel of the discretized space; voxels are sorted by super-index and\n        arranged down the rows the the density arrays\n    access_vols : Dict[long, double]\n        Mapping of voxel super-index (keys) to volume of the voxel inside the\n        confining boundary (values).\n    chi : double\n        Negative local Flory-Huggins parameter dictating non-specific bead\n        interaction, in units of (kT / bead vol. nondim. by bin vol.)\n    dict_ : dict\n        Dictionary of key attributes defining the field and their values\n    binder_dict : dict\n        Dictionary representation of each reader protein and their properties\n    half_width_xyz : double[:]\n        Half the width of the full discretized space in the x, y,\n        and z directions; equivalent to `np.array([self.x_width/2,\n        self.y_width/2, self.z_width/2])`\n    half_step_xyz : double[:]\n        Half the length of the voxel in single x, y, and z directions;\n        equivalent to `np.array([self.dx/2, self.dy/2, self.dz/2])`\n    n_xyz_m1 : long[:]\n        One less than the number of voxels that fit in the x, y, and z\n        directions of the  field.\n    inds_xyz_to_super : long[:, :, ::1]\n        Array containing the super-index of each voxel (stored in the array\n        values) for each combination of x-voxel position (dim0), y-voxel\n        position (dim1) and z-voxel posit""ion (dim2).\n    vf_limit : float\n            Volume fraction limit in a voxel.\n    fast_field : bint\n        If this value is `1`, a coarse-grained density field will be\n        evaluated using pre-computed sub-bin weightings; otherwise, bin\n        weightings will be interpolated from bead positions during each\n        iteration\n    n_points : long\n        Number of sub-bins to precompute in each dimension when the ``fast\n        field'' is active; should be an even number\n    ", /*tp_doc*/
  __pyx_tp_traverse_6chromo_6fields_UniformDensityField, /*tp_traverse*/
  __pyx_tp_clear_6chromo_6fields_UniformDensityField, /*tp_clear*/
  __pyx_tp_richcompare_6chromo_6fields_UniformDensityField, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6chromo_6fields_UniformDensityField, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6chromo_6fields_UniformDensityField, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6chromo_6fields_19UniformDensityField_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6chromo_6fields_UniformDensityField, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_array __pyx_vtable_array;

static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_array_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_array_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_array;
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_array(PyObject *o) {
  struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_array___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mode);
  Py_CLEAR(p->_format);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_array___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {
  PyObject *v = __Pyx_PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_array___getattr__(o, n);
  }
  return v;
}

static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(o);
}

static PyMethodDef __pyx_methods_array[] = {
  {"__getattr__", (PyCFunction)__pyx_array___getattr__, METH_O|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_array_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_array_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_array[] = {
  {(char *)"memview", __pyx_getprop___pyx_array_memview, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_array = {
  __pyx_array___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_array, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_array = {
  __pyx_array___len__, /*mp_length*/
  __pyx_array___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_array, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_array = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_array_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_array = {
  PyVarObject_HEAD_INIT(0, 0)
  "chromo.fields.array", /*tp_name*/
  sizeof(struct __pyx_array_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_array, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_array, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_array, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_array, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_array, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_array, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_array, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_array, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_MemviewEnum_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_MemviewEnum_obj *)o);
  p->name = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_Enum(PyObject *o) {
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->name);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  if (p->name) {
    e = (*v)(p->name, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_Enum(PyObject *o) {
  PyObject* tmp;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  tmp = ((PyObject*)p->name);
  p->name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_Enum[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_MemviewEnum = {
  PyVarObject_HEAD_INIT(0, 0)
  "chromo.fields.Enum", /*tp_name*/
  sizeof(struct __pyx_MemviewEnum_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_Enum, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_MemviewEnum___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_Enum, /*tp_traverse*/
  __pyx_tp_clear_Enum, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_Enum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_MemviewEnum___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_Enum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_memoryview __pyx_vtable_memoryview;

static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryview_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryview_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_memoryview;
  p->obj = Py_None; Py_INCREF(Py_None);
  p->_size = Py_None; Py_INCREF(Py_None);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  p->view.obj = NULL;
  if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_memoryview(PyObject *o) {
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryview___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->obj);
  Py_CLEAR(p->_size);
  Py_CLEAR(p->_array_interface);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  if (p->obj) {
    e = (*v)(p->obj, a); if (e) return e;
  }
  if (p->_size) {
    e = (*v)(p->_size, a); if (e) return e;
  }
  if (p->_array_interface) {
    e = (*v)(p->_array_interface, a); if (e) return e;
  }
  if (p->view.obj) {
    e = (*v)(p->view.obj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_memoryview(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  tmp = ((PyObject*)p->obj);
  p->obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_size);
  p->_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_array_interface);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  Py_CLEAR(p->view.obj);
  return 0;
}
static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_memoryview___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop___pyx_memoryview_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_strides(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_suboffsets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_nbytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_memoryview[] = {
  {"is_c_contig", (PyCFunction)__pyx_memoryview_is_c_contig, METH_NOARGS, 0},
  {"is_f_contig", (PyCFunction)__pyx_memoryview_is_f_contig, METH_NOARGS, 0},
  {"copy", (PyCFunction)__pyx_memoryview_copy, METH_NOARGS, 0},
  {"copy_fortran", (PyCFunction)__pyx_memoryview_copy_fortran, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_memoryview[] = {
  {(char *)"T", __pyx_getprop___pyx_memoryview_T, 0, (char *)0, 0},
  {(char *)"base", __pyx_getprop___pyx_memoryview_base, 0, (char *)0, 0},
  {(char *)"shape", __pyx_getprop___pyx_memoryview_shape, 0, (char *)0, 0},
  {(char *)"strides", __pyx_getprop___pyx_memoryview_strides, 0, (char *)0, 0},
  {(char *)"suboffsets", __pyx_getprop___pyx_memoryview_suboffsets, 0, (char *)0, 0},
  {(char *)"ndim", __pyx_getprop___pyx_memoryview_ndim, 0, (char *)0, 0},
  {(char *)"itemsize", __pyx_getprop___pyx_memoryview_itemsize, 0, (char *)0, 0},
  {(char *)"nbytes", __pyx_getprop___pyx_memoryview_nbytes, 0, (char *)0, 0},
  {(char *)"size", __pyx_getprop___pyx_memoryview_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_memoryview = {
  __pyx_memoryview___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_memoryview, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_memoryview = {
  __pyx_memoryview___len__, /*mp_length*/
  __pyx_memoryview___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_memoryview, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_memoryview = {
  PyVarObject_HEAD_INIT(0, 0)
  "chromo.fields.memoryview", /*tp_name*/
  sizeof(struct __pyx_memoryview_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_memoryview, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_memoryview___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_memoryview, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_memoryview, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_memoryview___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_memoryview, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_memoryview, /*tp_traverse*/
  __pyx_tp_clear_memoryview, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_memoryview, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_memoryview, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_memoryview, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct__memoryviewslice __pyx_vtable__memoryviewslice;

static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryviewslice_obj *p;
  PyObject *o = __pyx_tp_new_memoryview(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryviewslice_obj *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;
  p->from_object = Py_None; Py_INCREF(Py_None);
  p->from_slice.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryviewslice___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->from_object);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_memoryview(o);
}

static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;
  if (p->from_object) {
    e = (*v)(p->from_object, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear__memoryviewslice(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  __pyx_tp_clear_memoryview(o);
  tmp = ((PyObject*)p->from_object);
  p->from_object = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  __PYX_XDEC_MEMVIEW(&p->from_slice, 1);
  return 0;
}

static PyObject *__pyx_getprop___pyx_memoryviewslice_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(o);
}

static PyMethodDef __pyx_methods__memoryviewslice[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets__memoryviewslice[] = {
  {(char *)"base", __pyx_getprop___pyx_memoryviewslice_base, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_memoryviewslice = {
  PyVarObject_HEAD_INIT(0, 0)
  "chromo.fields._memoryviewslice", /*tp_name*/
  sizeof(struct __pyx_memoryviewslice_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc__memoryviewslice, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Internal class for passing memoryview slices to Python", /*tp_doc*/
  __pyx_tp_traverse__memoryviewslice, /*tp_traverse*/
  __pyx_tp_clear__memoryviewslice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods__memoryviewslice, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets__memoryviewslice, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new__memoryviewslice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"super_ind_to_inds", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6chromo_6fields_1super_ind_to_inds, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6chromo_6fields_super_ind_to_inds},
  {"assign_beads_to_bins", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6chromo_6fields_3assign_beads_to_bins, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6chromo_6fields_2assign_beads_to_bins},
  {"get_neighboring_bins", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6chromo_6fields_5get_neighboring_bins, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6chromo_6fields_4get_neighboring_bins},
  {"get_neighbors_at_ind", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6chromo_6fields_7get_neighbors_at_ind, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6chromo_6fields_6get_neighbors_at_ind},
  {"get_blocks", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6chromo_6fields_9get_blocks, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6chromo_6fields_8get_blocks},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_fields(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_fields},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "fields",
    __pyx_k_Fields_discretize_space_to_effic, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_n_s_ASCII, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
  {&__pyx_kp_s_Buffer_view_does_not_expose_stri, __pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 0, 1, 0},
  {&__pyx_kp_s_Can_only_create_a_buffer_that_is, __pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_assign_to_read_only_memor, __pyx_k_Cannot_assign_to_read_only_memor, sizeof(__pyx_k_Cannot_assign_to_read_only_memor), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_create_writable_memory_vi, __pyx_k_Cannot_create_writable_memory_vi, sizeof(__pyx_k_Cannot_create_writable_memory_vi), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_index_with_type_s, __pyx_k_Cannot_index_with_type_s, sizeof(__pyx_k_Cannot_index_with_type_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Confinement_type, __pyx_k_Confinement_type, sizeof(__pyx_k_Confinement_type), 0, 0, 1, 0},
  {&__pyx_n_s_Cubical, __pyx_k_Cubical, sizeof(__pyx_k_Cubical), 0, 0, 1, 1},
  {&__pyx_n_s_DataFrame, __pyx_k_DataFrame, sizeof(__pyx_k_DataFrame), 0, 0, 1, 1},
  {&__pyx_kp_s_Defer_defining_Field_until_after, __pyx_k_Defer_defining_Field_until_after, sizeof(__pyx_k_Defer_defining_Field_until_after), 0, 0, 1, 0},
  {&__pyx_n_s_Ellipsis, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
  {&__pyx_kp_s_Empty_shape_tuple_for_cython_arr, __pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 0, 1, 0},
  {&__pyx_kp_s_Field, __pyx_k_Field, sizeof(__pyx_k_Field), 0, 0, 1, 0},
  {&__pyx_n_s_FieldBase, __pyx_k_FieldBase, sizeof(__pyx_k_FieldBase), 0, 0, 1, 1},
  {&__pyx_n_u_FieldBase, __pyx_k_FieldBase, sizeof(__pyx_k_FieldBase), 0, 1, 0, 1},
  {&__pyx_kp_s_For_now_all_polymers_must_use_al, __pyx_k_For_now_all_polymers_must_use_al, sizeof(__pyx_k_For_now_all_polymers_must_use_al), 0, 0, 1, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2, __pyx_k_Incompatible_checksums_0x_x_vs_0_2, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3, __pyx_k_Incompatible_checksums_0x_x_vs_0_3, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_3), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Indirect_dimensions_not_supporte, __pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_current_trial_state_indi, __pyx_k_Invalid_current_trial_state_indi, sizeof(__pyx_k_Invalid_current_trial_state_indi), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_k_Invalid_shape_in_axis_d_d, sizeof(__pyx_k_Invalid_shape_in_axis_d_d), 0, 0, 1, 0},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_k_MemoryView_of_r_at_0x_x, sizeof(__pyx_k_MemoryView_of_r_at_0x_x), 0, 0, 1, 0},
  {&__pyx_kp_s_MemoryView_of_r_object, __pyx_k_MemoryView_of_r_object, sizeof(__pyx_k_MemoryView_of_r_object), 0, 0, 1, 0},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s_NullField, __pyx_k_NullField, sizeof(__pyx_k_NullField), 0, 0, 1, 1},
  {&__pyx_n_b_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 0, 1},
  {&__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 0, 1, 0},
  {&__pyx_n_s_Path, __pyx_k_Path, sizeof(__pyx_k_Path), 0, 0, 1, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_kp_s_Reading_compute_dE_from_base_cla, __pyx_k_Reading_compute_dE_from_base_cla, sizeof(__pyx_k_Reading_compute_dE_from_base_cla), 0, 0, 1, 0},
  {&__pyx_kp_s_Reading_update_affected_densitie, __pyx_k_Reading_update_affected_densitie, sizeof(__pyx_k_Reading_update_affected_densitie), 0, 0, 1, 0},
  {&__pyx_n_s_Reconstructor, __pyx_k_Reconstructor, sizeof(__pyx_k_Reconstructor), 0, 0, 1, 1},
  {&__pyx_n_s_Reconstructor___call, __pyx_k_Reconstructor___call, sizeof(__pyx_k_Reconstructor___call), 0, 0, 1, 1},
  {&__pyx_n_s_Reconstructor___init, __pyx_k_Reconstructor___init, sizeof(__pyx_k_Reconstructor___init), 0, 0, 1, 1},
  {&__pyx_n_s_Reconstructor_finalize, __pyx_k_Reconstructor_finalize, sizeof(__pyx_k_Reconstructor_finalize), 0, 0, 1, 1},
  {&__pyx_n_s_Reconstructor_from_file, __pyx_k_Reconstructor_from_file, sizeof(__pyx_k_Reconstructor_from_file), 0, 0, 1, 1},
  {&__pyx_n_s_Series, __pyx_k_Series, sizeof(__pyx_k_Series), 0, 0, 1, 1},
  {&__pyx_n_s_Spherical, __pyx_k_Spherical, sizeof(__pyx_k_Spherical), 0, 0, 1, 1},
  {&__pyx_n_s_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 1, 1},
  {&__pyx_kp_s_Trial_flag, __pyx_k_Trial_flag, sizeof(__pyx_k_Trial_flag), 0, 0, 1, 0},
  {&__pyx_kp_u_Tried_to_instantiate_class, __pyx_k_Tried_to_instantiate_class, sizeof(__pyx_k_Tried_to_instantiate_class), 0, 1, 0, 0},
  {&__pyx_n_s_True, __pyx_k_True, sizeof(__pyx_k_True), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_convert_item_to_object, __pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 0, 1, 0},
  {&__pyx_n_s_UniformDensityField, __pyx_k_UniformDensityField, sizeof(__pyx_k_UniformDensityField), 0, 0, 1, 1},
  {&__pyx_kp_u_UniformDensityField_nx, __pyx_k_UniformDensityField_nx, sizeof(__pyx_k_UniformDensityField_nx), 0, 1, 0, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_View_MemoryView, __pyx_k_View_MemoryView, sizeof(__pyx_k_View_MemoryView), 0, 0, 1, 1},
  {&__pyx_kp_u__17, __pyx_k__17, sizeof(__pyx_k__17), 0, 1, 0, 0},
  {&__pyx_n_s__49, __pyx_k__49, sizeof(__pyx_k__49), 0, 0, 1, 1},
  {&__pyx_n_s_abs, __pyx_k_abs, sizeof(__pyx_k_abs), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_allocate_buffer, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_arange, __pyx_k_arange, sizeof(__pyx_k_arange), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_assume_fully_accessible, __pyx_k_assume_fully_accessible, sizeof(__pyx_k_assume_fully_accessible), 0, 0, 1, 1},
  {&__pyx_n_s_astype, __pyx_k_astype, sizeof(__pyx_k_astype), 0, 0, 1, 1},
  {&__pyx_n_s_at, __pyx_k_at, sizeof(__pyx_k_at), 0, 0, 1, 1},
  {&__pyx_n_s_axis, __pyx_k_axis, sizeof(__pyx_k_axis), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_bin_index, __pyx_k_bin_index, sizeof(__pyx_k_bin_index), 0, 0, 1, 1},
  {&__pyx_n_s_binder, __pyx_k_binder, sizeof(__pyx_k_binder), 0, 0, 1, 1},
  {&__pyx_kp_u_binder_2, __pyx_k_binder_2, sizeof(__pyx_k_binder_2), 0, 1, 0, 0},
  {&__pyx_n_s_binders, __pyx_k_binders, sizeof(__pyx_k_binders), 0, 0, 1, 1},
  {&__pyx_kp_u_binders_but_there_are, __pyx_k_binders_but_there_are, sizeof(__pyx_k_binders_but_there_are), 0, 1, 0, 0},
  {&__pyx_n_s_block_size, __pyx_k_block_size, sizeof(__pyx_k_block_size), 0, 0, 1, 1},
  {&__pyx_kp_u_but_this_binder_was_not_present, __pyx_k_but_this_binder_was_not_present, sizeof(__pyx_k_but_this_binder_was_not_present), 0, 1, 0, 0},
  {&__pyx_kp_u_but_this_polymer_was_not_presen, __pyx_k_but_this_polymer_was_not_presen, sizeof(__pyx_k_but_this_polymer_was_not_presen), 0, 1, 0, 0},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
  {&__pyx_n_s_call, __pyx_k_call, sizeof(__pyx_k_call), 0, 0, 1, 1},
  {&__pyx_n_s_chi, __pyx_k_chi, sizeof(__pyx_k_chi), 0, 0, 1, 1},
  {&__pyx_n_s_chromo_fields, __pyx_k_chromo_fields, sizeof(__pyx_k_chromo_fields), 0, 0, 1, 1},
  {&__pyx_kp_s_chromo_fields_pyx, __pyx_k_chromo_fields_pyx, sizeof(__pyx_k_chromo_fields_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_chromo_polymers, __pyx_k_chromo_polymers, sizeof(__pyx_k_chromo_polymers), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_cls, __pyx_k_cls, sizeof(__pyx_k_cls), 0, 0, 1, 1},
  {&__pyx_n_s_compute_E, __pyx_k_compute_E, sizeof(__pyx_k_compute_E), 0, 0, 1, 1},
  {&__pyx_n_s_confine_length, __pyx_k_confine_length, sizeof(__pyx_k_confine_length), 0, 0, 1, 1},
  {&__pyx_n_s_confine_type, __pyx_k_confine_type, sizeof(__pyx_k_confine_type), 0, 0, 1, 1},
  {&__pyx_n_s_constructor, __pyx_k_constructor, sizeof(__pyx_k_constructor), 0, 0, 1, 1},
  {&__pyx_n_s_contains, __pyx_k_contains, sizeof(__pyx_k_contains), 0, 0, 1, 1},
  {&__pyx_kp_s_contiguous_and_direct, __pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_contiguous_and_indirect, __pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 0, 1, 0},
  {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {&__pyx_n_s_cross_talk_field_energy_prefacto, __pyx_k_cross_talk_field_energy_prefacto, sizeof(__pyx_k_cross_talk_field_energy_prefacto), 0, 0, 1, 1},
  {&__pyx_n_s_cross_talk_interaction_energy, __pyx_k_cross_talk_interaction_energy, sizeof(__pyx_k_cross_talk_interaction_energy), 0, 0, 1, 1},
  {&__pyx_n_s_density, __pyx_k_density, sizeof(__pyx_k_density), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_dtype_is_object, __pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 0, 1, 1},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_equals, __pyx_k_equals, sizeof(__pyx_k_equals), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_fast_field, __pyx_k_fast_field, sizeof(__pyx_k_fast_field), 0, 0, 1, 1},
  {&__pyx_n_s_field_constructor, __pyx_k_field_constructor, sizeof(__pyx_k_field_constructor), 0, 0, 1, 1},
  {&__pyx_n_s_field_energy_prefactor, __pyx_k_field_energy_prefactor, sizeof(__pyx_k_field_energy_prefactor), 0, 0, 1, 1},
  {&__pyx_n_s_finalize, __pyx_k_finalize, sizeof(__pyx_k_finalize), 0, 0, 1, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_flatten, __pyx_k_flatten, sizeof(__pyx_k_flatten), 0, 0, 1, 1},
  {&__pyx_n_s_floor, __pyx_k_floor, sizeof(__pyx_k_floor), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 0, 1, 1},
  {&__pyx_n_u_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 0, 1},
  {&__pyx_kp_u_from_file, __pyx_k_from_file, sizeof(__pyx_k_from_file), 0, 1, 0, 0},
  {&__pyx_n_s_from_file_2, __pyx_k_from_file_2, sizeof(__pyx_k_from_file_2), 0, 0, 1, 1},
  {&__pyx_n_s_get_accessible_volumes, __pyx_k_get_accessible_volumes, sizeof(__pyx_k_get_accessible_volumes), 0, 0, 1, 1},
  {&__pyx_n_s_get_corner_bin_index, __pyx_k_get_corner_bin_index, sizeof(__pyx_k_get_corner_bin_index), 0, 0, 1, 1},
  {&__pyx_n_s_get_dict, __pyx_k_get_dict, sizeof(__pyx_k_get_dict), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 0, 1, 0},
  {&__pyx_n_s_header, __pyx_k_header, sizeof(__pyx_k_header), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_iloc, __pyx_k_iloc, sizeof(__pyx_k_iloc), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_ind, __pyx_k_ind, sizeof(__pyx_k_ind), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_index_col, __pyx_k_index_col, sizeof(__pyx_k_index_col), 0, 0, 1, 1},
  {&__pyx_n_s_index_x, __pyx_k_index_x, sizeof(__pyx_k_index_x), 0, 0, 1, 1},
  {&__pyx_n_s_index_xp1, __pyx_k_index_xp1, sizeof(__pyx_k_index_xp1), 0, 0, 1, 1},
  {&__pyx_n_s_index_y, __pyx_k_index_y, sizeof(__pyx_k_index_y), 0, 0, 1, 1},
  {&__pyx_n_s_index_yp1, __pyx_k_index_yp1, sizeof(__pyx_k_index_yp1), 0, 0, 1, 1},
  {&__pyx_n_s_index_z, __pyx_k_index_z, sizeof(__pyx_k_index_z), 0, 0, 1, 1},
  {&__pyx_n_s_index_zp1, __pyx_k_index_zp1, sizeof(__pyx_k_index_zp1), 0, 0, 1, 1},
  {&__pyx_n_s_inds, __pyx_k_inds, sizeof(__pyx_k_inds), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_init_field_energy_prefactors, __pyx_k_init_field_energy_prefactors, sizeof(__pyx_k_init_field_energy_prefactors), 0, 0, 1, 1},
  {&__pyx_n_s_init_grid, __pyx_k_init_grid, sizeof(__pyx_k_init_grid), 0, 0, 1, 1},
  {&__pyx_n_s_install, __pyx_k_install, sizeof(__pyx_k_install), 0, 0, 1, 1},
  {&__pyx_n_s_interaction_energy, __pyx_k_interaction_energy, sizeof(__pyx_k_interaction_energy), 0, 0, 1, 1},
  {&__pyx_n_s_interaction_energy_intranucleoso, __pyx_k_interaction_energy_intranucleoso, sizeof(__pyx_k_interaction_energy_intranucleoso), 0, 0, 1, 1},
  {&__pyx_n_s_interaction_volume, __pyx_k_interaction_volume, sizeof(__pyx_k_interaction_volume), 0, 0, 1, 1},
  {&__pyx_n_s_isna, __pyx_k_isna, sizeof(__pyx_k_isna), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_kp_s_itemsize_0_for_cython_array, __pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 0, 1, 0},
  {&__pyx_n_s_iterrows, __pyx_k_iterrows, sizeof(__pyx_k_iterrows), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_kwargs, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
  {&__pyx_n_s_linalg, __pyx_k_linalg, sizeof(__pyx_k_linalg), 0, 0, 1, 1},
  {&__pyx_kp_u_listed, __pyx_k_listed, sizeof(__pyx_k_listed), 0, 1, 0, 0},
  {&__pyx_n_s_loc, __pyx_k_loc, sizeof(__pyx_k_loc), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_matmul, __pyx_k_matmul, sizeof(__pyx_k_matmul), 0, 0, 1, 1},
  {&__pyx_n_s_memview, __pyx_k_memview, sizeof(__pyx_k_memview), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_mgrid, __pyx_k_mgrid, sizeof(__pyx_k_mgrid), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_n_bins, __pyx_k_n_bins, sizeof(__pyx_k_n_bins), 0, 0, 1, 1},
  {&__pyx_n_s_n_inds, __pyx_k_n_inds, sizeof(__pyx_k_n_inds), 0, 0, 1, 1},
  {&__pyx_n_s_n_points, __pyx_k_n_points, sizeof(__pyx_k_n_points), 0, 0, 1, 1},
  {&__pyx_n_s_n_side, __pyx_k_n_side, sizeof(__pyx_k_n_side), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_nonspecific_interact_E, __pyx_k_nonspecific_interact_E, sizeof(__pyx_k_nonspecific_interact_E), 0, 0, 1, 1},
  {&__pyx_n_s_norm, __pyx_k_norm, sizeof(__pyx_k_norm), 0, 0, 1, 1},
  {&__pyx_kp_s_not_found, __pyx_k_not_found, sizeof(__pyx_k_not_found), 0, 0, 1, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_kp_u_npoly, __pyx_k_npoly, sizeof(__pyx_k_npoly), 0, 1, 0, 0},
  {&__pyx_n_s_num_beads, __pyx_k_num_beads, sizeof(__pyx_k_num_beads), 0, 0, 1, 1},
  {&__pyx_n_s_num_binders, __pyx_k_num_binders, sizeof(__pyx_k_num_binders), 0, 0, 1, 1},
  {&__pyx_n_s_num_bins, __pyx_k_num_bins, sizeof(__pyx_k_num_bins), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_nx, __pyx_k_nx, sizeof(__pyx_k_nx), 0, 0, 1, 1},
  {&__pyx_n_s_ny, __pyx_k_ny, sizeof(__pyx_k_ny), 0, 0, 1, 1},
  {&__pyx_kp_u_ny_2, __pyx_k_ny_2, sizeof(__pyx_k_ny_2), 0, 1, 0, 0},
  {&__pyx_n_s_nz, __pyx_k_nz, sizeof(__pyx_k_nz), 0, 0, 1, 1},
  {&__pyx_kp_u_nz_2, __pyx_k_nz_2, sizeof(__pyx_k_nz_2), 0, 1, 0, 0},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_ones, __pyx_k_ones, sizeof(__pyx_k_ones), 0, 0, 1, 1},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_n_s_orient, __pyx_k_orient, sizeof(__pyx_k_orient), 0, 0, 1, 1},
  {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
  {&__pyx_n_s_pandas, __pyx_k_pandas, sizeof(__pyx_k_pandas), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_pathlib, __pyx_k_pathlib, sizeof(__pyx_k_pathlib), 0, 0, 1, 1},
  {&__pyx_n_s_pd, __pyx_k_pd, sizeof(__pyx_k_pd), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_poly, __pyx_k_poly, sizeof(__pyx_k_poly), 0, 0, 1, 1},
  {&__pyx_n_s_polymer, __pyx_k_polymer, sizeof(__pyx_k_polymer), 0, 0, 1, 1},
  {&__pyx_kp_u_polymer_2, __pyx_k_polymer_2, sizeof(__pyx_k_polymer_2), 0, 1, 0, 0},
  {&__pyx_n_s_polymers, __pyx_k_polymers, sizeof(__pyx_k_polymers), 0, 0, 1, 1},
  {&__pyx_kp_u_polymers_but_there_are, __pyx_k_polymers_but_there_are, sizeof(__pyx_k_polymers_but_there_are), 0, 1, 0, 0},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_getbuffer, __pyx_k_pyx_getbuffer, sizeof(__pyx_k_pyx_getbuffer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Enum, __pyx_k_pyx_unpickle_Enum, sizeof(__pyx_k_pyx_unpickle_Enum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_FieldBase, __pyx_k_pyx_unpickle_FieldBase, sizeof(__pyx_k_pyx_unpickle_FieldBase), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_NullField, __pyx_k_pyx_unpickle_NullField, sizeof(__pyx_k_pyx_unpickle_NullField), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_UniformDensityFie, __pyx_k_pyx_unpickle_UniformDensityFie, sizeof(__pyx_k_pyx_unpickle_UniformDensityFie), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_pyximport, __pyx_k_pyximport, sizeof(__pyx_k_pyximport), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_r_poly, __pyx_k_r_poly, sizeof(__pyx_k_r_poly), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_read_csv, __pyx_k_read_csv, sizeof(__pyx_k_read_csv), 0, 0, 1, 1},
  {&__pyx_n_s_records, __pyx_k_records, sizeof(__pyx_k_records), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_reshape, __pyx_k_reshape, sizeof(__pyx_k_reshape), 0, 0, 1, 1},
  {&__pyx_n_s_return, __pyx_k_return, sizeof(__pyx_k_return), 0, 0, 1, 1},
  {&__pyx_n_s_round, __pyx_k_round, sizeof(__pyx_k_round), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_sqrt, __pyx_k_sqrt, sizeof(__pyx_k_sqrt), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_kp_s_strided_and_direct, __pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_direct_or_indirect, __pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_indirect, __pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_s_super_ind, __pyx_k_super_ind, sizeof(__pyx_k_super_ind), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_to_csv, __pyx_k_to_csv, sizeof(__pyx_k_to_csv), 0, 0, 1, 1},
  {&__pyx_n_s_to_dict, __pyx_k_to_dict, sizeof(__pyx_k_to_dict), 0, 0, 1, 1},
  {&__pyx_kp_s_unable_to_allocate_array_data, __pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_allocate_shape_and_str, __pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 0, 1, 0},
  {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_update_all_densities, __pyx_k_update_all_densities, sizeof(__pyx_k_update_all_densities), 0, 0, 1, 1},
  {&__pyx_n_s_update_all_densities_for_all_pol, __pyx_k_update_all_densities_for_all_pol, sizeof(__pyx_k_update_all_densities_for_all_pol), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_n_s_vf_limit, __pyx_k_vf_limit, sizeof(__pyx_k_vf_limit), 0, 0, 1, 1},
  {&__pyx_n_s_vol, __pyx_k_vol, sizeof(__pyx_k_vol), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_kp_u_with, __pyx_k_with, sizeof(__pyx_k_with), 0, 1, 0, 0},
  {&__pyx_n_s_x_width, __pyx_k_x_width, sizeof(__pyx_k_x_width), 0, 0, 1, 1},
  {&__pyx_n_s_y_width, __pyx_k_y_width, sizeof(__pyx_k_y_width), 0, 0, 1, 1},
  {&__pyx_n_s_z_width, __pyx_k_z_width, sizeof(__pyx_k_z_width), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 1064, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 114, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 166, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 178, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 287, __pyx_L1_error)
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) __PYX_ERR(0, 296, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 968, __pyx_L1_error)
  __pyx_builtin_round = __Pyx_GetBuiltinName(__pyx_n_s_round); if (!__pyx_builtin_round) __PYX_ERR(0, 2281, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(3, 945, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(2, 149, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(2, 2, __pyx_L1_error)
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) __PYX_ERR(2, 406, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(2, 615, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(2, 834, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "chromo/fields.pyx":296
 *         """Save Field description.
 *         """
 *         with open(path, 'w'):             # <<<<<<<<<<<<<<
 *             pass
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "chromo/fields.pyx":504
 *         for poly in polymers:
 *             if poly.num_binders != len(binders):
 *                 raise NotImplementedError(             # <<<<<<<<<<<<<<
 *                     "For now, all polymers must use all of the same binders."
 *                 )
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_For_now_all_polymers_must_use_al); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "chromo/fields.pyx":566
 *         )
 *         self.precompute_ind_xyz_to_super()
 *         self.nbr_inds = np.empty((8,), dtype=int)             # <<<<<<<<<<<<<<
 *         self.nbr_inds_with_trial = np.empty((2, 8), dtype=int)
 *         self.wt_vec = np.empty((8,), dtype=float)
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_int_8); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_tuple__8); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "chromo/fields.pyx":567
 *         self.precompute_ind_xyz_to_super()
 *         self.nbr_inds = np.empty((8,), dtype=int)
 *         self.nbr_inds_with_trial = np.empty((2, 8), dtype=int)             # <<<<<<<<<<<<<<
 *         self.wt_vec = np.empty((8,), dtype=float)
 *         self.wt_vec_with_trial = np.empty((2, 8), dtype=float)
 */
  __pyx_tuple__10 = PyTuple_Pack(2, __pyx_int_2, __pyx_int_8); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_tuple__10); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "chromo/fields.pyx":570
 *         self.wt_vec = np.empty((8,), dtype=float)
 *         self.wt_vec_with_trial = np.empty((2, 8), dtype=float)
 *         self.xyz = np.empty((3,), dtype=float)             # <<<<<<<<<<<<<<
 *         self.xyz_with_trial = np.empty((2, 3), dtype=float)
 *         self.weight_xyz = np.empty((3,), dtype=float)
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_tuple__12); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "chromo/fields.pyx":571
 *         self.wt_vec_with_trial = np.empty((2, 8), dtype=float)
 *         self.xyz = np.empty((3,), dtype=float)
 *         self.xyz_with_trial = np.empty((2, 3), dtype=float)             # <<<<<<<<<<<<<<
 *         self.weight_xyz = np.empty((3,), dtype=float)
 *         self.weight_xyz_with_trial = np.empty((2, 3), dtype=float)
 */
  __pyx_tuple__14 = PyTuple_Pack(2, __pyx_int_2, __pyx_int_3); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_tuple__14); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "chromo/fields.pyx":1937
 *         # Raise error if invalid `trial` flag is passed
 *         else:
 *             raise ValueError("Invalid current/trial state indicator.")             # <<<<<<<<<<<<<<
 * 
 *     cpdef double compute_E(self, poly.PolymerBase poly):
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_Invalid_current_trial_state_indi); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 1937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "chromo/fields.pyx":2555
 *         the bin specified by `ind`
 *     """
 *     cdef long[:] nbr_bins_flat = np.zeros(27, dtype=int)             # <<<<<<<<<<<<<<
 *     xyz = super_ind_to_inds(ind, nx, ny)
 *     x = xyz[0]
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_int_27); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 2555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "chromo/fields.pyx":2561
 *     z = xyz[2]
 * 
 *     nbr_bins = np.zeros((3, 3, 3), dtype=int)             # <<<<<<<<<<<<<<
 *     for i, dx in enumerate(range(-1, 2)):
 *         for j, dy in enumerate(range(-1, 2)):
 */
  __pyx_tuple__20 = PyTuple_Pack(3, __pyx_int_3, __pyx_int_3, __pyx_int_3); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 2561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_tuple__20); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 2561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x20a4277, 0xc3c0ef8, 0xb4ec7da):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x20a4277, 0xc3c0ef8, 0xb4ec7da) = (binders, confine_length, confine_type, n_polymers, polymers))" % __pyx_checksum)
 */
  __pyx_tuple__23 = PyTuple_Pack(3, __pyx_int_34226807, __pyx_int_205262584, __pyx_int_189712346); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);
  __pyx_tuple__26 = PyTuple_Pack(3, __pyx_int_1473644, __pyx_int_90345869, __pyx_int_110694024); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":945
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(3, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "../../../../../anaconda3/envs/chromo/lib/python3.9/site-packages/numpy/__init__.pxd":951
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(3, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "View.MemoryView":134
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_Empty_shape_tuple_for_cython_arr); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(2, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "View.MemoryView":137
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_itemsize_0_for_cython_array); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(2, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "View.MemoryView":149
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_shape_and_str); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(2, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "View.MemoryView":177
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_array_data); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(2, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "View.MemoryView":193
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_Can_only_create_a_buffer_that_is); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(2, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "View.MemoryView":420
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_Cannot_assign_to_read_only_memor); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(2, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "View.MemoryView":497
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_convert_item_to_object); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(2, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "View.MemoryView":522
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_Cannot_create_writable_memory_vi); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(2, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "View.MemoryView":572
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_Buffer_view_does_not_expose_stri); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(2, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "View.MemoryView":579
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
  __pyx_tuple__40 = PyTuple_New(1); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(2, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_tuple__40, 0, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "View.MemoryView":684
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
  __pyx_slice__43 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__43)) __PYX_ERR(2, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__43);
  __Pyx_GIVEREF(__pyx_slice__43);

  /* "View.MemoryView":705
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_Indirect_dimensions_not_supporte); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(2, 705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_tuple__48 = PyTuple_Pack(3, __pyx_int_184977713, __pyx_int_136983863, __pyx_int_112105877); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "chromo/fields.pyx":221
 *     """
 * 
 *     def __init__(self, cls, **kwargs):             # <<<<<<<<<<<<<<
 *         """Construct our Reconstructor.
 * 
 */
  __pyx_tuple__50 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_cls, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_chromo_fields_pyx, __pyx_n_s_init, 221, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 221, __pyx_L1_error)

  /* "chromo/fields.pyx":232
 *         self.kwargs = kwargs
 * 
 *     def finalize(self, polymers, binders) -> FieldBase:             # <<<<<<<<<<<<<<
 *         """Finish construction of appropriate `Field` object.
 * 
 */
  __pyx_tuple__51 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_polymers, __pyx_n_s_binders); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__3 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_chromo_fields_pyx, __pyx_n_s_finalize, 232, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__3)) __PYX_ERR(0, 232, __pyx_L1_error)

  /* "chromo/fields.pyx":252
 * 
 *     @classmethod
 *     def from_file(cls, path: Path) -> FieldBase:             # <<<<<<<<<<<<<<
 *         """Assume class name is encoded in file name.
 * 
 */
  __pyx_tuple__52 = PyTuple_Pack(4, __pyx_n_s_cls, __pyx_n_s_path, __pyx_n_s_constructor, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_chromo_fields_pyx, __pyx_n_s_from_file_2, 252, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(0, 252, __pyx_L1_error)

  /* "chromo/fields.pyx":269
 *         return cls(constructor, **kwargs)
 * 
 *     def __call__(self, polymers, binders) -> FieldBase:             # <<<<<<<<<<<<<<
 *         """Synonym for `Reconstructor.finalize()`.
 * 
 */
  __pyx_tuple__53 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_polymers, __pyx_n_s_binders); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_chromo_fields_pyx, __pyx_n_s_call, 269, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) __PYX_ERR(0, 269, __pyx_L1_error)

  /* "chromo/fields.pyx":1065
 * 
 *     @staticmethod
 *     def _get_corner_bin_index(nx, ny, nz) -> np.ndarray:             # <<<<<<<<<<<<<<
 *         """Set up the index array for density bins corners.
 * 
 */
  __pyx_tuple__54 = PyTuple_Pack(11, __pyx_n_s_nx, __pyx_n_s_ny, __pyx_n_s_nz, __pyx_n_s_bin_index, __pyx_n_s_count, __pyx_n_s_index_z, __pyx_n_s_index_zp1, __pyx_n_s_index_y, __pyx_n_s_index_yp1, __pyx_n_s_index_x, __pyx_n_s_index_xp1); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(3, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_chromo_fields_pyx, __pyx_n_s_get_corner_bin_index, 1065, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(0, 1065, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_FieldBase(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__55 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_FieldBase, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_tuple__56 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_NullField, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_tuple__57 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_UniformDensityFie, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(2, 1, __pyx_L1_error)

  /* "View.MemoryView":287
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct_or_indirect); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(2, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "View.MemoryView":288
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(2, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "View.MemoryView":289
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_kp_s_strided_and_indirect); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(2, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "View.MemoryView":292
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_direct); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(2, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "View.MemoryView":293
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_indirect); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(2, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__63 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_5 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_float_0_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1Eneg_18 = PyFloat_FromDouble(1E-18); if (unlikely(!__pyx_float_1Eneg_18)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_27 = PyInt_FromLong(27); if (unlikely(!__pyx_int_27)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1000 = PyInt_FromLong(1000); if (unlikely(!__pyx_int_1000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1473644 = PyInt_FromLong(1473644L); if (unlikely(!__pyx_int_1473644)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_34226807 = PyInt_FromLong(34226807L); if (unlikely(!__pyx_int_34226807)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_90345869 = PyInt_FromLong(90345869L); if (unlikely(!__pyx_int_90345869)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_110694024 = PyInt_FromLong(110694024L); if (unlikely(!__pyx_int_110694024)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_112105877 = PyInt_FromLong(112105877L); if (unlikely(!__pyx_int_112105877)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_136983863 = PyInt_FromLong(136983863L); if (unlikely(!__pyx_int_136983863)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_184977713 = PyInt_FromLong(184977713L); if (unlikely(!__pyx_int_184977713)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_189712346 = PyInt_FromLong(189712346L); if (unlikely(!__pyx_int_189712346)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_205262584 = PyInt_FromLong(205262584L); if (unlikely(!__pyx_int_205262584)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_v_6chromo_6fields__field_descriptors = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_6chromo_6fields__int_field_descriptors = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_6chromo_6fields__str_field_descriptors = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_6chromo_6fields__float_field_descriptors = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_6chromo_6fields__bool_field_descriptors = ((PyObject*)Py_None); Py_INCREF(Py_None);
  generic = Py_None; Py_INCREF(Py_None);
  strided = Py_None; Py_INCREF(Py_None);
  indirect = Py_None; Py_INCREF(Py_None);
  contiguous = Py_None; Py_INCREF(Py_None);
  indirect_contiguous = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("inds_to_super_ind", (void (*)(void))__pyx_f_6chromo_6fields_inds_to_super_ind, "long (long, long, long, long, long)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("super_ind_to_inds", (void (*)(void))__pyx_f_6chromo_6fields_super_ind_to_inds, "__Pyx_memviewslice (long, long, long, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("assign_beads_to_bins", (void (*)(void))__pyx_f_6chromo_6fields_assign_beads_to_bins, "PyObject *(__Pyx_memviewslice, long, long, long, long, double, double, double, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("get_neighboring_bins", (void (*)(void))__pyx_f_6chromo_6fields_get_neighboring_bins, "PyObject *(long, long, long, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("get_neighbors_at_ind", (void (*)(void))__pyx_f_6chromo_6fields_get_neighbors_at_ind, "__Pyx_memviewslice (long, long, long, long, long, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("get_blocks", (void (*)(void))__pyx_f_6chromo_6fields_get_blocks, "PyObject *(long, long, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_6chromo_6fields_FieldBase = &__pyx_vtable_6chromo_6fields_FieldBase;
  __pyx_vtable_6chromo_6fields_FieldBase.compute_dE = (double (*)(struct __pyx_obj_6chromo_6fields_FieldBase *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, __Pyx_memviewslice, long, long, int))__pyx_f_6chromo_6fields_9FieldBase_compute_dE;
  __pyx_vtable_6chromo_6fields_FieldBase.update_affected_densities = (void (*)(struct __pyx_obj_6chromo_6fields_FieldBase *))__pyx_f_6chromo_6fields_9FieldBase_update_affected_densities;
  __pyx_vtable_6chromo_6fields_FieldBase.get_confinement_dE = (double (*)(struct __pyx_obj_6chromo_6fields_FieldBase *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, __Pyx_memviewslice, long, int))__pyx_f_6chromo_6fields_9FieldBase_get_confinement_dE;
  if (PyType_Ready(&__pyx_type_6chromo_6fields_FieldBase) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6chromo_6fields_FieldBase.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6chromo_6fields_FieldBase.tp_dictoffset && __pyx_type_6chromo_6fields_FieldBase.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6chromo_6fields_FieldBase.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_6chromo_6fields_FieldBase, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 46, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6chromo_6fields_9FieldBase___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6chromo_6fields_9FieldBase___init__.doc = __pyx_doc_6chromo_6fields_9FieldBase___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6chromo_6fields_9FieldBase___init__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_6chromo_6fields_FieldBase, "__str__"); if (unlikely(!wrapper)) __PYX_ERR(0, 46, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6chromo_6fields_9FieldBase_2__str__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6chromo_6fields_9FieldBase_2__str__.doc = __pyx_doc_6chromo_6fields_9FieldBase_2__str__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6chromo_6fields_9FieldBase_2__str__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_6chromo_6fields_FieldBase, "__contains__"); if (unlikely(!wrapper)) __PYX_ERR(0, 46, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6chromo_6fields_9FieldBase_4__contains__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6chromo_6fields_9FieldBase_4__contains__.doc = __pyx_doc_6chromo_6fields_9FieldBase_4__contains__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6chromo_6fields_9FieldBase_4__contains__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_6chromo_6fields_FieldBase.tp_dict, __pyx_vtabptr_6chromo_6fields_FieldBase) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FieldBase, (PyObject *)&__pyx_type_6chromo_6fields_FieldBase) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6chromo_6fields_FieldBase) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  __pyx_ptype_6chromo_6fields_FieldBase = &__pyx_type_6chromo_6fields_FieldBase;
  __pyx_vtabptr_6chromo_6fields_NullField = &__pyx_vtable_6chromo_6fields_NullField;
  __pyx_vtable_6chromo_6fields_NullField.__pyx_base = *__pyx_vtabptr_6chromo_6fields_FieldBase;
  __pyx_vtable_6chromo_6fields_NullField.__pyx_base.compute_dE = (double (*)(struct __pyx_obj_6chromo_6fields_FieldBase *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, __Pyx_memviewslice, long, long, int))__pyx_f_6chromo_6fields_9NullField_compute_dE;
  __pyx_vtable_6chromo_6fields_NullField.__pyx_base.update_affected_densities = (void (*)(struct __pyx_obj_6chromo_6fields_FieldBase *))__pyx_f_6chromo_6fields_9NullField_update_affected_densities;
  __pyx_type_6chromo_6fields_NullField.tp_base = __pyx_ptype_6chromo_6fields_FieldBase;
  if (PyType_Ready(&__pyx_type_6chromo_6fields_NullField) < 0) __PYX_ERR(0, 280, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6chromo_6fields_NullField.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6chromo_6fields_NullField.tp_dictoffset && __pyx_type_6chromo_6fields_NullField.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6chromo_6fields_NullField.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6chromo_6fields_NullField.tp_dict, __pyx_vtabptr_6chromo_6fields_NullField) < 0) __PYX_ERR(0, 280, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_NullField, (PyObject *)&__pyx_type_6chromo_6fields_NullField) < 0) __PYX_ERR(0, 280, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6chromo_6fields_NullField) < 0) __PYX_ERR(0, 280, __pyx_L1_error)
  __pyx_ptype_6chromo_6fields_NullField = &__pyx_type_6chromo_6fields_NullField;
  __pyx_vtabptr_6chromo_6fields_UniformDensityField = &__pyx_vtable_6chromo_6fields_UniformDensityField;
  __pyx_vtable_6chromo_6fields_UniformDensityField.__pyx_base = *__pyx_vtabptr_6chromo_6fields_FieldBase;
  __pyx_vtable_6chromo_6fields_UniformDensityField.__pyx_base.compute_dE = (double (*)(struct __pyx_obj_6chromo_6fields_FieldBase *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, __Pyx_memviewslice, long, long, int))__pyx_f_6chromo_6fields_19UniformDensityField_compute_dE;
  __pyx_vtable_6chromo_6fields_UniformDensityField.__pyx_base.update_affected_densities = (void (*)(struct __pyx_obj_6chromo_6fields_FieldBase *))__pyx_f_6chromo_6fields_19UniformDensityField_update_affected_densities;
  __pyx_vtable_6chromo_6fields_UniformDensityField.precompute_ind_xyz_to_super = (void (*)(struct __pyx_obj_6chromo_6fields_UniformDensityField *))__pyx_f_6chromo_6fields_19UniformDensityField_precompute_ind_xyz_to_super;
  __pyx_vtable_6chromo_6fields_UniformDensityField.init_fast_field = (void (*)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, long))__pyx_f_6chromo_6fields_19UniformDensityField_init_fast_field;
  __pyx_vtable_6chromo_6fields_UniformDensityField.get_accessible_volumes = (PyObject *(*)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, long, int, int __pyx_skip_dispatch))__pyx_f_6chromo_6fields_19UniformDensityField_get_accessible_volumes;
  __pyx_vtable_6chromo_6fields_UniformDensityField.get_voxel_coords = (__Pyx_memviewslice (*)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, __Pyx_memviewslice))__pyx_f_6chromo_6fields_19UniformDensityField_get_voxel_coords;
  __pyx_vtable_6chromo_6fields_UniformDensityField.get_split_voxels = (__Pyx_memviewslice (*)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, __Pyx_memviewslice, double))__pyx_f_6chromo_6fields_19UniformDensityField_get_split_voxels;
  __pyx_vtable_6chromo_6fields_UniformDensityField.define_voxel_subgrid = (__Pyx_memviewslice (*)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, long))__pyx_f_6chromo_6fields_19UniformDensityField_define_voxel_subgrid;
  __pyx_vtable_6chromo_6fields_UniformDensityField.get_frac_accessible = (double (*)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, __Pyx_memviewslice, __Pyx_memviewslice))__pyx_f_6chromo_6fields_19UniformDensityField_get_frac_accessible;
  __pyx_vtable_6chromo_6fields_UniformDensityField.get_change_in_density = (__Pyx_memviewslice (*)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, __Pyx_memviewslice, long, int))__pyx_f_6chromo_6fields_19UniformDensityField_get_change_in_density;
  __pyx_vtable_6chromo_6fields_UniformDensityField.get_change_in_density_quickly = (__Pyx_memviewslice (*)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, __Pyx_memviewslice, long, int))__pyx_f_6chromo_6fields_19UniformDensityField_get_change_in_density_quickly;
  __pyx_vtable_6chromo_6fields_UniformDensityField._generate_weight_vector_with_trial = (void (*)(struct __pyx_obj_6chromo_6fields_UniformDensityField *))__pyx_f_6chromo_6fields_19UniformDensityField__generate_weight_vector_with_trial;
  __pyx_vtable_6chromo_6fields_UniformDensityField._generate_index_vector_with_trial = (void (*)(struct __pyx_obj_6chromo_6fields_UniformDensityField *))__pyx_f_6chromo_6fields_19UniformDensityField__generate_index_vector_with_trial;
  __pyx_vtable_6chromo_6fields_UniformDensityField.get_dE_binders_and_beads = (double (*)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, __Pyx_memviewslice, long, __Pyx_memviewslice, int))__pyx_f_6chromo_6fields_19UniformDensityField_get_dE_binders_and_beads;
  __pyx_vtable_6chromo_6fields_UniformDensityField.nonspecific_interact_dE = (double (*)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, __Pyx_memviewslice, long))__pyx_f_6chromo_6fields_19UniformDensityField_nonspecific_interact_dE;
  __pyx_vtable_6chromo_6fields_UniformDensityField.get_volume_fractions_with_trial = (__Pyx_memviewslice (*)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, double, __Pyx_memviewslice, long))__pyx_f_6chromo_6fields_19UniformDensityField_get_volume_fractions_with_trial;
  __pyx_vtable_6chromo_6fields_UniformDensityField.count_doubly_bound = (void (*)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, __Pyx_memviewslice, long, int, int))__pyx_f_6chromo_6fields_19UniformDensityField_count_doubly_bound;
  __pyx_vtable_6chromo_6fields_UniformDensityField.compute_E = (double (*)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, int __pyx_skip_dispatch))__pyx_f_6chromo_6fields_19UniformDensityField_compute_E;
  __pyx_vtable_6chromo_6fields_UniformDensityField.update_all_densities = (void (*)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, __Pyx_memviewslice &, long, int __pyx_skip_dispatch))__pyx_f_6chromo_6fields_19UniformDensityField_update_all_densities;
  __pyx_vtable_6chromo_6fields_UniformDensityField.update_all_densities_for_all_polymers = (void (*)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, int __pyx_skip_dispatch))__pyx_f_6chromo_6fields_19UniformDensityField_update_all_densities_for_all_polymers;
  __pyx_vtable_6chromo_6fields_UniformDensityField._generate_weight_vector = (void (*)(struct __pyx_obj_6chromo_6fields_UniformDensityField *))__pyx_f_6chromo_6fields_19UniformDensityField__generate_weight_vector;
  __pyx_vtable_6chromo_6fields_UniformDensityField._generate_index_vector = (void (*)(struct __pyx_obj_6chromo_6fields_UniformDensityField *))__pyx_f_6chromo_6fields_19UniformDensityField__generate_index_vector;
  __pyx_vtable_6chromo_6fields_UniformDensityField.get_E_binders_and_beads = (double (*)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, __Pyx_memviewslice, long))__pyx_f_6chromo_6fields_19UniformDensityField_get_E_binders_and_beads;
  __pyx_vtable_6chromo_6fields_UniformDensityField.nonspecific_interact_E = (double (*)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, int __pyx_skip_dispatch))__pyx_f_6chromo_6fields_19UniformDensityField_nonspecific_interact_E;
  __pyx_vtable_6chromo_6fields_UniformDensityField.get_volume_fractions = (__Pyx_memviewslice (*)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, double))__pyx_f_6chromo_6fields_19UniformDensityField_get_volume_fractions;
  __pyx_vtable_6chromo_6fields_UniformDensityField.get_coordinates_at_inds = (__Pyx_memviewslice (*)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, __Pyx_memviewslice &, __Pyx_memviewslice &, long &))__pyx_f_6chromo_6fields_19UniformDensityField_get_coordinates_at_inds;
  __pyx_vtable_6chromo_6fields_UniformDensityField.get_states_at_inds = (__Pyx_memviewslice (*)(struct __pyx_obj_6chromo_6fields_UniformDensityField *, struct __pyx_obj_6chromo_8polymers_PolymerBase *, __Pyx_memviewslice, long))__pyx_f_6chromo_6fields_19UniformDensityField_get_states_at_inds;
  __pyx_type_6chromo_6fields_UniformDensityField.tp_base = __pyx_ptype_6chromo_6fields_FieldBase;
  if (PyType_Ready(&__pyx_type_6chromo_6fields_UniformDensityField) < 0) __PYX_ERR(0, 324, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6chromo_6fields_UniformDensityField.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6chromo_6fields_UniformDensityField.tp_dictoffset && __pyx_type_6chromo_6fields_UniformDensityField.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6chromo_6fields_UniformDensityField.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_6chromo_6fields_UniformDensityField, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 324, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6chromo_6fields_19UniformDensityField___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6chromo_6fields_19UniformDensityField___init__.doc = __pyx_doc_6chromo_6fields_19UniformDensityField___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6chromo_6fields_19UniformDensityField___init__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_6chromo_6fields_UniformDensityField, "__eq__"); if (unlikely(!wrapper)) __PYX_ERR(0, 324, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6chromo_6fields_19UniformDensityField_12__eq__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6chromo_6fields_19UniformDensityField_12__eq__.doc = __pyx_doc_6chromo_6fields_19UniformDensityField_12__eq__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6chromo_6fields_19UniformDensityField_12__eq__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_6chromo_6fields_UniformDensityField, "__str__"); if (unlikely(!wrapper)) __PYX_ERR(0, 324, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6chromo_6fields_19UniformDensityField_16__str__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6chromo_6fields_19UniformDensityField_16__str__.doc = __pyx_doc_6chromo_6fields_19UniformDensityField_16__str__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6chromo_6fields_19UniformDensityField_16__str__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_6chromo_6fields_UniformDensityField.tp_dict, __pyx_vtabptr_6chromo_6fields_UniformDensityField) < 0) __PYX_ERR(0, 324, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_UniformDensityField, (PyObject *)&__pyx_type_6chromo_6fields_UniformDensityField) < 0) __PYX_ERR(0, 324, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6chromo_6fields_UniformDensityField) < 0) __PYX_ERR(0, 324, __pyx_L1_error)
  __pyx_ptype_6chromo_6fields_UniformDensityField = &__pyx_type_6chromo_6fields_UniformDensityField;
  __pyx_vtabptr_array = &__pyx_vtable_array;
  __pyx_vtable_array.get_memview = (PyObject *(*)(struct __pyx_array_obj *))__pyx_array_get_memview;
  if (PyType_Ready(&__pyx_type___pyx_array) < 0) __PYX_ERR(2, 106, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_array.tp_print = 0;
  #endif
  if (__Pyx_SetVtable(__pyx_type___pyx_array.tp_dict, __pyx_vtabptr_array) < 0) __PYX_ERR(2, 106, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_array) < 0) __PYX_ERR(2, 106, __pyx_L1_error)
  __pyx_array_type = &__pyx_type___pyx_array;
  if (PyType_Ready(&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(2, 280, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_MemviewEnum.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_MemviewEnum.tp_dictoffset && __pyx_type___pyx_MemviewEnum.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_MemviewEnum.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(2, 280, __pyx_L1_error)
  __pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
  __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;
  __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
  __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
  __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
  __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
  __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
  __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
  __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
  if (PyType_Ready(&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(2, 331, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryview.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryview.tp_dictoffset && __pyx_type___pyx_memoryview.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryview.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryview.tp_dict, __pyx_vtabptr_memoryview) < 0) __PYX_ERR(2, 331, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(2, 331, __pyx_L1_error)
  __pyx_memoryview_type = &__pyx_type___pyx_memoryview;
  __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
  __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;
  __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
  __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
  __pyx_type___pyx_memoryviewslice.tp_base = __pyx_memoryview_type;
  if (PyType_Ready(&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(2, 967, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryviewslice.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryviewslice.tp_dictoffset && __pyx_type___pyx_memoryviewslice.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryviewslice.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryviewslice.tp_dict, __pyx_vtabptr__memoryviewslice) < 0) __PYX_ERR(2, 967, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(2, 967, __pyx_L1_error)
  __pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(3, 200, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(3, 223, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(3, 227, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(3, 239, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_generic) __PYX_ERR(3, 771, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType(__pyx_t_1, "numpy", "number", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_number) __PYX_ERR(3, 773, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_integer) __PYX_ERR(3, 775, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(3, 777, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(3, 779, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(3, 781, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_floating) __PYX_ERR(3, 783, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(3, 785, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(3, 787, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType(__pyx_t_1, "numpy", "character", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_character) __PYX_ERR(3, 789, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(3, 827, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("chromo.polymers"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_6chromo_8polymers_TransformedObject = __Pyx_ImportType(__pyx_t_1, "chromo.polymers", "TransformedObject", sizeof(struct __pyx_obj_6chromo_8polymers_TransformedObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6chromo_8polymers_TransformedObject) __PYX_ERR(5, 9, __pyx_L1_error)
  __pyx_ptype_6chromo_8polymers_PolymerBase = __Pyx_ImportType(__pyx_t_1, "chromo.polymers", "PolymerBase", sizeof(struct __pyx_obj_6chromo_8polymers_PolymerBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6chromo_8polymers_PolymerBase) __PYX_ERR(5, 12, __pyx_L1_error)
  __pyx_vtabptr_6chromo_8polymers_PolymerBase = (struct __pyx_vtabstruct_6chromo_8polymers_PolymerBase*)__Pyx_GetVtable(__pyx_ptype_6chromo_8polymers_PolymerBase->tp_dict); if (unlikely(!__pyx_vtabptr_6chromo_8polymers_PolymerBase)) __PYX_ERR(5, 12, __pyx_L1_error)
  __pyx_ptype_6chromo_8polymers_Rouse = __Pyx_ImportType(__pyx_t_1, "chromo.polymers", "Rouse", sizeof(struct __pyx_obj_6chromo_8polymers_Rouse), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6chromo_8polymers_Rouse) __PYX_ERR(5, 52, __pyx_L1_error)
  __pyx_vtabptr_6chromo_8polymers_Rouse = (struct __pyx_vtabstruct_6chromo_8polymers_Rouse*)__Pyx_GetVtable(__pyx_ptype_6chromo_8polymers_Rouse->tp_dict); if (unlikely(!__pyx_vtabptr_6chromo_8polymers_Rouse)) __PYX_ERR(5, 52, __pyx_L1_error)
  __pyx_ptype_6chromo_8polymers_SSWLC = __Pyx_ImportType(__pyx_t_1, "chromo.polymers", "SSWLC", sizeof(struct __pyx_obj_6chromo_8polymers_SSWLC), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6chromo_8polymers_SSWLC) __PYX_ERR(5, 55, __pyx_L1_error)
  __pyx_vtabptr_6chromo_8polymers_SSWLC = (struct __pyx_vtabstruct_6chromo_8polymers_SSWLC*)__Pyx_GetVtable(__pyx_ptype_6chromo_8polymers_SSWLC->tp_dict); if (unlikely(!__pyx_vtabptr_6chromo_8polymers_SSWLC)) __PYX_ERR(5, 55, __pyx_L1_error)
  __pyx_ptype_6chromo_8polymers_Chromatin = __Pyx_ImportType(__pyx_t_1, "chromo.polymers", "Chromatin", sizeof(struct __pyx_obj_6chromo_8polymers_Chromatin), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6chromo_8polymers_Chromatin) __PYX_ERR(5, 100, __pyx_L1_error)
  __pyx_vtabptr_6chromo_8polymers_Chromatin = (struct __pyx_vtabstruct_6chromo_8polymers_Chromatin*)__Pyx_GetVtable(__pyx_ptype_6chromo_8polymers_Chromatin->tp_dict); if (unlikely(!__pyx_vtabptr_6chromo_8polymers_Chromatin)) __PYX_ERR(5, 100, __pyx_L1_error)
  __pyx_ptype_6chromo_8polymers_SSTWLC = __Pyx_ImportType(__pyx_t_1, "chromo.polymers", "SSTWLC", sizeof(struct __pyx_obj_6chromo_8polymers_SSTWLC), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6chromo_8polymers_SSTWLC) __PYX_ERR(5, 108, __pyx_L1_error)
  __pyx_vtabptr_6chromo_8polymers_SSTWLC = (struct __pyx_vtabstruct_6chromo_8polymers_SSTWLC*)__Pyx_GetVtable(__pyx_ptype_6chromo_8polymers_SSTWLC->tp_dict); if (unlikely(!__pyx_vtabptr_6chromo_8polymers_SSTWLC)) __PYX_ERR(5, 108, __pyx_L1_error)
  __pyx_ptype_6chromo_8polymers_LoopedSSTWLC = __Pyx_ImportType(__pyx_t_1, "chromo.polymers", "LoopedSSTWLC", sizeof(struct __pyx_obj_6chromo_8polymers_LoopedSSTWLC), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6chromo_8polymers_LoopedSSTWLC) __PYX_ERR(5, 149, __pyx_L1_error)
  __pyx_vtabptr_6chromo_8polymers_LoopedSSTWLC = (struct __pyx_vtabstruct_6chromo_8polymers_LoopedSSTWLC*)__Pyx_GetVtable(__pyx_ptype_6chromo_8polymers_LoopedSSTWLC->tp_dict); if (unlikely(!__pyx_vtabptr_6chromo_8polymers_LoopedSSTWLC)) __PYX_ERR(5, 149, __pyx_L1_error)
  __pyx_ptype_6chromo_8polymers_DetailedChromatin = __Pyx_ImportType(__pyx_t_1, "chromo.polymers", "DetailedChromatin", sizeof(struct __pyx_obj_6chromo_8polymers_DetailedChromatin), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6chromo_8polymers_DetailedChromatin) __PYX_ERR(5, 152, __pyx_L1_error)
  __pyx_vtabptr_6chromo_8polymers_DetailedChromatin = (struct __pyx_vtabstruct_6chromo_8polymers_DetailedChromatin*)__Pyx_GetVtable(__pyx_ptype_6chromo_8polymers_DetailedChromatin->tp_dict); if (unlikely(!__pyx_vtabptr_6chromo_8polymers_DetailedChromatin)) __PYX_ERR(5, 152, __pyx_L1_error)
  __pyx_ptype_6chromo_8polymers_DetailedChromatinWithSterics = __Pyx_ImportType(__pyx_t_1, "chromo.polymers", "DetailedChromatinWithSterics", sizeof(struct __pyx_obj_6chromo_8polymers_DetailedChromatinWithSterics), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6chromo_8polymers_DetailedChromatinWithSterics) __PYX_ERR(5, 161, __pyx_L1_error)
  __pyx_vtabptr_6chromo_8polymers_DetailedChromatinWithSterics = (struct __pyx_vtabstruct_6chromo_8polymers_DetailedChromatinWithSterics*)__Pyx_GetVtable(__pyx_ptype_6chromo_8polymers_DetailedChromatinWithSterics->tp_dict); if (unlikely(!__pyx_vtabptr_6chromo_8polymers_DetailedChromatinWithSterics)) __PYX_ERR(5, 161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __pyx_t_1 = PyImport_ImportModule("chromo.util.linalg"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "identify_4", (void **)&__pyx_vp_6chromo_4util_6linalg_identify_4, "PyArrayObject *") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("chromo.util.linalg"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "vec_dot3", (void (**)(void))&__pyx_f_6chromo_4util_6linalg_vec_dot3, "double (__Pyx_memviewslice, __Pyx_memviewslice)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initfields(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initfields(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_fields(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_fields(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_fields(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  static PyThread_type_lock __pyx_t_4[8];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'fields' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_fields(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("fields", __pyx_methods, __pyx_k_Fields_discretize_space_to_effic, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_chromo__fields) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "chromo.fields")) {
      if (unlikely(PyDict_SetItemString(modules, "chromo.fields", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_variable_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_function_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __Pyx_TraceCall("__Pyx_PyMODINIT_FUNC PyInit_fields(void)", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "chromo/fields.pyx":15
 * """
 * 
 * import pyximport             # <<<<<<<<<<<<<<
 * pyximport.install()
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pyximport, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyximport, __pyx_t_1) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "chromo/fields.pyx":16
 * 
 * import pyximport
 * pyximport.install()             # <<<<<<<<<<<<<<
 * 
 * # Built-in Modules
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyximport); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_install); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "chromo/fields.pyx":19
 * 
 * # Built-in Modules
 * from pathlib import Path             # <<<<<<<<<<<<<<
 * from libc.math cimport floor, sqrt
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Path);
  __Pyx_GIVEREF(__pyx_n_s_Path);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Path);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pathlib, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Path); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Path, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":23
 * 
 * # External Modules
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * import pandas as pd
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":25
 * import numpy as np
 * cimport numpy as np
 * import pandas as pd             # <<<<<<<<<<<<<<
 * 
 * # Custom Modules
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pandas, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pd, __pyx_t_2) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":28
 * 
 * # Custom Modules
 * import chromo.polymers as poly             # <<<<<<<<<<<<<<
 * from chromo.util.linalg cimport vec_dot3
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s__49);
  __Pyx_GIVEREF(__pyx_n_s__49);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s__49);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_chromo_polymers, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_poly, __pyx_t_1) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "chromo/fields.pyx":32
 * 
 * 
 * cdef double E_HUGE = 1E99             # <<<<<<<<<<<<<<
 * 
 * cdef list _field_descriptors = [
 */
  __pyx_v_6chromo_6fields_E_HUGE = 1E99;

  /* "chromo/fields.pyx":34
 * cdef double E_HUGE = 1E99
 * 
 * cdef list _field_descriptors = [             # <<<<<<<<<<<<<<
 *     'x_width', 'nx', 'y_width', 'ny', 'z_width', 'nz', 'confine_type',
 *     'confine_length', 'chi', 'assume_fully_accessible', 'vf_limit', 'fast_field'
 */
  __pyx_t_1 = PyList_New(12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_x_width);
  __Pyx_GIVEREF(__pyx_n_s_x_width);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_x_width);
  __Pyx_INCREF(__pyx_n_s_nx);
  __Pyx_GIVEREF(__pyx_n_s_nx);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_nx);
  __Pyx_INCREF(__pyx_n_s_y_width);
  __Pyx_GIVEREF(__pyx_n_s_y_width);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_y_width);
  __Pyx_INCREF(__pyx_n_s_ny);
  __Pyx_GIVEREF(__pyx_n_s_ny);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_ny);
  __Pyx_INCREF(__pyx_n_s_z_width);
  __Pyx_GIVEREF(__pyx_n_s_z_width);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_z_width);
  __Pyx_INCREF(__pyx_n_s_nz);
  __Pyx_GIVEREF(__pyx_n_s_nz);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_s_nz);
  __Pyx_INCREF(__pyx_n_s_confine_type);
  __Pyx_GIVEREF(__pyx_n_s_confine_type);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_s_confine_type);
  __Pyx_INCREF(__pyx_n_s_confine_length);
  __Pyx_GIVEREF(__pyx_n_s_confine_length);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_n_s_confine_length);
  __Pyx_INCREF(__pyx_n_s_chi);
  __Pyx_GIVEREF(__pyx_n_s_chi);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_n_s_chi);
  __Pyx_INCREF(__pyx_n_s_assume_fully_accessible);
  __Pyx_GIVEREF(__pyx_n_s_assume_fully_accessible);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_n_s_assume_fully_accessible);
  __Pyx_INCREF(__pyx_n_s_vf_limit);
  __Pyx_GIVEREF(__pyx_n_s_vf_limit);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_n_s_vf_limit);
  __Pyx_INCREF(__pyx_n_s_fast_field);
  __Pyx_GIVEREF(__pyx_n_s_fast_field);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_n_s_fast_field);
  __Pyx_XGOTREF(__pyx_v_6chromo_6fields__field_descriptors);
  __Pyx_DECREF_SET(__pyx_v_6chromo_6fields__field_descriptors, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "chromo/fields.pyx":38
 *     'confine_length', 'chi', 'assume_fully_accessible', 'vf_limit', 'fast_field'
 * ]
 * cdef list _int_field_descriptors = ['nx', 'ny', 'nz', 'n_points']             # <<<<<<<<<<<<<<
 * cdef list _str_field_descriptors = ['confine_type']
 * cdef list _float_field_descriptors = [
 */
  __pyx_t_1 = PyList_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_nx);
  __Pyx_GIVEREF(__pyx_n_s_nx);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_nx);
  __Pyx_INCREF(__pyx_n_s_ny);
  __Pyx_GIVEREF(__pyx_n_s_ny);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_ny);
  __Pyx_INCREF(__pyx_n_s_nz);
  __Pyx_GIVEREF(__pyx_n_s_nz);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_nz);
  __Pyx_INCREF(__pyx_n_s_n_points);
  __Pyx_GIVEREF(__pyx_n_s_n_points);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_n_points);
  __Pyx_XGOTREF(__pyx_v_6chromo_6fields__int_field_descriptors);
  __Pyx_DECREF_SET(__pyx_v_6chromo_6fields__int_field_descriptors, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "chromo/fields.pyx":39
 * ]
 * cdef list _int_field_descriptors = ['nx', 'ny', 'nz', 'n_points']
 * cdef list _str_field_descriptors = ['confine_type']             # <<<<<<<<<<<<<<
 * cdef list _float_field_descriptors = [
 *     'x_width', 'y_width', 'z_width', 'confine_length', 'vf_limit', 'chi'
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_confine_type);
  __Pyx_GIVEREF(__pyx_n_s_confine_type);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_confine_type);
  __Pyx_XGOTREF(__pyx_v_6chromo_6fields__str_field_descriptors);
  __Pyx_DECREF_SET(__pyx_v_6chromo_6fields__str_field_descriptors, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "chromo/fields.pyx":40
 * cdef list _int_field_descriptors = ['nx', 'ny', 'nz', 'n_points']
 * cdef list _str_field_descriptors = ['confine_type']
 * cdef list _float_field_descriptors = [             # <<<<<<<<<<<<<<
 *     'x_width', 'y_width', 'z_width', 'confine_length', 'vf_limit', 'chi'
 * ]
 */
  __pyx_t_1 = PyList_New(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_x_width);
  __Pyx_GIVEREF(__pyx_n_s_x_width);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_x_width);
  __Pyx_INCREF(__pyx_n_s_y_width);
  __Pyx_GIVEREF(__pyx_n_s_y_width);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_y_width);
  __Pyx_INCREF(__pyx_n_s_z_width);
  __Pyx_GIVEREF(__pyx_n_s_z_width);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_z_width);
  __Pyx_INCREF(__pyx_n_s_confine_length);
  __Pyx_GIVEREF(__pyx_n_s_confine_length);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_confine_length);
  __Pyx_INCREF(__pyx_n_s_vf_limit);
  __Pyx_GIVEREF(__pyx_n_s_vf_limit);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_vf_limit);
  __Pyx_INCREF(__pyx_n_s_chi);
  __Pyx_GIVEREF(__pyx_n_s_chi);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_s_chi);
  __Pyx_XGOTREF(__pyx_v_6chromo_6fields__float_field_descriptors);
  __Pyx_DECREF_SET(__pyx_v_6chromo_6fields__float_field_descriptors, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "chromo/fields.pyx":43
 *     'x_width', 'y_width', 'z_width', 'confine_length', 'vf_limit', 'chi'
 * ]
 * cdef list _bool_field_descriptors = ['assume_fully_accessible', 'fast_field']             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_assume_fully_accessible);
  __Pyx_GIVEREF(__pyx_n_s_assume_fully_accessible);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_assume_fully_accessible);
  __Pyx_INCREF(__pyx_n_s_fast_field);
  __Pyx_GIVEREF(__pyx_n_s_fast_field);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_fast_field);
  __Pyx_XGOTREF(__pyx_v_6chromo_6fields__bool_field_descriptors);
  __Pyx_DECREF_SET(__pyx_v_6chromo_6fields__bool_field_descriptors, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "chromo/fields.pyx":205
 * 
 * 
 * class Reconstructor:             # <<<<<<<<<<<<<<
 *     """Defer defining `Field` until after `PolymerBase`/`Binder` instances.
 * 
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_Reconstructor, __pyx_n_s_Reconstructor, (PyObject *) NULL, __pyx_n_s_chromo_fields, __pyx_kp_s_Defer_defining_Field_until_after); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "chromo/fields.pyx":221
 *     """
 * 
 *     def __init__(self, cls, **kwargs):             # <<<<<<<<<<<<<<
 *         """Construct our Reconstructor.
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6chromo_6fields_13Reconstructor_1__init__, 0, __pyx_n_s_Reconstructor___init, NULL, __pyx_n_s_chromo_fields, __pyx_d, ((PyObject *)__pyx_codeobj__2)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_init, __pyx_t_2) < 0) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":232
 *         self.kwargs = kwargs
 * 
 *     def finalize(self, polymers, binders) -> FieldBase:             # <<<<<<<<<<<<<<
 *         """Finish construction of appropriate `Field` object.
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_n_u_FieldBase) < 0) __PYX_ERR(0, 232, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6chromo_6fields_13Reconstructor_3finalize, 0, __pyx_n_s_Reconstructor_finalize, NULL, __pyx_n_s_chromo_fields, __pyx_d, ((PyObject *)__pyx_codeobj__3)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_finalize, __pyx_t_3) < 0) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "chromo/fields.pyx":252
 * 
 *     @classmethod
 *     def from_file(cls, path: Path) -> FieldBase:             # <<<<<<<<<<<<<<
 *         """Assume class name is encoded in file name.
 * 
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Path); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_path, __pyx_t_2) < 0) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_return, __pyx_n_u_FieldBase) < 0) __PYX_ERR(0, 252, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6chromo_6fields_13Reconstructor_5from_file, __Pyx_CYFUNCTION_CLASSMETHOD, __pyx_n_s_Reconstructor_from_file, NULL, __pyx_n_s_chromo_fields, __pyx_d, ((PyObject *)__pyx_codeobj__4)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "chromo/fields.pyx":251
 *         )
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_file(cls, path: Path) -> FieldBase:
 *         """Assume class name is encoded in file name.
 */
  __pyx_t_3 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_from_file_2, __pyx_t_3) < 0) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "chromo/fields.pyx":269
 *         return cls(constructor, **kwargs)
 * 
 *     def __call__(self, polymers, binders) -> FieldBase:             # <<<<<<<<<<<<<<
 *         """Synonym for `Reconstructor.finalize()`.
 * 
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_return, __pyx_n_u_FieldBase) < 0) __PYX_ERR(0, 269, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6chromo_6fields_13Reconstructor_7__call__, 0, __pyx_n_s_Reconstructor___call, NULL, __pyx_n_s_chromo_fields, __pyx_d, ((PyObject *)__pyx_codeobj__5)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_call, __pyx_t_2) < 0) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":205
 * 
 * 
 * class Reconstructor:             # <<<<<<<<<<<<<<
 *     """Defer defining `Field` until after `PolymerBase`/`Binder` instances.
 * 
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_Reconstructor, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Reconstructor, __pyx_t_2) < 0) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "chromo/fields.pyx":300
 * 
 *     @classmethod
 *     def from_file(cls, path):             # <<<<<<<<<<<<<<
 *         """Load Field description.
 *         """
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6chromo_6fields_NullField, __pyx_n_s_from_file_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "chromo/fields.pyx":299
 *             pass
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_file(cls, path):
 *         """Load Field description.
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6chromo_6fields_NullField->tp_dict, __pyx_n_s_from_file_2, __pyx_t_2) < 0) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6chromo_6fields_NullField);

  /* "chromo/fields.pyx":977
 * 
 *     @classmethod
 *     def from_file(cls, path, polymers, binders):             # <<<<<<<<<<<<<<
 *         """Recover field saved with `.to_file()`.
 * 
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6chromo_6fields_UniformDensityField, __pyx_n_s_from_file_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "chromo/fields.pyx":976
 *         return pd.Series(rows).to_csv(path, header=False)
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_file(cls, path, polymers, binders):
 *         """Recover field saved with `.to_file()`.
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6chromo_6fields_UniformDensityField->tp_dict, __pyx_n_s_from_file_2, __pyx_t_1) < 0) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6chromo_6fields_UniformDensityField);

  /* "chromo/fields.pyx":1065
 * 
 *     @staticmethod
 *     def _get_corner_bin_index(nx, ny, nz) -> np.ndarray:             # <<<<<<<<<<<<<<
 *         """Set up the index array for density bins corners.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6chromo_6fields_19UniformDensityField_15_get_corner_bin_index, NULL, __pyx_n_s_chromo_fields); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6chromo_6fields_UniformDensityField->tp_dict, __pyx_n_s_get_corner_bin_index, __pyx_t_1) < 0) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6chromo_6fields_UniformDensityField);

  /* "chromo/fields.pyx":1064
 *         )
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def _get_corner_bin_index(nx, ny, nz) -> np.ndarray:
 *         """Set up the index array for density bins corners.
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6chromo_6fields_UniformDensityField, __pyx_n_s_get_corner_bin_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6chromo_6fields_UniformDensityField->tp_dict, __pyx_n_s_get_corner_bin_index, __pyx_t_2) < 0) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6chromo_6fields_UniformDensityField);

  /* "(tree fragment)":1
 * def __pyx_unpickle_FieldBase(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6chromo_6fields_11__pyx_unpickle_FieldBase, NULL, __pyx_n_s_chromo_fields); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_FieldBase, __pyx_t_2) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_FieldBase__set_state(<FieldBase> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_FieldBase__set_state(FieldBase __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.binders = __pyx_state[0]; __pyx_result.confine_length = __pyx_state[1]; __pyx_result.confine_type = __pyx_state[2]; __pyx_result.n_polymers = __pyx_state[3]; __pyx_result.polymers = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6chromo_6fields_13__pyx_unpickle_NullField, NULL, __pyx_n_s_chromo_fields); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_NullField, __pyx_t_2) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_UniformDensityField(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6chromo_6fields_15__pyx_unpickle_UniformDensityField, NULL, __pyx_n_s_chromo_fields); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_UniformDensityFie, __pyx_t_2) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chromo/fields.pyx":1
 * # cython: profile=True             # <<<<<<<<<<<<<<
 * """Fields discretize space to efficiently calculate change in binder energy.
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":210
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(array self):
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_array_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_array_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(2, 210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_array_type);

  /* "View.MemoryView":287
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(generic);
  __Pyx_DECREF_SET(generic, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":288
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(strided);
  __Pyx_DECREF_SET(strided, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":289
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(indirect);
  __Pyx_DECREF_SET(indirect, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":292
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(contiguous);
  __Pyx_DECREF_SET(contiguous, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":293
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(indirect_contiguous);
  __Pyx_DECREF_SET(indirect_contiguous, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":317
 * 
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0             # <<<<<<<<<<<<<<
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [
 *     PyThread_allocate_lock(),
 */
  __pyx_memoryview_thread_locks_used = 0;

  /* "View.MemoryView":318
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [             # <<<<<<<<<<<<<<
 *     PyThread_allocate_lock(),
 *     PyThread_allocate_lock(),
 */
  __pyx_t_4[0] = PyThread_allocate_lock();
  __pyx_t_4[1] = PyThread_allocate_lock();
  __pyx_t_4[2] = PyThread_allocate_lock();
  __pyx_t_4[3] = PyThread_allocate_lock();
  __pyx_t_4[4] = PyThread_allocate_lock();
  __pyx_t_4[5] = PyThread_allocate_lock();
  __pyx_t_4[6] = PyThread_allocate_lock();
  __pyx_t_4[7] = PyThread_allocate_lock();
  memcpy(&(__pyx_memoryview_thread_locks[0]), __pyx_t_4, sizeof(__pyx_memoryview_thread_locks[0]) * (8));

  /* "View.MemoryView":551
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_memoryview_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(2, 551, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_memoryview_type);

  /* "View.MemoryView":997
 *         return self.from_object
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_memoryviewslice_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(2, 997, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_memoryviewslice_type);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum, NULL, __pyx_n_s_View_MemoryView); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Enum, __pyx_t_2) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_TraceReturn(Py_None, 0);

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init chromo.fields", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init chromo.fields");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* Profile */
#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   PyThreadState* tstate,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    PyObject *type, *value, *traceback;
    int retval;
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
    __Pyx_PyFrame_SetLineNumber(*frame, firstlineno);
    retval = 1;
    __Pyx_EnterTracing(tstate);
    __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    __Pyx_LeaveTracing(tstate);
    if (retval) {
        __Pyx_ErrRestoreInState(tstate, type, value, traceback);
        return __Pyx_IsTracing(tstate, 0, 0) && retval;
    } else {
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        return -1;
    }
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyCodeObject *py_code = 0;
#if PY_MAJOR_VERSION >= 3
    py_code = PyCode_NewEmpty(srcfile, funcname, firstlineno);
    if (likely(py_code)) {
        py_code->co_flags |= CO_OPTIMIZED | CO_NEWLOCALS;
    }
#else
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    py_funcname = PyString_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    py_srcfile = PyString_FromString(srcfile);
    if (unlikely(!py_srcfile)) goto bad;
    py_code = PyCode_New(
        0,
        0,
        0,
        CO_OPTIMIZED | CO_NEWLOCALS,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
#endif
    return py_code;
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* BufferIndexError */
static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

/* MemviewSliceInit */
static int
__Pyx_init_memviewslice(struct __pyx_memoryview_obj *memview,
                        int ndim,
                        __Pyx_memviewslice *memviewslice,
                        int memview_is_new_reference)
{
    __Pyx_RefNannyDeclarations
    int i, retval=-1;
    Py_buffer *buf = &memview->view;
    __Pyx_RefNannySetupContext("init_memviewslice", 0);
    if (unlikely(memviewslice->memview || memviewslice->data)) {
        PyErr_SetString(PyExc_ValueError,
            "memviewslice is already initialized!");
        goto fail;
    }
    if (buf->strides) {
        for (i = 0; i < ndim; i++) {
            memviewslice->strides[i] = buf->strides[i];
        }
    } else {
        Py_ssize_t stride = buf->itemsize;
        for (i = ndim - 1; i >= 0; i--) {
            memviewslice->strides[i] = stride;
            stride *= buf->shape[i];
        }
    }
    for (i = 0; i < ndim; i++) {
        memviewslice->shape[i]   = buf->shape[i];
        if (buf->suboffsets) {
            memviewslice->suboffsets[i] = buf->suboffsets[i];
        } else {
            memviewslice->suboffsets[i] = -1;
        }
    }
    memviewslice->memview = memview;
    memviewslice->data = (char *)buf->buf;
    if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {
        Py_INCREF(memview);
    }
    retval = 0;
    goto no_fail;
fail:
    memviewslice->memview = 0;
    memviewslice->data = 0;
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}
#ifndef Py_NO_RETURN
#define Py_NO_RETURN
#endif
static void __pyx_fatalerror(const char *fmt, ...) Py_NO_RETURN {
    va_list vargs;
    char msg[200];
#if PY_VERSION_HEX >= 0x030A0000 || defined(HAVE_STDARG_PROTOTYPES)
    va_start(vargs, fmt);
#else
    va_start(vargs);
#endif
    vsnprintf(msg, 200, fmt, vargs);
    va_end(vargs);
    Py_FatalError(msg);
}
static CYTHON_INLINE int
__pyx_add_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)++;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE int
__pyx_sub_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)--;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE void
__Pyx_INC_MEMVIEW(__Pyx_memviewslice *memslice, int have_gil, int lineno)
{
    int first_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None))
        return;
    if (unlikely(__pyx_get_slice_count(memview) < 0))
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    first_time = __pyx_add_acquisition_count(memview) == 0;
    if (unlikely(first_time)) {
        if (have_gil) {
            Py_INCREF((PyObject *) memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_INCREF((PyObject *) memview);
            PyGILState_Release(_gilstate);
        }
    }
}
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *memslice,
                                             int have_gil, int lineno) {
    int last_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None)) {
        memslice->memview = NULL;
        return;
    }
    if (unlikely(__pyx_get_slice_count(memview) <= 0))
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    last_time = __pyx_sub_acquisition_count(memview) == 1;
    memslice->data = NULL;
    if (unlikely(last_time)) {
        if (have_gil) {
            Py_CLEAR(memslice->memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_CLEAR(memslice->memview);
            PyGILState_Release(_gilstate);
        }
    } else {
        memslice->memview = NULL;
    }
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* MergeKeywords */
static int __Pyx_MergeKeywords(PyObject *kwdict, PyObject *source_mapping) {
    PyObject *iter, *key = NULL, *value = NULL;
    int source_is_dict, result;
    Py_ssize_t orig_length, ppos = 0;
    iter = __Pyx_dict_iterator(source_mapping, 0, __pyx_n_s_items, &orig_length, &source_is_dict);
    if (unlikely(!iter)) {
        PyObject *args;
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        args = PyTuple_Pack(1, source_mapping);
        if (likely(args)) {
            PyObject *fallback = PyObject_Call((PyObject*)&PyDict_Type, args, NULL);
            Py_DECREF(args);
            if (likely(fallback)) {
                iter = __Pyx_dict_iterator(fallback, 1, __pyx_n_s_items, &orig_length, &source_is_dict);
                Py_DECREF(fallback);
            }
        }
        if (unlikely(!iter)) goto bad;
    }
    while (1) {
        result = __Pyx_dict_iter_next(iter, orig_length, &ppos, &key, &value, NULL, source_is_dict);
        if (unlikely(result < 0)) goto bad;
        if (!result) break;
        if (unlikely(PyDict_Contains(kwdict, key))) {
            __Pyx_RaiseDoubleKeywordsError("function", key);
            result = -1;
        } else {
            result = PyDict_SetItem(kwdict, key, value);
        }
        Py_DECREF(key);
        Py_DECREF(value);
        if (unlikely(result < 0)) goto bad;
    }
    Py_XDECREF(iter);
    return 0;
bad:
    Py_XDECREF(iter);
    return -1;
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* Globals */
static PyObject* __Pyx_Globals(void) {
    Py_ssize_t i;
    PyObject *names;
    PyObject *globals = __pyx_d;
    Py_INCREF(globals);
    names = PyObject_Dir(__pyx_m);
    if (!names)
        goto bad;
    for (i = PyList_GET_SIZE(names)-1; i >= 0; i--) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject* name = PySequence_ITEM(names, i);
        if (!name)
            goto bad;
#else
        PyObject* name = PyList_GET_ITEM(names, i);
#endif
        if (!PyDict_Contains(globals, name)) {
            PyObject* value = __Pyx_GetAttr(__pyx_m, name);
            if (!value) {
#if CYTHON_COMPILING_IN_PYPY
                Py_DECREF(name);
#endif
                goto bad;
            }
            if (PyDict_SetItem(globals, name, value) < 0) {
#if CYTHON_COMPILING_IN_PYPY
                Py_DECREF(name);
#endif
                Py_DECREF(value);
                goto bad;
            }
        }
#if CYTHON_COMPILING_IN_PYPY
        Py_DECREF(name);
#endif
    }
    Py_DECREF(names);
    return globals;
bad:
    Py_XDECREF(names);
    Py_XDECREF(globals);
    return NULL;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* ModInt[long] */
static CYTHON_INLINE long __Pyx_mod_long(long a, long b) {
    long r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

/* DivInt[long] */
static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long x;
        long b = PyInt_AS_LONG(op2);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
#endif
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            b = likely(size) ? digits[0] : 0;
            if (size == -1) b = -b;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
        double b = PyFloat_AS_DOUBLE(op2);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSsize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(Py_ssize_t)*3+2];
    char *dpos, *end = digits + sizeof(Py_ssize_t)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    Py_ssize_t remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const Py_ssize_t neg_one = (Py_ssize_t) -1, const_zero = (Py_ssize_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (Py_ssize_t) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (Py_ssize_t) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (Py_ssize_t) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    if (last_one_off) {
        assert(*dpos == '0');
        dpos++;
    }
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_long(long value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(long)*3+2];
    char *dpos, *end = digits + sizeof(long)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    long remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (long) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (long) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (long) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    if (last_one_off) {
        assert(*dpos == '0');
        dpos++;
    }
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* pyfrozenset_new */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it) {
    if (it) {
        PyObject* result;
#if CYTHON_COMPILING_IN_PYPY
        PyObject* args;
        args = PyTuple_Pack(1, it);
        if (unlikely(!args))
            return NULL;
        result = PyObject_Call((PyObject*)&PyFrozenSet_Type, args, NULL);
        Py_DECREF(args);
        return result;
#else
        if (PyFrozenSet_CheckExact(it)) {
            Py_INCREF(it);
            return it;
        }
        result = PyFrozenSet_New(it);
        if (unlikely(!result))
            return NULL;
        if ((PY_VERSION_HEX >= 0x031000A1) || likely(PySet_GET_SIZE(result)))
            return result;
        Py_DECREF(result);
#endif
    }
#if CYTHON_USE_TYPE_SLOTS
    return PyFrozenSet_Type.tp_new(&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#else
    return PyObject_Call((PyObject*)&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#endif
}

/* PySetContains */
static int __Pyx_PySet_ContainsUnhashable(PyObject *set, PyObject *key) {
    int result = -1;
    if (PySet_Check(key) && PyErr_ExceptionMatches(PyExc_TypeError)) {
        PyObject *tmpkey;
        PyErr_Clear();
        tmpkey = __Pyx_PyFrozenSet_New(key);
        if (tmpkey != NULL) {
            result = PySet_Contains(set, tmpkey);
            Py_DECREF(tmpkey);
        }
    }
    return result;
}
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq) {
    int result = PySet_Contains(set, key);
    if (unlikely(result < 0)) {
        result = __Pyx_PySet_ContainsUnhashable(set, key);
    }
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* ModFloat[double] */
static CYTHON_INLINE double __Pyx_mod_double(double a, double b) {
    double r = fmod(a, b);
    r += ((r != 0) & ((r < 0) ^ (b < 0))) * b;
    return r;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* append */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* PyIntFromDouble */
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE PyObject* __Pyx_PyInt_FromDouble(double value) {
    if (value >= (double)LONG_MIN && value <= (double)LONG_MAX) {
        return PyInt_FromLong((long)value);
    }
    return PyLong_FromDouble(value);
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* DivInt[Py_ssize_t] */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t q = a / b;
    Py_ssize_t r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* decode_c_string */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
#if PY_MAJOR_VERSION < 3
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
#endif
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* ClassMethod */
static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYSTON || CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    #if PY_MAJOR_VERSION == 2
    static PyTypeObject *methoddescr_type = NULL;
    if (methoddescr_type == NULL) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (!meth) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    #else
    PyTypeObject *methoddescr_type = &PyMethodDescr_Type;
    #endif
    if (__Pyx_TypeCheck(method, methoddescr_type))
#endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else {
        return PyClassMethod_New(method);
    }
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_memoryview_type)) return __pyx_memoryview_getbuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


/* MemviewSliceIsContig */
static int
__pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim)
{
    int i, index, step, start;
    Py_ssize_t itemsize = mvs.memview->view.itemsize;
    if (order == 'F') {
        step = 1;
        start = 0;
    } else {
        step = -1;
        start = ndim - 1;
    }
    for (i = 0; i < ndim; i++) {
        index = start + step * i;
        if (mvs.suboffsets[index] >= 0 || mvs.strides[index] != itemsize)
            return 0;
        itemsize *= mvs.shape[index];
    }
    return 1;
}

/* OverlappingSlices */
static void
__pyx_get_array_memory_extents(__Pyx_memviewslice *slice,
                               void **out_start, void **out_end,
                               int ndim, size_t itemsize)
{
    char *start, *end;
    int i;
    start = end = slice->data;
    for (i = 0; i < ndim; i++) {
        Py_ssize_t stride = slice->strides[i];
        Py_ssize_t extent = slice->shape[i];
        if (extent == 0) {
            *out_start = *out_end = start;
            return;
        } else {
            if (stride > 0)
                end += stride * (extent - 1);
            else
                start += stride * (extent - 1);
        }
    }
    *out_start = start;
    *out_end = end + itemsize;
}
static int
__pyx_slices_overlap(__Pyx_memviewslice *slice1,
                     __Pyx_memviewslice *slice2,
                     int ndim, size_t itemsize)
{
    void *start1, *end1, *start2, *end2;
    __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);
    __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);
    return (start1 < end2) && (start2 < end1);
}

/* Capsule */
static CYTHON_INLINE PyObject *
__pyx_capsule_create(void *p, CYTHON_UNUSED const char *sig)
{
    PyObject *cobj;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(p, sig, NULL);
#else
    cobj = PyCObject_FromVoidPtr(p, NULL);
#endif
    return cobj;
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* MemviewDtypeToObject */
static CYTHON_INLINE PyObject *__pyx_memview_get_long(const char *itemp) {
    return (PyObject *) __Pyx_PyInt_From_long(*(long *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_long(const char *itemp, PyObject *obj) {
    long value = __Pyx_PyInt_As_long(obj);
    if ((value == (long)-1) && PyErr_Occurred())
        return 0;
    *(long *) itemp = value;
    return 1;
}

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case '?': return "'bool'";
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case '?': case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number, ndim;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    ndim = ctx->head->field->type->ndim;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case '?': case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if ((ctx->enc_type == *ts) && (got_Z == ctx->is_complex) &&
            (ctx->enc_packmode == ctx->new_packmode) && (!ctx->is_valid_array)) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* TypeInfoCompare */
  static int
__pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b)
{
    int i;
    if (!a || !b)
        return 0;
    if (a == b)
        return 1;
    if (a->size != b->size || a->typegroup != b->typegroup ||
            a->is_unsigned != b->is_unsigned || a->ndim != b->ndim) {
        if (a->typegroup == 'H' || b->typegroup == 'H') {
            return a->size == b->size;
        } else {
            return 0;
        }
    }
    if (a->ndim) {
        for (i = 0; i < a->ndim; i++)
            if (a->arraysize[i] != b->arraysize[i])
                return 0;
    }
    if (a->typegroup == 'S') {
        if (a->flags != b->flags)
            return 0;
        if (a->fields || b->fields) {
            if (!(a->fields && b->fields))
                return 0;
            for (i = 0; a->fields[i].type && b->fields[i].type; i++) {
                __Pyx_StructField *field_a = a->fields + i;
                __Pyx_StructField *field_b = b->fields + i;
                if (field_a->offset != field_b->offset ||
                    !__pyx_typeinfo_cmp(field_a->type, field_b->type))
                    return 0;
            }
            return !a->fields[i].type && !b->fields[i].type;
        }
    }
    return 1;
}

/* MemviewSliceValidateAndInit */
  static int
__pyx_check_strides(Py_buffer *buf, int dim, int ndim, int spec)
{
    if (buf->shape[dim] <= 1)
        return 1;
    if (buf->strides) {
        if (spec & __Pyx_MEMVIEW_CONTIG) {
            if (spec & (__Pyx_MEMVIEW_PTR|__Pyx_MEMVIEW_FULL)) {
                if (unlikely(buf->strides[dim] != sizeof(void *))) {
                    PyErr_Format(PyExc_ValueError,
                                 "Buffer is not indirectly contiguous "
                                 "in dimension %d.", dim);
                    goto fail;
                }
            } else if (unlikely(buf->strides[dim] != buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
        if (spec & __Pyx_MEMVIEW_FOLLOW) {
            Py_ssize_t stride = buf->strides[dim];
            if (stride < 0)
                stride = -stride;
            if (unlikely(stride < buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
    } else {
        if (unlikely(spec & __Pyx_MEMVIEW_CONTIG && dim != ndim - 1)) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not contiguous in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(spec & (__Pyx_MEMVIEW_PTR))) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not indirect in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(buf->suboffsets)) {
            PyErr_SetString(PyExc_ValueError,
                            "Buffer exposes suboffsets but no strides");
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_check_suboffsets(Py_buffer *buf, int dim, CYTHON_UNUSED int ndim, int spec)
{
    if (spec & __Pyx_MEMVIEW_DIRECT) {
        if (unlikely(buf->suboffsets && buf->suboffsets[dim] >= 0)) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer not compatible with direct access "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    if (spec & __Pyx_MEMVIEW_PTR) {
        if (unlikely(!buf->suboffsets || (buf->suboffsets[dim] < 0))) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer is not indirectly accessible "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_verify_contig(Py_buffer *buf, int ndim, int c_or_f_flag)
{
    int i;
    if (c_or_f_flag & __Pyx_IS_F_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = 0; i < ndim; i++) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not fortran contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    } else if (c_or_f_flag & __Pyx_IS_C_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = ndim - 1; i >- 1; i--) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not C contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    }
    return 1;
fail:
    return 0;
}
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj)
{
    struct __pyx_memoryview_obj *memview, *new_memview;
    __Pyx_RefNannyDeclarations
    Py_buffer *buf;
    int i, spec = 0, retval = -1;
    __Pyx_BufFmt_Context ctx;
    int from_memoryview = __pyx_memoryview_check(original_obj);
    __Pyx_RefNannySetupContext("ValidateAndInit_memviewslice", 0);
    if (from_memoryview && __pyx_typeinfo_cmp(dtype, ((struct __pyx_memoryview_obj *)
                                                            original_obj)->typeinfo)) {
        memview = (struct __pyx_memoryview_obj *) original_obj;
        new_memview = NULL;
    } else {
        memview = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                            original_obj, buf_flags, 0, dtype);
        new_memview = memview;
        if (unlikely(!memview))
            goto fail;
    }
    buf = &memview->view;
    if (unlikely(buf->ndim != ndim)) {
        PyErr_Format(PyExc_ValueError,
                "Buffer has wrong number of dimensions (expected %d, got %d)",
                ndim, buf->ndim);
        goto fail;
    }
    if (new_memview) {
        __Pyx_BufFmt_Init(&ctx, stack, dtype);
        if (unlikely(!__Pyx_BufFmt_CheckString(&ctx, buf->format))) goto fail;
    }
    if (unlikely((unsigned) buf->itemsize != dtype->size)) {
        PyErr_Format(PyExc_ValueError,
                     "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "u byte%s) "
                     "does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "u byte%s)",
                     buf->itemsize,
                     (buf->itemsize > 1) ? "s" : "",
                     dtype->name,
                     dtype->size,
                     (dtype->size > 1) ? "s" : "");
        goto fail;
    }
    if (buf->len > 0) {
        for (i = 0; i < ndim; i++) {
            spec = axes_specs[i];
            if (unlikely(!__pyx_check_strides(buf, i, ndim, spec)))
                goto fail;
            if (unlikely(!__pyx_check_suboffsets(buf, i, ndim, spec)))
                goto fail;
        }
        if (unlikely(buf->strides && !__pyx_verify_contig(buf, ndim, c_or_f_flag)))
            goto fail;
    }
    if (unlikely(__Pyx_init_memviewslice(memview, ndim, memviewslice,
                                         new_memview != NULL) == -1)) {
        goto fail;
    }
    retval = 0;
    goto no_fail;
fail:
    Py_XDECREF(new_memview);
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_long(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_long, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_d_dc_long(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_FOLLOW), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_CONTIG) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, __Pyx_IS_C_CONTIG,
                                                 (PyBUF_C_CONTIGUOUS | PyBUF_FORMAT) | writable_flag, 2,
                                                 &__Pyx_TypeInfo_long, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* MemviewDtypeToObject */
  static CYTHON_INLINE PyObject *__pyx_memview_get_double(const char *itemp) {
    return (PyObject *) PyFloat_FromDouble(*(double *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_double(const char *itemp, PyObject *obj) {
    double value = __pyx_PyFloat_AsDouble(obj);
    if ((value == (double)-1) && PyErr_Occurred())
        return 0;
    *(double *) itemp = value;
    return 1;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_d_dc_double(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_FOLLOW), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_CONTIG) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, __Pyx_IS_C_CONTIG,
                                                 (PyBUF_C_CONTIGUOUS | PyBUF_FORMAT) | writable_flag, 2,
                                                 &__Pyx_TypeInfo_double, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_double(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_double, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_d_d_dc_long(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_FOLLOW), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_FOLLOW), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_CONTIG) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, __Pyx_IS_C_CONTIG,
                                                 (PyBUF_C_CONTIGUOUS | PyBUF_FORMAT) | writable_flag, 3,
                                                 &__Pyx_TypeInfo_long, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* IntPow */
  static CYTHON_INLINE long __Pyx_pow_long(long b, long e) {
    long t = b;
    switch (e) {
        case 3:
            t *= b;
        CYTHON_FALLTHROUGH;
        case 2:
            t *= b;
        CYTHON_FALLTHROUGH;
        case 1:
            return t;
        case 0:
            return 1;
    }
    #if 1
    if (unlikely(e<0)) return 0;
    #endif
    t = 1;
    while (likely(e)) {
        t *= (b * (e&1)) | ((~e)&1);
        b *= b;
        e >>= 1;
    }
    return t;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_d_d_dc_double(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_FOLLOW), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_FOLLOW), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_CONTIG) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, __Pyx_IS_C_CONTIG,
                                                 (PyBUF_C_CONTIGUOUS | PyBUF_FORMAT) | writable_flag, 3,
                                                 &__Pyx_TypeInfo_double, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* MemviewSliceCopyTemplate */
  static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object)
{
    __Pyx_RefNannyDeclarations
    int i;
    __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };
    struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
    Py_buffer *buf = &from_memview->view;
    PyObject *shape_tuple = NULL;
    PyObject *temp_int = NULL;
    struct __pyx_array_obj *array_obj = NULL;
    struct __pyx_memoryview_obj *memview_obj = NULL;
    __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
    for (i = 0; i < ndim; i++) {
        if (unlikely(from_mvs->suboffsets[i] >= 0)) {
            PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
                                           "indirect dimensions (axis %d)", i);
            goto fail;
        }
    }
    shape_tuple = PyTuple_New(ndim);
    if (unlikely(!shape_tuple)) {
        goto fail;
    }
    __Pyx_GOTREF(shape_tuple);
    for(i = 0; i < ndim; i++) {
        temp_int = PyInt_FromSsize_t(from_mvs->shape[i]);
        if(unlikely(!temp_int)) {
            goto fail;
        } else {
            PyTuple_SET_ITEM(shape_tuple, i, temp_int);
            temp_int = NULL;
        }
    }
    array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, (char *) mode, NULL);
    if (unlikely(!array_obj)) {
        goto fail;
    }
    __Pyx_GOTREF(array_obj);
    memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                    (PyObject *) array_obj, contig_flag,
                                    dtype_is_object,
                                    from_mvs->memview->typeinfo);
    if (unlikely(!memview_obj))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))
        goto fail;
    if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
                                                dtype_is_object) < 0))
        goto fail;
    goto no_fail;
fail:
    __Pyx_XDECREF(new_mvs.memview);
    new_mvs.memview = NULL;
    new_mvs.data = NULL;
no_fail:
    __Pyx_XDECREF(shape_tuple);
    __Pyx_XDECREF(temp_int);
    __Pyx_XDECREF(array_obj);
    __Pyx_RefNannyFinishContext();
    return new_mvs;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const char neg_one = (char) -1, const_zero = (char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
  static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* VoidPtrImport */
  #ifndef __PYX_HAVE_RT_ImportVoidPtr
#define __PYX_HAVE_RT_ImportVoidPtr
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, name);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C variable %.200s",
                PyModule_GetName(module), name);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    *p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, desc);
        goto bad;
    }
    *p = PyCObject_AsVoidPtr(cobj);}
#endif
    if (!(*p))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* FunctionImport */
  #ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
